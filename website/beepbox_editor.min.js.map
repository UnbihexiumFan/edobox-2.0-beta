{"version":3,"names":["Config","centerWave","wave","sum","i","length","average","performIntegral","push","Float32Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","cumulative","newWave","getPulseWidthRatio","pulseWidth","pulseWidthRange","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","PI","cos","sin","generateSquareWave","phaseWidth","sineWaveLength","centerPoint","generateSawWave","inverse","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","effectsIncludeNoteFilter","effectsIncludeDistortion","effectsIncludeBitcrusher","effectsIncludePanning","effectsIncludeChorus","effectsIncludeEcho","effectsIncludeReverb","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","tempoMin","tempoMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","defaultEdo","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","supersawBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","rawChipWaves","expression","chipWaves","raw","newArray","Array","Object","assign","key","rawChipToIntegrated","basePitch","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","filterMorphCount","filterSimpleCutRange","filterSimplePeakRange","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","type","delayTicks","vibratoTypes","periodsSeconds","period","arpSpeedScale","unisons","voices","spread","offset","sign","effectNames","effectOrder","noteSizeMax","volumeRange","volumeLogScale","panCenter","panMax","panDelaySecondsMax","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","max","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","maxPitchOrOperatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthStepPower","supersawVoiceCount","supersawDynamismMax","supersawSpreadMax","supersawShapeMax","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","drumCount","pitchOctaves","modCount","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","detuneMin","songDetuneMin","songDetuneMax","sineWaveMask","sineWave","generateSineWave","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","enableAcousticSustain","sustainTypeNames","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","compatibleInstruments","operatorWaves","asin","generateTriWave","drive","generateTrapezoidWave","pwmOperatorWaves","barEditorHeight","modulators","pianoName","maxRawVol","newNoteVol","forSong","convertRealFactor","associatedEffect","promptName","promptDesc","ceil","round","isMobile","test","navigator","userAgent","prettyNumber","toFixed","replace","EditorConfig","valueToPreset","presetValue","categoryIndex","presetIndex","presetCategories","presets","midiProgramToPresetValue","program","category","preset","generalMidi","midiProgram","nameToPresetValue","presetName","version","versionDisplayName","releaseNotesURL","isOnMac","platform","ctrlSymbol","ctrlName","customType","settings","eqFilter","transition","fadeInSeconds","chord","unison","cutoffHz","linearGain","vibrato","isNoise","filterCutoffHz","filterResonance","filterEnvelope","algorithm","feedbackType","feedbackAmplitude","operators","frequency","target","envelope","customChipWave","reverb","dynamism","shape","noteFilter","harmonics","stringSustain","stringSustainType","feedbackEnvelope","midiSubharmonicOctaves","interval","bitcrusherOctave","bitcrusherQuantization","distortion","eqFilterType","eqSimpleCut","eqSimplePeak","envelopeSpeed","discreteEnvelope","eqSubFilters0","noteFilterType","noteSimpleCut","noteSimplePeak","noteSubFilters0","chorus","spectrum","pulseEnvelope","drums","pitchShiftSemitones","applyElementArgs","element","args","args_1","__values","args_1_1","next","done","arg","Node","appendChild","document","createTextNode","isArray","Symbol","iterator","__spread","constructor","Element","_d","e_2","keys","_e","setAttribute","join","console","warn","tagName","_f","e_3","_g","styleKey","style","setProperty","removeAttribute","svgNS","HTML","_i","arguments","createRange","createContextualFragment","SVG","fragment","createDocumentFragment","svgParser","DOMParser","parseFromString","documentElement","firstChild","importNode","name_1","createElement","_c","split","name_2","createElementNS","snakeCaseName","ColorConfig","resetColors","this","colorLookup","clear","getComputedChannelColor","song","channel","usesColorFormula","getChannelColor","base","regex","secondaryChannel","getComputed","exec","primaryChannel","secondaryNote","primaryNote","has","get","pitchChannelCount","newChannelColors","c_pitchSecondaryChannelHue","c_pitchSecondaryChannelHueScale","c_pitchSecondaryChannelSat","c_pitchSecondaryChannelSatScale","floor","c_pitchSecondaryChannelLum","c_pitchSecondaryChannelLumScale","c_pitchPrimaryChannelHue","c_pitchPrimaryChannelHueScale","c_pitchPrimaryChannelSat","c_pitchPrimaryChannelSatScale","c_pitchPrimaryChannelLum","c_pitchPrimaryChannelLumScale","c_pitchSecondaryNoteHue","c_pitchSecondaryNoteHueScale","c_pitchSecondaryNoteSat","c_pitchSecondaryNoteSatScale","c_pitchSecondaryNoteLum","c_pitchSecondaryNoteLumScale","c_pitchPrimaryNoteHue","c_pitchPrimaryNoteHueScale","c_pitchPrimaryNoteSat","c_pitchPrimaryNoteSatScale","c_pitchPrimaryNoteLum","c_pitchPrimaryNoteLumScale","set","noiseChannelCount","c_noiseSecondaryChannelHue","c_noiseSecondaryChannelHueScale","c_noiseSecondaryChannelSat","c_noiseSecondaryChannelSatScale","c_noiseSecondaryChannelLum","c_noiseSecondaryChannelLumScale","c_noisePrimaryChannelHue","c_noisePrimaryChannelHueScale","c_noisePrimaryChannelSat","c_noisePrimaryChannelSatScale","c_noisePrimaryChannelLum","c_noisePrimaryChannelLumScale","c_noiseSecondaryNoteHue","c_noiseSecondaryNoteHueScale","c_noiseSecondaryNoteSat","c_noiseSecondaryNoteSatScale","c_noiseSecondaryNoteLum","c_noiseSecondaryNoteLumScale","c_noisePrimaryNoteHue","c_noisePrimaryNoteHueScale","c_noisePrimaryNoteSat","c_noisePrimaryNoteSatScale","c_noisePrimaryNoteLum","c_noisePrimaryNoteLumScale","c_modSecondaryChannelHue","c_modSecondaryChannelHueScale","c_modSecondaryChannelSat","c_modSecondaryChannelSatScale","c_modSecondaryChannelLum","c_modSecondaryChannelLumScale","c_modPrimaryChannelHue","c_modPrimaryChannelHueScale","c_modPrimaryChannelSat","c_modPrimaryChannelSatScale","c_modPrimaryChannelLum","c_modPrimaryChannelLumScale","c_modSecondaryNoteHue","c_modSecondaryNoteHueScale","c_modSecondaryNoteSat","c_modSecondaryNoteSatScale","c_modSecondaryNoteLum","c_modSecondaryNoteLumScale","c_modPrimaryNoteHue","c_modPrimaryNoteHueScale","c_modPrimaryNoteSat","c_modPrimaryNoteSatScale","c_modPrimaryNoteLum","c_modPrimaryNoteLumScale","pitchChannels","noiseChannels","modChannels","setTheme","theme","themes","undefined","_styleElement","textContent","themeColor","querySelector","getComputedStyle","getPropertyValue","trim","c_invertedText","c_trackEditorBgNoiseDim","c_trackEditorBgNoise","c_trackEditorBgModDim","c_trackEditorBgMod","c_trackEditorBgPitchDim","c_trackEditorBgPitch","Map","forest","canyon","midnight","beachcombing","roe","moonlight","autumn","fruit","sunset","toxic","portal","fusion","nebula","energized","neapolitan","poly","blutonium","pageMargin","editorBackground","hoverPreview","playhead","primaryText","secondaryText","invertedText","textSelection","boxSelectionFill","loopAccent","linkAccent","uiWidgetBackground","uiWidgetFocus","pitchBackground","tonic","fifthNote","whitePianoKey","blackPianoKey","useColorFormula","pitchSecondaryChannelHue","pitchSecondaryChannelHueScale","pitchSecondaryChannelSat","pitchSecondaryChannelSatScale","pitchSecondaryChannelLum","pitchSecondaryChannelLumScale","pitchPrimaryChannelHue","pitchPrimaryChannelHueScale","pitchPrimaryChannelSat","pitchPrimaryChannelSatScale","pitchPrimaryChannelLum","pitchPrimaryChannelLumScale","pitchSecondaryNoteHue","pitchSecondaryNoteHueScale","pitchSecondaryNoteSat","pitchSecondaryNoteSatScale","pitchSecondaryNoteLum","pitchSecondaryNoteLumScale","pitchPrimaryNoteHue","pitchPrimaryNoteHueScale","pitchPrimaryNoteSat","pitchPrimaryNoteSatScale","pitchPrimaryNoteLum","pitchPrimaryNoteLumScale","modSecondaryChannelHue","modSecondaryChannelHueScale","modSecondaryChannelSat","modSecondaryChannelSatScale","modSecondaryChannelLum","modSecondaryChannelLumScale","modPrimaryChannelHue","modPrimaryChannelHueScale","modPrimaryChannelSat","modPrimaryChannelSatScale","modPrimaryChannelLum","modPrimaryChannelLumScale","modSecondaryNoteHue","modSecondaryNoteHueScale","modSecondaryNoteSat","modSecondaryNoteSatScale","modSecondaryNoteLum","modSecondaryNoteLumScale","modPrimaryNoteHue","modPrimaryNoteHueScale","modPrimaryNoteSat","modPrimaryNoteSatScale","modPrimaryNoteLum","modPrimaryNoteLumScale","noiseSecondaryChannelHue","noiseSecondaryChannelHueScale","noiseSecondaryChannelSat","noiseSecondaryChannelSatScale","noiseSecondaryChannelLum","noiseSecondaryChannelLumScale","noisePrimaryChannelHue","noisePrimaryChannelHueScale","noisePrimaryChannelSat","noisePrimaryChannelSatScale","noisePrimaryChannelLum","noisePrimaryChannelLumScale","noiseSecondaryNoteHue","noiseSecondaryNoteHueScale","noiseSecondaryNoteSat","noiseSecondaryNoteSatScale","noiseSecondaryNoteLum","noiseSecondaryNoteLumScale","noisePrimaryNoteHue","noisePrimaryNoteHueScale","noisePrimaryNoteSat","noisePrimaryNoteSatScale","noisePrimaryNoteLum","noisePrimaryNoteLumScale","trackEditorBgPitch","trackEditorBgPitchDim","trackEditorBgNoise","trackEditorBgNoiseDim","trackEditorBgMod","trackEditorBgModDim","multiplicativeModSlider","overwritingModSlider","indicatorPrimary","indicatorSecondary","select2OptGroup","inputBoxOutline","muteButtonNormal","muteButtonMod","modLabelPrimary","modLabelSecondaryText","modLabelPrimaryText","disabledNotePrimary","disabledNoteSecondary","head","scrollBarTest","body","div","clientWidth","classList","add","removeChild","BarScrollBar","_doc","_editorWidth","_editorHeight","_playhead","rect","fill","width","height","_notches","svg","_handle","_handleHighlight","stroke","_leftHighlight","path","_rightHighlight","_renderedPlayhead","_svg","container","class","_mouseX","_mouseDown","_mouseOver","_dragging","_renderedNotchCount","_renderedScrollBarPos","animatePlayhead","_notchSpace","synth","_whenMouseOver","event","_updatePreview","_whenMouseOut","_whenMousePressed","preventDefault","boundingRect","getBoundingClientRect","clientX","pageX","left","barScrollPos","trackVisibleBars","_dragStart","_whenTouchPressed","touches","_whenMouseMoved","_whenCursorMoved","_whenTouchMoved","_whenCursorReleased","notifier","changed","barCount","center","addEventListener","changePos","showleftHighlight","showRightHighlight","showHandleHighlight","visibility","render","resized","lineHeight","String","factor","countBits","n","isPowerOf2","log","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","Deque","_capacity","_buffer","_mask","_offset","_count","pushFront","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","remove","oldBuffer","size","FilterCoefficients","a","b","order","linearGain0thOrder","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","feedback","highPass2ndOrderButterworth","highShelf2ndOrder","slope","A","Aplus","Aminus","sqrtA2Alpha","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","b0","b1","b2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","warpInfinityToNyquist","atan","gcd","createKeys","edo","bestFifth","fifthRatio","whiteKeyNames_5edo","keyNames_diatonicFifthward","keyNames_diatonicFourthward","keyNames_mavillaFifthward","keyNames_mavillaFourthward","keyNames_oneiroSixthward","keyNames_oneiroFourthward","fifthOctave","repeat","baseEdo","keysFinished","keyArray","isWhiteKey","epsilon","clamp","val","validateRange","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","read","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","other","encodeBase64","buffer","lengthBase64","makeNotePin","time","Note","pitch","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","instruments","cloneNotes","note","reset","toJsonObject","isModChannel","noteArray","instrument","mod","volumeCap","getVolumeCapForSetting","modFilterTypes","pointArray","useVol","tick","rhythm","pitchBend","volume","forMod","noteObject","points","patternObject","patternInstruments","fromJsonObject","importedPartsPerBeat","isNoiseChannel","instrumentCount","getMaxInstrumentsPerPatternForChannel","maxNoteCount","beatsPerBar","k","indexOf","startInterval","pointObject","maxPitch","lowestPitch","highestPitch","splice","Operator","waveform","copy","SpectrumWave","hash","isHarmonic","markCustomWaveDirty","hashMult","Synth","fittingPowerOfTwo","point","SpectrumWaveState","_hash","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","value1","value2","octave1","octave2","HarmonicsWave","HarmonicsWaveState","instrumentType","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","performIntegralOld","FilterControlPoint","freq","gain","freqSetting","gainSetting","getHz","getHzFromSettingValue","getSettingValueFromHz","hz","getRoundedSettingValueFromHz","getLinearGain","peakMult","power","neutral","interpolatedPower","getRoundedSettingValueFromLinearGain","toCoefficients","sampleRate","freqMult","getVolumeCompensationMult","octave","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","FilterSettings","controlPoints","controlPointCount","addPoint","controlPoint","filterArray","filterObject","filtersCanMorph","filterA","filterB","lerpFilters","pos","lerpedFilter","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","finalRadians","legacyFilter","response","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","convertLegacySettingsForSynth","allowFirstOrder","EnvelopeSettings","envelopeObject","Instrument","chipWave","chipNoise","eqFilterSimpleCut","eqFilterSimplePeak","noteFilterSimpleCut","noteFilterSimplePeak","eqSubFilters","noteSubFilters","fadeIn","fadeOut","envelopeCount","pitchShift","detune","vibratoDepth","vibratoSpeed","vibratoDelay","vibratoType","pan","panDelay","arpeggioSpeed","fastTwoNoteArp","legacyTieOver","clicklessTransition","aliases","supersawDynamism","supersawSpread","supersawShape","bitcrusherFreq","echoSustain","echoDelay","customChipWaveIntegral","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modInstruments","invalidModulators","spectrumWave","wavePrev","setTypeAndReset","legacySettings","forceSimpleFilter","filterCutoff","legacyFilterEnv","legacyPulseEnv","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","detuneToCents","fadeInSettingToSeconds","fadeOutSettingToTicks","getDrumsetEnvelope","operatorArray","operator","Float64Array","useSlowerRhythm","legacyGlobalReverb","legacyEffectsNames","transitionProperty","binary","seamless","sudden","hard","smooth","soft","slide","secondsToFadeInSetting","ticksToFadeOutSetting","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","centsToDetune","vibratoProperty","legacyVibratoNames","isNaN","findIndex","legacyEnvelopeNames","custom","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","operatorObject","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","getLargestControlPointCount","forNoteFilter","largest","frequencyFromPitch","makeEmpty","supportsEnvelopeTarget","envelopeSettings","automationTarget","useControlPointCount","clearInvalidEnvelopeTargets","envelopeIndex","getTransition","getFadeInSeconds","getFadeOutTicks","Channel","patterns","bars","muted","Song","string","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","getNewNoteVolume","isMod","modChannel","modInstrument","vol","tempoIndex","tempo","getVolumeCap","modulator","cap","modSetting","filterType","fromBase64String","initToDefault","getChannelCount","modChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","getMaxInstrumentsPerPattern","channelIndex","getChannelIsNoise","getChannelIsMod","andResetChannels","scale","loopStart","loopLength","patternsPerChannel","title","pattern","bar","toBase64String","bits","_variant","_latestEdoBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","usingSubFilterBitfield","harmonicsBits","o","spectrumBits","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","neededModInstrumentIndexBits","instrumentIndex","modFilter","status","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","fromCharCode","apply","shapeIndex","unshift","pop","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","slice","_envelopeFromLegacyIndex","legacyIndex","compressed","charIndex","JSON","parse","substring","fromBeepBox","fromJummBox","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestEdoBoxVersion","beforeFive","command","instrumentChannelIterator","instrumentIndexIterator","useSlowerArpSpeed","songNameLength","decodeURIComponent","channelCount","instrumentsFlagBits","typeCheck","originalControlPointCount","originalSubfilterControlPointCount","sustainValue","nextValue","restoreLimiterDefaults","channelNameLength","byteCount","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","detuneScaleNotes","newPattern","newNotes","noteCount","useOldShape","pinCount","initialSize","bendCount","pinObj","intervalIter","shift","isBackwards","restLength","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","sequenceArray","l","channelObject","sequence","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","enigma","scaleName","letter","charAt","toUpperCase","symbol","toLowerCase","C","D","E","F","G","B","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","newModChannels","instrumentObjects","getPattern","patternIndex","getBeatsPerMinute","maxValue","clz32","PickedString","delayLine","allPassG","allPassGDelta","sustainFilterA1","sustainFilterA1Delta","sustainFilterA2","sustainFilterA2Delta","sustainFilterB0","sustainFilterB0Delta","sustainFilterB1","sustainFilterB1Delta","sustainFilterB2","sustainFilterB2Delta","delayIndex","allPassSample","allPassPrevInput","sustainFilterSample","sustainFilterPrevOutput2","sustainFilterPrevInput1","sustainFilterPrevInput2","fractionalDelaySample","prevDelayLength","delayResetOffset","update","instrumentState","tone","stringIndex","roundedSamplesPerTick","stringDecayStart","stringDecayEnd","sustainType","allPassCenter","samplesPerSecond","phaseDeltaStart","phaseDeltas","phaseDeltaScale","phaseDeltaScales","phaseDeltaEnd","radiansPerSampleStart","radiansPerSampleEnd","centerHarmonicStart","centerHarmonicEnd","allPassRadiansStart","allPassRadiansEnd","shelfRadians","decayCurveStart","decayCurveEnd","register","registerShelfCenter","registerLowpassCenter","decayRateStart","decayRateEnd","expressionDecayStart","expressionDecayEnd","tempFilterStartCoefficients","tempFrequencyResponse","allPassGStart","allPassPhaseDelayStart","tempFilterEndCoefficients","allPassGEnd","allPassPhaseDelayEnd","brightnessType","shelfGainStart","shelfGainEnd","cornerHardness","lowpass1stOrderCutoffRadiansStart","lowpass1stOrderCutoffRadiansEnd","lowpass2ndOrderCutoffRadiansStart","lowpass2ndOrderCutoffRadiansEnd","lowpass2ndOrderGainStart","lowpass2ndOrderGainEnd","sustainFilterA1Start","sustainFilterA2Start","sustainFilterB0Start","sustainFilterB1Start","sustainFilterB2Start","sustainFilterPhaseDelayStart","sustainFilterA1End","sustainFilterA2End","sustainFilterB0End","sustainFilterB1End","sustainFilterB2End","sustainFilterPhaseDelayEnd","periodLengthStart","periodLengthEnd","minBufferLength","delayLength","delayLengthEnd","delayLengthDelta","pitchChanged","reinitializeImpulse","likelyMaximumLength","newDelayLine","oldDelayBufferMask","startCopyingFromIndex","delayBufferMask","startImpulseFrom","startZerosFrom","stopZerosAt","impulseWave","impulseWaveLength","impulsePhaseDelta","fadeDuration","startImpulseFromSample","stopImpulseAt","stopImpulseAtSample","impulsePhase","prevWaveIntegral","impulsePhaseInt","nextWaveIntegral","phaseRatio","sample","combinedFade","curvedFade","EnvelopeComputer","noteSecondsStart","noteSecondsStartUnscaled","noteSecondsEnd","noteSecondsEndUnscaled","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsStartUnscaled","prevNoteSecondsEnd","prevNoteSecondsEndUnscaled","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","envelopeStarts","envelopeEnds","_modifiedEnvelopeIndices","_modifiedEnvelopeCount","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","tickTimeStartReal","secondsPerTick","timeScale","secondsPerTickUnscaled","atNoteStart","forceContinueAtStart","tickTimeEnd","tickTimeEndReal","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","tmpNoteFilterStart","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","beats","noteSize","noteSizeToVolumeMult","attack","Tone","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","lastInterval","noiseSample","stringSustainStart","stringSustainEnd","phases","expressionDelta","operatorExpressions","operatorExpressionDeltas","prevPitchExpressions","prevVibrato","prevStringDecay","pulseWidthDelta","supersawDynamismDelta","supersawUnisonDetunes","supersawShapeDelta","supersawDelayLength","supersawDelayLengthDelta","supersawDelayLine","supersawDelayIndex","supersawPrevPhaseDelta","pickedStrings","noteFilters","noteFilterCount","initialNoteFilterInput1","initialNoteFilterInput2","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","envelopeComputer","pickedString","InstrumentState","awake","computed","tonesAddedInThisTick","flushingDelayLines","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","activeModTones","releasedTones","liveInputTones","synthesizer","noisePitchFilterMult","volumeScale","arpTime","vibratoTime","nextVibratoTime","envelopeTime","eqFilterVolume","eqFilterVolumeDelta","mixVolume","mixVolumeDelta","delayInputMult","delayInputMultDelta","distortionDelta","distortionDrive","distortionDriveDelta","distortionFractionalInput1","distortionFractionalInput2","distortionFractionalInput3","distortionPrevInput","distortionNextOutput","bitcrusherPrevInput","bitcrusherCurrentOutput","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFilters","eqFilterCount","initialEqFilterInput1","initialEqFilterInput2","panningDelayLine","panningDelayPos","panningVolumeL","panningVolumeR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetL","panningOffsetR","panningOffsetDeltaL","panningOffsetDeltaR","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusVoiceMult","chorusVoiceMultDelta","chorusCombinedMult","chorusCombinedMultDelta","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPos","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoMult","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMult","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","allocateNecessaryBuffers","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","safeEchoDelaySteps","safeEchoDelayBufferSize","newDelayLineL","newDelayLineR","oldMask","deactivate","resetAllEffects","compute","getInstrumentSynthFunction","updateWaves","usesDistortion","usesBitcrusher","usesPanning","usesChorus","usesEcho","usesReverb","useDistortionStart","useDistortionEnd","isModActive","getModValue","distortionSliderStart","distortionSliderEnd","distortionStart","distortionEnd","distortionDriveStart","distortionDriveEnd","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterSettingsStart","eqFilterSettingsEnd","startPoint","startSimpleFreq","startSimpleGain","endSimpleFreq","endSimpleGain","filterChanges","endPoint","eqFilterSettings","tmpEqFilterStart","tmpEqFilterEnd","mainInstrumentVolume","instrumentVolumeToVolumeMult","mixVolumeEnd","startVal","endVal","eqFilterVolumeStart","eqFilterVolumeEnd","delayInputMultStart","delayInputMultEnd","usePanStart","usePanEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","usePanDelayStart","usePanDelayEnd","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","useChorusStart","useChorusEnd","chorusStart","chorusEnd","chorusCombinedMultStart","chorusCombinedMultEnd","maxEchoMult","averageEchoDelaySeconds","useEchoSustainStart","useEchoSustainEnd","echoMultStart","echoMultEnd","useEchoDelayStart","useEchoDelayEnd","ignoreTicks","tmpEchoDelayOffsetStart","tmpEchoDelayOffsetEnd","maxReverbMult","useReverbStart","useReverbEnd","reverbStart","reverbEnd","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","attenuationPerSecond","averageMult","averageReverbDelaySeconds","progressInTick","progressAtEndOfTick","_drumsetIndexToSpectrumOctave","getDrumsetWave","drumsetIndexReferenceDelta","ChannelState","singleSeamlessInstrument","syncSongState","channelState","initModFilters","tmpNoteFilterEnd","warmUpSynthesizer","getSamplesPerTick","dummyArray","isPlayingSong","synthesize","computeLatestModValues","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","heldMods","beat","currentBar","instrumentIdx","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","setModValue","usedInstruments","tgtPattern","eqFilterParam","noteFilterParam","modulatorAdjust","tgtInstrument","determineInvalidModulators","tgtInstrumentList","str","operatorAmplitudeCurve","playing","recording","isRecording","playheadInternal","remainder","tickSampleCountdown","isAtStartOfTick","prevBar","getSamplesPerBar","getTicksIntoBar","getCurrentPart","getTotalSamples","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","ended","totalSamples","foundMod","find","sort","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getTotalBars","useLoopCount","loopRepeatCount","preferLowerLatency","anticipatePoorPerformance","liveInputDuration","liveBassInputDuration","liveInputStarted","liveBassInputStarted","liveInputPitches","liveBassInputPitches","liveInputChannel","liveBassInputChannel","liveInputInstruments","liveBassInputInstruments","enableMetronome","countInMetronome","renderingSong","wantToSkip","nextBar","isAtEndOfTick","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","loopBarStart","loopBarEnd","tonePool","tempMatchedPitchTones","startedMetronome","metronomeSamplesRemaining","metronomeAmplitude","metronomePrevAmplitude","metronomeFilter","limit","tempMonoInstrumentSampleBuffer","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","deactivateAudio","computeDelayBufferSizes","setSong","panningDelayBufferMask","chorusDelayBufferMask","activateAudio","bufferSize","latencyHint","window","AudioContext","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","maintainLiveInput","play","pause","startRecording","resetEffects","freeAllTones","volumeStart","volumeEnd","setting","nextVal","isAnyModActive","unsetMod","isFilterModActive","channelIdx","forceHoldMods","found","holdFor","snapToStart","snapToBar","goToBar","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","getNextBar","skipBar","outputBufferLength","playSong","skippedBars","firstSkippedBufferIndex","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","runLength","runEnd","determineCurrentActiveTones","playModTone","barVisited","includes","determineLiveInputTones","tonesPlayedInThisInstrument","freeReleasedTone","shouldFadeOutFast","computeTone","playTone","effectsSynth","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","midBeat","periods","samplesPerPeriod","tempAmplitude","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","useEnvelopeSpeed","isFinite","freeTone","newTone","releaseTone","toneIndex","bassPitches","toneList","toneCount","moveTonesIntoOrderedTempMatchedList","clearTempMatchedPitchTones","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","adjacentNotesHaveMatchingPitches","firstNote","secondNote","firstNoteInterval","notePitches","currentTick","prevNotes","nextNotes","fillCount","modToneCount","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","oldTone","partsPerBar","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","modSynth","computeChordExpression","chordExpression","intervalScale","secondsPerPart","sampleTime","beatsPerPart","specialIntervalMult","toneIsOnLastTick","intervalStart","intervalEnd","fadeExpressionStart","fadeExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","getOperatorWave","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","noteLengthTicks","tmpNoteFilter","noteFilterSettingsStart","noteFilterSettingsEnd","intervalDiff","chordSizeDiff","pitchShiftScalarStart","pitchShiftScalarEnd","modDetuneStart","modDetuneEnd","vibratoAmplitudeStart","vibratoAmplitudeEnd","vibratoStart","POSITIVE_INFINITY","getLFOAmplitude","ticksUntilVibratoStart","vibratoLfoEnd","vibratoDepthEnvelopeEnd","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","noteFilterSettings","drumsetFilterEnvelope","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeStart","amplitudeEnd","amplitudeCurveStart","amplitudeCurveEnd","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","freqEndRatio","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","useSustainStart","useSustainEnd","startFreq","voiceCountExpression","unisonEnvelopeStart","unisonEnvelopeEnd","unisonAStart","unisonAEnd","unisonBStart","unisonBEnd","supersawExpressionStart","supersawExpressionEnd","minFirstVoiceAmplitude","useDynamismStart","useDynamismEnd","curvedDynamismStart","curvedDynamismEnd","firstVoiceAmplitudeStart","firstVoiceAmplitudeEnd","dynamismStart","dynamismEnd","initializeSupersaw","accumulator","normalizedPhase","zeroCrossingPhase","prevDrop","nextDrop","phaseDelta","distanceToZeroCrossing","swappedIndex","baseSpreadSlider","useSpreadStart","useSpreadEnd","averageSpreadSlider","curvedSpread","baseShape","useShapeStart","useShapeEnd","shapeStart","shapeEnd","delayLengthStart","pulseExpressionRatio","sustainEnvelopeStart","sustainEnvelopeEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulatorNumber","feedbackIndices","wrappedFmSynth","Function","chipSynth","harmonicsSynth","pulseWidthSynth","supersawSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","data","unisonSign","phaseDeltaA","phaseDeltaB","phaseDeltaScaleA","phaseDeltaScaleB","phaseA","phaseB","filters","filterCount","initialFilterInput1","initialFilterInput2","applyFilters","prevWaveIntegralA","prevWaveIntegralB","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","sampleIndex","waveA","waveB","inputSample","nextWaveIntegralA","nextWaveIntegralB","output","sanitizeFilters","voiceCount","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","sampleList","voice","lines","usesEqFilter","signature","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","phase","sawPhaseA","sawPhaseB","pulseWave","t","dynamismDelta","unisonDetunes","shapeDelta","supersawSample","detunedPhaseDelta","delaySampleTime","lowerIndex","upperIndex","delayRatio","prevDelaySample","phaseMask","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","referenceDelta","stereoBufferIndex","dotTarget","lerpEndRatio","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","instrumentVolume","volumeMultToInstrumentVolume","volumeMult","volumeMultToNoteSize","seconds","ticks","lower","upper","cents","beatsPerSecond","partsPerSecond","tickPerSecond","sanitizeDelayLine","lastIndex","mask","input1","input2","Change","_noop","_didSomething","isNoop","commit","UndoableChange","reversed","super","_reversed","_doneForwards","undo","_doForwards","_doBackwards","redo","_isDoneForwards","ChangeGroup","append","change","ChangeSequence","changes","_changes","_committed","checkFirst","isCommitted","patternsContainSameInstruments","pattern1Instruments","pattern2Instruments","pattern2Has1Instruments","every","pattern1Has2Instruments","discardInvalidPatternInstruments","uniqueInstruments","Set","unionOfUsedNotes","removeRedundantPins","projectNoteIntoBar","oldNote","timeOffset","newNoteLength","newPinTime","nextPin","nextPinTime","ratio","prevPin","prevPinTime","offsetInterval","pitchIdx","joinedWithPrevNote","newIntervalOffset","newTimeOffset","tempPin","transformedPin","ChangeMoveAndOverflowNotes","doc","newBeatsPerBar","partsToMove","oldChannel","newChannel","oldPartsPerBar","newPartsPerBar","oldPattern","oldBarStart","absoluteNoteStart","absoluteNoteEnd","barStartPart","removeDuplicatePatterns","ChangeReplacePatterns","ChangePins","_note","_oldStart","_oldEnd","_newStart","_newEnd","_oldPins","_newPins","_oldPitches","_newPitches","_oldContinuesLastPattern","_newContinuesLastPattern","_finishSetup","firstInterval","firstTime","ChangeCustomWave","oldArray","getCurrentInstrument","comparisonResult","ChangePreset","newValue","tempVolume","tempPan","tempPanDelay","ChangeRandomGeneratedInstrument","selectWeightedRandom","entries","total","entry","weight","item","selectCurvedDistribution","peak","PotentialFilterPoint","chance","minFreq","maxFreq","centerHz","centerGain","applyFilterPoints","potentialPoints","usedFreqs","potentialPoint","midFreq","normalize","spectrumGenerators","current","generator","harmonicGenerators","ChangeTransition","ChangeToggleEffects","toggleFlag","useInstrument","oldValue","wasSelected","ChangePatternNumbers","startChannel","getCurrentPattern","viewedInstrument","ChangeBarCount","atBeginning","diff","ChangeInsertBars","newLength","ChangeDeleteBars","ChangeLimiterSettings","ChangeChannelOrder","selectionMin","selectionMax","ChangeChannelCount","newPitchChannelCount","newNoiseChannelCount","newModChannelCount","newChannels","changeGroup","newCount","oldCount","newStart","oldStart","pickRandomPresetValue","oldPitchCount","ChangeAddChannel","addedChannelIndex","recalcChannelNames","ChangeRemoveChannel","minIndex","maxIndex","oldMax","ChangeModChannel","ChangeChannelBar","newBar","silently","selection","scrollToSelectedPattern","ChangeUnison","ChangeChord","ChangeVibrato","ChangeVibratoDepth","ChangeEnvelopeSpeed","ChangeVibratoSpeed","ChangeVibratoDelay","ChangeVibratoType","ChangeArpeggioSpeed","ChangeFastTwoNoteArp","ChangeClicklessTransition","ChangeAliasing","ChangeDiscreteEnvelope","ChangeSpectrum","ChangeHarmonics","ChangeDrumsetEnvelope","drumIndex","ChangeInstrumentSlider","_instrument","ChangePulseWidth","ChangeSupersawDynamism","ChangeSupersawSpread","ChangeSupersawShape","ChangePitchShift","ChangeDetune","ChangeDistortion","ChangeBitcrusherFreq","ChangeBitcrusherQuantization","ChangeStringSustain","ChangeStringSustainType","ChangeEQFilterType","ChangeNoteFilterType","ChangeEQFilterSimpleCut","ChangeEQFilterSimplePeak","ChangeNoteFilterSimpleCut","ChangeNoteFilterSimplePeak","ChangeFilterAddPoint","isNoteFilter","deletion","_envelopeTargetsAdd","_envelopeIndicesAdd","_envelopeTargetsRemove","_envelopeIndicesRemove","_instrumentNextPreset","_instrumentPrevPreset","_filterSettings","_point","FilterMoveData","usePoint","useFreq","useGain","ChangeFilterMovePoint","oldFreq","newFreq","oldGain","newGain","useNoteFilter","pointIndex","_oldFreq","_newFreq","_oldGain","_newGain","pointType","getMoveData","beforeChange","ChangeFilterSettings","oldSettings","subFilters","oldSubFilters","_oldSettings","_useNoteFilter","_subFilters","_oldSubFilters","ChangeFadeInOut","_oldFadeIn","_oldFadeOut","_newFadeIn","_newFadeOut","ChangeAlgorithm","ChangeFeedbackType","ChangeOperatorWaveform","operatorIndex","ChangeOperatorPulseWidth","ChangeOperatorFrequency","ChangeOperatorAmplitude","ChangeFeedbackAmplitude","ChangeAddChannelInstrument","ChangeRemoveChannelInstrument","removedIndex","ChangeViewInstrument","recentPatternInstruments","ChangeEdo","ChangeInstrumentsFlags","newLayeredInstruments","newPatternInstruments","oldLayeredInstruments","oldPatternInstruments","ChangeKey","ChangeLoop","oldLength","ChangePitchAdded","_pitch","ChangeOctave","ChangeRhythm","ChangePaste","selectionStart","selectionEnd","oldPartDuration","ChangeNoteTruncate","noteInsertionIndex","noteStart","noteEnd","ChangeNoteLength","ChangePasteInstrument","instrumentCopy","ChangeSetPatternInstruments","ChangeModInstrument","ChangeModSetting","text","tgtChannel","startsWith","substr","record","ChangeModFilter","ChangePatternsPerChannel","channelBars","channelPatterns","ChangeEnsurePatternExists","_patternOldNotes","_oldPatternInstruments","_bar","_channelIndex","_oldPatternCount","_newPatternCount","_newPatternInstruments","firstEmptyUnusedIndex","firstUnusedIndex","used","barIndex","_patternIndex","ChangePinTime","shiftedTime","originalTime","skipStart","skipEnd","setPin","oldPin","ChangePitchBend","bendStart","bendEnd","bendTo","direction","stop","setStart","setEnd","prevInterval","prevSize","persist","ChangePatternRhythm","minDivision","changeRhythm","oldTime","thresholds","beatStart","newTime","threshold","ChangeNoteAdded","ChangeRhythmNote","ChangeMoveNotesSideways","beatsToMove","strategy","originalBarCount","originalLoopStart","originalLoopLength","firstBarIsEmpty","ChangeBeatsPerBar","noteIndex","ChangeTempo","ChangeScale","eligiblePresetValues","setDefaultInstruments","ChangeSong","newHash","ChangePatternSelection","resetBoxSelection","prefs","defaultScale","ChangeValidateTrackSelection","removeExtraSparseChannels","maxLength","sparsestIndex","mostZeroes","zeroes","combinedChannels","comparePatternNotes","newPatterns","foundMatchingPattern","newPatternIndex","ChangeEchoDelay","ChangeEchoSustain","ChangeChorus","ChangeReverb","_pattern","truncStart","truncEnd","pushLastPin","skipNote","force","ChangeSplitNotesAtSelection","patternSelectionStart","patternSelectionEnd","ChangeTransposeNote","upward","ignoreScale","foundMatch","ChangeTranspose","patternSelectionActive","ChangeTrackSelection","newX0","newX1","newY0","newY1","boxSelectionX0","boxSelectionX1","boxSelectionY0","boxSelectionY1","newEnd","_oldActive","_newActive","ChangeDragSelectedNotes","parts","transpose","oldEnd","draggedNotes","notesOutsideScale","ChangeHoldingModRecording","storedChange","storedValues","slider","storedSlider","ChangeDuplicateSelectedReusedPatterns","barStart","barWidth","channelStart","channelHeight","reusablePatterns","currentPatternIndex","isUsedElsewhere","bar2","copiedPattern","ChangePatternScale","scaleMap","newPitches","newPins","transformedPitch","transformedInterval","ChangeVolume","ChangeSongTitle","ChangeChannelName","muteEditorChannel","ChangePan","ChangePanDelay","ChangeSizeBend","bendPart","bendSize","bendInterval","uniformSize","inserted","ChangeChipWave","ChangeNoiseWave","ChangeAddEnvelope","ChangeRemoveEnvelope","ChangeSetEnvelopeTarget","oldTarget","oldIndex","ChangeSetEnvelopeType","button","span","h2","input","br","select","option","BeatsPerBarPrompt","_beatsStepper","step","_conversionStrategySelect","_cancelButton","_okayButton","_close","cleanUp","removeEventListener","_saveChanges","_validateKey","_validateNumber","_whenKeyPressed","keyCode","localStorage","setItem","prompt","_validate","lastStrategy","getItem","setTimeout","focus","charCode","which","label","ChannelSettingsPrompt","_patternsStepper","_pitchChannelStepper","_drumChannelStepper","_modChannelStepper","_layeredInstrumentsBox","_patternInstrumentsBox","group","checked","CustomChipPromptCanvas","_mouseY","_lastIndex","_lastAmp","chipData","startingChipData","_undoHistoryState","_changeQueue","_fill","_ticks","_subticks","_blocks","viewBox","preserveAspectRatio","_storeChange","sameCheck","stopPropagation","right","clientY","pageY","top","bottom","offsetParent","col","amp","lowest","highest","startingAmp","endingAmp","medAmp","children","CustomChipPrompt","_songEditor","customChipCanvas","_playButton","_togglePlay","togglePlay","updatePlayButton","whenKeyPressed","innerText","FilterEditor","larger","_responsePath","_indicators","_writingMods","_controlPointPath","_dottedLinePath","_highlight","circle","r","selfUndoSettings","selfUndoHistoryPos","_label","coordText","_pointRadius","_larger","_touchMode","_mouseDragging","_addingPoint","_deletingPoint","_addedType","_selectedIndex","_freqStart","_gainStart","_dragChange","_subfilterIndex","_renderedSelectedIndex","_renderedPointCount","_renderedPointTypes","_renderedPointFreqs","_renderedPointGains","_updatePath","_whenCursorPressed","_updateCursor","_useFilterSettings","_getTargetFilterSettings","lastChangeWas","stringify","subFilter","parsedFilter","_xToFreq","_freqToX","_yToGain","_gainToY","setProspectiveChange","nearestDistance","distance","newPoint","_findNearestFreqSlot","freqDelta","gainDelta","targetFreq","ignoreIndex","roundedFreq","lowerFreq","upperFreq","tryingLower","foundConflict","currentFreq","_circlePath","cx","cy","radius","reverse","display","controlPointPath","dottedLinePath","pointX","pointY","responsePath","swapToSettings","useHistory","saveSettings","firstFilter","jumpIndex","swapToSubfilter","savedFilter","resetToInitial","swapSubfilterIndices","newIndex","tmp","currFilter","targetSettings","activeMods","forceModRender","displayMods","pointTypes","pointFreqs","pointGains","p","CustomFilterPrompt","filterData","startingFilterData","_filterButtons","_filterButtonContainer","_filterContainer","_editorTitle","_filterCopyButton","d","_filterPasteButton","_filterCopyPasteContainer","_filterCoordinateText","_setSubfilter","doSwap","filterEditor","_copyFilterSettings","filterCopy","_pasteFilterSettings","newIdx","shiftKey","colors","insertBefore","innerHTML","newButton","newSubButton","EdoPrompt","_edo","save","blob","msSaveOrOpenBlob","anchor","download","url","URL","createObjectURL","revokeObjectURL","href","dispatchEvent","MouseEvent","open","location","ExportPrompt","outputStarted","_fileName","maxlength","autofocus","_computedSamplesLabel","Text","_enableIntro","_loopDropDown","_enableOutro","_formatSelect","_exportButton","_outputProgressBar","_outputProgressLabel","_outputProgressContainer","_validateFileName","_export","_exportTo","_exportToJson","_exportToHtml","disabled","lastExportFormat","samplesToTime","rawSeconds","changeFileName","use","deleteChars","cursorPos","setSelectionRange","_synthesize","samplesPerChunk","currentFrame","currentChunk","samplesInChunk","sampleFrames","tempSamplesL","tempSamplesR","recordedSamplesL","recordedSamplesR","totalChunks","thenExportTo","_exportToWavFinish","_exportToMp3Finish","introIter","sampleCount","arrayBuffer","ArrayBuffer","DataView","setUint32","setUint16","bytesPerSample","range","valL","valR","setInt16","Blob","whenEncoderIsAvailable","sampleBlockSize","mp3encoder","Mp3Encoder","mp3Data","Int16Array","leftChunk","subarray","rightChunk","mp3buf","encodeBuffer","flush","script","src","onload","jsonString","fileContents","Layout","setLayout","layout","_layoutMap","small","long","tall","wide","HarmonicsEditor","_octaves","_fifths","_curve","_lastControlPoints","_lastControlPointContainer","_freqPrev","_ampPrev","_change","_renderedPath","_renderedFifths","_yToAmp","controlPointToHeight","xPos","lastHeight","showFifth","InputBox","_getChange","_value","_oldValue","_whenInput","_whenChange","updateValue","Slider","midTick","parseInt","getValueBeforeProspectiveChange","ImportPrompt","_fileInput","accept","_whenFileSelected","file","files","lastIndexOf","reader","FileReader","goBackToStart","readAsText","error","Box","color","_text","ChannelRow","patternHeight","_renderedIndex","_renderedLabelColor","_renderedBackgroundColor","background","setWidth","setHeight","setIndex","selected","dim","useColor","_renderedBarWidth","_renderedBarHeight","_boxes","getChannelHeight","getBarWidth","box","form","LayoutPrompt","_form","_confirm","elements","EnvelopeEditor","_rows","_targetSelects","_envelopeSelects","_deleteButtons","_renderedEnvelopeCount","_renderedEqFilterCount","_renderedNoteFilterCount","_renderedEffects","_onChange","targetSelectIndex","envelopeSelectIndex","combinedValue","selectedIndex","_onClick","_makeOption","_updateTargetOptionVisibility","menu","optionIndex","childElementCount","hidden","targetSelect","interleaved","envelopeSelect","deleteButton","row","_renderedInstrumentType","FadeInOutEditor","_fadeCurve","_controlCurve","_mouseXStart","_draggingFadeIn","_renderedFadeIn","_renderedFadeOut","_xToFadeIn","_xToFadeOut","dottedLineX","_fadeOutToX","_fadeInToX","fadeInX","fadeOutX","fadePath","LimiterCanvas","lim","_boostCurve","_boostDot","_midCurve","_limitCurve","_limitDot","_label0","_label1","_label2","_inLabel","_outLabel","_xAxisLabel","_yAxisLabel","transform","_inVolumeBg","_outVolumeBg","_inVolumeBar","_inVolumeCap","_outVolumeBar","_outVolumeCap","_stop1","_stop2","_stop3","_gradient","linearGradient","id","gradientUnits","_defs","defs","_limiterPrompt","animateVolume","historicInCap","historicOutCap","lastValue","currentSubpathIdx","lastSubpathIdx","subPaths","limiterRatio","limitRatioSlider","compressorRatio","compressionRatioSlider","limiterThreshold","limitThresholdSlider","compressorThreshold","compressionThresholdSlider","LimiterPrompt","limiterCanvas","limitDecaySlider","limitRiseSlider","masterGainSlider","inVolumeHistoricTimer","inVolumeHistoricCap","outVolumeHistoricTimer","outVolumeHistoricCap","_resetButton","_volumeUpdate","requestAnimationFrame","_whenInputFavorLimitThreshold","_updateLimiter","startingLimitRatio","startingCompressionRatio","startingLimitThreshold","startingCompressionThreshold","startingLimitDecay","startingLimitRise","startingMasterGain","_resetDefaults","LoopEditor","_trackEditor","_startMode","_endMode","_bothMode","_loopMode","_loopAtPointStart","_loopAtPointEnd","_loop","_barLoop","_barWidth","_cursor","mode","_clientStartX","_clientStartY","_startedScrolling","_draggingHorizontally","_renderedLoopStart","_renderedLoopStop","_renderedBarCount","_renderedBarLoopStart","_renderedBarLoopEnd","_updateCursorStatus","_whenTouchReleased","_render","_documentChanged","watch","_findEndPoints","middle","endPoints","setLoopAt","autoFollow","showHighlight","highlightStart","highlightStop","barLoopStart","barLoopEnd","loopStop","editorWidth","MoveNotesSidewaysPrompt","MuteEditor","_editor","_cornerFiller","_buttons","_channelCounts","_channelNameDisplay","_channelNameInput","_channelDropDown","_renderedPitchChannels","_renderedNoiseChannels","_renderedChannelHeight","_renderedModChannels","_channelDropDownChannel","_channelDropDownOpen","_channelDropDownLastState","_channelNameInputWhenInput","_channelNameInputClicked","_channelNameInputHide","_channelDropDownClick","_channelDropDownGetOpenedPosition","_channelDropDownBlur","options","_channelDropDownHandler","shouldSolo","insertChannel","refocusStage","_onMouseMove","_onMouseLeave","onKeyUp","enableChannelMuting","startingChannelCount","channelCountText","muteButton","muteContainer","marginTop","marginBottom","fontSize","OctaveScrollBar","_piano","_notchHeight","_octaveCount","_octaveHeight","_upHighlight","_downHighlight","_renderedBarBottom","_renderedVisibleOctaveCount","_barBottom","_barHeight","visibleOctaveCount","getVisibleOctaveCount","scrollableOctaves","canReplaceLastChange","currentOctave","getBaseVisibleOctave","forceRender","showUpHighlight","showDownHighlight","analogousDrumMap","toString","MidiInputHandler","_takeMidiHandlerFocus","_handleStateChange","port","state","_registerMidiInput","_unregisterMidiInput","midiInput","_onMidiMessage","clearAllPitches","enableMidi","isDrum","eventType","velocity","addPerformedPitch","removePerformedPitch","registerMidiAccessHandler","requestMIDIAccess","midiAccess","inputs","forEach","e","KeyboardLayout","keyPosToPitch","keyboardLayout","pitchOffset","forcedKey","scaleIndices","flag","_pianoAtC","_pianoAtA","keyOffset","_possiblyPlayingPitchesFromKeyboard","_onWindowBlur","handleKeyEvent","pressed","code","handleKey","PatternCursor","valid","curNote","curIndex","exactPart","nearPinIndex","PatternEditor","_interactive","_barOffset","controlMode","shiftMode","_svgNoteBackground","patternUnits","_svgDrumBackground","_svgModBackground","_svgBackground","_svgNoteContainer","_svgPlayhead","_selectionRect","_svgPreview","modDragValueLabel","contenteditable","_defaultModBorder","_backgroundPitchRows","_backgroundDrumRow","_backgroundModRow","_modDragValueLabelLeft","_modDragValueLabelTop","_modDragValueLabelWidth","editingModLabel","_modDragStartValue","_modDragLowerBound","_modDragUpperBound","_pitchHeight","_mouseHorizontal","_usingTouch","_copiedPinChannels","_mouseYStart","_touchTime","_shiftHeld","_dragConfirmed","_draggingStartOfSelection","_draggingEndOfSelection","_draggingSelectionContents","_dragTime","_dragPitch","_dragSize","_dragVisible","_changePatternSelection","_lastChangeWasPatternSelection","_stashCursorPinVols","_playheadX","_octaveOffset","_renderedWidth","_renderedHeight","_renderedBeatWidth","_renderedPitchHeight","_renderedDrums","_renderedMod","_renderedRhythm","_renderedPitchChannelCount","_renderedNoiseChannelCount","_renderedModChannelCount","_followPlayheadBar","_validateModDragLabelInput","converted","presValue","xOffset","_partWidth","_modDragNote","_modDragPin","_modDragSetting","resetCopiedPins","maxDivision","_getMaxDivision","_animatePlayhead","timestamp","notifyWatchers","playheadBar","modPlayhead","currentPatternIsDirty","_redrawNotePatterns","ctrlKey","continuousState","_setPatternSelection","_copyPins","enableNotePreview","setTemporaryPitches","rectangle","_getMaxPitch","rhythmStepsPerBeat","_getMinDivision","_snapToMinDivision","foundNote","_findMousePitch","_pitchToPixelHeight","_pitchBorder","mousePitch","leftSide","rightSide","intervalRatio","arc","bendHeight","minInterval","MAX_VALUE","maxInterval","bestDistance","pinDistance","_snapToPitch","nearest","defaultLength","_copiedPins","fullBeats","modMouse","division","forceStart","forceEnd","maxHeight","maxFoundHeight","_cursorIsInSelection","_cursorAtStartOfSelection","_cursorAtEndOfSelection","pixelY","_pitchCount","guess","topPitch","bottomPitch","topRange","bottomRange","movePlayheadToMouse","setModSettingsForChange","songEditor","thisRef","timeQuantum","realPart","changedPatterns","getMatchingInstrumentAndMod","applyToMod","modInsIndex","modFilterIndex","endIndex","sanitizeInterval","startPart","endPart","couldIntersectStart","intersectsEnd","firstInteriorPin","interiorPinCount","timeAdjust","applyToMods","applyToFilterTargets","applyValues","toApply","continuingModRecordingChange","getSliderForModSetting","useChange","preMoveData","postMoveData","useFilter","modulatorIndex","modifyPoint","is","applyIndex","usedPatterns","usedInstrumentIndices","usedModIndices","useInstrumentIndex","useModIndex","rtn","addLength","newNoteDist","latestPart","latestNote","latestPin","latestPinIdx","prevNotePart","modNoteIndex","usedInstrument","usedNewInstrumentIndices","prevPart","continuous","usePin","lastNoteEnds","checkIndex","latestPinTime","stopEditingModLabel","discardChanges","getSelection","sel","removeAllRanges","selectAllChildren","_updateSelection","dx","dy","notesInScale","pitchRatio","draggedParts","draggedTranspose","backwards","directLength","blessedLength","theNote","shiftedPin","dragFactorSlow","dragFactorFast","dragSign","dragCounts","sizeRatio","alwaysFineNoteVol","minPitch","pathString","_drawNote","clientHeight","getVisiblePitchCount","beatWidth","node","cloneNode","parentNode","replaceChild","makeEmptyReplacementElement","showChannels","pattern2","notePath","displayNumberedChords","colorPrimary","colorSecondary","indicatorOffset","arrowHeight","arrowPath","arrow","oscillatorLabel","svgElement","showSize","totalWidth","endOffset","prevSide","nextSide","prevHeight","nextHeight","nextSize","Piano","_renderedScale","getBassCutoffPitch","_pianoContainer","_drumContainer","_modContainer","_preview","_pianoKeys","_pianoLabels","_modFirstLabels","_modSecondLabels","_modCountLabels","_modCountRects","_playedPitch","_renderedKey","_renderedPitchCount","_renderedLiveInputPitches","_updateCursorPitch","_playLiveInput","_whenMouseReleased","_releaseLiveInput","_onAnimationFrame","liveInputChanged","liveInputPitchCount","pitchesAreTemporary","bassPitchesAreTemporary","showLetters","firstRow","secondRow","useFirstColor","useSecondColor","usingSecondRow","usingMod","instrumentVal","channelVal","instrumentsLength","insText","absoluteChannelVal","relativeChannelVal","filterVal","firstLabel","secondLabel","modCountLabel","modCountRect","scaleFactor","parentElement","getComputedTextLength","squeeze","pianoLabel","pianoKey","pitchNameIndex","getPitchName","firstRowText","secondRowText","countText","countRect","firstRowSVG","countSVG","secondRowSVG","flexRow1","flexRow2","flexContainer","modKey","_cursorPitch","pitchHeight","child","scaleIndex","baseVisibleOctave","SongDurationPrompt","_barsStepper","_positionSelect","lastPosition","SustainPrompt","_typeSelect","versionPrefix","keyToVersion","versionToKey","generateUid","errorAlert","alert","compareSongs","versions","compareVersions","SongRecovery","_song","getAllRecoveredSongs","songs","songsByUid","itemKey","uid","saveVersion","songData","newName","Date","clearTimeout","_saveVersionTimeoutHandle","currentSong","newWork","mostRecentTime","work","newVersion","newKey","minSpan","spanMult","indexToDiscard","currentTime","newerTime","removeItem","leastImportantSong","leastImportance","maximumSongCount","iframe","SongRecoveryPrompt","_songContainer","versionMenu","toLocaleString","player","contentWindow","Event","RecordingSetupPrompt","_keyboardMode","_keyboardLayout","_bassOffset","_keyboardLayoutPreview","_enableMidi","_showRecordButton","_snapRecordedNotesToRhythm","_ignorePerformedNotesNotInScale","_metronomeCountIn","_metronomeWhileRecording","pressControlForShortcuts","bassOffset","showRecordButton","snapRecordedNotesToRhythm","ignorePerformedNotesNotInScale","metronomeCountIn","metronomeWhileRecording","_renderKeyboardLayoutPreview","rowLengths","rowIndex","spacer","colIndex","scalePitch","border","SpectrumEditor","_spectrumIndex","_arrow","ThemePrompt","_themeSelect","lastTheme","colorTheme","_previewTheme","h3","TipPrompt","message","_closeButton","modNum","pList","TrackEditor","_barDropDown","_channelRowContainer","_barNumberContainer","_boxHighlight","_barEditorPath","_select","_channels","_barNumbers","_mouseStartBar","_mouseStartChannel","_mouseBar","_mouseChannel","_mousePressed","_renderedEditorWidth","_renderedEditorHeight","_renderedPatternCount","_barDropDownBar","_lastScrollTime","_barDropDownGetOpenedPosition","_barDropDownHandler","moveBarOffset","insertBars","_barScrollBar","deleteBars","_whenSelectChanged","setPattern","_whenSelectPressed","_updateSelectPos","_whenSelectMoved","_dragBoxSelection","_whenSelectReleased","_updateMousePos","setTrackSelection","selectionUpdated","setChannelBar","up","patternCount","determinedCursorType","overTrackEditor","changeBarScrollPos","tip","lastChild","selectedPattern","channelRow","pathLeft","editorHeight","boxSelectionActive","boxSelectionBar","boxSelectionChannel","boxSelectionWidth","boxSelectionHeight","optgroup","canvas","buildOptions","items","buildPresetOptions","idSet","randomGroup","foundAny","moveViolin2","moveFlute2","moveGrandPiano2","moveGrandPiano3","setSelectedValue","isSelect2","stringValue","$","trigger","CustomChipCanvas","mouseDown","ctx","getContext","continuousEdit","lastX","lowerBound","upperBound","progress","lastY","fillStyle","fillRect","_onMouseDown","_onMouseUp","renderedArray","renderedColor","redrawCanvas","renderColor","needsRedraw","SongEditor","_patternEditorPrev","_patternEditor","_patternEditorNext","_muteEditor","_loopEditor","_octaveScrollBar","_pauseButton","_recordButton","_stopButton","_prevBarButton","_nextBarButton","_volumeSlider","_outVolumeBarBg","_volumeBarContainer","_volumeBarBox","_fileMenu","_editMenu","_optionsMenu","_scaleSelect","_keySelect","_tempoSlider","_tempoStepper","_chorusSlider","_chorusRow","onclick","_openPrompt","_reverbSlider","_reverbRow","_echoSustainSlider","_echoSustainRow","_echoDelaySlider","_echoDelayRow","_rhythmSelect","_pitchedPresetSelect","_drumPresetSelect","_algorithmSelect","_algorithmSelectRow","_instrumentButtons","_instrumentAddButton","_instrumentRemoveButton","_instrumentsButtonBar","_instrumentsButtonRow","_instrumentVolumeSlider","_instrumentVolumeSliderInputBox","_instrumentVolumeSliderTip","_instrumentVolumeSliderRow","_panSlider","_panDropdown","_toggleDropdownMenu","_panSliderInputBox","_panSliderRow","tabindex","_panDelaySlider","_panDelayRow","_panDropdownGroup","_chipWaveSelect","_chipNoiseSelect","_chipWaveSelectRow","_chipNoiseSelectRow","_fadeInOutEditor","_fadeInOutRow","_transitionSelect","_transitionDropdown","_transitionRow","_clicklessTransitionBox","_clicklessTransitionRow","_transitionDropdownGroup","_effectsSelect","_eqFilterSimpleButton","_switchEQFilterType","_eqFilterAdvancedButton","_eqFilterTypeRow","_eqFilterEditor","_eqFilterZoom","_eqFilterRow","_eqFilterSimpleCutSlider","_eqFilterSimpleCutRow","_eqFilterSimplePeakSlider","_eqFilterSimplePeakRow","_noteFilterSimpleButton","_switchNoteFilterType","_noteFilterAdvancedButton","_noteFilterTypeRow","_noteFilterEditor","_noteFilterZoom","_noteFilterRow","_supersawDynamismSlider","_supersawDynamismRow","_supersawSpreadSlider","_supersawSpreadRow","_supersawShapeSlider","_supersawShapeRow","_noteFilterSimpleCutSlider","_noteFilterSimpleCutRow","_noteFilterSimplePeakSlider","_noteFilterSimplePeakRow","_pulseWidthSlider","_pwmSliderInputBox","_pulseWidthRow","_pitchShiftSlider","_pitchShiftTonicMarkers","_pitchShiftFifthMarkers","_pitchShiftMarkerContainer","_pitchShiftRow","_detuneSlider","_detuneSliderInputBox","_detuneSliderRow","_distortionSlider","_distortionRow","_aliasingBox","_aliasingRow","_bitcrusherQuantizationSlider","_bitcrusherQuantizationRow","_bitcrusherFreqSlider","_bitcrusherFreqRow","_stringSustainSlider","_stringSustainLabel","_stringSustainRow","_unisonSelect","_unisonSelectRow","_chordSelect","_chordDropdown","_chordSelectRow","_arpeggioSpeedDisplay","_arpeggioSpeedSlider","_arpeggioSpeedRow","_twoNoteArpBox","_twoNoteArpRow","_chordDropdownGroup","_vibratoSelect","_vibratoDropdown","_vibratoSelectRow","_vibratoDepthSlider","_vibratoDepthRow","_vibratoSpeedDisplay","_vibratoSpeedSlider","_vibratoSpeedRow","_vibratoDelaySlider","_vibratoDelayRow","_vibratoTypeSelect","_vibratoTypeSelectRow","_vibratoDropdownGroup","_phaseModGroup","_feedbackTypeSelect","_feedbackRow1","_spectrumEditor","_spectrumRow","_harmonicsEditor","_harmonicsRow","_envelopeEditor","_discreteEnvelopeBox","_discreteEnvelopeRow","_envelopeSpeedDisplay","_envelopeSpeedSlider","_envelopeSpeedRow","_envelopeDropdownGroup","_envelopeDropdown","_drumsetGroup","_modulatorGroup","_instrumentCopyButton","_instrumentPasteButton","_customWaveDrawCanvas","_customWavePresetDrop","header","buildHeaderedOptions","_customWaveZoom","_customWaveDraw","_songTitleInputBox","_feedbackAmplitudeSlider","_feedbackRow2","_addEnvelopeButton","_customInstrumentSettingsGroup","_instrumentCopyGroup","_instrumentSettingsTextRow","_instrumentTypeSelectRow","_instrumentSettingsGroup","_usedPatternIndicator","_usedInstrumentIndicator","_jumpToModIndicator","_promptContainer","_zoomInButton","_zoomOutButton","_patternEditorRow","_patternArea","_trackContainer","_trackVisibleArea","_trackAndMuteContainer","_trackArea","_menuArea","_songSettingsArea","_instrumentSettingsArea","_settingsArea","mainLayer","tabIndex","_wasPlaying","_currentPromptName","_highlightedInstrumentIndex","_renderedInstrumentCount","_renderedIsPlaying","_renderedIsRecording","_renderedShowRecordButton","_renderedCtrlHeld","_ctrlHeld","_deactivatedInstruments","_operatorRows","_operatorAmplitudeSliders","_operatorFrequencySelects","_operatorDropdowns","_operatorWaveformSelects","_operatorWaveformHints","_operatorWaveformPulsewidthSliders","_operatorDropdownRows","_operatorDropdownGroups","_drumsetSpectrumEditors","_drumsetEnvelopeSelects","_showModSliders","_newShowModSliders","_modSliderValues","_hasActiveModSliders","_openPanDropdown","_openVibratoDropdown","_openEnvelopeDropdown","_openChordDropdown","_openTransitionDropdown","_openOperatorDropdowns","lastOutVolumeCap","patternUsed","_modRecTimeout","preventScroll","_onFocusIn","_refocusStageNotEditing","whenUpdated","trackBounds","trackVisibleChannels","scrollLeft","scrollTop","channelScrollPos","activeElement","showScrollBar","displayVolumeBar","getFullScreen","targetBeatWidth","minBeatWidth","maxBeatWidth","patternEditorWidth","flexShrink","optionCommands","autoPlay","displayBrowserUrl","wasActive","contains","effectFlag","_usageCheck","parent","hide","_modChannelBoxes","channelList","_modInstrumentBoxes","instrumentList","_modSetBoxes","settingList","unusedSettingList","tgtInstrumentTypes","anyInstrumentAdvancedEQ","anyInstrumentSimpleEQ","anyInstrumentAdvancedNote","anyInstrumentSimpleNote","anyInstrumentArps","anyInstrumentPitchShifts","anyInstrumentDetunes","anyInstrumentVibratos","anyInstrumentNoteFilters","anyInstrumentDistorts","anyInstrumentBitcrushes","anyInstrumentPans","anyInstrumentChorus","anyInstrumentEchoes","anyInstrumentReverbs","anyInstrumentHasEnvelopes","allInstrumentNoteFilters","allInstrumentDetunes","allInstrumentVibratos","allInstrumentDistorts","allInstrumentBitcrushes","allInstrumentPans","allInstrumentChorus","allInstrumentEchoes","allInstrumentReverbs","instrumentCandidates","_whenSetModSetting","_modTargetIndicators","tmpCount","dotCount","isSimple","_modFilterBoxes","dotList","useName","chordIndex","hasAttribute","_renderInstrumentBar","show","isCarrier","operatorName","marker","_setPrompt","addedEffect","envButtonRect","instSettingsRect","settingsRect","addedEnvelope","scrollHeight","handleModRecording","pointerEvents","opacity","_onTrackAreaScroll","_disableCtrlContextMenu","_tempoStepperCaptureNumberKeys","metaKey","_toggleRecord","needControlForShortcuts","getModifierState","canPlayNotes","leftSel","rightSel","_copyInstrument","deleteChannel","selectChannel","selectAll","duplicatePatterns","altKey","visibleOctaves","reload","muteChannels","nextEmpty","nextUnused","soloChannels","pasteNumbers","_pasteInstrument","pasteNotes","panningEffectIndex","_copyTextToClipboard","_randomGenerated","_randomPreset","swapChannels","scrollToEndOfSelection","nextDigit","instrumentDigits","_whenKeyReleased","_whenPrevBarPressed","_whenNextBarPressed","_animate","_modSliderUpdate","_animateVolume","_setVolumeSlider","prevVol","_recordVolumeSlider","recordingModulators","setVolume","_whenSetTempo","_whenSetScale","forceScale","_whenSetKey","_whenSetRhythm","forceRhythm","_refocus","selfRef","_whenSetPitchedPreset","_setPreset","_whenSetDrumPreset","_whenSetFeedbackType","_whenSetAlgorithm","_whenSelectInstrument","selectInstrument","_whenSetModChannel","previouslyUnset","setModChannel","setModInstrument","_whenSetModInstrument","invalidIndex","selectedOptions","setModSetting","_whenClickModTarget","_whenClickJumpToModTarget","modChannelIdx","patternIdx","modInstrumentIdx","_whenSetModFilter","setModFilter","_whenSetChipWave","_whenSetNoiseWave","_whenSetTransition","_whenSetEffects","_whenSetVibrato","_whenSetVibratoType","_whenSetUnison","_whenSetChord","_addNewEnvelope","_zoomIn","_zoomOut","_fileMenuHandler","share","_editMenuHandler","_optionsMenuHandler","toggleDisplayBrowserUrl","_customWavePresetHandler","customWaveArray","MIN_VALUE","arrayPoint","arrayStep","modRecordingHandler","operatorNumber","frequencySelect","amplitudeSlider","waveformSelect","waveformDropdown","waveformDropdownHint","waveformPulsewidthSlider","waveformDropdownRow","waveformDropdownGroup","spectrumEditor","_modNameRows","_modSetRows","_modFilterRows","modChannelBox","modInstrumentBox","modNameRow","modSetBox","modFilterBox","modSetRow","modFilterRow","modTarget","bind","capture","passive","autoPlayOption","screen","availWidth","layoutOption","dropdown","submenu","animationDelay","anyModActive","updateModSlider","editor","currentVal","anySliderActive","openPrompt","lastChange","checkLastChange","maxInstrumentsPerChannel","instrumentButton","oldButton","instrumentUsed","modUsed","lowestSelX","highestSelX","lowestSelY","highestSelY","nav","clipboard","writeText","catch","textField","succeeded","execCommand","toSimple","SongPerformance","_channelIsDrum","_channelOctave","_songKey","_pitchesAreTemporary","_bassPitchesAreTemporary","_recentlyAddedPitches","_recentlyAddedBassPitches","_songLengthWhenRecordingStarted","_playheadPart","_bassPlayheadPart","_playheadPattern","_bassPlayheadPattern","_pitchesChanged","_bassPitchesChanged","_lastNote","_lastBassNote","_recordingChange","dirty","_updateRecordedNotes","_updateRecordedBassNotes","_getBassOffsetChannel","clearAllBassPitches","_lastBarHasPatterns","_getCurrentPlayheadPart","abortRecording","oldPart","oldPlayheadPart","newPart","addedAlreadyReleasedPitch","erasePatternInBar","recentPitch","setTemporaryBassPitches","MAX_SAFE_INTEGER","recentIndex","Selection","_changeTranspose","_changeTrack","_changeInstrument","_changeReorder","toJSON","x0","x1","y0","y1","fromJSON","json","hasRedoHistory","digit","forInstrument","forRhythms","parsed","insertIndex","_eachSelectedChannel","_eachSelectedPattern","_eachSelectedBar","handledPatterns","_parseCopiedInstrumentArray","patternCopy","from","_patternIndexIsUnused","patternNumber","channelCopy","selectionCopy","partDuration","channelCopies","copiedPartDuration","fillSelection","pasteHeight","pasteChannel","patternCopies","copiedBars","pasteWidth","pasteBar","copiedPatternIndex","reusedIndex","instrumentsCopy","existingPattern","removedPattern","allChannels","anyMuted","anyUnmuted","invert","alreadySoloed","currentChannel","soloPattern","matchesSoloPattern","shouldBeMuted","scaleFlags","oldScaleFlags","newScaleValue","newScaleFlags","oldScale","newScale","largerToSmaller","smallerScale","largerScale","roles","bestScore","bestIndexMap","stack","indexMap","score","sparsePitchMap","smallerScalePitch","largerScalePitch","sparseIndex","fullPitchMap","oldLow","newLow","oldHigh","newHigh","nearestPitch","nearestPitchDistance","newPitch","generateScaleMap","possibleSectionBoundaries","channelSectionMin","channelSectionMax","nextBoundary","newSelectionMin","newSelectionMax","maxLayers","Preferences","defaultVisibleOctaves","instrumentCopyPaste","ChangeNotifier","_watchers","_dirty","watcher","unwatch","SongDocument","_recovery","_recentChange","_sequenceNumber","_lastSequenceNumber","_stateShouldBePushed","_recordedNewSong","_waitingToUpdateState","_whenHistoryStateChanged","history","_resetSongRecoveryUid","canUndo","sequenceNumber","recoveryUid","_recoveryUid","_replaceState","_pushState","forgetLastChange","_getHistoryState","_getHash","_cleanDocument","_cleanDocumentIfNotRecordingMods","_validateDocState","highlightedPattern","_updateHistoryState","sessionStorage","songString","_calcVolume","eventName","replaceState","pathname","pushState","currentIndex","oldestIndex","_maximumUndoHistory","_forward","forward","_back","back","newSong","barOffset","getMobileLayout","innerWidth","squashed","getElementById","className","getElementsByClassName","select2","dropdownAutoWidth","on","siblings","toggle","css","groups","each","v","autoplay","scrollRestoration","serviceWorker","updateViaCache","scope"],"sources":["../synth/SynthConfig.ts","../editor/EditorConfig.ts","../node_modules/imperative-html/src/elements-base.ts","../node_modules/imperative-html/src/elements-strict.ts","../editor/ColorConfig.ts","../editor/style.ts","../editor/BarScrollBar.ts","../synth/FFT.ts","../synth/Deque.ts","../synth/filtering.ts","../synth/CreateScalesAndKeys.ts","../synth/synth.ts","../editor/Change.ts","../editor/changes.ts","../editor/BeatsPerBarPrompt.ts","../editor/ChannelSettingsPrompt.ts","../editor/CustomChipPrompt.ts","../editor/FilterEditor.ts","../editor/CustomFilterPrompt.ts","../editor/EdoPrompt.ts","../editor/ExportPrompt.ts","../editor/Layout.ts","../editor/HarmonicsEditor.ts","../editor/HTMLWrapper.ts","../editor/ImportPrompt.ts","../editor/ChannelRow.ts","../editor/LayoutPrompt.ts","../editor/EnvelopeEditor.ts","../editor/FadeInOutEditor.ts","../editor/LimiterPrompt.ts","../editor/LoopEditor.ts","../editor/MoveNotesSidewaysPrompt.ts","../editor/MuteEditor.ts","../editor/OctaveScrollBar.ts","../editor/Midi.ts","../editor/MidiInput.ts","../editor/KeyboardLayout.ts","../editor/PatternEditor.ts","../editor/Piano.ts","../editor/SongDurationPrompt.ts","../editor/SustainPrompt.ts","../editor/SongRecovery.ts","../editor/SongRecoveryPrompt.ts","../editor/RecordingSetupPrompt.ts","../editor/SpectrumEditor.ts","../editor/ThemePrompt.ts","../editor/TipPrompt.ts","../editor/TrackEditor.ts","../editor/SongEditor.ts","../editor/SongPerformance.ts","../editor/Selection.ts","../editor/Preferences.ts","../editor/ChangeNotifier.ts","../editor/SongDocument.ts","../editor/main.ts"],"sourcesContent":["/*!\nCopyright (c) 2012-2022 John Nesky and contributing authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.\n*/\n\nexport interface Dictionary<T> {\n    [K: string]: T;\n}\n\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\n    dictionary: Dictionary<T>;\n}\n\nexport const enum FilterType {\n    lowPass,\n    highPass,\n    peak,\n    length,\n}\n\nexport const enum SustainType {\n\tbright,\n\tacoustic,\n\tlength,\n}\n\nexport const enum EnvelopeType {\n    noteSize,\n    none,\n    punch,\n    flare,\n    twang,\n    swell,\n    tremolo,\n    tremolo2,\n    decay,\n    blip\n}\n\nexport const enum InstrumentType {\n    chip,\n    fm,\n    noise,\n    spectrum,\n    drumset,\n    harmonics,\n    pwm,\n    pickedString,\n    supersaw,\n    customChipWave,\n    mod,\n    length,\n}\n\nexport const enum DropdownID {\n    Vibrato = 0,\n    Pan = 1,\n    Chord = 2,\n    Transition = 3,\n    FM = 4,\n    Envelope = 5,\n\n}\n\nexport const enum EffectType {\n    reverb,\n    chorus,\n    panning,\n    distortion,\n    bitcrusher,\n    noteFilter,\n    echo,\n    pitchShift,\n    detune,\n    vibrato,\n    transition,\n    chord,\n    // If you add more, you'll also have to extend the bitfield used in Base64 which currently uses two six-bit characters.\n    length,\n}\n\nexport const enum EnvelopeComputeIndex {\n    noteVolume,\n    noteFilterAllFreqs,\n    pulseWidth,\n    stringSustain,\n    unison,\n    operatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3,\n    operatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3,\n    feedbackAmplitude,\n    pitchShift,\n    detune,\n    vibratoDepth,\n    noteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\n    noteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\n    supersawDynamism,\n\tsupersawSpread,\n\tsupersawShape,\n    length,\n}\n\n/*\nexport const enum InstrumentAutomationIndex {\n    mixVolume,\n    eqFilterAllFreqs,\n    eqFilterFreq0, eqFilterFreq1, eqFilterFreq2, eqFilterFreq3, eqFilterFreq4, eqFilterFreq5, eqFilterFreq6, eqFilterFreq7,\n    eqFilterGain0, eqFilterGain1, eqFilterGain2, eqFilterGain3, eqFilterGain4, eqFilterGain5, eqFilterGain6, eqFilterGain7,\n    distortion,\n    bitcrusherQuantization,\n    bitcrusherFrequency,\n    panning,\n    chorus,\n    echoSustain,\n    //echoDelay, // Wait until tick settings can be computed once for multiple run lengths.\n    reverb,\n    length,\n}\n*/\n\nexport interface BeepBoxOption {\n    readonly index: number;\n    readonly name: string;\n}\n\nexport interface Scale extends BeepBoxOption {\n    readonly flags: ReadonlyArray<boolean>;\n    readonly realName: string;\n}\n\nexport interface Key extends BeepBoxOption {\n    readonly isWhiteKey: boolean;\n    readonly basePitch: number;\n}\n\nexport interface Rhythm extends BeepBoxOption {\n    readonly stepsPerBeat: number;\n    readonly roundUpThresholds: number[] | null;\n}\n\nexport interface ChipWave extends BeepBoxOption {\n    readonly expression: number;\n    samples: Float32Array;\n}\n\nexport interface OperatorWave extends BeepBoxOption {\n    samples: Float32Array;\n}\n\nexport interface ChipNoise extends BeepBoxOption {\n    readonly expression: number;\n    readonly basePitch: number;\n    readonly pitchFilterMult: number;\n    readonly isSoft: boolean;\n    samples: Float32Array | null;\n}\n\nexport interface Transition extends BeepBoxOption {\n    readonly isSeamless: boolean;\n    readonly continues: boolean;\n    readonly slides: boolean;\n    readonly slideTicks: number;\n    readonly includeAdjacentPatterns: boolean;\n}\n\nexport interface Vibrato extends BeepBoxOption {\n    readonly amplitude: number;\n    readonly type: number;\n    readonly delayTicks: number;\n}\n\nexport interface VibratoType extends BeepBoxOption {\n    readonly periodsSeconds: number[];\n    readonly period: number;\n}\n\nexport interface Unison extends BeepBoxOption {\n    readonly voices: number;\n    readonly spread: number;\n    readonly offset: number;\n    readonly expression: number;\n    readonly sign: number;\n}\n\nexport interface Modulator extends BeepBoxOption {\n    readonly name: string; // name that shows up in song editor UI\n    readonly pianoName: string; // short name that shows up in mod piano UI\n    readonly maxRawVol: number; // raw\n    readonly newNoteVol: number; // raw\n    readonly forSong: boolean; // true - setting is song scope\n    convertRealFactor: number; // offset that needs to be applied to get a \"real\" number display of value, for UI purposes\n    readonly associatedEffect: EffectType; // effect that should be enabled for this modulator to work properly. If unused, set to EffectType.length.\n    readonly promptName: string; // long-as-needed name that shows up in tip prompt\n    readonly promptDesc: string[]; // paragraph(s) describing how to use this mod\n\n}\n\nexport interface Chord extends BeepBoxOption {\n    readonly customInterval: boolean;\n    readonly arpeggiates: boolean;\n    readonly strumParts: number;\n    readonly singleTone: boolean;\n}\n\nexport interface Algorithm extends BeepBoxOption {\n    readonly carrierCount: number;\n    readonly associatedCarrier: ReadonlyArray<number>;\n    readonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface OperatorFrequency extends BeepBoxOption {\n    readonly mult: number;\n    readonly hzOffset: number;\n    readonly amplitudeSign: number;\n}\n\nexport interface Feedback extends BeepBoxOption {\n    readonly indices: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface Envelope extends BeepBoxOption {\n    readonly type: EnvelopeType;\n    readonly speed: number;\n}\n\nexport interface AutomationTarget extends BeepBoxOption {\n    readonly computeIndex: EnvelopeComputeIndex /*| InstrumentAutomationIndex*/ | null;\n    readonly displayName: string;\n    //readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\n    readonly interleave: boolean; // Whether to interleave this target with the next one in the menu (e.g. filter frequency and gain).\n\treadonly isFilter: boolean; // Filters are special because the maxCount depends on other instrument settings.\n\t//readonly range: number | null; // set if automation is allowed.\n    readonly maxCount: number;\n    readonly effect: EffectType | null;\n    readonly compatibleInstruments: InstrumentType[] | null;\n}\n\nexport class Config {\n    // Params for post-processing compressor\n    public static thresholdVal: number = -10;\n    public static kneeVal: number = 40;\n    public static ratioVal: number = 12;\n    public static attackVal: number = 0;\n    public static releaseVal: number = 0.25;\n\n    public static readonly scales: DictionaryArray<Scale> = toNameMap([\n        { name: \"Free\", realName: \"12edo\", flags: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true] },\n        { name: \"Major\", realName: \"diatonic 5|1\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] },\n        { name: \"Minor\", realName: \"diatonic 2|4\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] },\n        { name: \"Mixolydian\", realName: \"diatonic 4|2\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] },\n        { name: \"Lydian\", realName: \"diatonic 6|0\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] },\n        { name: \"Dorian\", realName: \"diatonic 3|3\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] },\n        { name: \"Phrygian\", realName: \"diatonic 1|5\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] },\n        { name: \"Locrian\", realName: \"diatonic 0|6\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] },\n    ]);\n\n    public static readonly tempoMin: number = 30;\n    public static readonly tempoMax: number = 320;\n    public static readonly echoDelayRange: number = 24;\n    public static readonly echoDelayStepTicks: number = 4;\n    public static readonly echoSustainRange: number = 8;\n    public static readonly echoShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\n    public static readonly echoShelfGain: number = Math.pow(2.0, -0.5);\n    public static readonly reverbShelfHz: number = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\n    public static readonly reverbShelfGain: number = Math.pow(2.0, -1.5);\n    public static readonly reverbRange: number = 32;\n    public static readonly reverbDelayBufferSize: number = 16384; // TODO: Compute a buffer size based on sample rate.\n    public static readonly reverbDelayBufferMask: number = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\n    public static readonly beatsPerBarMin: number = 3;\n    public static readonly beatsPerBarMax: number = 16;\n    public static readonly barCountMin: number = 1;\n    public static readonly defaultEdo: number = 10;\n    public static readonly barCountMax: number = 256;\n    public static readonly instrumentCountMin: number = 1;\n    public static readonly layeredInstrumentCountMax: number = 4;\n    public static readonly patternInstrumentCountMax: number = 10;\n    public static readonly partsPerBeat: number = 24;\n    public static readonly ticksPerPart: number = 2;\n    public static readonly ticksPerArpeggio: number = 3;\n    public static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\n    public static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\n        { name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\n        { name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\n        { name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n        { name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n        { name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n    ]);\n\n    public static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\"];\n    public static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false, false, false];\n    public static readonly chipBaseExpression: number = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape.\n    public static readonly fmBaseExpression: number = 0.03;\n    public static readonly noiseBaseExpression: number = 0.19;\n    public static readonly spectrumBaseExpression: number = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\n    public static readonly drumsetBaseExpression: number = 0.45; // Drums tend to be loud but brief!\n    public static readonly harmonicsBaseExpression: number = 0.025;\n    public static readonly pwmBaseExpression: number = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/π times the measured square wave amplitude.\n    public static readonly supersawBaseExpression:  number = 0.061425; // It's actually closer to half of this, the synthesized sawtooth amplitude range is only .5 to -.5.\n    public static readonly pickedStringBaseExpression: number = 0.025; // Same as harmonics.\n    public static readonly distortionBaseVolume: number = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\n    public static readonly bitcrusherBaseVolume: number = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\n\n    public static readonly rawChipWaves: DictionaryArray<ChipWave> = toNameMap([\n        { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\n        { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\n        { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\n        { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\n        { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n        { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n        { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\n        { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\n        { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\n        { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\n        { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\n        { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n        { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\n        { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\n        { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\n        { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\n        { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\n        { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\n        { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\n    ]);\n    public static readonly chipWaves: DictionaryArray<ChipWave> = rawChipToIntegrated(Config.rawChipWaves);\n    // Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\n    public static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\n        { name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n        // The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\n        { name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\n        { name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\n        { name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    ]);\n\n    public static readonly filterFreqStep: number = 1.0 / 4.0;\n    public static readonly filterFreqRange: number = 34;\n    public static readonly filterFreqReferenceSetting: number = 28;\n    public static readonly filterFreqReferenceHz: number = 8000.0;\n    public static readonly filterFreqMaxHz: number = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\n    public static readonly filterFreqMinHz: number = 8.0;\n    public static readonly filterGainRange: number = 15;\n    public static readonly filterGainCenter: number = 7;\n    public static readonly filterGainStep: number = 1.0 / 2.0;\n    public static readonly filterMaxPoints: number = 8;\n    public static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\n    public static readonly filterMorphCount: number = 10; // Number of filter shapes allowed for modulating between. Counts the 0/default position.\n\n    public static readonly filterSimpleCutRange: number = 11;\n    public static readonly filterSimplePeakRange: number = 8;\n\n    public static readonly fadeInRange: number = 10;\n    public static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\n    public static readonly fadeOutNeutral: number = 4;\n    public static readonly drumsetFadeOutTicks: number = 48;\n    public static readonly transitions: DictionaryArray<Transition> = toNameMap([\n        { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\n        { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false },\n    ]);\n    public static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\n        { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\n        { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\n        { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 }, // It will fade in over the previous two ticks.\n        { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\n        { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\n    ]);\n    public static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\n        { name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\n        { name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\n    ]);\n    // This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\n    //                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\n    public static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\n\n    public static readonly unisons: DictionaryArray<Unison> = toNameMap([\n        { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\n        { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\n        { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\n        { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\n        { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\n        { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\n        { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\n        { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\n    ]);\n    public static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\"];\n    public static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.panning, EffectType.transition, EffectType.chord, EffectType.pitchShift, EffectType.detune, EffectType.vibrato, EffectType.noteFilter, EffectType.distortion, EffectType.bitcrusher, EffectType.chorus, EffectType.echo, EffectType.reverb];\n    public static readonly noteSizeMax: number = 6;\n    public static readonly volumeRange: number = 50;\n    // Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\n    // given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\t\n    public static readonly volumeLogScale: number = 0.1428;\n    public static readonly panCenter: number = 50;\n    public static readonly panMax: number = Config.panCenter * 2;\n    public static readonly panDelaySecondsMax: number = 0.001;\n    public static readonly chorusRange: number = 8;\n    public static readonly chorusPeriodSeconds: number = 2.0;\n    public static readonly chorusDelayRange: number = 0.0034;\n    public static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\n    public static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\n    public static readonly chorusMaxDelay: number = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\n    public static readonly chords: DictionaryArray<Chord> = toNameMap([\n        { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\n        { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\n        { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\n        { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\n    ]);\n    public static readonly maxChordSize: number = 9;\n    public static readonly operatorCount: number = 4;\n\tpublic static readonly maxPitchOrOperatorCount: number = Math.max(Config.maxChordSize, Config.operatorCount);\n    public static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\n        { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\n        { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\n        { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\n        { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\n        { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\n        { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\n        { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\n        { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\n        { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\n        { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\n        { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\n        { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\n        { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\n    ]);\n    public static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\n    public static readonly operatorAmplitudeMax: number = 15;\n    public static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\n        { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\n        { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\n        { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    ]);\n    public static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\n        { name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\n        { name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\n        { name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\n        { name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\n        { name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\n        { name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\n        { name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\n        { name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\n        { name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\n        { name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\n        { name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\n        { name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\n        { name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\n        { name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\n        { name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\n        { name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\n        { name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\n        { name: \"blip 1\", type: EnvelopeType.blip, speed: 6.0 },\n        { name: \"blip 2\", type: EnvelopeType.blip, speed: 16.0 },\n        { name: \"blip 3\", type: EnvelopeType.blip, speed: 32.0 },\n    ]);\n    public static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\n        { name: \"1⟲\", indices: [[1], [], [], []] },\n        { name: \"2⟲\", indices: [[], [2], [], []] },\n        { name: \"3⟲\", indices: [[], [], [3], []] },\n        { name: \"4⟲\", indices: [[], [], [], [4]] },\n        { name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\n        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\n        { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\n        { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\n        { name: \"1→2\", indices: [[], [1], [], []] },\n        { name: \"1→3\", indices: [[], [], [1], []] },\n        { name: \"1→4\", indices: [[], [], [], [1]] },\n        { name: \"2→3\", indices: [[], [], [2], []] },\n        { name: \"2→4\", indices: [[], [], [], [2]] },\n        { name: \"3→4\", indices: [[], [], [], [3]] },\n        { name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\n        { name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\n        { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\n    ]);\n    public static readonly chipNoiseLength: number = 1 << 15; // 32768\n    public static readonly spectrumNoiseLength: number = 1 << 15; // 32768\n    public static readonly spectrumBasePitch: number = 24;\n    public static readonly spectrumControlPoints: number = 30;\n    public static readonly spectrumControlPointsPerOctave: number = 7;\n    public static readonly spectrumControlPointBits: number = 3;\n    public static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\n    public static readonly harmonicsControlPoints: number = 28;\n    public static readonly harmonicsRendered: number = 64;\n    public static readonly harmonicsRenderedForPickedString: number = 1 << 8; // 256\n    public static readonly harmonicsControlPointBits: number = 3;\n    public static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\n    public static readonly harmonicsWavelength: number = 1 << 11; // 2048\n    public static readonly pulseWidthRange: number = 50;\n    public static readonly pulseWidthStepPower: number = 0.5;\n    public static readonly supersawVoiceCount: number = 7;\n\tpublic static readonly supersawDynamismMax: number = 6;\n\tpublic static readonly supersawSpreadMax: number = 12;\n\tpublic static readonly supersawShapeMax: number = 6;\n    public static readonly pitchChannelCountMin: number = 1;\n    public static readonly pitchChannelCountMax: number = 40;\n    public static readonly noiseChannelCountMin: number = 0;\n    public static readonly noiseChannelCountMax: number = 16;\n    public static readonly modChannelCountMin: number = 0;\n    public static readonly modChannelCountMax: number = 12;\n    public static readonly noiseInterval: number = 6;\n    public static readonly drumCount: number = 12;\n    public static readonly pitchOctaves: number = 8;\n    public static readonly modCount: number = 6;\n    public static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\n    public static readonly justIntonationSemitones: number[] = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * 12);\n    public static readonly pitchShiftRange: number = Config.justIntonationSemitones.length;\n    public static readonly pitchShiftCenter: number = Config.pitchShiftRange >> 1;\n    public static readonly detuneCenter: number = 200;\n    public static readonly detuneMax: number = 400;\n    public static readonly detuneMin: number = 0;\n    public static readonly songDetuneMin: number = 0;\n    public static readonly songDetuneMax: number = 500;\n    public static readonly sineWaveLength: number = 1 << 8; // 256\n    public static readonly sineWaveMask: number = Config.sineWaveLength - 1;\n    public static readonly sineWave: Float32Array = generateSineWave();\n\n    // Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\n    public static readonly pickedStringDispersionCenterFreq: number = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\n    public static readonly pickedStringDispersionFreqScale: number = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\n    public static readonly pickedStringDispersionFreqMult: number = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\n    public static readonly pickedStringShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\n\n    public static readonly distortionRange: number = 8;\n    public static readonly stringSustainRange: number = 15;\n    public static readonly stringDecayRate: number = 0.12;\n    public static readonly enableAcousticSustain: boolean = false;\n\tpublic static readonly sustainTypeNames: ReadonlyArray<string> = [\"bright\", \"acoustic\"]; // See SustainType enum above.\n\t\n    public static readonly bitcrusherFreqRange: number = 14;\n    public static readonly bitcrusherOctaveStep: number = 0.5;\n    public static readonly bitcrusherQuantizationRange: number = 8;\n\n    public static readonly maxEnvelopeCount: number = 12;\n    public static readonly defaultAutomationRange: number = 13;\n    public static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\n        { name: \"none\", computeIndex: null, displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1, effect: null, compatibleInstruments: null },\n        { name: \"noteVolume\", computeIndex: EnvelopeComputeIndex.noteVolume, displayName: \"note volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, compatibleInstruments: null },\n        { name: \"pulseWidth\", computeIndex: EnvelopeComputeIndex.pulseWidth, displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\n        { name: \"stringSustain\", computeIndex: EnvelopeComputeIndex.stringSustain, displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pickedString] },\n        { name: \"unison\", computeIndex: EnvelopeComputeIndex.unison, displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString] },\n        { name: \"operatorFrequency\", computeIndex: EnvelopeComputeIndex.operatorFrequency0, displayName: \"fm# freq\",         /*perNote:  true,*/ interleave: true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount, effect: null, compatibleInstruments: [InstrumentType.fm] },\n        { name: \"operatorAmplitude\", computeIndex: EnvelopeComputeIndex.operatorAmplitude0, displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount, effect: null, compatibleInstruments: [InstrumentType.fm] },\n        { name: \"feedbackAmplitude\", computeIndex: EnvelopeComputeIndex.feedbackAmplitude, displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.fm] },\n        { name: \"pitchShift\", computeIndex: EnvelopeComputeIndex.pitchShift, displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1, effect: EffectType.pitchShift, compatibleInstruments: null },\n        { name: \"detune\", computeIndex: EnvelopeComputeIndex.detune, displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1, effect: EffectType.detune, compatibleInstruments: null },\n        { name: \"vibratoDepth\", computeIndex: EnvelopeComputeIndex.vibratoDepth, displayName: \"vibrato range\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.vibrato, compatibleInstruments: null },\n        { name: \"noteFilterAllFreqs\", computeIndex: EnvelopeComputeIndex.noteFilterAllFreqs, displayName: \"n. filter freqs\",  /*perNote:  true,*/ interleave: false, isFilter: true, /*range: null,                           */    maxCount: 1, effect: EffectType.noteFilter, compatibleInstruments: null },\n        {name: \"noteFilterFreq\",         computeIndex:       EnvelopeComputeIndex.noteFilterFreq0,        displayName: \"n. filter # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter:  true, /*range: Config.filterFreqRange, */    maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\n\t\t// Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for envelopes.\n\t\t{name: \"noteFilterGain\",         computeIndex:                           null,                    displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, /*range: Config.filterGainRange,         */    maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\n\t\t{name: \"supersawDynamism\",       computeIndex:       EnvelopeComputeIndex.supersawDynamism,       displayName: \"dynamism\",         /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawDynamismMax + 1, */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\n\t\t{name: \"supersawSpread\",         computeIndex:       EnvelopeComputeIndex.supersawSpread,         displayName: \"spread\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawSpreadMax + 1,   */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\n\t\t{name: \"supersawShape\",          computeIndex:       EnvelopeComputeIndex.supersawShape,          displayName: \"saw↔pulse\",        /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawShapeMax + 1,    */    maxCount: 1,    effect: null,                    compatibleInstruments: [InstrumentType.supersaw]},\n\t\t/*\n        {name: \"distortion\",             computeIndex: InstrumentAutomationIndex.distortion,             displayName: \"distortion\",       perNote: false, interleave: false, isFilter: false, range: Config.distortionRange,             maxCount: 1,    effect: EffectType.distortion,   compatibleInstruments: null},\n        {name: \"bitcrusherQuantization\", computeIndex: InstrumentAutomationIndex.bitcrusherQuantization, displayName: \"bit crush\",        perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherQuantizationRange, maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\n        {name: \"bitcrusherFrequency\",    computeIndex: InstrumentAutomationIndex.bitcrusherFrequency,    displayName: \"freq crush\",       perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherFreqRange,         maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\n        {name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\n        {name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"panning\",                computeIndex: InstrumentAutomationIndex.panning,                displayName: \"panning\",          perNote: false, interleave: false, isFilter: false, range: Config.panMax + 1,                  maxCount: 1,    effect: EffectType.panning,      compatibleInstruments: null},\n        {name: \"chorus\",                 computeIndex: InstrumentAutomationIndex.chorus,                 displayName: \"chorus\",           perNote: false, interleave: false, isFilter: false, range: Config.chorusRange,                 maxCount: 1,    effect: EffectType.chorus,       compatibleInstruments: null},\n        {name: \"echoSustain\",            computeIndex: InstrumentAutomationIndex.echoSustain,            displayName: \"echo\",             perNote: false, interleave: false, isFilter: false, range: Config.echoSustainRange,            maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null},\n        {name: \"echoDelay\",              computeIndex: InstrumentAutomationIndex.echoDelay,              displayName: \"echo delay\",       perNote: false, interleave: false, isFilter: false, range: Config.echoDelayRange,              maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null}, // wait until after we're computing a tick's settings for multiple run lengths.\n        {name: \"reverb\",                 computeIndex: InstrumentAutomationIndex.reverb,                 displayName: \"reverb\",           perNote: false, interleave: false, isFilter: false, range: Config.reverbRange,                 maxCount: 1,    effect: EffectType.reverb,       compatibleInstruments: null},\n        {name: \"mixVolume\",              computeIndex: InstrumentAutomationIndex.mixVolume,              displayName: \"mix volume\",       perNote: false, interleave: false, isFilter: false, range: Config.volumeRange,                 maxCount: 1,    effect: null,                    compatibleInstruments: null},\n        {name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\n        */\n    ]);\n    public static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n        { name: \"sine\", samples: Config.sineWave },\n        { name: \"triangle\", samples: generateTriWave() },\n        { name: \"sawtooth\", samples: generateSawWave() },\n        { name: \"pulse width\", samples: generateSquareWave() },\n        { name: \"ramp\", samples: generateSawWave(true) },\n        { name: \"trapezoid\", samples: generateTrapezoidWave(2) },\n    ]);\n    public static readonly pwmOperatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n        { name: \"1%\", samples: generateSquareWave(0.01) },\n        { name: \"5%\", samples: generateSquareWave(0.05) },\n        { name: \"12.5%\", samples: generateSquareWave(0.125) },\n        { name: \"25%\", samples: generateSquareWave(0.25) },\n        { name: \"33%\", samples: generateSquareWave(1 / 3) },\n        { name: \"50%\", samples: generateSquareWave(0.5) },\n        { name: \"66%\", samples: generateSquareWave(2 / 3) },\n        { name: \"75%\", samples: generateSquareWave(0.75) },\n        { name: \"87.5%\", samples: generateSquareWave(0.875) },\n        { name: \"95%\", samples: generateSquareWave(0.95) },\n        { name: \"99%\", samples: generateSquareWave(0.99) },\n    ]);\n\n\n    // Height of the small editor column for inserting/deleting rows, in pixels.\n    public static readonly barEditorHeight: number = 10;\n\n    // Careful about changing index ordering for this. Index is stored in URL/JSON etc.\n    public static readonly modulators: DictionaryArray<Modulator> = toNameMap([\n        { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"No Mod Setting\", promptDesc: [ \"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\" ] },\n        { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Song Volume\", promptDesc: [ \"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: EffectType.length,\n            promptName: \"Song Tempo\", promptDesc: [ \"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\" ] },\n        { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: EffectType.length,\n            promptName: \"Song Reverb\", promptDesc: [ \"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\n        { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Go To Next Bar\", promptDesc: [ \"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\" ] },\n        { name: \"note volume\", pianoName: \"Note Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\n            promptName: \"Note Volume\", promptDesc: [ \"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\n        { name: \"pan\", pianoName: \"Pan\", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\n            promptName: \"Instrument Panning\", promptDesc: [ \"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\" ] },\n        { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.reverb,\n            promptName: \"Instrument Reverb\", promptDesc: [ \"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: Config.distortionRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.distortion,\n            promptName: \"Instrument Distortion\", promptDesc: [ \"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\" ] },\n        { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 1\", promptDesc: [ \"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"fm feedback\", pianoName: \"FM Feedback\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\n        { name: \"detune\", pianoName: \"Detune\", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: EffectType.detune,\n            promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\n        { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\n        { name: \"song detune\", pianoName: \"Detune\", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: EffectType.length,\n            promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\n        { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\n        { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\n            promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\n            promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\n            promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\n        { name: \"eq filter\", pianoName: \"EQFlt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filter\", pianoName: \"N.Flt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: Config.bitcrusherQuantizationRange-1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\n            promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: Config.bitcrusherFreqRange-1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\n            promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"echo\", pianoName: \"Echo\", maxRawVol: Config.echoSustainRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo,\n            promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\" ]\n        }, // Disabled via associatedEffect and manually in list build in SongEditor, enable and set back to echo after fixing bugginess!\n        { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: Config.chorusRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chorus,\n            promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"eq filt cut\", pianoName: \"EQFlt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"eq filt peak\", pianoName: \"EQFlt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filt cut\", pianoName: \"N.Flt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filt peak\", pianoName: \"N.Flt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: EffectType.pitchShift,\n            promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\n        { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"mix volume\", pianoName: \"Mix Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\n            promptName: \"Mix Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n        { name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: Config.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"spread\", pianoName: \"Spread\", maxRawVol: Config.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: Config.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"] },\n    ]);\n}\n\nfunction centerWave(wave: Array<number>): Float32Array {\n    let sum: number = 0.0;\n    for (let i: number = 0; i < wave.length; i++) sum += wave[i];\n    const average: number = sum / wave.length;\n    for (let i: number = 0; i < wave.length; i++) wave[i] -= average;\n    performIntegral(wave);\n    // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n    wave.push(0);\n    return new Float32Array(wave);\n}\nfunction centerAndNormalizeWave(wave: Array<number>): Float32Array {\n    let magn: number = 0.0;\n\n    centerWave(wave);\n\n    // Going to length-1 because an extra 0 sample is added on the end as part of centerWave, which shouldn't impact magnitude calculation.\n    for (let i: number = 0; i < wave.length - 1; i++) {\n        magn += Math.abs(wave[i]);\n    }\n    const magnAvg: number = magn / (wave.length - 1);\n\n    for (let i: number = 0; i < wave.length - 1; i++) {\n        wave[i] = wave[i] / magnAvg;\n    }\n\n    return new Float32Array(wave);\n\n}\nexport function performIntegral(wave: { length: number, [index: number]: number }): Float32Array {\n    // Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\n    let cumulative: number = 0.0;\n    let newWave: Float32Array = new Float32Array(wave.length);\n    for (let i: number = 0; i < wave.length; i++) {\n        newWave[i] = cumulative;\n        cumulative += wave[i];\n    }\n\n    return newWave;\n}\nexport function performIntegralOld(wave: { length: number, [index: number]: number }): void {\n\t// Old ver used in harmonics/picked string instruments, manipulates wave in place.\n\tlet cumulative: number = 0.0;\n\tfor (let i: number = 0; i < wave.length; i++) {\n\t\tconst temp = wave[i];\n\t\twave[i] = cumulative;\n\t\tcumulative += temp;\n\t}\n}\n\nexport function getPulseWidthRatio(pulseWidth: number): number {\n    // BeepBox formula for reference\n    //return Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\n\n    return pulseWidth / (Config.pulseWidthRange * 2);\n}\n\n\n// The function arguments will be defined in FFT.ts, but I want\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\n    let wave: Float32Array | null = Config.chipNoises[index].samples;\n    if (wave == null) {\n        wave = new Float32Array(Config.chipNoiseLength + 1);\n        Config.chipNoises[index].samples = wave;\n\n        if (index == 0) {\n            // The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 1 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 1) {\n            // White noise is just random values for each sample.\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.random() * 2.0 - 1.0;\n            }\n        } else if (index == 2) {\n            // The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 2 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 3) {\n            // The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 4) {\n            // \"hollow\" drums, designed in frequency space and then converted via FFT:\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n            inverseRealFourierTransform!(wave, Config.chipNoiseLength);\n            scaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        } else if (index == 5) {\n            // \"Shine\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 6) {\n            // \"Deep\" drums from modbox!\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\n            inverseRealFourierTransform!(wave, Config.chipNoiseLength);\n            scaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        } else if (index == 7) {\n            // \"Cutter\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 15 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 8) {\n            // \"Metallic\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < 32768; i++) {\n                wave[i] = (drumBuffer & 1) / 2.0 - 0.5;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else {\n            throw new Error(\"Unrecognized drum index: \" + index);\n        }\n\n        wave[Config.chipNoiseLength] = wave[0];\n    }\n\n    return wave;\n}\n\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\n    const referenceOctave: number = 11;\n    const referenceIndex: number = 1 << referenceOctave;\n    const lowIndex: number = Math.pow(2, lowOctave) | 0;\n    const highIndex: number = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n    const retroWave: Float32Array = getDrumWave(0, null, null);\n    let combinedAmplitude: number = 0.0;\n    for (let i: number = lowIndex; i < highIndex; i++) {\n\n        let lerped: number = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n        let amplitude: number = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\n\n        combinedAmplitude += amplitude;\n\n        // Add two different sources of psuedo-randomness to the noise\n        // (individually they aren't random enough) but in a deterministic\n        // way so that live spectrum editing doesn't result in audible pops.\n        // Multiply all the sine wave amplitudes by 1 or -1 based on the\n        // LFSR retro wave (effectively random), and also rotate the phase\n        // of each sine wave based on the golden angle to disrupt the symmetry.\n        amplitude *= retroWave[i];\n        const radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\n\n        wave[i] = Math.cos(radians) * amplitude;\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\n    }\n\n    return combinedAmplitude;\n}\n\nfunction generateSineWave(): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\n    }\n    return wave;\n}\n\nfunction generateTriWave(): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);\n    }\n    return wave;\n}\n\nfunction generateTrapezoidWave(drive: number = 2): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));\n    }\n    return wave;\n}\n\nfunction generateSquareWave(phaseWidth: number = 0): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    const centerPoint: number = Config.sineWaveLength / 4;\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)\n            || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;\n    }\n    return wave;\n}\n\nfunction generateSawWave(inverse: boolean = false): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;\n        wave[i] = inverse ? -wave[i] : wave[i];\n    }\n    return wave;\n}\n\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\n    let arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\n    if (arpeggioPattern != null) {\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\n            arpeggioPattern = [0, 0, 1, 1];\n        }\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\n    } else {\n        return arpeggio % pitchCount;\n    }\n}\n\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\n    const dictionary: Dictionary<T> = {};\n    for (let i: number = 0; i < array.length; i++) {\n        const value: any = array[i];\n        value.index = i;\n        dictionary[value.name] = <T>value;\n    }\n    const result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\n    result.dictionary = dictionary;\n    return result;\n}\n\nexport function effectsIncludeTransition(effects: number): boolean {\n    return (effects & (1 << EffectType.transition)) != 0;\n}\nexport function effectsIncludeChord(effects: number): boolean {\n    return (effects & (1 << EffectType.chord)) != 0;\n}\nexport function effectsIncludePitchShift(effects: number): boolean {\n    return (effects & (1 << EffectType.pitchShift)) != 0;\n}\nexport function effectsIncludeDetune(effects: number): boolean {\n    return (effects & (1 << EffectType.detune)) != 0;\n}\nexport function effectsIncludeVibrato(effects: number): boolean {\n    return (effects & (1 << EffectType.vibrato)) != 0;\n}\nexport function effectsIncludeNoteFilter(effects: number): boolean {\n    return (effects & (1 << EffectType.noteFilter)) != 0;\n}\nexport function effectsIncludeDistortion(effects: number): boolean {\n    return (effects & (1 << EffectType.distortion)) != 0;\n}\nexport function effectsIncludeBitcrusher(effects: number): boolean {\n    return (effects & (1 << EffectType.bitcrusher)) != 0;\n}\nexport function effectsIncludePanning(effects: number): boolean {\n    return (effects & (1 << EffectType.panning)) != 0;\n}\nexport function effectsIncludeChorus(effects: number): boolean {\n    return (effects & (1 << EffectType.chorus)) != 0;\n}\nexport function effectsIncludeEcho(effects: number): boolean {\n    return (effects & (1 << EffectType.echo)) != 0;\n}\nexport function effectsIncludeReverb(effects: number): boolean {\n    return (effects & (1 << EffectType.reverb)) != 0;\n}\nexport function rawChipToIntegrated(raw: DictionaryArray<ChipWave>): DictionaryArray<ChipWave> {\n    const newArray: Array<ChipWave> = new Array<ChipWave>(raw.length);\n    const dictionary: Dictionary<ChipWave> = {};\n    for (let i: number = 0; i < newArray.length; i++) {\n        newArray[i] = Object.assign([], raw[i]);\n        const value: any = newArray[i];\n        value.index = i;\n        dictionary[value.name] = <ChipWave>value;\n    }\n    for (let key in dictionary) {\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\n    }\n    const result: DictionaryArray<ChipWave> = <DictionaryArray<ChipWave>><any>newArray;\n    result.dictionary = dictionary;\n    return result;\n}","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\n\nexport interface PresetCategory extends BeepBoxOption {\n    readonly presets: DictionaryArray<Preset>;\n}\n\nexport interface Preset extends BeepBoxOption {\n    readonly isNoise?: boolean;\n    readonly isMod?: boolean;\n    readonly generalMidi?: boolean;\n    readonly midiProgram?: number;\n    readonly midiSubharmonicOctaves?: number;\n    readonly customType?: InstrumentType;\n    readonly settings?: any;\n}\n\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\n\nexport function prettyNumber(value: number): string {\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\n}\n\nexport class EditorConfig {\n    public static readonly version: string = \"1.0\";\n    public static readonly versionDisplayName: string = \"EdoBox \" + EditorConfig.version;\n\n    public static readonly releaseNotesURL: string = \"https://jummbus.bitbucket.io/patch_notes/\" + EditorConfig.version + \".html\";\n\n    public static readonly isOnMac: boolean = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\n    public static readonly ctrlSymbol: string = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\n    public static readonly ctrlName: string = EditorConfig.isOnMac ? \"command\" : \"control\";\n\n    public static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\n        {\n        // The order of this array needs to line up with the order of the InstrumentType declarations in SynthConfig.ts. (changes.ts' random instrument generation relies on this, for one.)\n            name: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"chip wave\", customType: InstrumentType.chip },\n                { name: \"FM (expert)\", customType: InstrumentType.fm },\n                { name: \"basic noise\", customType: InstrumentType.noise },\n                { name: \"spectrum\", customType: InstrumentType.spectrum },\n                { name: \"drumset\", customType: InstrumentType.drumset },\n                { name: \"harmonics\", customType: InstrumentType.harmonics },\n                { name: \"pulse width\", customType: InstrumentType.pwm },\n                { name: \"picked string\", customType: InstrumentType.pickedString },\n                { name: \"supersaw\", customType: InstrumentType.supersaw },\n                { name: \"custom chip\", customType: InstrumentType.customChipWave },\n            ])\n        },\n        {\n            name: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\n                { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n                { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\n                { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\n                { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\n                { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\n                { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\n                { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\n                { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\n                { name: \"supersaw lead\",    midiProgram:  81, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":2}],\"effects\":[\"reverb\"],\"reverb\":67,\"fadeInSeconds\":0,\"fadeOutTicks\":-6,\"pulseWidth\":50,\"dynamism\":100,\"spread\":58,\"shape\":0,\"envelopes\":[]}},\n\t\t\n            ])\n        },\n        {\n            name: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n                { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\n                { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n                { name: \"grand piano 3\",      midiProgram:   0, generalMidi: true, settings: {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":148.65,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1681.79,\"linearGain\":4},{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.1768},{\"type\":\"peak\",\"cutoffHz\":3363.59,\"linearGain\":4},{\"type\":\"peak\",\"cutoffHz\":2378.41,\"linearGain\":0.25}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":4756.83,\"linearGain\":0.3536},{\"type\":\"high-pass\",\"cutoffHz\":125,\"linearGain\":0.0884}],\"reverb\":67,\"fadeInSeconds\":0,\"fadeOutTicks\":48,\"harmonics\":[100,100,86,86,86,71,71,71,0,71,71,71,71,57,57,71,57,14,57,57,57,57,57,57,57,57,29,57],\"unison\":\"piano\",\"stringSustain\":86,\"stringSustainType\":\"acoustic\",\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"note size\",\"index\":0},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1},{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":1}]}},\n\t\t\t\n            ])\n        },\n        {\n            name: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\n                { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\n                { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\n                { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\n                { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\n                { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\n                { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\n                { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\n                { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\n            ])\n        },\n        {\n            name: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\n                { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\n            ])\n        },\n        {\n            name: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\n                { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\n                { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\n                { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\n                { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n                { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\n            ])\n        },\n        {\n            name: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\n                { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n                { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\n                { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n                { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\n            ])\n        },\n        {\n            name: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\n                { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\n                { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\n                { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\n                { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\n            ])\n        },\n        {\n            name: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\n                { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\n                { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n                { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\n                { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\n            ])\n        },\n        {\n            name: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\n                { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\n                { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\n                { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\n                { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\n                { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\n                { name: \"supersaw string\",  midiProgram:  41, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2828.43,\"linearGain\":1.4142},{\"type\":\"low-pass\",\"cutoffHz\":3363.59,\"linearGain\":0.1768}],\"effects\":[\"note filter\",\"reverb\"],\"noteFilter\":[{\"type\":\"high-pass\",\"cutoffHz\":500,\"linearGain\":0.1768}],\"reverb\":33,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":6,\"pulseWidth\":35.35534,\"dynamism\":83,\"spread\":8,\"shape\":50,\"envelopes\":[{\"target\":\"noteFilterFreq\",\"envelope\":\"twang 1\",\"index\":0}]}},\n                { name: \"supersaw string 2\", midiProgram: 41, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":4756.83,\"linearGain\":2}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"envelopeSpeed\":12,\"discreteEnvelope\":false,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":2378.41,\"linearGain\":0.5},{\"type\":\"high-pass\",\"cutoffHz\":594.6,\"linearGain\":0.25},{\"type\":\"peak\",\"cutoffHz\":2000,\"linearGain\":2.8284},{\"type\":\"peak\",\"cutoffHz\":4756.83,\"linearGain\":2}],\"effects\":[\"note filter\",\"chorus\",\"reverb\"],\"noteFilterType\":false,\"noteSimpleCut\":10,\"noteSimplePeak\":0,\"noteFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1}],\"noteSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":1}],\"chorus\":57,\"reverb\":42,\"fadeInSeconds\":0.0575,\"fadeOutTicks\":-6,\"pulseWidth\":50,\"dynamism\":67,\"spread\":58,\"shape\":0,\"envelopes\":[{\"target\":\"noteFilterAllFreqs\",\"envelope\":\"punch\"},{\"target\":\"pulseWidth\",\"envelope\":\"flare 2\"}]}},\n            ])\n        },\n        {\n            name: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\n                { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\n                { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\n                { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\n            ])\n        },\n        {\n            name: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\n                { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\n                { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\n                { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\n                { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\n            ])\n        },\n        {\n            name: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\n                { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\n                { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n                { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            ])\n        },\n        {\n            name: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\n                { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\n                { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\n                { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n                { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\n                { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\n                { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n                { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n            ])\n        },\n        {\n            name: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\n                { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\n                { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\n                { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\n                { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\n                { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"supersaw pad\",     midiProgram:  93, settings: {\"type\":\"supersaw\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":8000,\"linearGain\":0.1768}],\"effects\":[\"reverb\"],\"reverb\":100,\"fadeInSeconds\":0.0263,\"fadeOutTicks\":24,\"pulseWidth\":50,\"dynamism\":100,\"spread\":58,\"shape\":0,\"envelopes\":[]}},\n            ])\n        },\n        {\n            name: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\n                { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\n                { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n                { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n                { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\n                { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n                { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\n                { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\n                { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n        {\n            name: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n                { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\n                { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\n                { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\n                { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\n                { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n                { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\n                { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\n                { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\n                { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\n                { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\n                { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n                { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\n                { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\n                { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n    ]);\n\n    public static valueToPreset(presetValue: number): Preset | null {\n        const categoryIndex: number = presetValue >> 6;\n        const presetIndex: number = presetValue & 0x3F;\n        return EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\n    }\n\n    public static midiProgramToPresetValue(program: number): number | null {\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset: Preset = category.presets[presetIndex];\n                if (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    public static nameToPresetValue(presetName: string): number | null {\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset: Preset = category.presets[presetIndex];\n                if (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport const HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport const SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n}\nfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\tif (/-/.test(name)) {\n\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { BeepBoxOption, DictionaryArray, toNameMap, Config } from \"../synth/SynthConfig\";\nimport { Song } from \"../synth/synth\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\n\nexport interface ChannelColors extends BeepBoxOption {\n    readonly secondaryChannel: string;\n    readonly primaryChannel: string;\n    readonly secondaryNote: string;\n    readonly primaryNote: string;\n}\n\nexport class ColorConfig {\n    public static colorLookup: Map<number, ChannelColors> = new Map<number, ChannelColors>();\n\tpublic static usesColorFormula: boolean = false;\n    public static readonly themes: { [name: string]: string } = {\n        \"dark classic\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n          --mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t    #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n        \"dark competition\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: black;\n\t\t\t\t\t--editor-background: black;\n\t\t\t\t\t--hover-preview: #ddd;\n\t\t\t\t\t--playhead: #ddd;\n\t\t\t\t\t--primary-text: #ddd;\n\t\t\t\t\t--secondary-text: #8e695b;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(169,0,255,0.99);\n\t\t\t\t\t--box-selection-fill: rgba(221,221,221,0.2);\n\t\t\t\t\t--loop-accent: #bf15ba;\n\t\t\t\t\t--link-accent: #f888ff;\n\t\t\t\t\t--ui-widget-background: #443a3a;\n\t\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t\t--pitch-background: #353333;\n\t\t\t\t\t--tonic: #884a44;\n\t\t\t\t\t--fifth-note: #415498;\n\t\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t\t--black-piano-key: #444;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch1-secondary-channel: #0099a1;\n\t\t\t\t\t--pitch1-primary-channel:   #25f3ff;\n\t\t\t\t\t--pitch1-secondary-note:    #00bdc7;\n\t\t\t\t\t--pitch1-primary-note:      #92f9ff;\n\t\t\t\t\t--pitch2-secondary-channel: #a1a100;\n\t\t\t\t\t--pitch2-primary-channel:   #ffff25;\n\t\t\t\t\t--pitch2-secondary-note:    #c7c700;\n\t\t\t\t\t--pitch2-primary-note:      #ffff92;\n\t\t\t\t\t--pitch3-secondary-channel: #c75000;\n\t\t\t\t\t--pitch3-primary-channel:   #ff9752;\n\t\t\t\t\t--pitch3-secondary-note:    #ff771c;\n\t\t\t\t\t--pitch3-primary-note:      #ffcdab;\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\n\t\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t\t--pitch7-secondary-note:\t  #AAC700;\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#E6FF92;\n\t\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#83FFD9;\n\t\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\n\t\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\n\t\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t\t--noise5-primary-note:      #C5E2B2;\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\n\t\t\t}\n\t\t`,\n        \"light classic\": `\n\t\t\t:root {\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t--page-margin: #685d88;\n\t\t\t\t--editor-background: white;\n\t\t\t\t--hover-preview: black;\n\t\t\t\t--playhead: rgba(0,0,0,0.5);\n\t\t\t\t--primary-text: black;\n\t\t\t\t--secondary-text: #777;\n\t\t\t\t--inverted-text: white;\n\t\t\t\t--text-selection: rgba(200,170,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\n\t\t\t\t--loop-accent: #98f;\n\t\t\t\t--link-accent: #74f;\n\t\t\t\t--ui-widget-background: #ececec;\n\t\t\t\t--ui-widget-focus: #eee;\n\t\t\t\t--pitch-background: #ececec;\n\t\t\t\t--tonic: #f0d6b6;\n\t\t\t\t--fifth-note: #bbddf0;\n\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t--black-piano-key: #666;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #ececec;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #fdfdfd;\n\t\t\t\t\t--track-editor-bg-noise: #ececec;\n\t\t\t\t\t--track-editor-bg-noise-dim: #fdfdfd;\n\t\t\t\t\t--track-editor-bg-mod: #dbecfd;\n\t\t\t\t\t--track-editor-bg-mod-dim: #ecfdff;\n\t\t\t\t\t--multiplicative-mod-slider: #789;\n\t\t\t\t\t--overwriting-mod-slider: #987;\n\t\t\t\t\t--indicator-primary: #98f;\n\t\t\t\t\t--indicator-secondary: #cde;\n\t\t\t\t\t--select2-opt-group: #cecece;\n\t\t\t\t\t--input-box-outline: #ddd;\n\t\t\t\t\t--mute-button-normal: #c0b47f;\n\t\t\t\t\t--mute-button-mod: #bd7fc0;\n\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\n\t\t\t\t--pitch1-primary-channel:   #00A0BD;\n\t\t\t\t--pitch1-secondary-note:    #34C2DC;\n\t\t\t\t--pitch1-primary-note:      #00758A;\n\t\t\t\t--pitch2-secondary-channel: #E3C941;\n\t\t\t\t--pitch2-primary-channel:   #B49700;\n\t\t\t\t--pitch2-secondary-note:    #D1B628;\n\t\t\t\t--pitch2-primary-note:      #836E00;\n\t\t\t\t--pitch3-secondary-channel: #FF9D61;\n\t\t\t\t--pitch3-primary-channel:   #E14E00;\n\t\t\t\t--pitch3-secondary-note:    #F67D3C;\n\t\t\t\t--pitch3-primary-note:      #B64000;\n\t\t\t\t--pitch4-secondary-channel: #4BE24B;\n\t\t\t\t--pitch4-primary-channel:   #00A800;\n\t\t\t\t--pitch4-secondary-note:    #2DC82D;\n\t\t\t\t--pitch4-primary-note:      #008000;\n\t\t\t\t--pitch5-secondary-channel: #FF90FF;\n\t\t\t\t--pitch5-primary-channel:   #E12EDF;\n\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\n\t\t\t\t--pitch5-primary-note:      #A600A5;\n\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\n\t\t\t\t--pitch6-primary-channel:   #6969FD;\n\t\t\t\t--pitch6-secondary-note:    #9393FE;\n\t\t\t\t--pitch6-primary-note:      #4A4AD7;\n\t\t\t\t--pitch7-secondary-channel: #C2D848;\n\t\t\t\t--pitch7-primary-channel:   #8EA800;\n\t\t\t\t--pitch7-secondary-note:    #B0C82D;\n\t\t\t\t--pitch7-primary-note:      #6C8000;\n\t\t\t\t--pitch8-secondary-channel: #FF90A4;\n\t\t\t\t--pitch8-primary-channel:   #E12E4D;\n\t\t\t\t--pitch8-secondary-note:    #EC6E85;\n\t\t\t\t--pitch8-primary-note:      #A6001D;\n\t\t\t\t--pitch9-secondary-channel: #41E3B5;\n\t\t\t\t--pitch9-primary-channel:   #00B481;\n\t\t\t\t--pitch9-secondary-note:    #28D1A1;\n\t\t\t\t--pitch9-primary-note:      #00835E;\n\t\t\t\t--pitch10-secondary-channel:#CA77FF;\n\t\t\t\t--pitch10-primary-channel:  #9609FF;\n\t\t\t\t--pitch10-secondary-note:   #B54FFF;\n\t\t\t\t--pitch10-primary-note:     #8400E3;\n\t\t\t\t--noise1-secondary-channel: #C1C1C1;\n\t\t\t\t--noise1-primary-channel:   #898989;\n\t\t\t\t--noise1-secondary-note:    #ADADAD;\n\t\t\t\t--noise1-primary-note:      #6C6C6C;\n\t\t\t\t--noise2-secondary-channel: #E8BB8C;\n\t\t\t\t--noise2-primary-channel:   #BD7D3A;\n\t\t\t\t--noise2-secondary-note:    #D1A374;\n\t\t\t\t--noise2-primary-note:      #836342;\n\t\t\t\t--noise3-secondary-channel: #9BC4EB;\n\t\t\t\t--noise3-primary-channel:   #4481BE;\n\t\t\t\t--noise3-secondary-note:    #7CA7D3;\n\t\t\t\t--noise3-primary-note:      #476685;\n\t\t\t\t--noise4-secondary-channel: #C5A5E0;\n\t\t\t\t--noise4-primary-channel:   #8553AE;\n\t\t\t\t--noise4-secondary-note:    #B290CC;\n\t\t\t\t--noise4-primary-note:      #684F7D;\n\t\t\t\t--noise5-secondary-channel: #B8CE93;\n\t\t\t\t--noise5-primary-channel:   #87A74F;\n\t\t\t\t--noise5-secondary-note:    #ABC183;\n\t\t\t\t--noise5-primary-note:      #68784C;\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77dd55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #2ad84a;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ba124a;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:        #7a1caa;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #a86810;\n\t\t\t\t\t--mod-label-primary:        #dddddd;\n\t\t\t\t\t--mod-label-secondary-text: #777;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #666;\n\t\t\t\t\t--disabled-note-secondary:  #aaa;\n\t\t\t}\n\t\t\t\n\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t}\n\n\t\t\t\t.select2-selection__rendered {\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t\t}\n\t\t`,\n        \"jummbox classic\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #040410;\n\t\t\t\t\t--editor-background: #040410;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t\t\t--primary-text: white;\n\t\t\t\t\t--secondary-text: #84859a;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t\t--box-selection-fill: #044b94;\n\t\t\t\t\t--loop-accent: #74f;\n\t\t\t\t\t--link-accent: #98f;\n\t\t\t\t\t--ui-widget-background: #393e4f;\n\t\t\t\t\t--ui-widget-focus: #6d6886;\n\t\t\t\t\t--pitch-background: #393e4f;\n\t\t\t\t\t--tonic: #725491;\n\t\t\t\t\t--fifth-note: #54547a;\n\t\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t\t--black-piano-key: #666;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t\t\t--track-editor-bg-mod: #283560;\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t\t\t--indicator-primary: #9c64f7;\n\t\t\t\t\t--indicator-secondary: #393e4f;\n\t\t\t\t\t--select2-opt-group: #5d576f;\n\t\t\t\t\t--input-box-outline: #222;\n\t\t\t\t\t--mute-button-normal: #dda85d;\n\t\t\t\t\t--mute-button-mod: #886eae;\n\t\t\t\t\t--mod-label-primary: #282840;\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\n\t\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.5;\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.5;\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.5;\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.5;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 0;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 0;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 0;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 192;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 192;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 192;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #91879f;\n\t\t\t\t\t--disabled-note-secondary:  #6a677a;\n\t\t\t\t}\n\t\t\t`,\n        \"forest\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #010c03;\n\t\t\t\t\t--editor-background: #010c03;\n\t\t\t\t\t--hover-preview: #efe;\n\t\t\t\t\t--playhead: rgba(232, 255, 232, 0.9);\n\t\t\t\t\t--primary-text: #efe;\n\t\t\t\t\t--secondary-text: #70A070;\n\t\t\t\t\t--inverted-text: #280228;\n\t\t\t\t\t--text-selection: rgba(255,68,199,0.99);\n\t\t\t\t\t--box-selection-fill: #267aa3;\n\t\t\t\t\t--loop-accent: #ffe845;\n\t\t\t\t\t--link-accent: #9f8;\n\t\t\t\t\t--ui-widget-background: #203829;\n\t\t\t\t\t--ui-widget-focus: #487860;\n\t\t\t\t\t--pitch-background: #203829;\n\t\t\t\t\t--tonic: #2b8d20;\n\t\t\t\t\t--fifth-note: #385840;\n\t\t\t\t\t--white-piano-key: #bda;\n\t\t\t\t\t--black-piano-key: #573;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #254820;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #102819;\n\t\t\t\t\t--track-editor-bg-noise: #304050;\n\t\t\t\t\t--track-editor-bg-noise-dim: #102030;\n\t\t\t\t\t--track-editor-bg-mod: #506030;\n\t\t\t\t\t--track-editor-bg-mod-dim: #2a300a;\n\t\t\t\t\t--multiplicative-mod-slider: #205c8f;\n\t\t\t\t\t--overwriting-mod-slider: #20ac6f;\n\t\t\t\t\t--indicator-primary: #dcd866;\n\t\t\t\t\t--indicator-secondary: #203829;\n\t\t\t\t\t--select2-opt-group: #1a6f5a;\n\t\t\t\t\t--input-box-outline: #242;\n\t\t\t\t\t--mute-button-normal: #49e980;\n\t\t\t\t\t--mute-button-mod: #c2e502;\n\t\t\t\t\t--mod-label-primary: #133613;\n\t\t\t\t\t--mod-label-secondary-text: rgb(27, 126, 40);\n\t\t\t\t\t--mod-label-primary-text: #efe;\n\t\t\t\t\t--pitch-secondary-channel-hue: 120;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\n\t\t\t\t\t--pitch-secondary-channel-sat: 59;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 50;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.04;\n\t\t\t\t\t--pitch-primary-channel-hue: 120;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\n\t\t\t\t\t--pitch-primary-channel-sat: 86;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 70;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.04;\n\t\t\t\t\t--pitch-secondary-note-hue: 120;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\n\t\t\t\t\t--pitch-secondary-note-sat: 85;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 30;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.04;\n\t\t\t\t\t--pitch-primary-note-hue: 120;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\n\t\t\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 80;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 200;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 1.1;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 22;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 200;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 1.1;\n\t\t\t\t\t--noise-primary-channel-sat: 48;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 65;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 200;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 1.1;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 33;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 200;\n\t\t\t\t\t--noise-primary-note-hue-scale: 1.1;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 64;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 40;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.8;\n\t\t\t\t\t--mod-secondary-channel-sat: 44;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 40;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.8;\n\t\t\t\t\t--mod-primary-channel-sat: 60;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 40;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.8;\n\t\t\t\t\t--mod-secondary-note-sat: 62;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 55;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 40;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.8;\n\t\t\t\t\t--mod-primary-note-sat: 66;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #536e5c;\n\t\t\t\t\t--disabled-note-secondary:  #395440;\n\t\t\t\t}\n\t\t\t`,\n        \"canyon\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #0a0000;\n\t\t\t\t\t--editor-background: #0a0000;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: rgba(247, 172, 196, 0.9);\n\t\t\t\t\t--primary-text: #f5d6bf;\n\t\t\t\t\t--secondary-text: #934050;\n\t\t\t\t\t--inverted-text: #290505;\n\t\t\t\t\t--text-selection: rgba(255, 208, 68, 0.99);\n\t\t\t\t\t--box-selection-fill: #94044870;\n\t\t\t\t\t--loop-accent: #ff1e1e;\n\t\t\t\t\t--link-accent: #da7b76;\n\t\t\t\t\t--ui-widget-background: #533137;\n\t\t\t\t\t--ui-widget-focus: #743e4b;\n\t\t\t\t\t--pitch-background: #4f3939;\n\t\t\t\t\t--tonic: #9e4145;\n\t\t\t\t\t--fifth-note: #5b3e6b;\n\t\t\t\t\t--white-piano-key: #d89898;\n\t\t\t\t\t--black-piano-key: #572b29;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #5e3a41;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #281d1c;\n\t\t\t\t\t--track-editor-bg-noise: #3a3551;\n\t\t\t\t\t--track-editor-bg-noise-dim: #272732;\n\t\t\t\t\t--track-editor-bg-mod: #552045;\n\t\t\t\t\t--track-editor-bg-mod-dim: #3e1442;\n\t\t\t\t\t--multiplicative-mod-slider: #9f6095;\n\t\t\t\t\t--overwriting-mod-slider: #b55050;\n\t\t\t\t\t--indicator-primary: #f2f764;\n\t\t\t\t\t--indicator-secondary: #4f3939;\n\t\t\t\t\t--select2-opt-group: #673030;\n\t\t\t\t\t--input-box-outline: #443131;\n\t\t\t\t\t--mute-button-normal: #d81833;\n\t\t\t\t\t--mute-button-mod: #9e2691;\n\t\t\t\t\t--mod-label-primary: #5f2b39;\n\t\t\t\t\t--mod-label-secondary-text: rgb(158, 66, 122);\n\t\t\t\t\t--mod-label-primary-text: #e6caed;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 11.8;\n\t\t\t\t\t--pitch-secondary-channel-sat: 73.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 11.8;\n\t\t\t\t\t--pitch-primary-channel-sat: 90;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 11.8;\n\t\t\t\t\t--pitch-secondary-note-sat: 83.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 35;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 11.8;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 60;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 60;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 60;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 60;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 222;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 222;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 222;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 54;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 222;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 75;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #515164;\n\t\t\t\t\t--disabled-note-secondary:  #2a2a3a;\n\t\t\t\t}\n\t\t\t`,\n        \"midnight\": `\n\t\t:root {\n\t\t\t--page-margin: #000;\n\t\t\t--editor-background: #000;\n\t\t\t--hover-preview: #757575;\n\t\t\t--playhead: #fff;\n\t\t\t--primary-text: #fff;\n\t\t\t--secondary-text: #acacac;\n\t\t\t--inverted-text: #290505;\n\t\t\t--text-selection: rgba(155, 155, 155, 0.99);\n\t\t\t--box-selection-fill: #79797970;\n\t\t\t--loop-accent: #646464;\n\t\t\t--link-accent: #707070;\n\t\t\t--ui-widget-background: #353535;\n\t\t\t--ui-widget-focus: #464646;\n\t\t\t--pitch-background: #222121;\n\t\t\t--tonic: #555955;\n\t\t\t--fifth-note: #1a1818;\n\t\t\t--white-piano-key: #a89e9e;\n\t\t\t--black-piano-key: #2d2424;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #373737;\n\t\t\t--track-editor-bg-pitch-dim: #131313;\n\t\t\t--track-editor-bg-noise: #484848;\n\t\t\t--track-editor-bg-noise-dim: #131313;\n\t\t\t--track-editor-bg-mod: #373737;\n\t\t\t--track-editor-bg-mod-dim: #131313;\n\t\t\t--multiplicative-mod-slider: #555;\n\t\t\t--overwriting-mod-slider: #464545;\n\t\t\t--indicator-primary: #e0e0e0;\n\t\t\t--indicator-secondary: #404040;\n\t\t\t--select2-opt-group: #3c3b3b;\n\t\t\t--input-box-outline: #757575;\n\t\t\t--mute-button-normal: #8e8d8d;\n\t\t\t--mute-button-mod: #ddd;\n\t\t\t--mod-label-primary: #262526;\n\t\t\t--mod-label-secondary-text: rgb(227, 222, 225);\n\t\t\t--mod-label-primary-text: #b9b9b9;\n\t\t\t--pitch-secondary-channel-hue: 240;\n\t\t\t--pitch-secondary-channel-hue-scale: 228;\n\t\t\t--pitch-secondary-channel-sat: 73.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 25;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 240;\n\t\t\t--pitch-primary-channel-hue-scale: 228;\n\t\t\t--pitch-primary-channel-sat: 80;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 60.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 240;\n\t\t\t--pitch-secondary-note-hue-scale: 228;\n\t\t\t--pitch-secondary-note-sat: 73.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 32;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 240;\n\t\t\t--pitch-primary-note-hue-scale: 228;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 80.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 160;\n\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 160;\n\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 160;\n\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 160;\n\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 62;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 30;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 62;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 62;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 34;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 62;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 96;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 75;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary:    #66a;\n\t\t\t--disabled-note-secondary:  #447;\n\t\t}\n\t`,\n        \"jummbox light\": `\n\t\t\t\t:root {\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t\t--page-margin: #fefdff;\n\t\t\t\t\t--editor-background: #fefdff;\n\t\t\t\t\t--hover-preview: #302880;\n\t\t\t\t\t--playhead: rgba(62, 32, 120, 0.9);\n\t\t\t\t\t--primary-text: #401890;\n\t\t\t\t\t--secondary-text: #8769af;\n\t\t\t\t\t--inverted-text: #fefdff;\n\t\t\t\t\t--text-selection: rgba(255,160,235,0.99);\n\t\t\t\t\t--box-selection-fill: rgba(30,62,220,0.5);\n\t\t\t\t\t--loop-accent: #4c35d4;\n\t\t\t\t\t--link-accent: #7af;\n\t\t\t\t\t--ui-widget-background: #bf9cec;\n\t\t\t\t\t--ui-widget-focus: #e9c4ff;\n\t\t\t\t\t--pitch-background: #e2d9f9;\n\t\t\t\t\t--tonic: #c288cc;\n\t\t\t\t\t--fifth-note: #d8c9fd;\n\t\t\t\t\t--white-piano-key: #e2e2ff;\n\t\t\t\t\t--black-piano-key: #66667a;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #d9e5ec;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #eaeef5;\n\t\t\t\t\t--track-editor-bg-noise: #ffc3ae;\n\t\t\t\t\t--track-editor-bg-noise-dim: #ffe0cf;\n\t\t\t\t\t--track-editor-bg-mod: #c9accc;\n\t\t\t\t\t--track-editor-bg-mod-dim: #ebe3ef;\n\t\t\t\t\t--multiplicative-mod-slider: #807caf;\n\t\t\t\t\t--overwriting-mod-slider: #909cdf;\n\t\t\t\t\t--indicator-primary: #ae38ff;\n\t\t\t\t\t--indicator-secondary: #bbd4ec;\n\t\t\t\t\t--select2-opt-group: #c1b7f1;\n\t\t\t\t\t--input-box-outline: #bbb;\n\t\t\t\t\t--mute-button-normal: #e9b752;\n\t\t\t\t\t--mute-button-mod: #9558ee;\n\t\t\t\t\t--mod-label-primary: #ececff;\n\t\t\t\t\t--mod-label-secondary-text: rgb(197, 145, 247);\n\t\t\t\t\t--mod-label-primary-text: #302880;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\n\t\t\t\t\t--pitch-secondary-channel-sat: 53.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: -0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 72;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: -0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\n\t\t\t\t\t--pitch-primary-channel-sat: 97;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: -0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 45.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: -0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: -0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 95;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: -0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 43.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: -0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 220;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 62;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: -0.1;\n\t\t\t\t\t--noise-primary-channel-hue: 220;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 53;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 53.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: -0.1;\n\t\t\t\t\t--noise-secondary-note-hue: 220;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 58.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 85;\n\t\t\t\t\t--noise-secondary-note-lum-scale: -1;\n\t\t\t\t\t--noise-primary-note-hue: 220;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 56.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 54;\n\t\t\t\t\t--noise-primary-note-lum-scale: -1;\n\t\t\t\t\t--mod-secondary-channel-hue: 90;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 60;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 90;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 100;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 65;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 90;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 95;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 90;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 55;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #868;\n\t\t\t\t\t--disabled-note-secondary:  #767;\n\t\t\t\t}\n\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t\t}\n\n\t\t\t\t.select2-selection__rendered {\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\"beachcombing\": `\n\t\t\t:root {\n\t\t\t--page-margin: #010121;\n\t\t\t--editor-background: #020222;\n\t\t\t--hover-preview: #f3ffff;\n\t\t\t--playhead: #fff;\n\t\t\t--primary-text: #c1f1ff;\n\t\t\t--secondary-text: #546775;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t--box-selection-fill: #3e0028;\n\t\t\t--loop-accent: #5a00ff;\n\t\t\t--link-accent: #ff00c8fc;\n\t\t\t--ui-widget-background: #1f2b52;\n\t\t\t--ui-widget-focus: #384e91;\n\t\t\t--pitch-background: #2c3155;\n\t\t\t--tonic: #a32f6e;\n\t\t\t--fifth-note: #0044a0;\n\t\t\t--white-piano-key: #fff;\n\t\t\t--black-piano-key: #202d42;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #34406c;\n\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t--track-editor-bg-noise: #562e3b;\n\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t--track-editor-bg-mod: #372e66;\n\t\t\t--track-editor-bg-mod-dim: #2a1640;\n\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t--indicator-primary: #ff67c2;\n\t\t\t--indicator-secondary: #393e4f;\n\t\t\t--select2-opt-group: #5d576f;\n\t\t\t--input-box-outline: #222;\n\t\t\t--mute-button-normal: #7ce1ff;\n\t\t\t--mute-button-mod: #db519d;\n\t\t\t--pitch1-secondary-channel: #329b70;\n\t\t\t--pitch1-primary-channel: #53ffb8;\n\t\t\t--pitch1-secondary-note: #4cb98c;\n\t\t\t--pitch1-primary-note: #98ffd4;\n\t\t\t--pitch2-secondary-channel: #8e8632;\n\t\t\t--pitch2-primary-channel: #fff36a;\n\t\t\t--pitch2-secondary-note: #afaf22;\n\t\t\t--pitch2-primary-note: #f9f93f;\n\t\t\t--pitch3-secondary-channel: #018e8e;\n\t\t\t--pitch3-primary-channel: #00ffff;\n\t\t\t--pitch3-secondary-note: #24b7b7;\n\t\t\t--pitch3-primary-note: #a7ffff;\n\t\t\t--pitch4-secondary-channel: #6c003d;\n\t\t\t--pitch4-primary-channel: #ff0090;\n\t\t\t--pitch4-secondary-note: #a73c78;\n\t\t\t--pitch4-primary-note: #ff98d2;\n\t\t\t--pitch5-secondary-channel: #0e8153;\n\t\t\t--pitch5-primary-channel: #59ffbd;\n\t\t\t--pitch5-secondary-note: #489979;\n\t\t\t--pitch5-primary-note: #b0ffe0;\n\t\t\t--pitch6-secondary-channel: #185aab;\n\t\t\t--pitch6-primary-channel: #4e7ce5;\n\t\t\t--pitch6-secondary-note: #3e99d9;\n\t\t\t--pitch6-primary-note: #b3e3ff;\n\t\t\t--pitch7-secondary-channel: #4f007d;\n\t\t\t--pitch7-primary-channel: #a200ff;\n\t\t\t--pitch7-secondary-note: #9741c9;\n\t\t\t--pitch7-primary-note: #d386ff;\n\t\t\t--pitch8-secondary-channel: #101c8d;\n\t\t\t--pitch8-primary-channel: #1c5df1;\n\t\t\t--pitch8-secondary-note: #FF4E63;\n\t\t\t--pitch8-primary-note: #FFB2BB;\n\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t--pitch9-primary-channel: #50FFC9;\n\t\t\t--pitch9-secondary-note: #00C78A;\n\t\t\t--pitch9-primary-note: #83FFD9;\n\t\t\t--pitch10-secondary-channel: #A11FFF;\n\t\t\t--pitch10-primary-channel: #CE8BFF;\n\t\t\t--pitch10-secondary-note: #B757FF;\n\t\t\t--pitch10-primary-note: #DFACFF;\n\t\t\t--noise1-secondary-channel: #635070;\n\t\t\t--noise1-primary-channel: #9071db;\n\t\t\t--noise1-secondary-note: #915dc1;\n\t\t\t--noise1-primary-note: #c5a5ff;\n\t\t\t--noise2-secondary-channel: #993367;\n\t\t\t--noise2-primary-channel: #dd777c;\n\t\t\t--noise2-secondary-note: #cc6695;\n\t\t\t--noise2-primary-note: #f0bbd1;\n\t\t\t--noise3-secondary-channel: #4a8c8f;\n\t\t\t--noise3-primary-channel: #77c5dd;\n\t\t\t--noise3-secondary-note: #6fb4cf;\n\t\t\t--noise3-primary-note: #bbf2ff;\n\t\t\t--noise4-secondary-channel: #8e3e7d;\n\t\t\t--noise4-primary-channel: #c682d2;\n\t\t\t--noise4-secondary-note: #b871c1;\n\t\t\t--noise4-primary-note: #ffb8f0;\n\t\t\t--noise5-secondary-channel: #785e37;\n\t\t\t--noise5-primary-channel: #bb9d77;\n\t\t\t--noise5-secondary-note: #aa8c66;\n\t\t\t--noise5-primary-note: #e2d1b2;\n\t\t\t--mod1-secondary-channel: #4e8397;\n\t\t\t--mod1-primary-channel: #92e6f3;\n\t\t\t--mod1-secondary-note: #76b9d9;\n\t\t\t--mod1-primary-note: #cde3ff;\n\t\t\t--mod2-secondary-channel: #ad5774;\n\t\t\t--mod2-primary-channel: #eba4ae;\n\t\t\t--mod2-secondary-note: #c9719b;\n\t\t\t--mod2-primary-note: #fdcee7;\n\t\t\t--mod3-secondary-channel: #6f579f;\n\t\t\t--mod3-primary-channel: #b192f7;\n\t\t\t--mod3-secondary-note: #a778e1;\n\t\t\t--mod3-primary-note: #f8ddff;\n\t\t\t--mod4-secondary-channel: #a88a36;\n\t\t\t--mod4-primary-channel: #bec825;\n\t\t\t--mod4-secondary-note: #aecb57;\n\t\t\t--mod4-primary-note: #dee9bd;\n\t\t\t--mod-label-primary: #2c2c56;\n\t\t\t--mod-label-secondary-text: rgb(71,69,147);\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #91879f;\n\t\t\t--disabled-note-secondary: #6a677a;\n\n\n\t\t\t}\n\t\t`,\n\n\t\t\"roe\": `\n\t\t\t:root {\n\t\t\t--page-margin: #050000;\n\t\t\t--editor-background: #050000;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: #b8cee0;\n\t\t\t--secondary-text: #cb3434;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(255 68 68 / 99%);\n\t\t\t--box-selection-fill: rgb(255 0 0 / 30%);\n\t\t\t--loop-accent: #7744FF;\n\t\t\t--link-accent: #FF2A2A;\n\t\t\t--ui-widget-background: #1a2642;\n\t\t\t--ui-widget-focus: #2c3f6d;\n\t\t\t--pitch-background: #15111a;\n\t\t\t--tonic: #1b3041;\n\t\t\t--fifth-note: #381818;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #302938;\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\n\t\t\t--track-editor-bg-noise: #261f42;\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\n\t\t\t--track-editor-bg-mod: #183049;\n\t\t\t--track-editor-bg-mod-dim: #102132;\n\t\t\t--multiplicative-mod-slider: #344a7f;\n\t\t\t--overwriting-mod-slider: #344a7f;\n\t\t\t--indicator-primary: #FF2A2A;\n\t\t\t--indicator-secondary: #800000;\n\t\t\t--select2-opt-group: #141e34;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #299eff;\n\t\t\t--mute-button-mod: #165a93;\n\t\t\t--pitch1-secondary-channel: #273c90;\n\t\t\t--pitch1-primary-channel: #476BFF;\n\t\t\t--pitch1-secondary-note: #273c90;\n\t\t\t--pitch1-primary-note: #476BFF;\n\t\t\t--pitch2-secondary-channel: #3a3898;\n\t\t\t--pitch2-primary-channel: #625FFB;\n\t\t\t--pitch2-secondary-note: #3a3898;\n\t\t\t--pitch2-primary-note: #625FFB;\n\t\t\t--pitch3-secondary-channel: #542780;\n\t\t\t--pitch3-primary-channel: #9C49EC;\n\t\t\t--pitch3-secondary-note: #542780;\n\t\t\t--pitch3-primary-note: #9C49EC;\n\t\t\t--pitch4-secondary-channel: #84225d;\n\t\t\t--pitch4-primary-channel: #fd3fb1;\n\t\t\t--pitch4-secondary-note: #84225d;\n\t\t\t--pitch4-primary-note: #fd3fb1;\n\t\t\t--pitch5-secondary-channel: #8d2323;\n\t\t\t--pitch5-primary-channel: #ff3f3f;\n\t\t\t--pitch5-secondary-note: #8d2323;\n\t\t\t--pitch5-primary-note: #ff3f3f;\n\t\t\t--pitch6-secondary-channel: #84225d;\n\t\t\t--pitch6-primary-channel: #fd3fb1;\n\t\t\t--pitch6-secondary-note: #84225d;\n\t\t\t--pitch6-primary-note: #fd3fb1;\n\t\t\t--pitch7-secondary-channel: #542780;\n\t\t\t--pitch7-primary-channel: #9C49EC;\n\t\t\t--pitch7-secondary-note: #542780;\n\t\t\t--pitch7-primary-note: #9C49EC;\n\t\t\t--pitch8-secondary-channel: #3a3898;\n\t\t\t--pitch8-primary-channel: #625FFB;\n\t\t\t--pitch8-secondary-note: #3a3898;\n\t\t\t--pitch8-primary-note: #625FFB;\n\t\t\t--pitch9-secondary-channel: #273c90;\n\t\t\t--pitch9-primary-channel: #476BFF;\n\t\t\t--pitch9-secondary-note: #273c90;\n\t\t\t--pitch9-primary-note: #476BFF;\n\t\t\t--pitch10-secondary-channel: #165a93;\n\t\t\t--pitch10-primary-channel: #299EFF;\n\t\t\t--pitch10-secondary-note: #165a93;\n\t\t\t--pitch10-primary-note: #299EFF;\n\t\t\t--noise1-secondary-channel: #4281FF;\n\t\t\t--noise1-primary-channel: #96b9ff;\n\t\t\t--noise1-secondary-note: #4281FF;\n\t\t\t--noise1-primary-note: #96b9ff;\n\t\t\t--noise2-secondary-channel: #7347FF;\n\t\t\t--noise2-primary-channel: #c3b0ff;\n\t\t\t--noise2-secondary-note: #7347FF;\n\t\t\t--noise2-primary-note: #c3b0ff;\n\t\t\t--noise3-secondary-channel: #9F3CBF;\n\t\t\t--noise3-primary-channel: #e29cf9;\n\t\t\t--noise3-secondary-note: #9F3CBF;\n\t\t\t--noise3-primary-note: #e29cf9;\n\t\t\t--noise4-secondary-channel: #D3326F;\n\t\t\t--noise4-primary-channel: #fb9bbf;\n\t\t\t--noise4-secondary-note: #D3326F;\n\t\t\t--noise4-primary-note: #fb9bbf;\n\t\t\t--noise5-secondary-channel: #FF2A2A;\n\t\t\t--noise5-primary-channel: #ffa2a2;\n\t\t\t--noise5-secondary-note: #FF2A2A;\n\t\t\t--noise5-primary-note: #ffa2a2;\n\t\t\t--mod1-secondary-channel: #47587a;\n\t\t\t--mod1-primary-channel: #96b9ff;\n\t\t\t--mod1-secondary-note: #47587a;\n\t\t\t--mod1-primary-note: #96b9ff;\n\t\t\t--mod2-secondary-channel: #716791;\n\t\t\t--mod2-primary-channel: #c3b0ff;\n\t\t\t--mod2-secondary-note: #716791;\n\t\t\t--mod2-primary-note: #c3b0ff;\n\t\t\t--mod3-secondary-channel: #6f4c7b;\n\t\t\t--mod3-primary-channel: #e29cf9;\n\t\t\t--mod3-secondary-note: #6f4c7b;\n\t\t\t--mod3-primary-note: #e29cf9;\n\t\t\t--mod4-secondary-channel: #9e6279;\n\t\t\t--mod4-primary-channel: #fb9bbf;\n\t\t\t--mod4-secondary-note: #9e6279;\n\t\t\t--mod4-primary-note: #fb9bbf;\n\t\t\t--mod-label-primary: #15111a;\n\t\t\t--mod-label-secondary-text: #cb3434;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #c9c9c9;\n\t\t\t--disabled-note-secondary: #616161;\n\t\t}`,\n\n\t\t\"moonlight\": `\n\t\t\t:root {\n\t\t\t--page-margin: #020514;\n\t\t\t--editor-background: #020514;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: #D4DCE9;\n\t\t\t--secondary-text: #3E87DA;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: #03599bd9;\n\t\t\t--box-selection-fill: hsl(206deg 66% 41% / 85%);\n\t\t\t--loop-accent: #639BD6;\n\t\t\t--link-accent: #A8C6E8;\n\t\t\t--ui-widget-background: #1e2940;\n\t\t\t--ui-widget-focus: #324b81;\n\t\t\t--pitch-background: #223849;\n\t\t\t--tonic: #33536c;\n\t\t\t--fifth-note: hsl(206deg 36% 16%);\n\t\t\t--white-piano-key: #c1bfe9;\n\t\t\t--black-piano-key: #454354;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #25568d80;\n\t\t\t--track-editor-bg-pitch-dim: #10253c80;\n\t\t\t--track-editor-bg-noise: #25568d80;\n\t\t\t--track-editor-bg-noise-dim: #10253c80;\n\t\t\t--track-editor-bg-mod: #25568d80;\n\t\t\t--track-editor-bg-mod-dim: #10253c80;\n\t\t\t--multiplicative-mod-slider: #0476cd;\n\t\t\t--overwriting-mod-slider: #035899;\n\t\t\t--indicator-primary: #57a1f4;\n\t\t\t--indicator-secondary: #2e5684;\n\t\t\t--select2-opt-group: #24355c;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #6ebffc;\n\t\t\t--mute-button-mod: #0a92fa;\n\t\t\t--pitch1-secondary-channel: #47425c;\n\t\t\t--pitch1-primary-channel: #918bac;\n\t\t\t--pitch1-secondary-note: #6b6489;\n\t\t\t--pitch1-primary-note: #a8a3bf;\n\t\t\t--pitch2-secondary-channel: #626493;\n\t\t\t--pitch2-primary-channel: #bdbed3;\n\t\t\t--pitch2-secondary-note: #626493;\n\t\t\t--pitch2-primary-note: #bdbed3;\n\t\t\t--pitch3-secondary-channel: #6e89b4;\n\t\t\t--pitch3-primary-channel: #d4dce9;\n\t\t\t--pitch3-secondary-note: #6e89b4;\n\t\t\t--pitch3-primary-note: #d4dce9;\n\t\t\t--pitch4-secondary-channel: #4c77a9;\n\t\t\t--pitch4-primary-channel: #a8c6e8;\n\t\t\t--pitch4-secondary-note: #4c77a9;\n\t\t\t--pitch4-primary-note: #a8c6e8;\n\t\t\t--pitch5-secondary-channel: #314e6d;\n\t\t\t--pitch5-primary-channel: #639bd6;\n\t\t\t--pitch5-secondary-note: #46698f;\n\t\t\t--pitch5-primary-note: #639bd6;\n\t\t\t--pitch6-secondary-channel: #143d6b;\n\t\t\t--pitch6-primary-channel: #3e87da;\n\t\t\t--pitch6-secondary-note: #143d6b;\n\t\t\t--pitch6-primary-note: #3e87da;\n\t\t\t--pitch7-secondary-channel: #314e6d;\n\t\t\t--pitch7-primary-channel: #639bd6;\n\t\t\t--pitch7-secondary-note: #314e6d;\n\t\t\t--pitch7-primary-note: #639bd6;\n\t\t\t--pitch8-secondary-channel: #4c77a9;\n\t\t\t--pitch8-primary-channel: #a8c6e8;\n\t\t\t--pitch8-secondary-note: #4c77a9;\n\t\t\t--pitch8-primary-note: #a8c6e8;\n\t\t\t--pitch9-secondary-channel: #6e89b4;\n\t\t\t--pitch9-primary-channel: #d4dce9;\n\t\t\t--pitch9-secondary-note: #6e89b4;\n\t\t\t--pitch9-primary-note: #d4dce9;\n\t\t\t--pitch10-secondary-channel: #626493;\n\t\t\t--pitch10-primary-channel: #bdbed3;\n\t\t\t--pitch10-secondary-note: #626493;\n\t\t\t--pitch10-primary-note: #bdbed3;\n\t\t\t--noise1-secondary-channel: #4b4a55;\n\t\t\t--noise1-primary-channel: #9795a3;\n\t\t\t--noise1-secondary-note: #4b4a55;\n\t\t\t--noise1-primary-note: #9795a3;\n\t\t\t--noise2-secondary-channel: #858e9d;\n\t\t\t--noise2-primary-channel: #d7dce5;\n\t\t\t--noise2-secondary-note: #858e9d;\n\t\t\t--noise2-primary-note: #d7dce5;\n\t\t\t--noise3-secondary-channel: #394e65;\n\t\t\t--noise3-primary-channel: #809bb7;\n\t\t\t--noise3-secondary-note: #394e65;\n\t\t\t--noise3-primary-note: #809bb7;\n\t\t\t--noise4-secondary-channel: #37577b;\n\t\t\t--noise4-primary-channel: #6189b8;\n\t\t\t--noise4-secondary-note: #37577b;\n\t\t\t--noise4-primary-note: #6189b8;\n\t\t\t--noise5-secondary-channel: #223849;\n\t\t\t--noise5-primary-channel: #5588af;\n\t\t\t--noise5-secondary-note: #223849;\n\t\t\t--noise5-primary-note: #5588af;\n\t\t\t--mod1-secondary-channel: #3e336c;\n\t\t\t--mod1-primary-channel: #6d60a4;\n\t\t\t--mod1-secondary-note: #3e336c;\n\t\t\t--mod1-primary-note: #6d60a4;\n\t\t\t--mod2-secondary-channel: #716791;\n\t\t\t--mod2-primary-channel: #bdbed3;\n\t\t\t--mod2-secondary-note: #716791;\n\t\t\t--mod2-primary-note: #bdbed3;\n\t\t\t--mod3-secondary-channel: #6b91bd;\n\t\t\t--mod3-primary-channel: #4b8fdd;\n\t\t\t--mod3-secondary-note: #597ca7;\n\t\t\t--mod3-primary-note: #7eade3;\n\t\t\t--mod4-secondary-channel: #14559f;\n\t\t\t--mod4-primary-channel: #3386e6;\n\t\t\t--mod4-secondary-note: #14559f;\n\t\t\t--mod4-primary-note: #3386e6;\n\t\t\t--mod-label-primary: #1e2940;\n\t\t\t--mod-label-secondary-text: #748ebe;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #828282;\n\t\t\t--disabled-note-secondary: #4f4f4f;\n\t\t\t}`,\n\n\t\t\"autumn\": `\n\t\t:root {\n\t\t\t--page-margin: #060304;\n\t\t\t--editor-background: #060304;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(115 80 76);\n\t\t\t--box-selection-fill: rgb(174 73 81 / 45%);\n\t\t\t--loop-accent: #834A69;\n\t\t\t--link-accent: #98f;\n\t\t\t--ui-widget-background: #2a2523;\n\t\t\t--ui-widget-focus: #4e4c44;\n\t\t\t--pitch-background: #121212;\n\t\t\t--tonic: #4f4f4f;\n\t\t\t--fifth-note: #222;\n\t\t\t--white-piano-key: #b59b9b;\n\t\t\t--black-piano-key: #231e1e;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #352f38;\n\t\t\t--track-editor-bg-pitch-dim: #232025;\n\t\t\t--track-editor-bg-noise: #3c3029;\n\t\t\t--track-editor-bg-noise-dim: #251d19;\n\t\t\t--track-editor-bg-mod: #202623;\n\t\t\t--track-editor-bg-mod-dim: #131715;\n\t\t\t--multiplicative-mod-slider: #D9D16E;\n\t\t\t--overwriting-mod-slider: #2D826F;\n\t\t\t--indicator-primary: #D9D16E;\n\t\t\t--indicator-secondary: #444226;\n\t\t\t--select2-opt-group: #20191c;\n\t\t\t--input-box-outline: #20191c;\n\t\t\t--mute-button-normal: var(--pitch2-primary-channel);\n\t\t\t--mute-button-mod: var(--pitch4-primary-channel);\n\t\t\t--pitch1-secondary-channel: #704a34;\n\t\t\t--pitch1-primary-channel: #D9895A;\n\t\t\t--pitch1-secondary-note: #704a34;\n\t\t\t--pitch1-primary-note: #D9895A;\n\t\t\t--pitch2-secondary-channel: #5f3538;\n\t\t\t--pitch2-primary-channel: #AE4951;\n\t\t\t--pitch2-secondary-note: #5f3538;\n\t\t\t--pitch2-primary-note: #AE4951;\n\t\t\t--pitch3-secondary-channel: #5c4336;\n\t\t\t--pitch3-primary-channel: #CA9A81;\n\t\t\t--pitch3-secondary-note: #5c4336;\n\t\t\t--pitch3-primary-note: #CA9A81;\n\t\t\t--pitch4-secondary-channel: #1d3143;\n\t\t\t--pitch4-primary-channel: #386995;\n\t\t\t--pitch4-secondary-note: #1d3143;\n\t\t\t--pitch4-primary-note: #386995;\n\t\t\t--pitch5-secondary-channel: #9c8a58;\n\t\t\t--pitch5-primary-channel: #D9D16E;\n\t\t\t--pitch5-secondary-note: #7c783f;\n\t\t\t--pitch5-primary-note: #D9D16E;\n\t\t\t--pitch6-secondary-channel: #886562;\n\t\t\t--pitch6-primary-channel: #D3A9A5;\n\t\t\t--pitch6-secondary-note: #886562;\n\t\t\t--pitch6-primary-note: #D3A9A5;\n\t\t\t--pitch7-secondary-channel: #1c3f37;\n\t\t\t--pitch7-primary-channel: #2D826F;\n\t\t\t--pitch7-secondary-note: #1c3f37;\n\t\t\t--pitch7-primary-note: #2D826F;\n\t\t\t--pitch8-secondary-channel: #442e2d;\n\t\t\t--pitch8-primary-channel: #815150;\n\t\t\t--pitch8-secondary-note: #442e2d;\n\t\t\t--pitch8-primary-note: #815150;\n\t\t\t--pitch9-secondary-channel: #8e6f60;\n\t\t\t--pitch9-primary-channel: #E5B8A1;\n\t\t\t--pitch9-secondary-note: #8e6f60;\n\t\t\t--pitch9-primary-note: #E5B8A1;\n\t\t\t--pitch10-secondary-channel: #4f3142;\n\t\t\t--pitch10-primary-channel: #834A69;\n\t\t\t--pitch10-secondary-note: #4f3142;\n\t\t\t--pitch10-primary-note: #834A69;\n\t\t\t--noise1-secondary-channel: #6b5346;\n\t\t\t--noise1-primary-channel: #b99c89;\n\t\t\t--noise1-secondary-note: #6b5346;\n\t\t\t--noise1-primary-note: #F0D0BB;\n\t\t\t--noise2-secondary-channel: #4a3839;\n\t\t\t--noise2-primary-channel: #9c6b6e;\n\t\t\t--noise2-secondary-note: #4a3839;\n\t\t\t--noise2-primary-note: #c18b8f;\n\t\t\t--noise3-secondary-channel: #2d3c4a;\n\t\t\t--noise3-primary-channel: #536e86;\n\t\t\t--noise3-secondary-note: #2d3c4a;\n\t\t\t--noise3-primary-note: #8fa8c0;\n\t\t\t--noise4-secondary-channel: #273f3a;\n\t\t\t--noise4-primary-channel: #4e8377;\n\t\t\t--noise4-secondary-note: #273f3a;\n\t\t\t--noise4-primary-note: #87baae;\n\t\t\t--noise5-secondary-channel: #372730;\n\t\t\t--noise5-primary-channel: #7f5e70;\n\t\t\t--noise5-secondary-note: #372730;\n\t\t\t--noise5-primary-note: #cc96b3;\n\t\t\t--mod1-secondary-channel: #783f1f;\n\t\t\t--mod1-primary-channel: #dc6d2c;\n\t\t\t--mod1-secondary-note: #783f1f;\n\t\t\t--mod1-primary-note: #dc6d2c;\n\t\t\t--mod2-secondary-channel: #0b3153;\n\t\t\t--mod2-primary-channel: #1464ac;\n\t\t\t--mod2-secondary-note: #0b3153;\n\t\t\t--mod2-primary-note: #1464ac;\n\t\t\t--mod3-secondary-channel: #075040;\n\t\t\t--mod3-primary-channel: #08a17f;\n\t\t\t--mod3-secondary-note: #075040;\n\t\t\t--mod3-primary-note: #08a17f;\n\t\t\t--mod4-secondary-channel: #631640;\n\t\t\t--mod4-primary-channel: #b4186d;\n\t\t\t--mod4-secondary-note: #631640;\n\t\t\t--mod4-primary-note: #b4186d;\n\t\t\t--mod-label-primary: #000;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}`,\n\n\t\t\"fruit\": `\n\t\t:root {\n\t\t\t--page-margin: #040507;\n\t\t\t--editor-background: #040507;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(115 103 76);\n\t\t\t--box-selection-fill: rgb(174 109 73 / 45%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #FDE484;\n\t\t\t--ui-widget-background: #22222c;\n\t\t\t--ui-widget-focus: #39394c;\n\t\t\t--pitch-background: #101010;\n\t\t\t--tonic: #2c2d34;\n\t\t\t--fifth-note: #191a20;\n\t\t\t--white-piano-key: #bbbaba;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #2b2d40;\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\n\t\t\t--track-editor-bg-noise: #3c3644;\n\t\t\t--track-editor-bg-noise-dim: #26222b;\n\t\t\t--track-editor-bg-mod: #322a2a;\n\t\t\t--track-editor-bg-mod-dim: #191515;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #EAAC9D;\n\t\t\t--indicator-secondary: #5e413a;\n\t\t\t--select2-opt-group: #191920;\n\t\t\t--input-box-outline: #191920;\n\t\t\t--mute-button-normal: #798FA7;\n\t\t\t--mute-button-mod: #354457;\n\t\t\t--pitch1-secondary-channel: #91655a;\n\t\t\t--pitch1-primary-channel: #EAAC9D;\n\t\t\t--pitch1-secondary-note: #91655a;\n\t\t\t--pitch1-primary-note: #EAAC9D;\n\t\t\t--pitch2-secondary-channel: #8f6513;\n\t\t\t--pitch2-primary-channel: #FFAF12;\n\t\t\t--pitch2-secondary-note: #8f6513;\n\t\t\t--pitch2-primary-note: #FFAF12;\n\t\t\t--pitch3-secondary-channel: #212f46;\n\t\t\t--pitch3-primary-channel: #34558B;\n\t\t\t--pitch3-secondary-note: #212f46;\n\t\t\t--pitch3-primary-note: #34558B;\n\t\t\t--pitch4-secondary-channel: #2e6b5b;\n\t\t\t--pitch4-primary-channel: #4EC5A7;\n\t\t\t--pitch4-secondary-note: #2e6b5b;\n\t\t\t--pitch4-primary-note: #4EC5A7;\n\t\t\t--pitch5-secondary-channel: #555D46;\n\t\t\t--pitch5-primary-channel: #aabf84;\n\t\t\t--pitch5-secondary-note: #555D46;\n\t\t\t--pitch5-primary-note: #aabf84;\n\t\t\t--pitch6-secondary-channel: #A2553B;\n\t\t\t--pitch6-primary-channel: #e59a81;\n\t\t\t--pitch6-secondary-note: #A2553B;\n\t\t\t--pitch6-primary-note: #e59a81;\n\t\t\t--pitch7-secondary-channel: #7b4021;\n\t\t\t--pitch7-primary-channel: #FE813E;\n\t\t\t--pitch7-secondary-note: #7b4021;\n\t\t\t--pitch7-primary-note: #FE813E;\n\t\t\t--pitch8-secondary-channel: #847753;\n\t\t\t--pitch8-primary-channel: #EFDAA3;\n\t\t\t--pitch8-secondary-note: #847753;\n\t\t\t--pitch8-primary-note: #EFDAA3;\n\t\t\t--pitch9-secondary-channel: #2c3642;\n\t\t\t--pitch9-primary-channel: #798FA7;\n\t\t\t--pitch9-secondary-note: #2c3642;\n\t\t\t--pitch9-primary-note: #798FA7;\n\t\t\t--pitch10-secondary-channel: #0d4453;\n\t\t\t--pitch10-primary-channel: #107895;\n\t\t\t--pitch10-secondary-note: #0d4453;\n\t\t\t--pitch10-primary-note: #107895;\n\t\t\t--noise1-secondary-channel: #71617C;\n\t\t\t--noise1-primary-channel: #977da9;\n\t\t\t--noise1-secondary-note: #71617C;\n\t\t\t--noise1-primary-note: #977da9;\n\t\t\t--noise2-secondary-channel: #3B3D4A;\n\t\t\t--noise2-primary-channel: #707591;\n\t\t\t--noise2-secondary-note: #3B3D4A;\n\t\t\t--noise2-primary-note: #707591;\n\t\t\t--noise3-secondary-channel: #625f5e;\n\t\t\t--noise3-primary-channel: #A19D9C;\n\t\t\t--noise3-secondary-note: #625f5e;\n\t\t\t--noise3-primary-note: #A19D9C;\n\t\t\t--noise4-secondary-channel: #ab847b;\n\t\t\t--noise4-primary-channel: #EAAC9D;\n\t\t\t--noise4-secondary-note: #ab847b;\n\t\t\t--noise4-primary-note: #EAAC9D;\n\t\t\t--noise5-secondary-channel: #B49D74;\n\t\t\t--noise5-primary-channel: #dec69b;\n\t\t\t--noise5-secondary-note: #B49D74;\n\t\t\t--noise5-primary-note: #dec69b;\n\t\t\t--mod1-secondary-channel: #722124;\n\t\t\t--mod1-primary-channel: #D13A41;\n\t\t\t--mod1-secondary-note: #722124;\n\t\t\t--mod1-primary-note: #D13A41;\n\t\t\t--mod2-secondary-channel: #213657;\n\t\t\t--mod2-primary-channel: #34558B;\n\t\t\t--mod2-secondary-note: #213657;\n\t\t\t--mod2-primary-note: #34558B;\n\t\t\t--mod3-secondary-channel: #555D46;\n\t\t\t--mod3-primary-channel: #848f6d;\n\t\t\t--mod3-secondary-note: #555D46;\n\t\t\t--mod3-primary-note: #848f6d;\n\t\t\t--mod4-secondary-channel: #71617C;\n\t\t\t--mod4-primary-channel: #a68ab9;\n\t\t\t--mod4-secondary-note: #71617C;\n\t\t\t--mod4-primary-note: #a68ab9;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}`,\n\n\t\t\"sunset\": `\n\t\t:root {\n\t\t\t--page-margin: #040300;\n\t\t\t--editor-background: #040300;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(94 0 157);\n\t\t\t--box-selection-fill: rgb(174 173 73 / 45%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #FDE484;\n\t\t\t--ui-widget-background: #241b24;\n\t\t\t--ui-widget-focus: #3a2e39;\n\t\t\t--pitch-background: #141414;\n\t\t\t--tonic: #2C212B;\n\t\t\t--fifth-note: #2E2A15;\n\t\t\t--white-piano-key: #bbbaba;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #2d2e42;\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\n\t\t\t--track-editor-bg-noise: #393340;\n\t\t\t--track-editor-bg-noise-dim: #26222b;\n\t\t\t--track-editor-bg-mod: #232a2c;\n\t\t\t--track-editor-bg-mod-dim: #151819;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #F28891;\n\t\t\t--indicator-secondary: #601d23;\n\t\t\t--select2-opt-group: #151015;\n\t\t\t--input-box-outline: #151015;\n\t\t\t--mute-button-normal: #E4739D;\n\t\t\t--mute-button-mod: #9650A6;\n\t\t\t--pitch1-secondary-channel: #7F7721;\n\t\t\t--pitch1-primary-channel: #F3E79A;\n\t\t\t--pitch1-secondary-note: #7F7721;\n\t\t\t--pitch1-primary-note: #F3E79A;\n\t\t\t--pitch2-secondary-channel: #785E20;\n\t\t\t--pitch2-primary-channel: #F7D086;\n\t\t\t--pitch2-secondary-note: #785E20;\n\t\t\t--pitch2-primary-note: #F7D086;\n\t\t\t--pitch3-secondary-channel: #6E4219;\n\t\t\t--pitch3-primary-channel: #F9B881;\n\t\t\t--pitch3-secondary-note: #6E4219;\n\t\t\t--pitch3-primary-note: #F9B881;\n\t\t\t--pitch4-secondary-channel: #79351F;\n\t\t\t--pitch4-primary-channel: #F7A086;\n\t\t\t--pitch4-secondary-note: #79351F;\n\t\t\t--pitch4-primary-note: #F7A086;\n\t\t\t--pitch5-secondary-channel: #81272F;\n\t\t\t--pitch5-primary-channel: #F28891;\n\t\t\t--pitch5-secondary-note: #81272F;\n\t\t\t--pitch5-primary-note: #F28891;\n\t\t\t--pitch6-secondary-channel: #8F224D;\n\t\t\t--pitch6-primary-channel: #E4739D;\n\t\t\t--pitch6-secondary-note: #8F224D;\n\t\t\t--pitch6-primary-note: #E4739D;\n\t\t\t--pitch7-secondary-channel: #611548;\n\t\t\t--pitch7-primary-channel: #CF63A6;\n\t\t\t--pitch7-secondary-note: #611548;\n\t\t\t--pitch7-primary-note: #CF63A6;\n\t\t\t--pitch8-secondary-channel: #561253;\n\t\t\t--pitch8-primary-channel: #B557A9;\n\t\t\t--pitch8-secondary-note: #4D104A;\n\t\t\t--pitch8-primary-note: #B557A9;\n\t\t\t--pitch9-secondary-channel: #4c1260;\n\t\t\t--pitch9-primary-channel: #9650A6;\n\t\t\t--pitch9-secondary-note: #3C0F4C;\n\t\t\t--pitch9-primary-note: #9650A6;\n\t\t\t--pitch10-secondary-channel: #3e1d78;\n\t\t\t--pitch10-primary-channel: #704D9E;\n\t\t\t--pitch10-secondary-note: #27124C;\n\t\t\t--pitch10-primary-note: #704D9E;\n\t\t\t--noise1-secondary-channel: #A7A578;\n\t\t\t--noise1-primary-channel: #EFE9AC;\n\t\t\t--noise1-secondary-note: #A7A578;\n\t\t\t--noise1-primary-note: #EFE9AC;\n\t\t\t--noise2-secondary-channel: #947A5F;\n\t\t\t--noise2-primary-channel: #FBCEA8;\n\t\t\t--noise2-secondary-note: #947A5F;\n\t\t\t--noise2-primary-note: #FBCEA8;\n\t\t\t--noise3-secondary-channel: #A3635D;\n\t\t\t--noise3-primary-channel: #F4A5AB;\n\t\t\t--noise3-secondary-note: #A3635D;\n\t\t\t--noise3-primary-note: #F4A5AB;\n\t\t\t--noise4-secondary-channel: #724D60;\n\t\t\t--noise4-primary-channel: #CD90B6;\n\t\t\t--noise4-secondary-note: #724D60;\n\t\t\t--noise4-primary-note: #CD90B6;\n\t\t\t--noise5-secondary-channel: #503F5C;\n\t\t\t--noise5-primary-channel: #7C6A9E;\n\t\t\t--noise5-secondary-note: #503F5C;\n\t\t\t--noise5-primary-note: #7C6A9E;\n\t\t\t--mod1-secondary-channel: #371883;\n\t\t\t--mod1-primary-channel: #6416C6;\n\t\t\t--mod1-secondary-note: #1F0A52;\n\t\t\t--mod1-primary-note: #6416C6;\n\t\t\t--mod2-secondary-channel: #690645;\n\t\t\t--mod2-primary-channel: #E52FA2;\n\t\t\t--mod2-secondary-note: #690645;\n\t\t\t--mod2-primary-note: #E52FA2;\n\t\t\t--mod3-secondary-channel: #943618;\n\t\t\t--mod3-primary-channel: #eb5b2c;\n\t\t\t--mod3-secondary-note: #943618;\n\t\t\t--mod3-primary-note: #eb5b2c;\n\t\t\t--mod4-secondary-channel: #928409;\n\t\t\t--mod4-primary-channel: #ecd50e;\n\t\t\t--mod4-secondary-note: #928409;\n\t\t\t--mod4-primary-note: #ecd50e;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}`,\n\n\t\t\"toxic\": `\n\t\t:root {\n\t\t\t--page-margin: #010003;\n\t\t\t--editor-background: #010003;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(147 195 0);\n\t\t\t--box-selection-fill: rgb(145 174 73 / 49%);\n\t\t\t--loop-accent: #BCDE2C;\n\t\t\t--link-accent: #edff9f;\n\t\t\t--ui-widget-background: #261e2e;\n\t\t\t--ui-widget-focus: #322042;\n\t\t\t--pitch-background: #141c15;\n\t\t\t--tonic: #282c21;\n\t\t\t--fifth-note: #18221a;\n\t\t\t--white-piano-key: #e3e3e3;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #38293e;\n\t\t\t--track-editor-bg-pitch-dim: #251c29;\n\t\t\t--track-editor-bg-noise: #2c304c;\n\t\t\t--track-editor-bg-noise-dim: #191b2b;\n\t\t\t--track-editor-bg-mod: #311b32;\n\t\t\t--track-editor-bg-mod-dim: #1d101e;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #aae9ff;\n\t\t\t--indicator-secondary: #253e46;\n\t\t\t--select2-opt-group: #110d15;\n\t\t\t--input-box-outline: #110d15;\n\t\t\t--mute-button-normal: #8f5ad1;\n\t\t\t--mute-button-mod: #482574;\n\t\t\t--pitch1-secondary-channel: #6b7f19;\n\t\t\t--pitch1-primary-channel: #BCDE2C;\n\t\t\t--pitch1-secondary-note: #6b7f19;\n\t\t\t--pitch1-primary-note: #BCDE2C;\n\t\t\t--pitch2-secondary-channel: #497a31;\n\t\t\t--pitch2-primary-channel: #7BD152;\n\t\t\t--pitch2-secondary-note: #497a31;\n\t\t\t--pitch2-primary-note: #7BD152;\n\t\t\t--pitch3-secondary-channel: #286b40;\n\t\t\t--pitch3-primary-channel: #45BE71;\n\t\t\t--pitch3-secondary-note: #286b40;\n\t\t\t--pitch3-primary-note: #45BE71;\n\t\t\t--pitch4-secondary-channel: #125140;\n\t\t\t--pitch4-primary-channel: #25A884;\n\t\t\t--pitch4-secondary-note: #125140;\n\t\t\t--pitch4-primary-note: #25A884;\n\t\t\t--pitch5-secondary-channel: #114c49;\n\t\t\t--pitch5-primary-channel: #21908C;\n\t\t\t--pitch5-secondary-note: #114c49;\n\t\t\t--pitch5-primary-note: #21908C;\n\t\t\t--pitch6-secondary-channel: #143843;\n\t\t\t--pitch6-primary-channel: #2B788E;\n\t\t\t--pitch6-secondary-note: #143843;\n\t\t\t--pitch6-primary-note: #2B788E;\n\t\t\t--pitch7-secondary-channel: #1d354e;\n\t\t\t--pitch7-primary-channel: #355F8D;\n\t\t\t--pitch7-secondary-note: #1a2f46;\n\t\t\t--pitch7-primary-note: #355F8D;\n\t\t\t--pitch8-secondary-channel: #2c2e5a;\n\t\t\t--pitch8-primary-channel: #414486;\n\t\t\t--pitch8-secondary-note: #1e1f3d;\n\t\t\t--pitch8-primary-note: #414486;\n\t\t\t--pitch9-secondary-channel: #3c1f5e;\n\t\t\t--pitch9-primary-channel: #5e3b89;\n\t\t\t--pitch9-secondary-note: #25133b;\n\t\t\t--pitch9-primary-note: #5e3b89;\n\t\t\t--pitch10-secondary-channel: #510264;\n\t\t\t--pitch10-primary-channel: #720d8a;\n\t\t\t--pitch10-secondary-note: #440154;\n\t\t\t--pitch10-primary-note: #720d8a;\n\t\t\t--noise1-secondary-channel: #BCDE2C;\n\t\t\t--noise1-primary-channel: #edff9f;\n\t\t\t--noise1-secondary-note: #BCDE2C;\n\t\t\t--noise1-primary-note: #edff9f;\n\t\t\t--noise2-secondary-channel: #45BE71;\n\t\t\t--noise2-primary-channel: #89ffb4;\n\t\t\t--noise2-secondary-note: #45BE71;\n\t\t\t--noise2-primary-note: #89ffb4;\n\t\t\t--noise3-secondary-channel: #21908C;\n\t\t\t--noise3-primary-channel: #72fffa;\n\t\t\t--noise3-secondary-note: #21908C;\n\t\t\t--noise3-primary-note: #72fffa;\n\t\t\t--noise4-secondary-channel: #355F8D;\n\t\t\t--noise4-primary-channel: #7cb6f5;\n\t\t\t--noise4-secondary-note: #355F8D;\n\t\t\t--noise4-primary-note: #7cb6f5;\n\t\t\t--noise5-secondary-channel: #482574;\n\t\t\t--noise5-primary-channel: #8f5ad1;\n\t\t\t--noise5-secondary-note: #48257A;\n\t\t\t--noise5-primary-note: #8f5ad1;\n\t\t\t--mod1-secondary-channel: #815a16;\n\t\t\t--mod1-primary-channel: #F5AB29;\n\t\t\t--mod1-secondary-note: #815a16;\n\t\t\t--mod1-primary-note: #F5AB29;\n\t\t\t--mod2-secondary-channel: #4d341a;\n\t\t\t--mod2-primary-channel: #C98540;\n\t\t\t--mod2-secondary-note: #4d341a;\n\t\t\t--mod2-primary-note: #C98540;\n\t\t\t--mod3-secondary-channel: #643734;\n\t\t\t--mod3-primary-channel: #A75D58;\n\t\t\t--mod3-secondary-note: #643734;\n\t\t\t--mod3-primary-note: #A75D58;\n\t\t\t--mod4-secondary-channel: #461430;\n\t\t\t--mod4-primary-channel: #812359;\n\t\t\t--mod4-secondary-note: #3f112b;\n\t\t\t--mod4-primary-note: #812359;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}`,\n\n\t\t\"violet verdant\": `\n\t\t:root {\n\t\t\t--page-margin: #0e031a;\n\t\t\t--editor-background: #0e031a;\n\t\t\t--hover-preview: #e5ffea;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--primary-text: #f0e0ff;\n\t\t\t--secondary-text: #706087;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t--box-selection-fill: #225835;\n\t\t\t--loop-accent: #8f00fb;\n\t\t\t--link-accent: #82dd5d;\n\t\t\t--ui-widget-background: #303c66;\n\t\t\t--ui-widget-focus: #62559b;\n\t\t\t--pitch-background: #293b52;\n\t\t\t--tonic: #5b46ad;\n\t\t\t--fifth-note: #42604d;\n\t\t\t--white-piano-key: #f6e8ff;\n\t\t\t--black-piano-key: #5a4972;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #392a46;\n\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t--track-editor-bg-noise: #403150;\n\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t--track-editor-bg-mod: #253c25;\n\t\t\t--track-editor-bg-mod-dim: #0c1811;\n\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t--indicator-primary: #9c64f7;\n\t\t\t--indicator-secondary: #393e4f;\n\t\t\t--select2-opt-group: #5d576f;\n\t\t\t--input-box-outline: #403150;\n\t\t\t--mute-button-normal: #82dd5d;\n\t\t\t--mute-button-mod: #945de5;\n\t\t\t--mod-label-primary: #312840;\n\t\t\t--mod-label-secondary-text: rgb(88 70 104);\n\t\t\t--mod-label-primary-text: #82dd5d;\n\t\t\t--pitch-secondary-channel-hue: 64;\n\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t--pitch-secondary-channel-sat: 63.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 64;\n\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t--pitch-primary-channel-sat: 90;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 32;\n\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t--pitch-secondary-note-sat: 87.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 64;\n\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 192;\n\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t--noise-secondary-channel-sat: 45;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 32;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 192;\n\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 43.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 160;\n\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 45;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 192;\n\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 132;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 132;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 100;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 132;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 96;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 85;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #91879f;\n\t\t\t--disabled-note-secondary: #6a677a;\n\t\t}`,\n\n\t\t\"portal\": `\n\t\t:root {\n\t\t\t--page-margin: #04081a;\n\t\t\t--editor-background: #04081a;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t--box-selection-fill: rgb(0 72 181);\n\t\t\t--loop-accent: #44d4ff;\n\t\t\t--link-accent: #ffa500;\n\t\t\t--ui-widget-background: #212c4a;\n\t\t\t--ui-widget-focus: #121f42;\n\t\t\t--pitch-background: #1b263e;\n\t\t\t--tonic: #995d00;\n\t\t\t--fifth-note: #0898a1;\n\t\t\t--white-piano-key: #ffffff;\n\t\t\t--black-piano-key: #516d7a;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #213352;\n\t\t\t--track-editor-bg-pitch-dim: #152032;\n\t\t\t--track-editor-bg-noise: #403524;\n\t\t\t--track-editor-bg-noise-dim: #2a1f0e;\n\t\t\t--track-editor-bg-mod: #234;\n\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t--overwriting-mod-slider: #654;\n\t\t\t--indicator-primary: #5490ff;\n\t\t\t--indicator-secondary: #444;\n\t\t\t--select2-opt-group: #585858;\n\t\t\t--input-box-outline: #333;\n\t\t\t--mute-button-normal: #3372ff;\n\t\t\t--mute-button-mod: #dd872f;\n\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t--pitch1-primary-channel: #77f7ff;\n\t\t\t--pitch1-secondary-note: #00BDC7;\n\t\t\t--pitch1-primary-note: #92F9FF;\n\t\t\t--pitch2-secondary-channel: #0083a1;\n\t\t\t--pitch2-primary-channel: #35d9ff;\n\t\t\t--pitch2-secondary-note: #0083a1;\n\t\t\t--pitch2-primary-note: #a4eeff;\n\t\t\t--pitch3-secondary-channel: #0074c7;\n\t\t\t--pitch3-primary-channel: #3caeff;\n\t\t\t--pitch3-secondary-note: #00477a;\n\t\t\t--pitch3-primary-note: #aadcff;\n\t\t\t--pitch4-secondary-channel: #0039a1;\n\t\t\t--pitch4-primary-channel: #2673ff;\n\t\t\t--pitch4-secondary-note: #001f56;\n\t\t\t--pitch4-primary-note: #9bbeff;\n\t\t\t--pitch5-secondary-channel: #31148b;\n\t\t\t--pitch5-primary-channel: #7042ff;\n\t\t\t--pitch5-secondary-note: #190656;\n\t\t\t--pitch5-primary-note: #b79fff;\n\t\t\t--pitch6-secondary-channel: #979934;\n\t\t\t--pitch6-primary-channel: #fbff2f;\n\t\t\t--pitch6-secondary-note: #5d5e0a;\n\t\t\t--pitch6-primary-note: #fdff9a;\n\t\t\t--pitch7-secondary-channel: #b78f00;\n\t\t\t--pitch7-primary-channel: #ffd747;\n\t\t\t--pitch7-secondary-note: #5e3d00;\n\t\t\t--pitch7-primary-note: #ffe381;\n\t\t\t--pitch8-secondary-channel: #9d6500;\n\t\t\t--pitch8-primary-channel: #ffa400;\n\t\t\t--pitch8-secondary-note: #583900;\n\t\t\t--pitch8-primary-note: #ffd07c;\n\t\t\t--pitch9-secondary-channel: #744203;\n\t\t\t--pitch9-primary-channel: #ff8e00;\n\t\t\t--pitch9-secondary-note: #502d00;\n\t\t\t--pitch9-primary-note: #ffcb89;\n\t\t\t--pitch10-secondary-channel: #a32d00;\n\t\t\t--pitch10-primary-channel: #ff885b;\n\t\t\t--pitch10-secondary-note: #521700;\n\t\t\t--pitch10-primary-note: #ffb397;\n\t\t\t--noise1-secondary-channel: #6e2210;\n\t\t\t--noise1-primary-channel: #ff4600;\n\t\t\t--noise1-secondary-note: #4c1a08;\n\t\t\t--noise1-primary-note: #ffc9b4;\n\t\t\t--noise2-secondary-channel: #6a3110;\n\t\t\t--noise2-primary-channel: #ff782a;\n\t\t\t--noise2-secondary-note: #4c1f05;\n\t\t\t--noise2-primary-note: #ffb488;\n\t\t\t--noise3-secondary-channel: #72460e;\n\t\t\t--noise3-primary-channel: #d9871f;\n\t\t\t--noise3-secondary-note: #442905;\n\t\t\t--noise3-primary-note: #ffdcae;\n\t\t\t--noise4-secondary-channel: #837a0f;\n\t\t\t--noise4-primary-channel: #f7ea55;\n\t\t\t--noise4-secondary-note: #605906;\n\t\t\t--noise4-primary-note: #fff9ab;\n\t\t\t--noise5-secondary-channel: #8c8f00;\n\t\t\t--noise5-primary-channel: #fdff90;\n\t\t\t--noise5-secondary-note: #606200;\n\t\t\t--noise5-primary-note: #feffbc;\n\t\t\t--mod1-secondary-channel: #561b97;\n\t\t\t--mod1-primary-channel: #aa66f5;\n\t\t\t--mod1-secondary-note: #30075c;\n\t\t\t--mod1-primary-note: #cd9fff;\n\t\t\t--mod2-secondary-channel: #5116df;\n\t\t\t--mod2-primary-channel: #6b2dff;\n\t\t\t--mod2-secondary-note: #36138b;\n\t\t\t--mod2-primary-note: #bea3ff;\n\t\t\t--mod3-secondary-channel: #2535a1;\n\t\t\t--mod3-primary-channel: #3f57ff;\n\t\t\t--mod3-secondary-note: #0e185c;\n\t\t\t--mod3-primary-note: #8494ff;\n\t\t\t--mod4-secondary-channel: #1b5883;\n\t\t\t--mod4-primary-channel: #5eb7f5;\n\t\t\t--mod4-secondary-note: #072f4a;\n\t\t\t--mod4-primary-note: #63beff;\n\t\t\t--mod-label-primary: #24293a;\n\t\t\t--mod-label-secondary-text: #454d4e;\n\t\t\t--mod-label-primary-text: #7bd4ff;\n\t\t\t--disabled-note-primary: #072f4a;\n\t\t\t--disabled-note-secondary: #6585a7;\n\t\t}`,\n\n\t\t\"fusion\":\n\t\t`:root {\n\t\t\t--page-margin: #0c0306;\n\t\t\t--editor-background: #0c0306;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: #26d9cd;\n\t\t\t--secondary-text: #ff6666;\n\t\t\t--inverted-text: white;\n\t\t\t--text-selection: #ffffff;\n\t\t\t--box-selection-fill: #ff00004d;\n\t\t\t--loop-accent: #ff6666;\n\t\t\t--link-accent: white;\n\t\t\t--ui-widget-background: #232323;\n\t\t\t--ui-widget-focus: #303030;\n\t\t\t--pitch-background: hsl(61deg 100% 70% / 25%);\n\t\t\t--tonic: #66a3ff40;\n\t\t\t--fifth-note: #ff666640;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #404040bf;\n\t\t\t--track-editor-bg-pitch-dim: #151515;\n\t\t\t--track-editor-bg-noise: #404040bf;\n\t\t\t--track-editor-bg-noise-dim: #151515;\n\t\t\t--track-editor-bg-mod: #404040bf;\n\t\t\t--track-editor-bg-mod-dim: #151515;\n\t\t\t--multiplicative-mod-slider: #ef7692;\n\t\t\t--overwriting-mod-slider: #f43e69;\n\t\t\t--indicator-primary: #26d9cd;\n\t\t\t--indicator-secondary: hsl(176deg 70% 25%);\n\t\t\t--select2-opt-group: #232323;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #26d9cd;\n\t\t\t--mute-button-mod: hsl(346deg 70% 50%);\n\t\t\t--pitch1-secondary-channel: #bf4040;\n\t\t\t--pitch1-primary-channel: #ff6666;\n\t\t\t--pitch1-secondary-note: #bf4040;\n\t\t\t--pitch1-primary-note: #ff6666;\n\t\t\t--pitch2-secondary-channel: #bf5b40;\n\t\t\t--pitch2-primary-channel: #ff8766;\n\t\t\t--pitch2-secondary-note: #bf5b40;\n\t\t\t--pitch2-primary-note: #ff8766;\n\t\t\t--pitch3-secondary-channel: #bf7940;\n\t\t\t--pitch3-primary-channel: #ffab66;\n\t\t\t--pitch3-secondary-note: #bf7940;\n\t\t\t--pitch3-primary-note: #ffab66;\n\t\t\t--pitch4-secondary-channel: #bf9b40;\n\t\t\t--pitch4-primary-channel: #ffd466;\n\t\t\t--pitch4-secondary-note: #bf9b40;\n\t\t\t--pitch4-primary-note: #ffd466;\n\t\t\t--pitch5-secondary-channel: #bdbf40;\n\t\t\t--pitch5-primary-channel: #fcff66;\n\t\t\t--pitch5-secondary-note: #bdbf40;\n\t\t\t--pitch5-primary-note: #fcff66;\n\t\t\t--pitch6-secondary-channel: #9dbf40;\n\t\t\t--pitch6-primary-channel: #d6ff66;\n\t\t\t--pitch6-secondary-note: #9dbf40;\n\t\t\t--pitch6-primary-note: #d6ff66;\n\t\t\t--pitch7-secondary-channel: #9dbf40;\n\t\t\t--pitch7-primary-channel: #fcff66;\n\t\t\t--pitch7-secondary-note: #9dbf40;\n\t\t\t--pitch7-primary-note: #fcff66;\n\t\t\t--pitch8-secondary-channel: #bf9b40;\n\t\t\t--pitch8-primary-channel: #ffd466;\n\t\t\t--pitch8-secondary-note: #bf9b40;\n\t\t\t--pitch8-primary-note: #ffd466;\n\t\t\t--pitch9-secondary-channel: #bf5b40;\n\t\t\t--pitch9-primary-channel: #ffab66;\n\t\t\t--pitch9-secondary-note: #bf5b40;\n\t\t\t--pitch9-primary-note: #ffab66;\n\t\t\t--pitch10-secondary-channel: #d15a1f;\n\t\t\t--pitch10-primary-channel: #ff8766;\n\t\t\t--pitch10-secondary-note: #d15a1f;\n\t\t\t--pitch10-primary-note: #ff8766;\n\t\t\t--noise1-secondary-channel: #4073bf;\n\t\t\t--noise1-primary-channel: #66a3ff;\n\t\t\t--noise1-secondary-note: #4073bf;\n\t\t\t--noise1-primary-note: #66a3ff;\n\t\t\t--noise2-secondary-channel: #405dbf;\n\t\t\t--noise2-primary-channel: #668aff;\n\t\t\t--noise2-secondary-note: #405dbf;\n\t\t\t--noise2-primary-note: #668aff;\n\t\t\t--noise3-secondary-channel: #4f40bf;\n\t\t\t--noise3-primary-channel: #7866ff;\n\t\t\t--noise3-secondary-note: #4f40bf;\n\t\t\t--noise3-primary-note: #7866ff;\n\t\t\t--noise4-secondary-channel: #8840bf;\n\t\t\t--noise4-primary-channel: #bd66ff;\n\t\t\t--noise4-secondary-note: #8840bf;\n\t\t\t--noise4-primary-note: #bd66ff;\n\t\t\t--noise5-secondary-channel: #bf40b5;\n\t\t\t--noise5-primary-channel: #ff66f2;\n\t\t\t--noise5-secondary-note: #bf40b5;\n\t\t\t--noise5-primary-note: #ff66f2;\n\t\t\t--mod1-secondary-channel: #cc6666;\n\t\t\t--mod1-primary-channel: #ff9999;\n\t\t\t--mod1-secondary-note: #cc6666;\n\t\t\t--mod1-primary-note: #ff9999;\n\t\t\t--mod2-secondary-channel: #cc7766;\n\t\t\t--mod2-primary-channel: #ffaa99;\n\t\t\t--mod2-secondary-note: #bf5540;\n\t\t\t--mod2-primary-note: #ffaa99;\n\t\t\t--mod3-secondary-channel: #cc8866;\n\t\t\t--mod3-primary-channel: #ffbb99;\n\t\t\t--mod3-secondary-note: #cc8866;\n\t\t\t--mod3-primary-note: #ffbb99;\n\t\t\t--mod4-secondary-channel: #cc9966;\n\t\t\t--mod4-primary-channel: #ffcc99;\n\t\t\t--mod4-secondary-note: #cc9966;\n\t\t\t--mod4-primary-note: #ffcc99;\n\t\t\t--mod-label-primary: #999;\n\t\t\t--mod-label-secondary-text: #333;\n\t\t\t--mod-label-primary-text: black;\n\t\t\t--disabled-note-primary: #696969;\n\t\t\t--disabled-note-secondary: #232323;\n\t\t}`,\n\n\t\t\"inverse\":\n\t\t\t`:root {\n\t\t\t--page-margin: #c4c8e3;\n\t\t\t--editor-background: #c4c8e3;\n\t\t\t--hover-preview: #000000;\n\t\t\t--playhead: #243953;\n\t\t\t--primary-text: black;\n\t\t\t--secondary-text: #855b95;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(132 125 255);\n\t\t\t--box-selection-fill: rgb(174 109 73 / 65%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #4e00c8;\n\t\t\t--ui-widget-background: #e7e7ff;\n\t\t\t--ui-widget-focus: #d0d3e9;\n\t\t\t--pitch-background: #ffffff;\n\t\t\t--tonic: #bbbbbb;\n\t\t\t--fifth-note: #dcdcdc;\n\t\t\t--white-piano-key: #ffffff;\n\t\t\t--black-piano-key: #615f66;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #e9ebff;\n\t\t\t--track-editor-bg-pitch-dim: #e9ebff;\n\t\t\t--track-editor-bg-noise: #fdf2fe;\n\t\t\t--track-editor-bg-noise-dim: #fdf2fe;\n\t\t\t--track-editor-bg-mod: #dbdefe;\n\t\t\t--track-editor-bg-mod-dim: #dbdefe;\n\t\t\t--multiplicative-mod-slider: #6900b3;\n\t\t\t--overwriting-mod-slider: #004b9d;\n\t\t\t--indicator-primary: #ff633d;\n\t\t\t--indicator-secondary: #933822;\n\t\t\t--select2-opt-group: #e7e7ff;\n\t\t\t--input-box-outline: #e7e7ff;\n\t\t\t--mute-button-normal: #0072ef;\n\t\t\t--mute-button-mod: #002e67;\n\t\t\t--pitch1-secondary-channel: #b77d6e;\n\t\t\t--pitch1-primary-channel: #ff9d85;\n\t\t\t--pitch1-secondary-note: #b77d6e;\n\t\t\t--pitch1-primary-note: #ff9d85;\n\t\t\t--pitch2-secondary-channel: #be8821;\n\t\t\t--pitch2-primary-channel: #FFAF12;\n\t\t\t--pitch2-secondary-note: #be8821;\n\t\t\t--pitch2-primary-note: #FFAF12;\n\t\t\t--pitch3-secondary-channel: #3a62a4;\n\t\t\t--pitch3-primary-channel: #528ae6;\n\t\t\t--pitch3-secondary-note: #3a62a4;\n\t\t\t--pitch3-primary-note: #528ae6;\n\t\t\t--pitch4-secondary-channel: #3e8d78;\n\t\t\t--pitch4-primary-channel: #4EC5A7;\n\t\t\t--pitch4-secondary-note: #3e8d78;\n\t\t\t--pitch4-primary-note: #4EC5A7;\n\t\t\t--pitch5-secondary-channel: #84906d;\n\t\t\t--pitch5-primary-channel: #aabf84;\n\t\t\t--pitch5-secondary-note: #84906d;\n\t\t\t--pitch5-primary-note: #aabf84;\n\t\t\t--pitch6-secondary-channel: #bd6345;\n\t\t\t--pitch6-primary-channel: #e59a81;\n\t\t\t--pitch6-secondary-note: #bd6345;\n\t\t\t--pitch6-primary-note: #e59a81;\n\t\t\t--pitch7-secondary-channel: #aa592f;\n\t\t\t--pitch7-primary-channel: #FE813E;\n\t\t\t--pitch7-secondary-note: #aa592f;\n\t\t\t--pitch7-primary-note: #FE813E;\n\t\t\t--pitch8-secondary-channel: #b2a171;\n\t\t\t--pitch8-primary-channel: #ffd76d;\n\t\t\t--pitch8-secondary-note: #b2a171;\n\t\t\t--pitch8-primary-note: #ffd76d;\n\t\t\t--pitch9-secondary-channel: #4f6177;\n\t\t\t--pitch9-primary-channel: #798FA7;\n\t\t\t--pitch9-secondary-note: #4f6177;\n\t\t\t--pitch9-primary-note: #798FA7;\n\t\t\t--pitch10-secondary-channel: #165162;\n\t\t\t--pitch10-primary-channel: #107895;\n\t\t\t--pitch10-secondary-note: #165162;\n\t\t\t--pitch10-primary-note: #107895;\n\t\t\t--noise1-secondary-channel: #71617C;\n\t\t\t--noise1-primary-channel: #977da9;\n\t\t\t--noise1-secondary-note: #71617C;\n\t\t\t--noise1-primary-note: #977da9;\n\t\t\t--noise2-secondary-channel: #4a4c5b;\n\t\t\t--noise2-primary-channel: #707591;\n\t\t\t--noise2-secondary-note: #4a4c5b;\n\t\t\t--noise2-primary-note: #707591;\n\t\t\t--noise3-secondary-channel: #817c7b;\n\t\t\t--noise3-primary-channel: #A19D9C;\n\t\t\t--noise3-secondary-note: #817c7b;\n\t\t\t--noise3-primary-note: #A19D9C;\n\t\t\t--noise4-secondary-channel: #ab847b;\n\t\t\t--noise4-primary-channel: #EAAC9D;\n\t\t\t--noise4-secondary-note: #ab847b;\n\t\t\t--noise4-primary-note: #EAAC9D;\n\t\t\t--noise5-secondary-channel: #B49D74;\n\t\t\t--noise5-primary-channel: #dec69b;\n\t\t\t--noise5-secondary-note: #B49D74;\n\t\t\t--noise5-primary-note: #dec69b;\n\t\t\t--mod1-secondary-channel: #722124;\n\t\t\t--mod1-primary-channel: #D13A41;\n\t\t\t--mod1-secondary-note: #722124;\n\t\t\t--mod1-primary-note: #D13A41;\n\t\t\t--mod2-secondary-channel: #213657;\n\t\t\t--mod2-primary-channel: #34558B;\n\t\t\t--mod2-secondary-note: #213657;\n\t\t\t--mod2-primary-note: #34558B;\n\t\t\t--mod3-secondary-channel: #555D46;\n\t\t\t--mod3-primary-channel: #848f6d;\n\t\t\t--mod3-secondary-note: #555D46;\n\t\t\t--mod3-primary-note: #848f6d;\n\t\t\t--mod4-secondary-channel: #71617C;\n\t\t\t--mod4-primary-channel: #a68ab9;\n\t\t\t--mod4-secondary-note: #71617C;\n\t\t\t--mod4-primary-note: #a68ab9;\n\t\t\t--mod-label-primary: #e9e9e9;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: black;\n\t\t\t--disabled-note-primary: #959595;\n\t\t\t--disabled-note-secondary: #6e6e6e;\n\t\t\t}`,\n\n\t\t\"nebula\": `\n\t\t:root {\n\t\t\t--page-margin: #040410;\n\t\t\t--editor-background: #150e1f;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #8C849A;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(141,79,201,0.99);\n\t\t\t--box-selection-fill: #311E44;\n\t\t\t--loop-accent: #CC688C;\n\t\t\t--link-accent: #817DC9;\n\t\t\t--ui-widget-background: #44394F;\n\t\t\t--ui-widget-focus: #7A6386;\n\t\t\t--pitch-background: #393e4f40;\n\t\t\t--tonic: #7D5C9EC0;\n\t\t\t--fifth-note: #ab77bd50;\n\t\t\t--white-piano-key: #EEEEEE;\n\t\t\t--black-piano-key: #5F5566;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #46374C;\n\t\t\t--track-editor-bg-pitch-dim: #1F1C2850;\n\t\t\t--track-editor-bg-noise: #3D353B;\n\t\t\t--track-editor-bg-noise-dim: #16131550;\n\t\t\t--track-editor-bg-mod: #623F4C;\n\t\t\t--track-editor-bg-mod-dim: #361A2450;\n\t\t\t--multiplicative-mod-slider: #9F6E6A;\n\t\t\t--overwriting-mod-slider: #A664B5;\n\t\t\t--indicator-primary: #CC6B8E;\n\t\t\t--indicator-secondary: #44394F;\n\t\t\t--select2-opt-group: #6A576F;\n\t\t\t--input-box-outline: #222;\n\t\t\t--mute-button-normal: #BF91DC;\n\t\t\t--mute-button-mod: #DC8C9A;\n\t\t\t--mod-label-primary: #3A2840;\n\t\t\t--mod-label-secondary-text: #62485E;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--pitch-secondary-channel-hue: -96;\n\t\t\t--pitch-secondary-channel-hue-scale: 4.2;\n\t\t\t--pitch-secondary-channel-sat: 50.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: -96;\n\t\t\t--pitch-primary-channel-hue-scale: 4.2;\n\t\t\t--pitch-primary-channel-sat: 70;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: -96;\n\t\t\t--pitch-secondary-note-hue-scale: 4.2;\n\t\t\t--pitch-secondary-note-sat: 70.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: -96;\n\t\t\t--pitch-primary-note-hue-scale: 4.2;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 16;\n\t\t\t--noise-secondary-channel-hue-scale: -1.33;\n\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 16;\n\t\t\t--noise-primary-channel-hue-scale: -1.33;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 12;\n\t\t\t--noise-secondary-note-hue-scale: -1.33;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 12;\n\t\t\t--noise-primary-note-hue-scale: -1.33;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 12;\n\t\t\t--mod-secondary-channel-hue-scale: -.75;\n\t\t\t--mod-secondary-channel-sat: 50;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 12;\n\t\t\t--mod-primary-channel-hue-scale: -.75;\n\t\t\t--mod-primary-channel-sat: 70;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 12;\n\t\t\t--mod-secondary-note-hue-scale: -.75;\n\t\t\t--mod-secondary-note-sat: 75;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 12;\n\t\t\t--mod-primary-note-hue-scale: -.75;\n\t\t\t--mod-primary-note-sat: 85;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 85;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #aaa;\n\t\t\t--disabled-note-secondary: #666;\n\t\t}`,\n\n\t\t\"roe light\": `\n\t\t:root {\n\t\t\t--page-margin: #fff5f5;\n\t\t\t--editor-background: #fff5f5;\n\t\t\t--hover-preview: #0e8bf1;\n\t\t\t--playhead: 000;\n\t\t\t--primary-text: #0e8bf1;\n\t\t\t--secondary-text: #f10e0e;\n\t\t\t--inverted-text: white;\n\t\t\t--text-selection: #ff4444fc;\n\t\t\t--box-selection-fill: #ff00004d;\n\t\t\t--loop-accent: #9a75ff;\n\t\t\t--link-accent: #ff7070;\n\t\t\t--ui-widget-background: #bdc9e5;\n\t\t\t--ui-widget-focus: #a3b7e5;\n\t\t\t--pitch-background: #d0c7db;\n\t\t\t--tonic: #bed3e4;\n\t\t\t--fifth-note: #e7c6c6;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #e5e1ea;\n\t\t\t--track-editor-bg-pitch-dim: #cbc4d4;\n\t\t\t--track-editor-bg-noise: #e0ddee;\n\t\t\t--track-editor-bg-noise-dim: #c1bade;\n\t\t\t--track-editor-bg-mod: #d8e6f3;\n\t\t\t--track-editor-bg-mod-dim: #b1cce7;\n\t\t\t--multiplicative-mod-slider: #8097cb;\n\t\t\t--overwriting-mod-slider: #8097cb;\n\t\t\t--indicator-primary: #FF2A2A;\n\t\t\t--indicator-secondary: #92a6d3;\n\t\t\t--select2-opt-group: #b6c4e2;\n\t\t\t--input-box-outline: #bdc9e5;\n\t\t\t--mute-button-normal: #66baff;\n\t\t\t--mute-button-mod: #1a98ff;\n\t\t\t--pitch1-secondary-channel: #273c90;\n\t\t\t--pitch1-primary-channel: #476BFF;\n\t\t\t--pitch1-secondary-note: #273c90;\n\t\t\t--pitch1-primary-note: #476BFF;\n\t\t\t--pitch2-secondary-channel: #3a3898;\n\t\t\t--pitch2-primary-channel: #625FFB;\n\t\t\t--pitch2-secondary-note: #3a3898;\n\t\t\t--pitch2-primary-note: #625FFB;\n\t\t\t--pitch3-secondary-channel: #542780;\n\t\t\t--pitch3-primary-channel: #9C49EC;\n\t\t\t--pitch3-secondary-note: #542780;\n\t\t\t--pitch3-primary-note: #9C49EC;\n\t\t\t--pitch4-secondary-channel: #84225d;\n\t\t\t--pitch4-primary-channel: #fd3fb1;\n\t\t\t--pitch4-secondary-note: #84225d;\n\t\t\t--pitch4-primary-note: #fd3fb1;\n\t\t\t--pitch5-secondary-channel: #8d2323;\n\t\t\t--pitch5-primary-channel: #ff3f3f;\n\t\t\t--pitch5-secondary-note: #8d2323;\n\t\t\t--pitch5-primary-note: #ff3f3f;\n\t\t\t--pitch6-secondary-channel: #84225d;\n\t\t\t--pitch6-primary-channel: #fd3fb1;\n\t\t\t--pitch6-secondary-note: #84225d;\n\t\t\t--pitch6-primary-note: #fd3fb1;\n\t\t\t--pitch7-secondary-channel: #542780;\n\t\t\t--pitch7-primary-channel: #9C49EC;\n\t\t\t--pitch7-secondary-note: #542780;\n\t\t\t--pitch7-primary-note: #9C49EC;\n\t\t\t--pitch8-secondary-channel: #3a3898;\n\t\t\t--pitch8-primary-channel: #625FFB;\n\t\t\t--pitch8-secondary-note: #3a3898;\n\t\t\t--pitch8-primary-note: #625FFB;\n\t\t\t--pitch9-secondary-channel: #273c90;\n\t\t\t--pitch9-primary-channel: #476BFF;\n\t\t\t--pitch9-secondary-note: #273c90;\n\t\t\t--pitch9-primary-note: #476BFF;\n\t\t\t--pitch10-secondary-channel: #165a93;\n\t\t\t--pitch10-primary-channel: #299EFF;\n\t\t\t--pitch10-secondary-note: #165a93;\n\t\t\t--pitch10-primary-note: #299EFF;\n\t\t\t--noise1-secondary-channel: #336bdb;\n\t\t\t--noise1-primary-channel: #4281FF;\n\t\t\t--noise1-secondary-note: #336bdb;\n\t\t\t--noise1-primary-note: #4281FF;\n\t\t\t--noise2-secondary-channel: #5e38dc;\n\t\t\t--noise2-primary-channel: #7347FF;\n\t\t\t--noise2-secondary-note: #5e38dc;\n\t\t\t--noise2-primary-note: #7347FF;\n\t\t\t--noise3-secondary-channel: #7d3097;\n\t\t\t--noise3-primary-channel: #9F3CBF;\n\t\t\t--noise3-secondary-note: #7d3097;\n\t\t\t--noise3-primary-note: #9F3CBF;\n\t\t\t--noise4-secondary-channel: #ad2559;\n\t\t\t--noise4-primary-channel: #D3326F;\n\t\t\t--noise4-secondary-note: #ad2559;\n\t\t\t--noise4-primary-note: #D3326F;\n\t\t\t--noise5-secondary-channel: #d02525;\n\t\t\t--noise5-primary-channel: #FF2A2A;\n\t\t\t--noise5-secondary-note: #d02525;\n\t\t\t--noise5-primary-note: #FF2A2A;\n\t\t\t--mod1-secondary-channel: #35415a;\n\t\t\t--mod1-primary-channel: #47587a;\n\t\t\t--mod1-secondary-note: #35415a;\n\t\t\t--mod1-primary-note: #47587a;\n\t\t\t--mod2-secondary-channel: #5a5374;\n\t\t\t--mod2-primary-channel: #716791;\n\t\t\t--mod2-secondary-note: #5a5374;\n\t\t\t--mod2-primary-note: #716791;\n\t\t\t--mod3-secondary-channel: #53385c;\n\t\t\t--mod3-primary-channel: #6f4c7b;\n\t\t\t--mod3-secondary-note: #53385c;\n\t\t\t--mod3-primary-note: #6f4c7b;\n\t\t\t--mod4-secondary-channel: #7e4e60;\n\t\t\t--mod4-primary-channel: #9e6279;\n\t\t\t--mod4-secondary-note: #7e4e60;\n\t\t\t--mod4-primary-note: #9e6279;\n\t\t\t--mod-label-primary: #d0c7db;\n\t\t\t--mod-label-secondary-text: #cb3434;\n\t\t\t--mod-label-primary-text: black;\n\t\t\t--disabled-note-primary: #616161;\n\t\t\t--disabled-note-secondary: #474747;\n\t\t}`,\n\n\t\t\"energized\": `\n\t\t:root {\n\t\t\t--page-margin: #000a08;\n\t\t\t--editor-background: #000a08;\n\t\t\t--hover-preview: #ffffcc;\n\t\t\t--playhead: #ccfff5;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #d9d98c;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: #ffff6659;\n\t\t\t--box-selection-fill: #ffffff33;\n\t\t\t--loop-accent: #ffff00;\n\t\t\t--link-accent: #00ffcc;\n\t\t\t--ui-widget-background: #141f1d;\n\t\t\t--ui-widget-focus: #24423d;\n\t\t\t--pitch-background: #001410;\n\t\t\t--tonic: #00241d;\n\t\t\t--fifth-note: #ffff6633;\n\t\t\t--white-piano-key: #66998f;\n\t\t\t--black-piano-key: #141f1d;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #66998f40;\n\t\t\t--track-editor-bg-pitch-dim: #293d3940;\n\t\t\t--track-editor-bg-noise: #66998f40;\n\t\t\t--track-editor-bg-noise-dim: #293d3940;\n\t\t\t--track-editor-bg-mod: #99996640;\n\t\t\t--track-editor-bg-mod-dim: #3d3d2940;\n\t\t\t--multiplicative-mod-slider: #ffff00;\n\t\t\t--overwriting-mod-slider: #00ffcc;\n\t\t\t--indicator-primary: #ffff00;\n\t\t\t--indicator-secondary: #141f1d;\n\t\t\t--select2-opt-group: #1b312e;\n\t\t\t--input-box-outline: #141f1d;\n\t\t\t--mute-button-normal: #00ffcc;\n\t\t\t--mute-button-mod: #00997a;\n\t\t\t--pitch1-secondary-channel: #bfbf40;\n\t\t\t--pitch1-primary-channel: #ffff64;\n\t\t\t--pitch1-secondary-note: #bfbf40;\n\t\t\t--pitch1-primary-note: #ffff64;\n\t\t\t--pitch2-secondary-channel: #a2bf40;\n\t\t\t--pitch2-primary-channel: #e0ff7d;\n\t\t\t--pitch2-secondary-note: #a2bf40;\n\t\t\t--pitch2-primary-note: #e0ff7d;\n\t\t\t--pitch3-secondary-channel: #75bf40;\n\t\t\t--pitch3-primary-channel: #c1ff96;\n\t\t\t--pitch3-secondary-note: #75bf40;\n\t\t\t--pitch3-primary-note: #c1ff96;\n\t\t\t--pitch4-secondary-channel: #40bf51;\n\t\t\t--pitch4-primary-channel: #a2ffaf;\n\t\t\t--pitch4-secondary-note: #40bf51;\n\t\t\t--pitch4-primary-note: #a2ffaf;\n\t\t\t--pitch5-secondary-channel: #40bf86;\n\t\t\t--pitch5-primary-channel: #83ffc8;\n\t\t\t--pitch5-secondary-note: #40bf86;\n\t\t\t--pitch5-primary-note: #83ffc8;\n\t\t\t--pitch6-secondary-channel: #40bfa6;\n\t\t\t--pitch6-primary-channel: #64ffe1;\n\t\t\t--pitch6-secondary-note: #40bfa6;\n\t\t\t--pitch6-primary-note: #64ffe1;\n\t\t\t--pitch7-secondary-channel: #40bf86;\n\t\t\t--pitch7-primary-channel: #83ffc8;\n\t\t\t--pitch7-secondary-note: #40bf86;\n\t\t\t--pitch7-primary-note: #83ffc8;\n\t\t\t--pitch8-secondary-channel: #40bf51;\n\t\t\t--pitch8-primary-channel: #a2ffaf;\n\t\t\t--pitch8-secondary-note: #40bf51;\n\t\t\t--pitch8-primary-note: #a2ffaf;\n\t\t\t--pitch9-secondary-channel: #75bf40;\n\t\t\t--pitch9-primary-channel: #c1ff96;\n\t\t\t--pitch9-secondary-note: #75bf40;\n\t\t\t--pitch9-primary-note: #c1ff96;\n\t\t\t--pitch10-secondary-channel: #a2bf40;\n\t\t\t--pitch10-primary-channel: #e0ff7d;\n\t\t\t--pitch10-secondary-note: #a2bf40;\n\t\t\t--pitch10-primary-note: #e0ff7d;\n\t\t\t--noise1-secondary-channel: #a6a659;\n\t\t\t--noise1-primary-channel: #ffffcc;\n\t\t\t--noise1-secondary-note: #a6a659;\n\t\t\t--noise1-primary-note: #ffffcc;\n\t\t\t--noise2-secondary-channel: #94a659;\n\t\t\t--noise2-primary-channel: #f3ffcc;\n\t\t\t--noise2-secondary-note: #94a659;\n\t\t\t--noise2-primary-note: #f3ffcc;\n\t\t\t--noise3-secondary-channel: #79a659;\n\t\t\t--noise3-primary-channel: #e1ffcc;\n\t\t\t--noise3-secondary-note: #79a659;\n\t\t\t--noise3-primary-note: #e1ffcc;\n\t\t\t--noise4-secondary-channel: #94a659;\n\t\t\t--noise4-primary-channel: #f3ffcc;\n\t\t\t--noise4-secondary-note: #94a659;\n\t\t\t--noise4-primary-note: #f3ffcc;\n\t\t\t--noise5-secondary-channel: #a6a659;\n\t\t\t--noise5-primary-channel: #ffffcc;\n\t\t\t--noise5-secondary-note: #a6a659;\n\t\t\t--noise5-primary-note: #ffffcc;\n\t\t\t--mod1-secondary-channel: #a3a329;\n\t\t\t--mod1-primary-channel: #ffff00;\n\t\t\t--mod1-secondary-note: #a3a329;\n\t\t\t--mod1-primary-note: #ffff00;\n\t\t\t--mod2-secondary-channel: #a38529;\n\t\t\t--mod2-primary-channel: #ffbf00;\n\t\t\t--mod2-secondary-note: #a38529;\n\t\t\t--mod2-primary-note: #ffbf00;\n\t\t\t--mod3-secondary-channel: #a36629;\n\t\t\t--mod3-primary-channel: #ff7f00;\n\t\t\t--mod3-secondary-note: #a36629;\n\t\t\t--mod3-primary-note: #ff7f00;\n\t\t\t--mod4-secondary-channel: #a38529;\n\t\t\t--mod4-primary-channel: #ffbf00;\n\t\t\t--mod4-secondary-note: #a38529;\n\t\t\t--mod4-primary-note: #ffbf00;\n\t\t\t--mod-label-primary: #141f1d;\n\t\t\t--mod-label-secondary-text: #d9d98c;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #808080;\n\t\t\t--disabled-note-secondary: #666666;\n\t\t}`,\n\n\t\t\"neapolitan\":\n\t\t`:root {\n\t\t\t--page-margin: #120807;\n\t\t\t--editor-background: #120807;\n\t\t\t--hover-preview: #e79a82;\n\t\t\t--playhead: #e79a82;\n\t\t\t--primary-text: #decdbf;\n\t\t\t--secondary-text: #fa99bb;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: #990036;\n\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t--loop-accent: #f6377a;\n\t\t\t--link-accent: #f6377a;\n\t\t\t--ui-widget-background: #24160f;\n\t\t\t--ui-widget-focus: #362217;\n\t\t\t--pitch-background: #1e1106;\n\t\t\t--tonic: #382414;\n\t\t\t--fifth-note: #41240c;\n\t\t\t--white-piano-key: #e1c5b7;\n\t\t\t--black-piano-key: #482c1e;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #4d2a19;\n\t\t\t--track-editor-bg-pitch-dim: #27150c;\n\t\t\t--track-editor-bg-noise: #4d2a19;\n\t\t\t--track-editor-bg-noise-dim: #27150c;\n\t\t\t--track-editor-bg-mod: #4d2a19;\n\t\t\t--track-editor-bg-mod-dim: #27150c;\n\t\t\t--multiplicative-mod-slider: #decdbf;\n\t\t\t--overwriting-mod-slider: #decdbf;\n\t\t\t--indicator-primary: #decdbf;\n\t\t\t--indicator-secondary: #362217;\n\t\t\t--select2-opt-group: #24160f;\n\t\t\t--input-box-outline: #24160f;\n\t\t\t--mute-button-normal: #ff66a1;\n\t\t\t--mute-button-mod: #e61968;\n\t\t\t--pitch1-secondary-channel: #680029;\n\t\t\t--pitch1-primary-channel: #cc0052;\n\t\t\t--pitch1-secondary-note: #660029;\n\t\t\t--pitch1-primary-note: #cc0052;\n\t\t\t--pitch2-secondary-channel: #7e1b43;\n\t\t\t--pitch2-primary-channel: #d32e71;\n\t\t\t--pitch2-secondary-note: #7e1b43;\n\t\t\t--pitch2-primary-note: #d32e71;\n\t\t\t--pitch3-secondary-channel: #aa275e;\n\t\t\t--pitch3-primary-channel: #da5d91;\n\t\t\t--pitch3-secondary-note: #aa275e;\n\t\t\t--pitch3-primary-note: #da5d91;\n\t\t\t--pitch4-secondary-channel: #cc3878;\n\t\t\t--pitch4-primary-channel: #e18bb0;\n\t\t\t--pitch4-secondary-note: #cc3878;\n\t\t\t--pitch4-primary-note: #e18bb0;\n\t\t\t--pitch5-secondary-channel: #d06c9b;\n\t\t\t--pitch5-primary-channel: #e9bad0;\n\t\t\t--pitch5-secondary-note: #d06c9b;\n\t\t\t--pitch5-primary-note: #e9bad0;\n\t\t\t--pitch6-secondary-channel: #c9acc5;\n\t\t\t--pitch6-primary-channel: #f0e8ef;\n\t\t\t--pitch6-secondary-note: #c9acc5;\n\t\t\t--pitch6-primary-note: #f0e8ef;\n\t\t\t--pitch7-secondary-channel: #d06c9b;\n\t\t\t--pitch7-primary-channel: #e9bad0;\n\t\t\t--pitch7-secondary-note: #d06c9b;\n\t\t\t--pitch7-primary-note: #e9bad0;\n\t\t\t--pitch8-secondary-channel: #cc3878;\n\t\t\t--pitch8-primary-channel: #e18bb0;\n\t\t\t--pitch8-secondary-note: #cc3878;\n\t\t\t--pitch8-primary-note: #e18bb0;\n\t\t\t--pitch9-secondary-channel: #aa275e;\n\t\t\t--pitch9-primary-channel: #da5d91;\n\t\t\t--pitch9-secondary-note: #aa275e;\n\t\t\t--pitch9-primary-note: #da5d91;\n\t\t\t--pitch10-secondary-channel: #7e1b43;\n\t\t\t--pitch10-primary-channel: #d32e71;\n\t\t\t--pitch10-secondary-note: #7e1b43;\n\t\t\t--pitch10-primary-note: #d32e71;\n\t\t\t--noise1-secondary-channel: #683a37;\n\t\t\t--noise1-primary-channel: #A85F5A;\n\t\t\t--noise1-secondary-note: #683a37;\n\t\t\t--noise1-primary-note: #A85F5A;\n\t\t\t--noise2-secondary-channel: #7c4a41;\n\t\t\t--noise2-primary-channel: #B47A70;\n\t\t\t--noise2-secondary-note: #7c4a41;\n\t\t\t--noise2-primary-note: #B47A70;\n\t\t\t--noise3-secondary-channel: #935f4d;\n\t\t\t--noise3-primary-channel: #c09587;\n\t\t\t--noise3-secondary-note: #935f4d;\n\t\t\t--noise3-primary-note: #C09587;\n\t\t\t--noise4-secondary-channel: #aa795a;\n\t\t\t--noise4-primary-channel: #cdb09d;\n\t\t\t--noise4-secondary-note: #aa795a;\n\t\t\t--noise4-primary-note: #CDAF9D;\n\t\t\t--noise5-secondary-channel: #bb987c;\n\t\t\t--noise5-primary-channel: #decdbf;\n\t\t\t--noise5-secondary-note: #bb987c;\n\t\t\t--noise5-primary-note: #decdbf;\n\t\t\t--mod1-secondary-channel: #6ca784;\n\t\t\t--mod1-primary-channel: #accdb9;\n\t\t\t--mod1-secondary-note: #6ca784;\n\t\t\t--mod1-primary-note: #accdb9;\n\t\t\t--mod2-secondary-channel: #7daa9f;\n\t\t\t--mod2-primary-channel: #bbd3cd;\n\t\t\t--mod2-secondary-note: #7daa9f;\n\t\t\t--mod2-primary-note: #bbd3cd;\n\t\t\t--mod3-secondary-channel: #70a3a9;\n\t\t\t--mod3-primary-channel: #afcccf;\n\t\t\t--mod3-secondary-note: #70a3a9;\n\t\t\t--mod3-primary-note: #afcccf;\n\t\t\t--mod4-secondary-channel: #5698b8;\n\t\t\t--mod4-primary-channel: #9ec3d6;\n\t\t\t--mod4-secondary-note: #5698b8;\n\t\t\t--mod4-primary-note: #9ec3d6;\n\t\t\t--mod-label-primary: #24160f;\n\t\t\t--mod-label-secondary-text: #E5AFC2;\n\t\t\t--mod-label-primary-text: #decdbf;\n\t\t\t--disabled-note-primary: #bababa;\n\t\t\t--disabled-note-secondary: #878787;\n\t\t}`,\n\n\t\t\"poly\":\n\t\t\t`:root {\n\t\t\t--page-margin: #000;\n\t\t\t--editor-background: #000;\n\t\t\t--hover-preview: #808080;\n\t\t\t--playhead: #808080;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #cccccc;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: #696969;\n\t\t\t--box-selection-fill: #cccccc40;\n\t\t\t--loop-accent: #808080;\n\t\t\t--link-accent: white;\n\t\t\t--ui-widget-background: #232323;\n\t\t\t--ui-widget-focus: #303030;\n\t\t\t--pitch-background: #1a1a1a;\n\t\t\t--tonic: #262626;\n\t\t\t--fifth-note: #0d0d0d;\n\t\t\t--white-piano-key: #808080;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #262626;\n\t\t\t--track-editor-bg-pitch-dim: #1a1a1a;\n\t\t\t--track-editor-bg-noise: #262626;\n\t\t\t--track-editor-bg-noise-dim: #1a1a1a;\n\t\t\t--track-editor-bg-mod: #262626;\n\t\t\t--track-editor-bg-mod-dim: #1a1a1a;\n\t\t\t--multiplicative-mod-slider: #808080;\n\t\t\t--overwriting-mod-slider: #808080;\n\t\t\t--indicator-primary: #808080;\n\t\t\t--indicator-secondary: #333333;\n\t\t\t--select2-opt-group: #232323;\n\t\t\t--input-box-outline: #222;\n\t\t\t--mute-button-normal: #808080;\n\t\t\t--mute-button-mod: #808080;\n\t\t\t--mod-label-primary: #232323;\n\t\t\t--mod-label-secondary-text: #696969;\n\t\t\t--mod-label-primary-text: #cdcdcd;\n\t\t\t--pitch-secondary-channel-hue: 208;\n\t\t\t--pitch-secondary-channel-hue-scale: 10;\n\t\t\t--pitch-secondary-channel-sat: 100;\n\t\t\t--pitch-secondary-channel-sat-scale: 0;\n\t\t\t--pitch-secondary-channel-lum: 88;\n\t\t\t--pitch-secondary-channel-lum-scale: 0;\n\t\t\t--pitch-primary-channel-hue: 207;\n\t\t\t--pitch-primary-channel-hue-scale: 10;\n\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t--pitch-primary-channel-sat-scale: 0;\n\t\t\t--pitch-primary-channel-lum: 910;\n\t\t\t--pitch-primary-channel-lum-scale: 0;\n\t\t\t--pitch-secondary-note-hue: 208;\n\t\t\t--pitch-secondary-note-hue-scale: 10;\n\t\t\t--pitch-secondary-note-sat: 100;\n\t\t\t--pitch-secondary-note-sat-scale: 0;\n\t\t\t--pitch-secondary-note-lum: 88;\n\t\t\t--pitch-secondary-note-lum-scale: 0;\n\t\t\t--pitch-primary-note-hue: 208;\n\t\t\t--pitch-primary-note-hue-scale: 10;\n\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t--pitch-primary-note-sat-scale: 0;\n\t\t\t--pitch-primary-note-lum: 910;\n\t\t\t--pitch-primary-note-lum-scale: 0;\n\t\t\t--noise-secondary-channel-hue: 328;\n\t\t\t--noise-secondary-channel-hue-scale: 10;\n\t\t\t--noise-secondary-channel-sat: 100;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 88;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 327;\n\t\t\t--noise-primary-channel-hue-scale: 10;\n\t\t\t--noise-primary-channel-sat: 100;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 910;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 328;\n\t\t\t--noise-secondary-note-hue-scale: 10;\n\t\t\t--noise-secondary-note-sat: 100;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 88;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 327;\n\t\t\t--noise-primary-note-hue-scale: 10;\n\t\t\t--noise-primary-note-sat: 100;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 910;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 87;\n\t\t\t--mod-secondary-channel-hue-scale: 10;\n\t\t\t--mod-secondary-channel-sat: 100;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 88;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 88;\n\t\t\t--mod-primary-channel-hue-scale: 10;\n\t\t\t--mod-primary-channel-sat: 100;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 910;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 87;\n\t\t\t--mod-secondary-note-hue-scale: 10;\n\t\t\t--mod-secondary-note-sat: 100;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 88;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 88;\n\t\t\t--mod-primary-note-hue-scale: 10;\n\t\t\t--mod-primary-note-sat: 100;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 910;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #c6c6c6;\n\t\t\t--disabled-note-secondary: #8c8c8c;\n\t\t}`,\n\n\t\t\"blutonium\":\n\t\t\t`:root {\n\t\t\t--page-margin: #02070D;\n\t\t\t--editor-background: #02070D;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: #9bd1ee;\n\t\t\t--secondary-text: #5a6da8;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(68 68 255 / 99%);\n\t\t\t--box-selection-fill: rgb(0 0 255 / 30%);\n\t\t\t--loop-accent: #024aca;\n\t\t\t--link-accent: #024aca;\n\t\t\t--ui-widget-background: #161c2e;\n\t\t\t--ui-widget-focus: #262c3e;\n\t\t\t--pitch-background: #22272D;\n\t\t\t--tonic: #1b3056;\n\t\t\t--fifth-note: #344051;\n\t\t\t--white-piano-key: #a6c6ed;\n\t\t\t--black-piano-key: #2f4687;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #25284c;\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\n\t\t\t--track-editor-bg-noise: #261f42;\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\n\t\t\t--track-editor-bg-mod: #183049;\n\t\t\t--track-editor-bg-mod-dim: #102132;\n\t\t\t--multiplicative-mod-slider: #344a7f;\n\t\t\t--overwriting-mod-slider: #344a7f;\n\t\t\t--indicator-primary: #024aca;\n\t\t\t--indicator-secondary: #00177d;\n\t\t\t--select2-opt-group: #141e34;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #273b9d;\n\t\t\t--mute-button-mod: #27989d;\n\t\t\t--pitch1-secondary-channel: hsl(200, 100%, 40%);\n\t\t\t--pitch1-primary-channel: #99ddff;\n\t\t\t--pitch1-secondary-note: hsl(200, 100%, 40%);\n\t\t\t--pitch1-primary-note: #99ddff;\n\t\t\t--pitch2-secondary-channel: \thsl(212, 100%, 34%);\n\t\t\t--pitch2-primary-channel: #5BA8FF;\n\t\t\t--pitch2-secondary-note: hsl(212, 100%, 34%);\n\t\t\t--pitch2-primary-note: #5BA8FF;\n\t\t\t--pitch3-secondary-channel: #024ACA;\n\t\t\t--pitch3-primary-channel: #0A89FF;\n\t\t\t--pitch3-secondary-note: #024ACA;\n\t\t\t--pitch3-primary-note: #0A89FF;\n\t\t\t--pitch4-secondary-channel: #00177D;\n\t\t\t--pitch4-primary-channel: #024ACA;\n\t\t\t--pitch4-secondary-note: #00177D;\n\t\t\t--pitch4-primary-note: #024ACA;\n\t\t\t--pitch5-secondary-channel: #000e4e;\n\t\t\t--pitch5-primary-channel: #0023bf;\n\t\t\t--pitch5-secondary-note: #000e4e;\n\t\t\t--pitch5-primary-note: #0023bf;\n\t\t\t--pitch6-secondary-channel: #8990FE;\n\t\t\t--pitch6-primary-channel: #C2C6FF;\n\t\t\t--pitch6-secondary-note: #8990FE;\n\t\t\t--pitch6-primary-note: #C2C6FF;\n\t\t\t--pitch7-secondary-channel: #5E65D3;\n\t\t\t--pitch7-primary-channel: #8990FE;\n\t\t\t--pitch7-secondary-note: #5E65D3;\n\t\t\t--pitch7-primary-note: #8990FE;\n\t\t\t--pitch8-secondary-channel: #3138A6;\n\t\t\t--pitch8-primary-channel: #5E65D3;\n\t\t\t--pitch8-secondary-note: #3138A6;\n\t\t\t--pitch8-primary-note: #5E65D3;\n\t\t\t--pitch9-secondary-channel: #1B0B7F;\n\t\t\t--pitch9-primary-channel: #3138A6;\n\t\t\t--pitch9-secondary-note: #1B0B7F;\n\t\t\t--pitch9-primary-note: #3138A6;\n\t\t\t--pitch10-secondary-channel: #13015D;\n\t\t\t--pitch10-primary-channel: #1c02bd;\n\t\t\t--pitch10-secondary-note: #13015D;\n\t\t\t--pitch10-primary-note: #1c02bd;\n\t\t\t--noise1-secondary-channel: #A675FE;\n\t\t\t--noise1-primary-channel: #E2C9FF;\n\t\t\t--noise1-secondary-note: #A675FE;\n\t\t\t--noise1-primary-note: #E2C9FF;\n\t\t\t--noise2-secondary-channel: #6A31CA;\n\t\t\t--noise2-primary-channel: #A675FE;\n\t\t\t--noise2-secondary-note: #6A31CA;\n\t\t\t--noise2-primary-note: #A675FE;\n\t\t\t--noise3-secondary-channel: #5A1991;\n\t\t\t--noise3-primary-channel: #6A31CA;\n\t\t\t--noise3-secondary-note: #5A1991;\n\t\t\t--noise3-primary-note: #6A31CA;\n\t\t\t--noise4-secondary-channel: #2f1a68;\n\t\t\t--noise4-primary-channel: #5A1991;\n\t\t\t--noise4-secondary-note: #2f1a68;\n\t\t\t--noise4-primary-note: #5A1991;\n\t\t\t--noise5-secondary-channel: #211640;\n\t\t\t--noise5-primary-channel: #391b8d;\n\t\t\t--noise5-secondary-note: #211640;\n\t\t\t--noise5-primary-note: #391b8d;\n\t\t\t--mod1-secondary-channel: #25E2CD;\n\t\t\t--mod1-primary-channel: #BDFFCA;\n\t\t\t--mod1-secondary-note: #25E2CD;\n\t\t\t--mod1-primary-note: #BDFFCA;\n\t\t\t--mod2-secondary-channel: #0A98AC;\n\t\t\t--mod2-primary-channel: #25E2CD;\n\t\t\t--mod2-secondary-note: #0A98AC;\n\t\t\t--mod2-primary-note: #25E2CC;\n\t\t\t--mod3-secondary-channel: #005280;\n\t\t\t--mod3-primary-channel: #0A98AC;\n\t\t\t--mod3-secondary-note: #005280;\n\t\t\t--mod3-primary-note: #0A98AC;\n\t\t\t--mod4-secondary-channel: #0f3670;\n\t\t\t--mod4-primary-channel: #1369c1;\n\t\t\t--mod4-secondary-note: #0f3670;\n\t\t\t--mod4-primary-note: #1369c1;\n\t\t\t--mod-label-primary: #191d26;\n\t\t\t--mod-label-secondary-text: #024aca;\n\t\t\t--mod-label-primary-text: #ffffffa6;\n\t\t\t--disabled-note-primary: #c9c9c9;\n\t\t\t--disabled-note-secondary: #616161;\n\t}`,\n    };\n\n    public static readonly pageMargin: string = \"var(--page-margin)\";\n    public static readonly editorBackground: string = \"var(--editor-background)\";\n    public static readonly hoverPreview: string = \"var(--hover-preview)\";\n    public static readonly playhead: string = \"var(--playhead)\";\n    public static readonly primaryText: string = \"var(--primary-text)\";\n    public static readonly secondaryText: string = \"var(--secondary-text)\";\n    public static readonly invertedText: string = \"var(--inverted-text)\";\n    public static readonly textSelection: string = \"var(--text-selection)\";\n    public static readonly boxSelectionFill: string = \"var(--box-selection-fill)\";\n    public static readonly loopAccent: string = \"var(--loop-accent)\";\n    public static readonly linkAccent: string = \"var(--link-accent)\";\n    public static readonly uiWidgetBackground: string = \"var(--ui-widget-background)\";\n    public static readonly uiWidgetFocus: string = \"var(--ui-widget-focus)\";\n    public static readonly pitchBackground: string = \"var(--pitch-background)\";\n    public static readonly tonic: string = \"var(--tonic)\";\n    public static readonly fifthNote: string = \"var(--fifth-note)\";\n    public static readonly whitePianoKey: string = \"var(--white-piano-key)\";\n    public static readonly blackPianoKey: string = \"var(--black-piano-key)\";\n    public static readonly useColorFormula: string = \"var(--use-color-formula)\";\n    public static readonly pitchSecondaryChannelHue: string = \"var(--pitch-secondary-channel-hue)\";\n    public static readonly pitchSecondaryChannelHueScale: string = \"var(--pitch-secondary-channel-hue-scale)\";\n    public static readonly pitchSecondaryChannelSat: string = \"var(--pitch-secondary-channel-sat)\";\n    public static readonly pitchSecondaryChannelSatScale: string = \"var(--pitch-secondary-channel-sat-scale)\";\n    public static readonly pitchSecondaryChannelLum: string = \"var(--pitch-secondary-channel-lum)\";\n    public static readonly pitchSecondaryChannelLumScale: string = \"var(--pitch-secondary-channel-lum-scale)\";\n    public static readonly pitchPrimaryChannelHue: string = \"var(--pitch-primary-channel-hue)\";\n    public static readonly pitchPrimaryChannelHueScale: string = \"var(--pitch-primary-channel-hue-scale)\";\n    public static readonly pitchPrimaryChannelSat: string = \"var(--pitch-primary-channel-sat)\";\n    public static readonly pitchPrimaryChannelSatScale: string = \"var(--pitch-primary-channel-sat-scale)\";\n    public static readonly pitchPrimaryChannelLum: string = \"var(--pitch-primary-channel-lum)\";\n    public static readonly pitchPrimaryChannelLumScale: string = \"var(--pitch-primary-channel-lum-scale)\";\n    public static readonly pitchSecondaryNoteHue: string = \"var(--pitch-secondary-note-hue)\";\n    public static readonly pitchSecondaryNoteHueScale: string = \"var(--pitch-secondary-note-hue-scale)\";\n    public static readonly pitchSecondaryNoteSat: string = \"var(--pitch-secondary-note-sat)\";\n    public static readonly pitchSecondaryNoteSatScale: string = \"var(--pitch-secondary-note-sat-scale)\";\n    public static readonly pitchSecondaryNoteLum: string = \"var(--pitch-secondary-note-lum)\";\n    public static readonly pitchSecondaryNoteLumScale: string = \"var(--pitch-secondary-note-lum-scale)\";\n    public static readonly pitchPrimaryNoteHue: string = \"var(--pitch-primary-note-hue)\";\n    public static readonly pitchPrimaryNoteHueScale: string = \"var(--pitch-primary-note-hue-scale)\";\n    public static readonly pitchPrimaryNoteSat: string = \"var(--pitch-primary-note-sat)\";\n    public static readonly pitchPrimaryNoteSatScale: string = \"var(--pitch-primary-note-sat-scale)\";\n    public static readonly pitchPrimaryNoteLum: string = \"var(--pitch-primary-note-lum)\";\n    public static readonly pitchPrimaryNoteLumScale: string = \"var(--pitch-primary-note-lum-scale)\";\n    public static readonly modSecondaryChannelHue: string = \"var(--mod-secondary-channel-hue)\";\n    public static readonly modSecondaryChannelHueScale: string = \"var(--mod-secondary-channel-hue-scale)\";\n    public static readonly modSecondaryChannelSat: string = \"var(--mod-secondary-channel-sat)\";\n    public static readonly modSecondaryChannelSatScale: string = \"var(--mod-secondary-channel-sat-scale)\";\n    public static readonly modSecondaryChannelLum: string = \"var(--mod-secondary-channel-lum)\";\n    public static readonly modSecondaryChannelLumScale: string = \"var(--mod-secondary-channel-lum-scale)\";\n    public static readonly modPrimaryChannelHue: string = \"var(--mod-primary-channel-hue)\";\n    public static readonly modPrimaryChannelHueScale: string = \"var(--mod-primary-channel-hue-scale)\";\n    public static readonly modPrimaryChannelSat: string = \"var(--mod-primary-channel-sat)\";\n    public static readonly modPrimaryChannelSatScale: string = \"var(--mod-primary-channel-sat-scale)\";\n    public static readonly modPrimaryChannelLum: string = \"var(--mod-primary-channel-lum)\";\n    public static readonly modPrimaryChannelLumScale: string = \"var(--mod-primary-channel-lum-scale)\";\n    public static readonly modSecondaryNoteHue: string = \"var(--mod-secondary-note-hue)\";\n    public static readonly modSecondaryNoteHueScale: string = \"var(--mod-secondary-note-hue-scale)\";\n    public static readonly modSecondaryNoteSat: string = \"var(--mod-secondary-note-sat)\";\n    public static readonly modSecondaryNoteSatScale: string = \"var(--mod-secondary-note-sat-scale)\";\n    public static readonly modSecondaryNoteLum: string = \"var(--mod-secondary-note-lum)\";\n    public static readonly modSecondaryNoteLumScale: string = \"var(--mod-secondary-note-lum-scale)\";\n    public static readonly modPrimaryNoteHue: string = \"var(--mod-primary-note-hue)\";\n    public static readonly modPrimaryNoteHueScale: string = \"var(--mod-primary-note-hue-scale)\";\n    public static readonly modPrimaryNoteSat: string = \"var(--mod-primary-note-sat)\";\n    public static readonly modPrimaryNoteSatScale: string = \"var(--mod-primary-note-sat-scale)\";\n    public static readonly modPrimaryNoteLum: string = \"var(--mod-primary-note-lum)\";\n    public static readonly modPrimaryNoteLumScale: string = \"var(--mod-primary-note-lum-scale)\";\n    public static readonly noiseSecondaryChannelHue: string = \"var(--noise-secondary-channel-hue)\";\n    public static readonly noiseSecondaryChannelHueScale: string = \"var(--noise-secondary-channel-hue-scale)\";\n    public static readonly noiseSecondaryChannelSat: string = \"var(--noise-secondary-channel-sat)\";\n    public static readonly noiseSecondaryChannelSatScale: string = \"var(--noise-secondary-channel-sat-scale)\";\n    public static readonly noiseSecondaryChannelLum: string = \"var(--noise-secondary-channel-lum)\";\n    public static readonly noiseSecondaryChannelLumScale: string = \"var(--noise-secondary-channel-lum-scale)\";\n    public static readonly noisePrimaryChannelHue: string = \"var(--noise-primary-channel-hue)\";\n    public static readonly noisePrimaryChannelHueScale: string = \"var(--noise-primary-channel-hue-scale)\";\n    public static readonly noisePrimaryChannelSat: string = \"var(--noise-primary-channel-sat)\";\n    public static readonly noisePrimaryChannelSatScale: string = \"var(--noise-primary-channel-sat-scale)\";\n    public static readonly noisePrimaryChannelLum: string = \"var(--noise-primary-channel-lum)\";\n    public static readonly noisePrimaryChannelLumScale: string = \"var(--noise-primary-channel-lum-scale)\";\n    public static readonly noiseSecondaryNoteHue: string = \"var(--noise-secondary-note-hue)\";\n    public static readonly noiseSecondaryNoteHueScale: string = \"var(--noise-secondary-note-hue-scale)\";\n    public static readonly noiseSecondaryNoteSat: string = \"var(--noise-secondary-note-sat)\";\n    public static readonly noiseSecondaryNoteSatScale: string = \"var(--noise-secondary-note-sat-scale)\";\n    public static readonly noiseSecondaryNoteLum: string = \"var(--noise-secondary-note-lum)\";\n    public static readonly noiseSecondaryNoteLumScale: string = \"var(--noise-secondary-note-lum-scale)\";\n    public static readonly noisePrimaryNoteHue: string = \"var(--noise-primary-note-hue)\";\n    public static readonly noisePrimaryNoteHueScale: string = \"var(--noise-primary-note-hue-scale)\";\n    public static readonly noisePrimaryNoteSat: string = \"var(--noise-primary-note-sat)\";\n    public static readonly noisePrimaryNoteSatScale: string = \"var(--noise-primary-note-sat-scale)\";\n    public static readonly noisePrimaryNoteLum: string = \"var(--noise-primary-note-lum)\";\n    public static readonly noisePrimaryNoteLumScale: string = \"var(--noise-primary-note-lum-scale)\";\n    public static readonly trackEditorBgPitch: string = \"var(--track-editor-bg-pitch)\";\n    public static readonly trackEditorBgPitchDim: string = \"var(--track-editor-bg-pitch-dim)\";\n    public static readonly trackEditorBgNoise: string = \"var(--track-editor-bg-noise)\";\n    public static readonly trackEditorBgNoiseDim: string = \"var(--track-editor-bg-noise-dim)\";\n    public static readonly trackEditorBgMod: string = \"var(--track-editor-bg-mod)\";\n    public static readonly trackEditorBgModDim: string = \"var(--track-editor-bg-mod-dim)\";\n    public static readonly multiplicativeModSlider: string = \"var(--multiplicative-mod-slider)\";\n    public static readonly overwritingModSlider: string = \"var(--overwriting-mod-slider)\";\n    public static readonly indicatorPrimary: string = \"var(--indicator-primary)\";\n    public static readonly indicatorSecondary: string = \"var(--indicator-secondary)\";\n    public static readonly select2OptGroup: string = \"var(--select2-opt-group)\";\n    public static readonly inputBoxOutline: string = \"var(--input-box-outline)\";\n    public static readonly muteButtonNormal: string = \"var(--mute-button-normal)\";\n    public static readonly muteButtonMod: string = \"var(--mute-button-mod)\";\n    public static readonly modLabelPrimary: string = \"var(--mod-label-primary)\";\n    public static readonly modLabelSecondaryText: string = \"var(--mod-label-secondary-text)\";\n    public static readonly modLabelPrimaryText: string = \"var(--mod-label-primary-text)\";\n    public static readonly disabledNotePrimary: string = \"var(--disabled-note-primary)\";\n\tpublic static readonly disabledNoteSecondary: string = \"var(--disabled-note-secondary)\";\n\n\tpublic static c_pitchSecondaryChannelHue: number = 0;\n\tpublic static c_pitchSecondaryChannelHueScale: number = 0;\n\tpublic static c_pitchSecondaryChannelSat: number = 0;\n\tpublic static c_pitchSecondaryChannelSatScale: number = 0;\n\tpublic static c_pitchSecondaryChannelLum: number = 0;\n\tpublic static c_pitchSecondaryChannelLumScale: number = 0;\n\tpublic static c_pitchPrimaryChannelHue: number = 0;\n\tpublic static c_pitchPrimaryChannelHueScale: number = 0;\n\tpublic static c_pitchPrimaryChannelSat: number = 0;\n\tpublic static c_pitchPrimaryChannelSatScale: number = 0;\n\tpublic static c_pitchPrimaryChannelLum: number = 0;\n\tpublic static c_pitchPrimaryChannelLumScale: number = 0;\n\tpublic static c_pitchSecondaryNoteHue: number = 0;\n\tpublic static c_pitchSecondaryNoteHueScale: number = 0;\n\tpublic static c_pitchSecondaryNoteSat: number = 0;\n\tpublic static c_pitchSecondaryNoteSatScale: number = 0;\n\tpublic static c_pitchSecondaryNoteLum: number = 0;\n\tpublic static c_pitchSecondaryNoteLumScale: number = 0;\n\tpublic static c_pitchPrimaryNoteHue: number = 0;\n\tpublic static c_pitchPrimaryNoteHueScale: number = 0;\n\tpublic static c_pitchPrimaryNoteSat: number = 0;\n\tpublic static c_pitchPrimaryNoteSatScale: number = 0;\n\tpublic static c_pitchPrimaryNoteLum: number = 0;\n\tpublic static c_pitchPrimaryNoteLumScale: number = 0;\n\tpublic static c_modSecondaryChannelHue: number = 0;\n\tpublic static c_modSecondaryChannelHueScale: number = 0;\n\tpublic static c_modSecondaryChannelSat: number = 0;\n\tpublic static c_modSecondaryChannelSatScale: number = 0;\n\tpublic static c_modSecondaryChannelLum: number = 0;\n\tpublic static c_modSecondaryChannelLumScale: number = 0;\n\tpublic static c_modPrimaryChannelHue: number = 0;\n\tpublic static c_modPrimaryChannelHueScale: number = 0;\n\tpublic static c_modPrimaryChannelSat: number = 0;\n\tpublic static c_modPrimaryChannelSatScale: number = 0;\n\tpublic static c_modPrimaryChannelLum: number = 0;\n\tpublic static c_modPrimaryChannelLumScale: number = 0;\n\tpublic static c_modSecondaryNoteHue: number = 0;\n\tpublic static c_modSecondaryNoteHueScale: number = 0;\n\tpublic static c_modSecondaryNoteSat: number = 0;\n\tpublic static c_modSecondaryNoteSatScale: number = 0;\n\tpublic static c_modSecondaryNoteLum: number = 0;\n\tpublic static c_modSecondaryNoteLumScale: number = 0;\n\tpublic static c_modPrimaryNoteHue: number = 0;\n\tpublic static c_modPrimaryNoteHueScale: number = 0;\n\tpublic static c_modPrimaryNoteSat: number = 0;\n\tpublic static c_modPrimaryNoteSatScale: number = 0;\n\tpublic static c_modPrimaryNoteLum: number = 0;\n\tpublic static c_modPrimaryNoteLumScale: number = 0;\n\tpublic static c_noiseSecondaryChannelHue: number = 0;\n\tpublic static c_noiseSecondaryChannelHueScale: number = 0;\n\tpublic static c_noiseSecondaryChannelSat: number = 0;\n\tpublic static c_noiseSecondaryChannelSatScale: number = 0;\n\tpublic static c_noiseSecondaryChannelLum: number = 0;\n\tpublic static c_noiseSecondaryChannelLumScale: number = 0;\n\tpublic static c_noisePrimaryChannelHue: number = 0;\n\tpublic static c_noisePrimaryChannelHueScale: number = 0;\n\tpublic static c_noisePrimaryChannelSat: number = 0;\n\tpublic static c_noisePrimaryChannelSatScale: number = 0;\n\tpublic static c_noisePrimaryChannelLum: number = 0;\n\tpublic static c_noisePrimaryChannelLumScale: number = 0;\n\tpublic static c_noiseSecondaryNoteHue: number = 0;\n\tpublic static c_noiseSecondaryNoteHueScale: number = 0;\n\tpublic static c_noiseSecondaryNoteSat: number = 0;\n\tpublic static c_noiseSecondaryNoteSatScale: number = 0;\n\tpublic static c_noiseSecondaryNoteLum: number = 0;\n\tpublic static c_noiseSecondaryNoteLumScale: number = 0;\n\tpublic static c_noisePrimaryNoteHue: number = 0;\n\tpublic static c_noisePrimaryNoteHueScale: number = 0;\n\tpublic static c_noisePrimaryNoteSat: number = 0;\n\tpublic static c_noisePrimaryNoteSatScale: number = 0;\n\tpublic static c_noisePrimaryNoteLum: number = 0;\n\tpublic static c_noisePrimaryNoteLumScale: number = 0;\n\n\tpublic static c_invertedText: string = \"\";\n\tpublic static c_trackEditorBgNoiseDim: string = \"\";\n\tpublic static c_trackEditorBgNoise: string = \"\";\n\tpublic static c_trackEditorBgModDim: string = \"\";\n\tpublic static c_trackEditorBgMod: string = \"\";\n\tpublic static c_trackEditorBgPitchDim: string = \"\";\n\tpublic static c_trackEditorBgPitch: string = \"\";\n\n\n    public static readonly pitchChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"pitch1\", // cyan\n            secondaryChannel: \"var(--pitch1-secondary-channel)\",\n            primaryChannel: \"var(--pitch1-primary-channel)\",\n            secondaryNote: \"var(--pitch1-secondary-note)\",\n            primaryNote: \"var(--pitch1-primary-note)\",\n        }, {\n            name: \"pitch2\", // yellow\n            secondaryChannel: \"var(--pitch2-secondary-channel)\",\n            primaryChannel: \"var(--pitch2-primary-channel)\",\n            secondaryNote: \"var(--pitch2-secondary-note)\",\n            primaryNote: \"var(--pitch2-primary-note)\",\n        }, {\n            name: \"pitch3\", // orange\n            secondaryChannel: \"var(--pitch3-secondary-channel)\",\n            primaryChannel: \"var(--pitch3-primary-channel)\",\n            secondaryNote: \"var(--pitch3-secondary-note)\",\n            primaryNote: \"var(--pitch3-primary-note)\",\n        }, {\n            name: \"pitch4\", // green\n            secondaryChannel: \"var(--pitch4-secondary-channel)\",\n            primaryChannel: \"var(--pitch4-primary-channel)\",\n            secondaryNote: \"var(--pitch4-secondary-note)\",\n            primaryNote: \"var(--pitch4-primary-note)\",\n        }, {\n            name: \"pitch5\", // magenta\n            secondaryChannel: \"var(--pitch5-secondary-channel)\",\n            primaryChannel: \"var(--pitch5-primary-channel)\",\n            secondaryNote: \"var(--pitch5-secondary-note)\",\n            primaryNote: \"var(--pitch5-primary-note)\",\n        }, {\n            name: \"pitch6\", // blue\n            secondaryChannel: \"var(--pitch6-secondary-channel)\",\n            primaryChannel: \"var(--pitch6-primary-channel)\",\n            secondaryNote: \"var(--pitch6-secondary-note)\",\n            primaryNote: \"var(--pitch6-primary-note)\",\n        }, {\n            name: \"pitch7\", // olive\n            secondaryChannel: \"var(--pitch7-secondary-channel)\",\n            primaryChannel: \"var(--pitch7-primary-channel)\",\n            secondaryNote: \"var(--pitch7-secondary-note)\",\n            primaryNote: \"var(--pitch7-primary-note)\",\n        }, {\n            name: \"pitch8\", // red\n            secondaryChannel: \"var(--pitch8-secondary-channel)\",\n            primaryChannel: \"var(--pitch8-primary-channel)\",\n            secondaryNote: \"var(--pitch8-secondary-note)\",\n            primaryNote: \"var(--pitch8-primary-note)\",\n        }, {\n            name: \"pitch9\", // teal\n            secondaryChannel: \"var(--pitch9-secondary-channel)\",\n            primaryChannel: \"var(--pitch9-primary-channel)\",\n            secondaryNote: \"var(--pitch9-secondary-note)\",\n            primaryNote: \"var(--pitch9-primary-note)\",\n        }, {\n            name: \"pitch10\", // purple\n            secondaryChannel: \"var(--pitch10-secondary-channel)\",\n            primaryChannel: \"var(--pitch10-primary-channel)\",\n            secondaryNote: \"var(--pitch10-secondary-note)\",\n            primaryNote: \"var(--pitch10-primary-note)\",\n        },\n    ]);\n    public static readonly noiseChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"noise1\", // gray\n            secondaryChannel: \"var(--noise1-secondary-channel)\",\n            primaryChannel: \"var(--noise1-primary-channel)\",\n            secondaryNote: \"var(--noise1-secondary-note)\",\n            primaryNote: \"var(--noise1-primary-note)\",\n        }, {\n            name: \"noise2\", // brown\n            secondaryChannel: \"var(--noise2-secondary-channel)\",\n            primaryChannel: \"var(--noise2-primary-channel)\",\n            secondaryNote: \"var(--noise2-secondary-note)\",\n            primaryNote: \"var(--noise2-primary-note)\",\n        }, {\n            name: \"noise3\", // azure\n            secondaryChannel: \"var(--noise3-secondary-channel)\",\n            primaryChannel: \"var(--noise3-primary-channel)\",\n            secondaryNote: \"var(--noise3-secondary-note)\",\n            primaryNote: \"var(--noise3-primary-note)\",\n        }, {\n            name: \"noise4\", // purple\n            secondaryChannel: \"var(--noise4-secondary-channel)\",\n            primaryChannel: \"var(--noise4-primary-channel)\",\n            secondaryNote: \"var(--noise4-secondary-note)\",\n            primaryNote: \"var(--noise4-primary-note)\",\n        }, {\n            name: \"noise5\", // sage\n            secondaryChannel: \"var(--noise5-secondary-channel)\",\n            primaryChannel: \"var(--noise5-primary-channel)\",\n            secondaryNote: \"var(--noise5-secondary-note)\",\n            primaryNote: \"var(--noise5-primary-note)\",\n        },\n    ]);\n    public static readonly modChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"mod1\",\n            secondaryChannel: \"var(--mod1-secondary-channel)\",\n            primaryChannel: \"var(--mod1-primary-channel)\",\n            secondaryNote: \"var(--mod1-secondary-note)\",\n            primaryNote: \"var(--mod1-primary-note)\",\n        }, {\n            name: \"mod2\",\n            secondaryChannel: \"var(--mod2-secondary-channel)\",\n            primaryChannel: \"var(--mod2-primary-channel)\",\n            secondaryNote: \"var(--mod2-secondary-note)\",\n            primaryNote: \"var(--mod2-primary-note)\",\n        }, {\n            name: \"mod3\",\n            secondaryChannel: \"var(--mod3-secondary-channel)\",\n            primaryChannel: \"var(--mod3-primary-channel)\",\n            secondaryNote: \"var(--mod3-secondary-note)\",\n            primaryNote: \"var(--mod3-primary-note)\",\n        }, {\n            name: \"mod4\",\n            secondaryChannel: \"var(--mod4-secondary-channel)\",\n            primaryChannel: \"var(--mod4-primary-channel)\",\n            secondaryNote: \"var(--mod4-secondary-note)\",\n            primaryNote: \"var(--mod4-primary-note)\",\n        },\n    ]);\n\n    public static resetColors() {\n        this.colorLookup.clear();\n    }\n\n    // Same as below, but won't return var colors\n    public static getComputedChannelColor(song: Song, channel: number): ChannelColors {\n        if (!this.usesColorFormula) {\n            let base: ChannelColors = ColorConfig.getChannelColor(song, channel);\n            // Trim away \"var(...)\"\n            var regex = /\\(([^)]+)\\)/;\n            let newChannelSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\n            let newChannelPrimary: string = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\n            let newNoteSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\n            let newNotePrimary: string = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\n            return <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n        }\n        else {\n            return ColorConfig.getChannelColor(song, channel);\n        }\n    };\n\n    public static getChannelColor(song: Song, channel: number): ChannelColors {\n        if (!this.usesColorFormula) {\n            // Set colors, not defined by formula\n            if (channel < song.pitchChannelCount) {\n                return ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length];\n            } else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\n                return ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % ColorConfig.noiseChannels.length];\n            } else {\n                return ColorConfig.modChannels[(channel - song.pitchChannelCount - song.noiseChannelCount) % ColorConfig.modChannels.length];\n            }\n        }\n        else {\n            // Determine if color is cached\n            if (ColorConfig.colorLookup.has(channel)) {\n                return ColorConfig.colorLookup.get(channel) as ChannelColors;\n            }\n            else {\n                // Formulaic color definition\n                if (channel < song.pitchChannelCount) {\n                    // Pitch formula\n\n                    let newChannelSecondary: string = \"hsl(\" + ((this.c_pitchSecondaryChannelHue + (channel * this.c_pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_pitchSecondaryChannelSat * (1 - (this.c_pitchSecondaryChannelSatScale * Math.floor(channel / 9)))) + \"%,\"\n\t\t\t\t\t\t+ (this.c_pitchSecondaryChannelLum * (1 - (this.c_pitchSecondaryChannelLumScale * Math.floor(channel / 9)))) + \"%)\";\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_pitchPrimaryChannelHue + (channel * this.c_pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_pitchPrimaryChannelSat * (1 - (this.c_pitchPrimaryChannelSatScale * Math.floor(channel / 9)))) + \"%,\"\n\t\t\t\t\t\t+ (this.c_pitchPrimaryChannelLum * (1 - (this.c_pitchPrimaryChannelLumScale * Math.floor(channel / 9)))) + \"%)\";\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_pitchSecondaryNoteHue + (channel * this.c_pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_pitchSecondaryNoteSat * (1 - (this.c_pitchSecondaryNoteSatScale * Math.floor(channel / 9)))) + \"%,\"\n\t\t\t\t\t\t+ (this.c_pitchSecondaryNoteLum * (1 - (this.c_pitchSecondaryNoteLumScale * Math.floor(channel / 9)))) + \"%)\";\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_pitchPrimaryNoteHue + (channel * this.c_pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_pitchPrimaryNoteSat * (1 - (this.c_pitchPrimaryNoteSatScale * Math.floor(channel / 9)))) + \"%,\"\n\t\t\t\t\t\t+ (this.c_pitchPrimaryNoteLum * (1 - (this.c_pitchPrimaryNoteLumScale * Math.floor(channel / 9)))) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\n                    return newChannelColors;\n\n                }\n                else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\n                    // Noise formula\n                    \n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((this.c_noiseSecondaryChannelHue + (((channel - song.pitchChannelCount) * this.c_noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_noiseSecondaryChannelSat + channel * this.c_noiseSecondaryChannelSatScale) + \"%,\"\n\t\t\t\t\t\t+ (this.c_noiseSecondaryChannelLum + channel * this.c_noiseSecondaryChannelLumScale) + \"%)\";\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_noisePrimaryChannelHue + (((channel - song.pitchChannelCount) * this.c_noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_noisePrimaryChannelSat + channel * this.c_noisePrimaryChannelSatScale) + \"%,\"\n\t\t\t\t\t\t+ (this.c_noisePrimaryChannelLum + channel * this.c_noisePrimaryChannelLumScale) + \"%)\";\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_noiseSecondaryNoteHue + (((channel - song.pitchChannelCount) * this.c_noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_noiseSecondaryNoteSat + channel * this.c_noiseSecondaryNoteSatScale) + \"%,\"\n\t\t\t\t\t\t+ (this.c_noiseSecondaryNoteLum + channel * this.c_noiseSecondaryNoteLumScale) + \"%)\";\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_noisePrimaryNoteHue + (((channel - song.pitchChannelCount) * this.c_noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_noisePrimaryNoteSat + channel * this.c_noisePrimaryNoteSatScale) + \"%,\"\n\t\t\t\t\t\t+ (this.c_noisePrimaryNoteLum + channel * this.c_noisePrimaryNoteLumScale) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\n                    return newChannelColors;\n                }\n                else {\n                    // Mod formula\n                    \n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((this.c_modSecondaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_modSecondaryChannelSat + channel * this.c_modSecondaryChannelSatScale) + \"%,\"\n\t\t\t\t\t\t+ (this.c_modSecondaryChannelLum + channel * this.c_modSecondaryChannelLumScale) + \"%)\";\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((this.c_modPrimaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_modPrimaryChannelSat + channel * this.c_modPrimaryChannelSatScale) + \"%,\"\n\t\t\t\t\t\t+ (this.c_modPrimaryChannelLum + channel * this.c_modPrimaryChannelLumScale) + \"%)\";\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((this.c_modSecondaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_modSecondaryNoteSat + channel * this.c_modSecondaryNoteSatScale) + \"%,\"\n\t\t\t\t\t\t+ (this.c_modSecondaryNoteLum + channel * this.c_modSecondaryNoteLumScale) + \"%)\";\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((this.c_modPrimaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 360) + \",\"\n\t\t\t\t\t\t+ (this.c_modPrimaryNoteSat + channel * this.c_modPrimaryNoteSatScale) + \"%,\"\n\t\t\t\t\t\t+ (this.c_modPrimaryNoteLum + channel * this.c_modPrimaryNoteLumScale) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\n                    return newChannelColors;\n                }\n            }\n        }\n    }\n\n    private static readonly _styleElement: HTMLStyleElement = document.head.appendChild(HTML.style({ type: \"text/css\" }));\n\n    public static setTheme(name: string): void {\n\t\tlet theme: string = this.themes[name];\n\t\tif (theme == undefined) theme = this.themes[\"jummbox classic\"];\n\t\tthis._styleElement.textContent = theme;\n\n        const themeColor = <HTMLMetaElement>document.querySelector(\"meta[name='theme-color']\");\n        if (themeColor != null) {\n            themeColor.setAttribute(\"content\", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));\n        }\n\n\t\tthis.resetColors();\n\n\t\tthis.usesColorFormula = (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"true\");\n\n\t\tthis.c_invertedText = getComputedStyle(this._styleElement).getPropertyValue(\"--inverted-text\");\n\t\tthis.c_trackEditorBgNoiseDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise-dim\");\n\t\tthis.c_trackEditorBgNoise = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise\");\n\t\tthis.c_trackEditorBgModDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod-dim\");\n\t\tthis.c_trackEditorBgMod = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod\");\n\t\tthis.c_trackEditorBgPitchDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch-dim\");\n\t\tthis.c_trackEditorBgPitch = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch\");\n\n\t\tif (this.usesColorFormula) {\n\t\t\tthis.c_pitchSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue\");\n\t\t\tthis.c_pitchSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue-scale\");\n\t\t\tthis.c_pitchSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat\");\n\t\t\tthis.c_pitchSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat-scale\");\n\t\t\tthis.c_pitchSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum\");\n\t\t\tthis.c_pitchSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum-scale\");\n\t\t\tthis.c_pitchPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue\");\n\t\t\tthis.c_pitchPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue-scale\");\n\t\t\tthis.c_pitchPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat\");\n\t\t\tthis.c_pitchPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat-scale\");\n\t\t\tthis.c_pitchPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum\");\n\t\t\tthis.c_pitchPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum-scale\");\n\t\t\tthis.c_pitchSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue\");\n\t\t\tthis.c_pitchSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue-scale\");\n\t\t\tthis.c_pitchSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat\");\n\t\t\tthis.c_pitchSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat-scale\");\n\t\t\tthis.c_pitchSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum\");\n\t\t\tthis.c_pitchSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum-scale\");\n\t\t\tthis.c_pitchPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue\");\n\t\t\tthis.c_pitchPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue-scale\");\n\t\t\tthis.c_pitchPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat\");\n\t\t\tthis.c_pitchPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat-scale\");\n\t\t\tthis.c_pitchPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum\");\n\t\t\tthis.c_pitchPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum-scale\");\n\n\t\t\tthis.c_noiseSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue\");\n\t\t\tthis.c_noiseSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue-scale\");\n\t\t\tthis.c_noiseSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat\");\n\t\t\tthis.c_noiseSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat-scale\");\n\t\t\tthis.c_noiseSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum\");\n\t\t\tthis.c_noiseSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum-scale\");\n\t\t\tthis.c_noisePrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue\");\n\t\t\tthis.c_noisePrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue-scale\");\n\t\t\tthis.c_noisePrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat\");\n\t\t\tthis.c_noisePrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat-scale\");\n\t\t\tthis.c_noisePrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum\");\n\t\t\tthis.c_noisePrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum-scale\");\n\t\t\tthis.c_noiseSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue\");\n\t\t\tthis.c_noiseSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue-scale\");\n\t\t\tthis.c_noiseSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat\");\n\t\t\tthis.c_noiseSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat-scale\");\n\t\t\tthis.c_noiseSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum\");\n\t\t\tthis.c_noiseSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum-scale\");\n\t\t\tthis.c_noisePrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue\");\n\t\t\tthis.c_noisePrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue-scale\");\n\t\t\tthis.c_noisePrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat\");\n\t\t\tthis.c_noisePrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat-scale\");\n\t\t\tthis.c_noisePrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum\");\n\t\t\tthis.c_noisePrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum-scale\");\n\n\t\t\tthis.c_modSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue\");\n\t\t\tthis.c_modSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue-scale\");\n\t\t\tthis.c_modSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat\");\n\t\t\tthis.c_modSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat-scale\");\n\t\t\tthis.c_modSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum\");\n\t\t\tthis.c_modSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum-scale\");\n\t\t\tthis.c_modPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue\");\n\t\t\tthis.c_modPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue-scale\");\n\t\t\tthis.c_modPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat\");\n\t\t\tthis.c_modPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat-scale\");\n\t\t\tthis.c_modPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum\");\n\t\t\tthis.c_modPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum-scale\");\n\t\t\tthis.c_modSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue\");\n\t\t\tthis.c_modSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue-scale\");\n\t\t\tthis.c_modSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat\");\n\t\t\tthis.c_modSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat-scale\");\n\t\t\tthis.c_modSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum\");\n\t\t\tthis.c_modSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum-scale\");\n\t\t\tthis.c_modPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue\");\n\t\t\tthis.c_modPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue-scale\");\n\t\t\tthis.c_modPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat\");\n\t\t\tthis.c_modPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat-scale\");\n\t\t\tthis.c_modPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum\");\n\t\t\tthis.c_modPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum-scale\");\n\n        }\n\n    }\n\n    public static getComputed(name: string): string {\n        return getComputedStyle(this._styleElement).getPropertyValue(name);\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {ColorConfig} from \"./ColorConfig\";\nimport {HTML} from \"imperative-html/dist/esm/elements-strict\";\n\n\n// Determine if the user's browser/OS adds scrollbars that occupy space.\n// See: https://www.filamentgroup.com/lab/scrollbars/\nconst scrollBarTest: HTMLDivElement = document.body.appendChild(HTML.div({ style: \"width:30px; height:30px; overflow: auto;\" },\n\tHTML.div({ style: \"width:100%;height:40px\" }),\n));\nif ((<any>scrollBarTest).firstChild.clientWidth < 30) {\n\tdocument.documentElement.classList.add(\"obtrusive-scrollbars\");\n}\ndocument.body.removeChild(scrollBarTest);\n\n\ndocument.head.appendChild(HTML.style({ type: \"text/css\" }, `\n\n/* Note: \"#\" symbols need to be encoded as \"%23\" in SVG data urls, otherwise they are interpreted as fragment identifiers! */\n:root {\n\t--button-size: 26px;\n\t--settings-area-width: 192px;\n\t--play-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><path d=\"M -5 -8 L -5 8 L 8 0 z\" fill=\"gray\"/></svg>');\n\t--pause-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><rect x=\"-5\" y=\"-7\" width=\"4\" height=\"14\" fill=\"gray\"/><rect x=\"3\" y=\"-7\" width=\"4\" height=\"14\" fill=\"gray\"/></svg>');\n\t--record-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><circle cx=\"0\" cy=\"0\" r=\"6\" fill=\"gray\"/></svg>');\n\t--stop-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><rect x=\"-6\" y=\"-6\" width=\"12\" height=\"12\" fill=\"gray\"/></svg>');\n\t--prev-bar-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><rect x=\"-6\" y=\"-6\" width=\"2\" height=\"12\" fill=\"gray\"/><path d=\"M 6 -6 L 6 6 L -3 0 z\" fill=\"gray\"/></svg>');\n\t--next-bar-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><rect x=\"4\" y=\"-6\" width=\"2\" height=\"12\" fill=\"gray\"/><path d=\"M -6 -6 L -6 6 L 3 0 z\" fill=\"gray\"/></svg>');\n\t--volume-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"0 0 26 26\"><path d=\"M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z M 15 11 L 16 10 A 7.2 7.2 0 0 1 16 16 L 15 15 A 5.8 5.8 0 0 0 15 12 z M 18 8 L 19 7 A 11.5 11.5 0 0 1 19 19 L 18 18 A 10.1 10.1 0 0 0 18 8 z\" fill=\"gray\"/></svg>');\n\t--unmuted-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"3 3 20 20\"><path d=\"M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z M 15 11 L 16 10 A 7.2 7.2 0 0 1 16 16 L 15 15 A 5.8 5.8 0 0 0 15 12 z M 18 8 L 19 7 A 11.5 11.5 0 0 1 19 19 L 18 18 A 10.1 10.1 0 0 0 18 8 z\" fill=\"gray\"/></svg>');\n\t--muted-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"3 3 20 20\"><path d=\"M 4 16 L 4 10 L 8 10 L 13 5 L 13 21 L 8 16 z\" fill=\"gray\"/></svg>');\n\t--menu-down-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><path d=\"M -4 -2 L 4 -2 L 0 3 z\" fill=\"gray\"/></svg>');\n\t--select-arrows-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><path d=\"M -4 -3 L 4 -3 L 0 -8 z M -4 3 L 4 3 L 0 8 z\" fill=\"gray\"/></svg>');\n\t--file-page-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-5 -21 26 26\"><path d=\"M 2 0 L 2 -16 L 10 -16 L 14 -12 L 14 0 z M 3 -1 L 13 -1 L 13 -11 L 9 -11 L 9 -15 L 3 -15 z\" fill=\"gray\"/></svg>');\n\t--edit-pencil-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-5 -21 26 26\"><path d=\"M 0 0 L 1 -4 L 4 -1 z M 2 -5 L 10 -13 L 13 -10 L 5 -2 zM 11 -14 L 13 -16 L 14 -16 L 16 -14 L 16 -13 L 14 -11 z\" fill=\"gray\"/></svg>');\n\t--preferences-gear-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><path d=\"M 5.78 -1.6 L 7.93 -0.94 L 7.93 0.94 L 5.78 1.6 L 4.85 3.53 L 5.68 5.61 L 4.21 6.78 L 2.36 5.52 L 0.27 5.99 L -0.85 7.94 L -2.68 7.52 L -2.84 5.28 L -4.52 3.95 L -6.73 4.28 L -7.55 2.59 L -5.9 1.07 L -5.9 -1.07 L -7.55 -2.59 L -6.73 -4.28 L -4.52 -3.95 L -2.84 -5.28 L -2.68 -7.52 L -0.85 -7.94 L 0.27 -5.99 L 2.36 -5.52 L 4.21 -6.78 L 5.68 -5.61 L 4.85 -3.53 M 2.92 0.67 L 2.92 -0.67 L 2.35 -1.87 L 1.3 -2.7 L 0 -3 L -1.3 -2.7 L -2.35 -1.87 L -2.92 -0.67 L -2.92 0.67 L -2.35 1.87 L -1.3 2.7 L -0 3 L 1.3 2.7 L 2.35 1.87 z\" fill=\"gray\"/></svg>');\n\t--customize-dial-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"> \\\n\t\t\t<g transform=\"translate(0,1)\" fill=\"gray\"> \\\n\t\t\t\t<circle cx=\"0\" cy=\"0\" r=\"6.5\" stroke=\"gray\" stroke-width=\"1\" fill=\"none\"/> \\\n\t\t\t\t<rect x=\"-1\" y=\"-5\" width=\"2\" height=\"4\" transform=\"rotate(30)\"/> \\\n\t\t\t\t<circle cx=\"-7.79\" cy=\"4.5\" r=\"0.75\"/> \\\n\t\t\t\t<circle cx=\"-9\" cy=\"0\" r=\"0.75\"/> \\\n\t\t\t\t<circle cx=\"-7.79\" cy=\"-4.5\" r=\"0.75\"/> \\\n\t\t\t\t<circle cx=\"-4.5\" cy=\"-7.79\" r=\"0.75\"/> \\\n\t\t\t\t<circle cx=\"0\" cy=\"-9\" r=\"0.75\"/> \\\n\t\t\t\t<circle cx=\"4.5\" cy=\"-7.79\" r=\"0.75\"/> \\\n\t\t\t\t<circle cx=\"7.79\" cy=\"-4.5\" r=\"0.75\"/> \\\n\t\t\t\t<circle cx=\"9\" cy=\"0\" r=\"0.75\"/> \\\n\t\t\t\t<circle cx=\"7.79\" cy=\"4.5\" r=\"0.75\"/> \\\n\t\t\t</g> \\\n\t\t</svg>');\n\t--instrument-copy-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-5 -21 26 26\"><path d=\"M 0 -15 L 1 -15 L 1 0 L 13 0 L 13 1 L 0 1 L 0 -15 z M 2 -1 L 2 -17 L 10 -17 L 14 -13 L 14 -1 z M 3 -2 L 13 -2 L 13 -12 L 9 -12 L 9 -16 L 3 -16 z\" fill=\"currentColor\"></path></svg>');\n\t--instrument-paste-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"0 0 26 26\"><path d=\"M 8 18 L 6 18 L 6 5 L 17 5 L 17 7 M 9 8 L 16 8 L 20 12 L 20 22 L 9 22 z\" stroke=\"currentColor\" fill=\"none\"></path><path d=\"M 9 3 L 14 3 L 14 6 L 9 6 L 9 3 z M 16 8 L 20 12 L 16 12 L 16 8 z\" fill=\"currentColor\"></path></svg>');\n\t--export-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><path fill=\"gray\" d=\"M -8 3 L -8 8 L 8 8 L 8 3 L 6 3 L 6 6 L -6 6 L -6 3 z M 0 2 L -4 -2 L -1 -2 L -1 -8 L 1 -8 L 1 -2 L 4 -2 z\"/></svg>');\n\t--close-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><path fill=\"gray\" d=\"M -7.07 -5.66 L -5.66 -7.07 L 0 -1.4 L 5.66 -7.07 L 7.07 -5.66 L 1.4 0 L 7.07 5.66 L 5.66 7.07 L 0 1.4 L -5.66 7.07 L -7.07 5.66 L -1.4 0 z\"/></svg>');\n\t--add-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><path fill=\"gray\" d=\"M -8 -1 L -1 -1 L -1 -8  L 1 -8 L 1 -1 L 8 -1 L 8 1 L 1 1 L 1 8 L -1 8 L -1 1 L -8 1 z\"/></svg>');\n\t--zoom-in-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"-10 -10 20 20\"><circle cx=\"-1\" cy=\"-1\" r=\"6\" stroke-width=\"2\" stroke=\"gray\" fill=\"none\"></circle><path stroke=\"gray\" stroke-width=\"2\" d=\"M 3 3 L 7 7 M -1 -4 L -1 2 M -4 -1 L 2 -1\" fill=\"none\"></path></svg>');\n\t--zoom-out-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"-10 -10 20 20\"><circle cx=\"-1\" cy=\"-1\" r=\"6\" stroke-width=\"2\" stroke=\"gray\" fill=\"none\"></circle><path stroke=\"gray\" stroke-width=\"2\" d=\"M 3 3 L 7 7 M -4 -1 L 2 -1\" fill=\"none\"></path></svg>');\n\t--checkmark-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\" viewBox=\"-13 -13 26 26\"><path fill=\"gray\" d=\"M -9 -2 L -8 -3 L -3 2 L 9 -8 L 10 -7 L -3 8 z\"/></svg>');\n\t--drum-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"40\" viewBox=\"0 0 32 40\"> \\\n\t\t\t<defs> \\\n\t\t\t\t<linearGradient id=\"gold1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"> \\\n\t\t\t\t\t<stop offset=\"0%\" stop-color=\"%237e3302\"/> \\\n\t\t\t\t\t<stop offset=\"40%\" stop-color=\"%23ffec6b\"/> \\\n\t\t\t\t\t<stop offset=\"100%\" stop-color=\"%237e3302\"/> \\\n\t\t\t\t</linearGradient> \\\n\t\t\t\t<linearGradient id=\"gold2\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"> \\\n\t\t\t\t\t<stop offset=\"0%\" stop-color=\"%23faaf7d\"/> \\\n\t\t\t\t\t<stop offset=\"15%\" stop-color=\"%23fffba9\"/> \\\n\t\t\t\t\t<stop offset=\"40%\" stop-color=\"%23ffffe3\"/> \\\n\t\t\t\t\t<stop offset=\"65%\" stop-color=\"%23fffba9\"/> \\\n\t\t\t\t\t<stop offset=\"100%\" stop-color=\"%23faaf7d\"/> \\\n\t\t\t\t</linearGradient> \\\n\t\t\t\t<radialGradient id=\"gold3\" cx=\"0%\" cy=\"0%\" r=\"100%\"> \\\n\t\t\t\t\t<stop offset=\"0%\" stop-color=\"%23ffffe3\"/> \\\n\t\t\t\t\t<stop offset=\"50%\" stop-color=\"%23ffec6b\"/> \\\n\t\t\t\t\t<stop offset=\"100%\" stop-color=\"%237e3302\"/> \\\n\t\t\t\t</radialGradient> \\\n\t\t\t\t<linearGradient id=\"red\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"> \\\n\t\t\t\t\t<stop offset=\"0%\" stop-color=\"%23641919\"/> \\\n\t\t\t\t\t<stop offset=\"40%\" stop-color=\"%23cd2c2c\"/> \\\n\t\t\t\t\t<stop offset=\"100%\" stop-color=\"%23641919\"/> \\\n\t\t\t\t</linearGradient> \\\n\t\t\t\t<radialGradient id=\"membrane\"> \\\n\t\t\t\t\t<stop offset=\"10%\" stop-color=\"%23cccccc\" /> \\\n\t\t\t\t\t<stop offset=\"90%\" stop-color=\"%23f6f6f7\" /> \\\n\t\t\t\t\t<stop offset=\"100%\" stop-color=\"%23999\" /> \\\n\t\t\t\t</radialGradient> \\\n\t\t\t</defs> \\\n\t\t\t<ellipse cx=\"16\" cy=\"26\" rx=\"16\" ry=\"14\" fill=\"rgba(0,0,0,0.5)\"/> \\\n\t\t\t<ellipse cx=\"16\" cy=\"25\" rx=\"16\" ry=\"14\" fill=\"url(%23gold1)\"/> \\\n\t\t\t<rect x=\"0\" y=\"23\" width=\"32\" height=\"2\" fill=\"url(%23gold1)\"/> \\\n\t\t\t<ellipse cx=\"16\" cy=\"23\" rx=\"16\" ry=\"14\" fill=\"url(%23gold2)\"/> \\\n\t\t\t<ellipse cx=\"16\" cy=\"23\" rx=\"15\" ry=\"13\" fill=\"url(%23red)\"/> \\\n\t\t\t<rect x=\"1\" y=\"17\" width=\"30\" height=\"6\" fill=\"url(%23red)\"/> \\\n\t\t\t<rect x=\"5\" y=\"27\" width=\"1\" height=\"5\" rx=\"0.5\" fill=\"rgba(0,0,0,0.5)\"/> \\\n\t\t\t<rect x=\"15\" y=\"31\" width=\"2\" height=\"5\" rx=\"1\" fill=\"rgba(0,0,0,0.5)\"/> \\\n\t\t\t<rect x=\"26\" y=\"27\" width=\"1\" height=\"5\" rx=\"0.5\" fill=\"rgba(0,0,0,0.5)\"/> \\\n\t\t\t<rect x=\"5\" y=\"26\" width=\"1\" height=\"5\" rx=\"0.5\" fill=\"url(%23gold3)\"/> \\\n\t\t\t<rect x=\"15\" y=\"30\" width=\"2\" height=\"5\" rx=\"1\" fill=\"url(%23gold3)\"/> \\\n\t\t\t<rect x=\"26\" y=\"26\" width=\"1\" height=\"5\" rx=\"0.5\" fill=\"url(%23gold3)\"/> \\\n\t\t\t<ellipse cx=\"16\" cy=\"18\" rx=\"15\" ry=\"13\" fill=\"rgba(0,0,0,0.5)\"/> \\\n\t\t\t<ellipse cx=\"16\" cy=\"16\" rx=\"16\" ry=\"14\" fill=\"url(%23gold1)\"/> \\\n\t\t\t<rect x=\"0\" y=\"14\" width=\"32\" height=\"2\" fill=\"url(%23gold1)\"/> \\\n\t\t\t<ellipse cx=\"16\" cy=\"14\" rx=\"16\" ry=\"14\" fill=\"url(%23gold2)\"/> \\\n\t\t\t<ellipse cx=\"16\" cy=\"14\" rx=\"15\" ry=\"13\" fill=\"url(%23membrane)\"/> \\\n\t\t</svg>');\n\t--piano-key-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"15\" preserveAspectRatio=\"none\" viewBox=\"0 -1 32 15\"> \\\n\t\t\t<defs> \\\n\t\t\t\t<linearGradient id=\"shadow\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"> \\\n\t\t\t\t\t<stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.5)\"/> \\\n\t\t\t\t\t<stop offset=\"100%\" stop-color=\"transparent\"/> \\\n\t\t\t\t</linearGradient> \\\n\t\t\t</defs> \\\n\t\t\t<rect x=\"-1\" y=\"1\" width=\"31\" height=\"1\" rx=\"0.6\" fill=\"rgba(255,255,255,0.4)\"/> \\\n\t\t\t<path d=\"M -1 11 L 30 11 L 30 2 L 33 -1 L 33 14 L -1 14 z\" fill=\"rgba(0,0,0,0.7)\"/> \\\n\t\t\t<rect x=\"-1\" y=\"-1\" width=\"19\" height=\"15\" fill=\"url(%23shadow)\"/> \\\n\t\t</svg>');\n  --mod-key-symbol: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"80\" preserveAspectRatio=\"none\" viewBox=\"0 -1 32 80\"> \\\n\t\t\t<defs> \\\n\t\t\t\t<linearGradient id=\"shadow\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"> \\\n\t\t\t\t\t<stop offset=\"0%\" stop-color=\"rgba(0,0,0,0.4)\"/> \\\n\t\t\t\t\t<stop offset=\"100%\" stop-color=\"transparent\"/> \\\n\t\t\t\t</linearGradient> \\\n\t\t\t</defs> \\\n\t\t\t<rect x=\"-1\" y=\"1\" width=\"31\" height=\"1\" rx=\"0.6\" fill=\"rgba(255,255,255,0.2)\"/> \\\n\t\t\t<path d=\"M -1 76 L 30 76 L 30 1 L 33 -1 L 33 80 L -1 80 z\" fill=\"rgba(0,0,0,0.7)\"/> \\\n\t\t\t<rect x=\"-1\" y=\"-1\" width=\"19\" height=\"80\" fill=\"url(%23shadow)\"/> \\\n\t\t</svg>');\n}\n\n\n.obtrusive-scrollbars, .obtrusive-scrollbars * {\n\tscrollbar-width: thin;\n\tscrollbar-color: ${ColorConfig.uiWidgetBackground} ${ColorConfig.editorBackground};\n}\n.obtrusive-scrollbars::-webkit-scrollbar, .obtrusive-scrollbars *::-webkit-scrollbar {\n\twidth: 12px;\n}\n.obtrusive-scrollbars::-webkit-scrollbar-track, .obtrusive-scrollbars *::-webkit-scrollbar-track {\n\tbackground: ${ColorConfig.editorBackground};\n}\n.obtrusive-scrollbars::-webkit-scrollbar-thumb, .obtrusive-scrollbars *::-webkit-scrollbar-thumb {\n\tbackground-color: ${ColorConfig.uiWidgetBackground};\n\tborder: 3px solid ${ColorConfig.editorBackground};\n}\n\n.beepboxEditor {\n\tdisplay: grid;\n    grid-template-columns: minmax(0, 1fr) max-content;\n    grid-template-rows: max-content 1fr; /* max-content minmax(0, 1fr); Chrome 80 grid layout regression. https://bugs.chromium.org/p/chromium/issues/detail?id=1050307 */\n    grid-template-areas: \"pattern-area settings-area\" \"track-area settings-area\";\n\tgrid-column-gap: 6px;\n\tgrid-row-gap: 6px;\n\tposition: relative;\n\ttouch-action: manipulation;\n\tcursor: default;\n\tfont-size: 13px;\n\toverflow: hidden;\n\tcolor: ${ColorConfig.primaryText};\n\tbackground: ${ColorConfig.editorBackground};\n    opacity: 0;\n    -webkit-transition: opacity 0.2s ease-in;\n    -moz-transition: opacity 0.2s ease-in;\n    -o-transition: opacity 0.2s ease-in;\n    -ms-transition: opacity 0.2s ease-in;\n    transition: opacity 0.2s ease-in;\n    transition-delay: 0s;\n}\n\n.beepboxEditor .operatorRow {\n\tmargin: 2px 0;\n\theight: 2em;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n}\n\n.beepboxEditor .operatorRow > * {\n\tflex-grow: 1;\n\tflex-shrink: 1;\n}\n\n.pattern-area {\n     opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0s;\n}\n\n.settings-area {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.15s;\n}\n\n.editor-song-settings {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.35s;\n}\n\n.instrument-settings-area {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.45s;\n}\n\n.trackAndMuteContainer {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.4s;\n}\n\n.barScrollBar {\n    opacity: 0;\n    -webkit-transition: opacity 0.5s ease-in;\n    -moz-transition: opacity 0.5s ease-in;\n    -o-transition: opacity 0.5s ease-in;\n    -ms-transition: opacity 0.5s ease-in;\n    transition: opacity 0.5s ease-in;\n    transition-delay: 0.5s;\n}\n\n\n\n.load {\n    opacity: 1;\n}\n\n.beepboxEditor .noSelection {\n\t-webkit-touch-callout: none;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\tuser-select: none;\n}\n\n.beepboxEditor div {\n\tmargin: 0;\n\tpadding: 0;\n}\n\n.beepboxEditor .pattern-area {\n\tgrid-area: pattern-area;\n\theight: 481px;\n\tdisplay: flex;\n\tflex-direction: row;\n\tposition: relative;\n}\n\n.beepboxEditor .track-area {\n\tgrid-area: track-area;\n}\n\n.beepboxEditor .loopEditor {\n\theight: 20px;\n\tposition: sticky;\n\tbottom: 0;\n\tpadding: 5px 0;\n\tbackground-color: ${ColorConfig.editorBackground};\n}\n\n.beepboxEditor .settings-area {\n\tgrid-area: settings-area;\n\tdisplay: grid;\n    grid-template-columns: auto;\n    grid-template-rows: min-content min-content min-content min-content min-content;\n    grid-template-areas: \"version-area\" \"play-pause-area\" \"menu-area\" \"song-settings-area\" \"instrument-settings-area\";\n\tgrid-column-gap: 6px;\n}\n\n.beepboxEditor .version-area{ grid-area: version-area; }\n.beepboxEditor .play-pause-area{ grid-area: play-pause-area; }\n.beepboxEditor .menu-area{ grid-area: menu-area; }\n.beepboxEditor .song-settings-area{ grid-area: song-settings-area; }\n.beepboxEditor .instrument-settings-area{ grid-area: instrument-settings-area; }\n\n.beepboxEditor .tip {\n\tcursor: help;\n\tcolor: ${ColorConfig.secondaryText};\n\ttext-decoration: none;\n}\n\n.beepboxEditor .tip:hover {\n\tcolor: ${ColorConfig.linkAccent};\n\ttext-decoration: underline;\n}\n.beepboxEditor .tip:active {\n\tcolor: ${ColorConfig.primaryText};\n}\n\n.beepboxEditor .volume-speaker {\n\tflex-shrink: 0;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: ${ColorConfig.secondaryText};\n\t-webkit-mask-image: var(--volume-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--volume-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .drum-button {\n\tflex: 1;\n\tbackground-color: transparent;\n\tbackground-image: var(--drum-symbol);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center;\n}\n\n.beepboxEditor .modulator-button {\n\tflex: 1;\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: center;\n}\n.beepboxEditor .modulator-button::before {\n\tcontent: \"\";\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\tpointer-events: none;\n\tbackground-image: var(--mod-key-symbol);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center;\n\tbackground-size: 100% 102%;\n}\n\n.beepboxEditor .piano-button {\n\tflex: 1;\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: center;\n}\n.beepboxEditor .piano-button::before {\n\tcontent: \"\";\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\tpointer-events: none;\n\tbackground-image: var(--piano-key-symbol);\n\tbackground-repeat: no-repeat;\n\tbackground-position: center;\n\tbackground-size: 100% 115.38%;\n}\n.beepboxEditor .piano-button.disabled::after {\n\tcontent: \"\";\n\tposition: absolute;\n\tright: 0;\n\ttop: 0;\n\twidth: 70%;\n\theight: 100%;\n\tpointer-events: none;\n\tbackground: ${ColorConfig.editorBackground};\n\t-webkit-mask-image: linear-gradient(90deg, transparent 0%, gray 70%, gray 100%);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: linear-gradient(90deg, transparent 0%, gray 70%, gray 100%);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .piano-button.pressed, .beepboxEditor .drum-button.pressed {\n\tfilter: brightness(0.5);\n}\n\n.beepboxEditor .customize-instrument {\n\tmargin: 2px 0;\n}\n.beepboxEditor .customize-instrument::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--customize-dial-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--customize-dial-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .instrumentCopyPasteRow {\n\tgap: 2px;\n}\n\n.beepboxEditor .copy-instrument {\n\tmargin: 2px 0;\n\tflex-grow: 1;\n}\n.beepboxEditor .copy-instrument::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--instrument-copy-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--instrument-copy-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .paste-instrument {\n\tmargin: 2px 0;\n\tflex-grow: 1;\n}\n.beepboxEditor .paste-instrument::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--instrument-paste-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--instrument-paste-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .envelopeEditor {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.beepboxEditor .envelope-row {\n\tdisplay: flex;\n\tmargin: 2px 0;\n\tgap: 2px;\n}\n\n.beepboxEditor .add-envelope {\n\twidth: var(--button-size);\n}\n.beepboxEditor .add-envelope::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--add-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--add-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n.beepboxEditor .add-envelope:disabled {\n\tvisibility: hidden;\n}\n\n.beepboxEditor .effects-menu {\n\twidth: var(--button-size);\n\tposition: relative;\n}\n.beepboxEditor .effects-menu::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--menu-down-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--menu-down-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor .zoomInButton, .beepboxEditor .zoomOutButton {\n\twidth: var(--button-size);\n\tposition: absolute;\n\tright: 10px;\n}\n.beepboxEditor .zoomInButton {\n\ttop: 10px;\n}\n.beepboxEditor .zoomOutButton {\n\ttop: 50px;\n}\n.beepboxEditor .zoomInButton::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--zoom-in-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--zoom-in-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n.beepboxEditor .zoomOutButton::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--zoom-out-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--zoom-out-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor .delete-envelope {\n\twidth: var(--button-size);\n\tflex-shrink: 0;\n\tflex-grow: 0;\n}\n.beepboxEditor .delete-envelope::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--close-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--close-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n.beepboxEditor .delete-envelope:disabled {\n\tvisibility: hidden;\n}\n\n.beepboxEditor .menu.file::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--file-page-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--file-page-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .menu.edit::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--edit-pencil-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--edit-pencil-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .menu.preferences::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--preferences-gear-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--preferences-gear-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor .mute-button {\n\tbackground: transparent;\n\tborder: none;\n  padding-right: 0px;\n  padding-left: 0px;\n  box-shadow: none;\n}\n\n.beepboxEditor .mute-button:focus {\n  background: transparent;\n\tborder: none;\n}\n\n.beepboxEditor .mute-button::before {\n\tcontent: \"\";\n\tpointer-events: none;\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: inline-block;\n  background: var(--mute-button-normal);\n\t-webkit-mask-image: var(--unmuted-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\t-webkit-mask-size: cover;\n  mask-repeat: no-repeat;\n\tmask-position: center;\n\tmask-size: cover;\n  mask-image: var(--unmuted-symbol);\n}\n\n.beepboxEditor .mute-button.muted::before {\n  background: var(--ui-widget-background);\n\t-webkit-mask-image: var(--muted-symbol);\n  mask-image: var(--muted-symbol);\n}\n\n.beepboxEditor .mute-button.modMute.muted::before {\n  background: var(--ui-widget-background);\n\t-webkit-mask-image: var(--muted-symbol);\n  mask-image: var(--muted-symbol);\n}\n\n.beepboxEditor .mute-button.modMute::before {\n  background: var(--mute-button-mod);\n}\n\n\n.beepboxEditor .promptContainer {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tz-index: 100;\n}\n\n.beepboxEditor .promptContainer::before {\n\tcontent: \"\";\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n\tbackground: ${ColorConfig.editorBackground};\n\topacity: 0.5;\n\tdisplay: flex;\n}\n\n.beepboxEditor .prompt {\n\tmargin: auto;\n\ttext-align: center;\n\tbackground: ${ColorConfig.editorBackground};\n\tborder-radius: 15px;\n\tborder: 4px solid ${ColorConfig.uiWidgetBackground};\n\tcolor: ${ColorConfig.primaryText};\n\tpadding: 20px;\n\tdisplay: flex;\n\tflex-direction: column;\n\tposition: relative;\n\tbox-shadow: 5px 5px 20px 10px rgba(0,0,0,0.5);\n}\n\n.beepboxEditor .prompt > *:not(:first-child):not(.cancelButton) {\n\tmargin-top: 1.5em;\n}\n\n.beepboxEditor .prompt h2 {\n\tfont-size: 2em;\n\tmargin: 0 16px;\n\tfont-weight: normal;\n}\n\n.beepboxEditor .prompt p {\n\ttext-align: left;\n\tmargin: 1em 0;\n}\n\n.beepboxEditor .prompt label {\n\tcursor: pointer;\n}\n\n.beepboxEditor .prompt.recordingSetupPrompt p {\n\tmargin-top: 0.75em;\n\tmargin-bottom: 0;\n}\n\n.beepboxEditor .prompt.recordingSetupPrompt > label:not(:first-child):not(.cancelButton) {\n\tmargin: 2px 0;\n}\n\n.beepboxEditor .layout-option {\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex: 1;\n\tcursor: pointer;\n\tcolor: ${ColorConfig.secondaryText};\n}\n\n.beepboxEditor .layout-option input {\n\tdisplay: none;\n}\n\n.beepboxEditor .layout-option input:checked ~ * {\n\tcolor: ${ColorConfig.primaryText};\n}\n.beepboxEditor select.invalidSetting {\n\tborder: solid 1px red;\n}\n.beepboxEditor .selectContainer {\n\tposition: relative;\n}\n.beepboxEditor .selectContainer:not(.menu)::after {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tright: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: 14px;\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--select-arrows-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--select-arrows-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor .selectContainer.menu::after {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tright: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--menu-down-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--menu-down-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor select {\n\tmargin: 0;\n\tpadding: 0 4px;\n\tdisplay: block;\n\theight: var(--button-size);\n\tborder: none;\n\tborder-radius: 5px;\n\tbackground: ${ColorConfig.uiWidgetBackground};\n\tcolor: inherit;\n\tfont-size: inherit;\n\tcursor: pointer;\n\tfont-family: inherit;\n\tfont-weight: inherit;\n\n\t-webkit-appearance:none;\n\t-moz-appearance: none;\n\tappearance: none;\n}\n.beepboxEditor select option:disabled {\n\tcolor: ${ColorConfig.linkAccent};\n\tfont-weight: bold;\n}\n\n.select2-container .select2-selection--single {\n  height: auto;\n}\n\n.select2-container {\n  width: -moz-available !important;\n  width: -webkit-fill-available !important;\n}\n\n.select2-container--default .select2-selection--single{\n  border-radius: 0px;\n  border: 0px;\n  background-color: transparent;\n  outline: none;\n}\n\n.select2-selection__rendered:not(.menu)::before {\n\tcontent: \"\";\n\tposition: absolute;\n\tright: 0.3em;\n\ttop: 0.4em;\n\tborder-bottom: 0.4em solid currentColor;\n\tborder-left: 0.3em solid transparent;\n\tborder-right: 0.3em solid transparent;\n\tpointer-events: none;\n}\n.select2-selection__rendered:not(.menu)::after {\n\tcontent: \"\";\n\tposition: absolute;\n\tright: 0.3em;\n\tbottom: 0.4em;\n\tborder-top: 0.4em solid currentColor;\n\tborder-left: 0.3em solid transparent;\n\tborder-right: 0.3em solid transparent;\n\tpointer-events: none;\n}\n.select2-selection__rendered {\n\tmargin: 0;\n\tpadding: 0 0.3em;\n\tdisplay: block;\n\theight: 2em;\n\tborder: none;\n\tborder-radius: 0.4em;\n\tbackground: ${ColorConfig.uiWidgetBackground};\n\tcolor: inherit !important;\n\tfont-size: inherit;\n\tcursor: pointer;\n\tfont-family: inherit;\n\t-webkit-appearance:none;\n\t-moz-appearance: none;\n\tappearance: none;\n}\n.select2-selection__arrow b{\n    display:none !important;\n}\n\n.select2-selection__rendered--focus {\n\tbackground: ${ColorConfig.uiWidgetFocus};\n\toutline: none;\n}\n.select2-search__field {\n    background: ${ColorConfig.uiWidgetBackground};\n    color: inherit !important;\n    font-size: small;\n    font-family: inherit;\n    border: 0px !important;\n    padding: 1px !important;\n}\n.select2-dropdown {\n    box-sizing: border-box;\n    display: inline-block;\n    margin: 0;\n    font-size: small;\n    position: relative;\n    vertical-align: middle;\n    background-color: ${ColorConfig.uiWidgetFocus};\n}\n\n.select2-container--default .select2-results>.select2-results__options {\n    max-height: 430px;\n    overflow-x: hidden;\n}\n.select2-container--default .select2-results__group {\n    cursor: default;\n    display: block;\n    padding: 1px;\n    background: ${ColorConfig.select2OptGroup};\n}\n.select2-results__option {\n    padding: 2px;\n    user-select: none;\n    -webkit-user-select: none;\n}\n.select2-container--default .select2-results__option .select2-results__option {\n    padding-left: 0.1em;\n}\n.select2-container--default .select2-results__option[aria-selected=true] {\n  background-color: transparent !important;\n}\n\n.select2-results__option--highlighted[aria-selected] {\n\tcolor: white !important;\n}\n\n.beepboxEditor .menu select {\n\tpadding: 0 var(--button-size);\n}\n.beepboxEditor select:focus {\n\tbackground: ${ColorConfig.uiWidgetFocus};\n\toutline: none;\n}\n.beepboxEditor .menu select {\n\ttext-align: center;\n\ttext-align-last: center;\n}\n.beepboxEditor .settings-area select {\n       width: 100%;\n}\n\n/* This makes it look better in firefox on my computer... What about others?\n@-moz-document url-prefix() {\n\t.beepboxEditor select { padding: 0 2px; }\n}\n*/\n.beepboxEditor button {\n\tmargin: 0;\n\tposition: relative;\n\theight: var(--button-size);\n\tborder: none;\n\tborder-radius: 5px;\n\tbackground: ${ColorConfig.uiWidgetBackground};\n\tcolor: inherit;\n\tfont-size: inherit;\n\tfont-family: inherit;\n\tfont-weight: inherit;\n\tcursor: pointer;\n}\n.beepboxEditor button:focus {\n\tbackground: ${ColorConfig.uiWidgetFocus};\n\toutline: none;\n}\n\n.beepboxEditor button.cancelButton {\n\tfloat: right;\n\twidth: var(--button-size);\n\tposition: absolute;\n\ttop: 8px;\n\tright: 8px;\n}\n\n.beepboxEditor .playback-bar-controls {\n\tdisplay: grid;\n\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr);\n\tgrid-template-rows: min-content;\n\tgrid-column-gap: 4px;\n}\n\n.beepboxEditor button.playButton::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--play-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--play-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor button.pauseButton::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--pause-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--pause-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor button.recordButton::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--record-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--record-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n.beepboxEditor button.stopButton::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--stop-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--stop-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor button.prevBarButton::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n\ttransform: translate(-50%, -50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--prev-bar-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--prev-bar-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor button.nextBarButton::before {\n\tcontent: \"\";\n\tflex-shrink: 0;\n\tposition: absolute;\n\tleft: 50%;\n\ttop: 50%;\n\ttransform: translate(-50%, -50%);\n\tpointer-events: none;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--next-bar-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--next-bar-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor button.playButton, .beepboxEditor button.pauseButton, .beepboxEditor button.recordButton, .beepboxEditor button.stopButton, .beepboxEditor button.okayButton, .beepboxEditor button.exportButton {\n\tpadding-left: var(--button-size);\n}\n.beepboxEditor button.playButton, .beepboxEditor button.pauseButton, .beepboxEditor button.recordButton {\n\tgrid-column-start: 1;\n\tgrid-column-end: 3;\n}\n.beepboxEditor button.stopButton {\n\tgrid-column-start: 1;\n\tgrid-column-end: 5;\n}\n.beepboxEditor button.prevBarButton {\n\tgrid-column-start: 3;\n\tgrid-column-end: 4;\n}\n.beepboxEditor button.nextBarButton {\n\tgrid-column-start: 4;\n\tgrid-column-end: 5;\n}\n\n.beepboxEditor button.playButton.shrunk, .beepboxEditor button.recordButton.shrunk {\n\tpadding: 0;\n}\n.beepboxEditor button.playButton.shrunk::before, .beepboxEditor button.recordButton.shrunk::before {\n\tleft: 50%;\n\ttop: 50%;\n\ttransform: translate(-50%, -50%);\n}\n.beepboxEditor button.playButton.shrunk span, .beepboxEditor button.recordButton.shrunk span {\n\tdisplay: none;\n}\n.beepboxEditor button.playButton.shrunk {\n\tgrid-column-start: 1;\n\tgrid-column-end: 2;\n}\n.beepboxEditor button.recordButton.shrunk {\n\tgrid-column-start: 2;\n\tgrid-column-end: 3;\n}\n\n.beepboxEditor button.cancelButton::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--close-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--close-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor button.okayButton::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\t-webkit-mask-image: var(--checkmark-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n\tmask-image: var(--checkmark-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n}\n\n.beepboxEditor button.exportButton::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: var(--button-size);\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--export-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--export-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor .instrument-bar {\n\tdisplay: flex;\n\tgap: 2px;\n}\n\n.beepboxEditor .instrument-bar button {\n\tflex-grow: 1;\n\tmin-width: 0;\n\tpadding: 0;\n\tflex-basis: 0;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tcolor: var(--text-color-lit);\n}\n\n.beepboxEditor .instrument-bar .remove-instrument, .beepboxEditor .instrument-bar .add-instrument {\n\tmax-width: var(--button-size);\n}\n\n.beepboxEditor .instrument-bar > :not(:first-child) {\n\tborder-top-left-radius: 0;\n\tborder-bottom-left-radius: 0;\n}\n\n.beepboxEditor .instrument-bar > :not(.last-button) {\n\tborder-top-right-radius: 0;\n\tborder-bottom-right-radius: 0;\n\tborder-bottom: inset;\n\tborder-color: var(--background-color-dim);\n}\n\n.beepboxEditor .instrument-bar .selected-instrument {\n\tbackground: var(--background-color-lit);\n\tcolor: ${ColorConfig.invertedText};\n}\n\n.beepboxEditor .instrument-bar .deactivated {\n\tbackground: ${ColorConfig.editorBackground};\n\tcolor: var(--text-color-dim);\n\tborder-bottom: unset;\n}\n\n.beepboxEditor .instrument-bar .deactivated.selected-instrument {\n\tbackground: var(--background-color-dim);\n\tcolor: ${ColorConfig.invertedText};\n}\n\n.beepboxEditor .instrument-bar .remove-instrument {\n\tborder-bottom: unset;\n}\n\n.beepboxEditor .instrument-bar .remove-instrument::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: 100%;\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--close-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--close-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor .instrument-bar .add-instrument {\n\tborder-bottom: unset;\n}\n\n.beepboxEditor .instrument-bar .no-underline {\n\tborder-bottom: unset;\n}\n\n.beepboxEditor .instrument-bar .add-instrument::before {\n\tcontent: \"\";\n\tposition: absolute;\n\twidth: 100%;\n\theight: var(--button-size);\n\tleft: 0;\n\ttop: 0;\n\tpointer-events: none;\n\tbackground: currentColor;\n\tmask-image: var(--add-symbol);\n\tmask-repeat: no-repeat;\n\tmask-position: center;\n\t-webkit-mask-image: var(--add-symbol);\n\t-webkit-mask-repeat: no-repeat;\n\t-webkit-mask-position: center;\n}\n\n.beepboxEditor canvas {\n\toverflow: hidden;\n\tposition: absolute;\n\tdisplay: block;\n  cursor: crosshair;\n}\n\n@keyframes dash-animation {\n  to {\n    stroke-dashoffset: -100;\n  }\n}\n\n.beepboxEditor .dash-move {\n  animation: dash-animation 20s infinite linear;\n}\n\n.beepboxEditor .trackContainer {\n\tflex-grow: 1;\n}\n\n.beepboxEditor .trackAndMuteContainer {\n\tdisplay: flex;\n\talign-items: flex-start;\n\twidth: 100%;\n\tmin-height: 0;\n\tflex: 1;\n\toverflow-x: hidden;\n\tposition: relative;\n}\n\n.beepboxEditor .channelRow {\n\tdisplay: flex;\n}\n\n.beepboxEditor .channelBox {\n\tdisplay: flex;\n\ttext-align: center;\n\talign-items: center;\n\tjustify-content: center;\n\tbox-sizing: border-box;\n\tpadding-top: 1px;\n}\n\n.beepboxEditor .channelBoxLabel {\n\tfont-size: 20px;\n\tfont-family: sans-serif;\n\tfont-weight: bold;\n}\n\n.beepboxEditor .dropFader {\n\topacity: 0;\n\t-webkit-transition:opacity 0.17s linear;\n    -moz-transition:opacity 0.17s linear;\n    -o-transition:opacity 0.17s linear;\n    -ms-transition:opacity 0.17s linear; \n    transition:opacity 0.17s linear;\n}\n\n.beepboxEditor .muteEditor {\n\twidth: 32px;\n\tflex-shrink: 0;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: stretch;\n\tposition: sticky;\n\tleft: 0;\n\tz-index: 1;\n\tbackground: ${ColorConfig.editorBackground};\n}\n\n.beepboxEditor .selectRow, .beepboxEditor .instrumentCopyPasteRow {\n\tmargin: 2px 0;\n\theight: var(--button-size);\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\tjustify-content: space-between;\n}\n\n.beepboxEditor .selectRow > :last-child {\n\twidth: 62.5%;\n\tflex-shrink: 0;\n}\n\n.beepboxEditor .menu-area {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n.beepboxEditor .menu-area > * {\n\tmargin: 2px 0;\n}\n.beepboxEditor .menu-area > button {\n\tpadding: 0 var(--button-size);\n\twhite-space: nowrap;\n}\n\n.beepboxEditor .song-settings-area {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.beepboxEditor .editor-controls {\n\tflex-shrink: 0;\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.beepboxEditor .instrument-settings-area {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.beepboxEditor .editor-right-side-top > *, .beepboxEditor .editor-right-side-bottom > * {\n\tflex-shrink: 0;\n}\n\n.beepboxEditor .pitchShiftMarkerContainer {\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\theight: 100%;\n\tleft: 3px;\n\tright: 3px;\n\tposition: absolute;\n\talign-items: center;\n\tpointer-events: none;\n}\n\n.beepboxEditor .pitchShiftMarker {\n\twidth: 0;\n\theight: 0;\n\tposition: absolute;\n}\n\n.beepboxEditor .pitchShiftMarker::before {\n\tcontent: \"\";\n\twidth: 2px;\n\theight: 20px;\n\ttransform: translate(-50%, -50%);\n\tposition: absolute;\n\tbackground: currentColor;\n\tborder-radius: 3px;\n}\n\n.beepboxEditor input[type=text], .beepboxEditor input[type=number] {\n\tfont-size: inherit;\n\tfont-weight: inherit;\n\tfont-family: inherit;\n\tbackground: transparent;\n\ttext-align: center;\n\tborder: 1px solid ${ColorConfig.inputBoxOutline};\n\tcolor: ${ColorConfig.primaryText};\n}\n\n.beepboxEditor input[type=text]::selection, .beepboxEditor input[type=number]::selection {\n\tbackground-color: ${ColorConfig.textSelection};\n\tcolor: ${ColorConfig.primaryText};\n}\n\n.beepboxEditor input[type=checkbox] {\n  transform: scale(1.5);\n}\n\n.beepboxEditor input[type=range] {\n\t-webkit-appearance: none;\n\tcolor: inherit;\n\twidth: 100%;\n\theight: var(--button-size);\n\tfont-size: inherit;\n\tmargin: 0;\n\tcursor: pointer;\n\tbackground: none;\n\ttouch-action: pan-y;\n  position: relative;\n}\n.beepboxEditor input[type=range]:focus {\n\toutline: none;\n}\n.beepboxEditor input[type=range]::-webkit-slider-runnable-track {\n\twidth: 100%;\n\theight: 6px;\n\tcursor: pointer;\n\tbackground: ${ColorConfig.uiWidgetBackground};\n}\n\n.modTarget:hover {\n\tfill: ${ColorConfig.hoverPreview} !important;\n}\n\n.beepboxEditor span.midTick:after {\n    content: \"\";\n    display:inline-block;\n    position: absolute;\n    background: currentColor;\n    width: 2%;\n    left: 49%;\n    height: 0.5em;\n    top: 32%;\n    z-index: 1;\n\t\tpointer-events: none;\n}\n.beepboxEditor span.modSlider {\n\t--mod-position: 20%;\n\t--mod-color: ${ColorConfig.overwritingModSlider};\n  --mod-border-radius: 0%;\n}\n.beepboxEditor span.modSlider:before {\n\tcontent: \"\";\n    display:inline-block;\n    position: absolute;\n    background: var(--mod-color);\n    width: 4%;\n    left: var(--mod-position);\n    height: 0.8em;\n    top: 28%;\n    z-index: 2;\n\t\ttransform: translate(-50%, 0%);\n\t\tpointer-events: none;\n\t\tborder: 40%;\n\t\tborder-radius: var(--mod-border-radius);\n}\n.beepboxEditor input[type=range]::-webkit-slider-thumb {\n\theight: var(--button-size);\n\twidth: 6px;\n\tborder-radius: 3px;\n\tbackground: currentColor;\n\tcursor: pointer;\n\t-webkit-appearance: none;\n\tmargin-top: -10px;\n}\n.beepboxEditor input[type=range]:focus::-webkit-slider-runnable-track {\n\tbackground: ${ColorConfig.uiWidgetFocus};\n}\n.beepboxEditor input[type=range]::-moz-range-track {\n\twidth: 100%;\n\theight: 6px;\n\tcursor: pointer;\n\tbackground: ${ColorConfig.uiWidgetBackground};\n}\n.beepboxEditor input[type=range]:focus::-moz-range-track {\n\tbackground: ${ColorConfig.uiWidgetFocus};\n}\n.beepboxEditor input[type=range]::-moz-range-thumb {\n\theight: var(--button-size);\n\twidth: 6px;\n\tborder-radius: 3px;\n\tborder: none;\n\tbackground: currentColor;\n\tcursor: pointer;\n}\n.beepboxEditor input[type=range]::-ms-track {\n\twidth: 100%;\n\theight: 6px;\n\tcursor: pointer;\n\tbackground: ${ColorConfig.uiWidgetBackground};\n\tborder-color: transparent;\n}\n.beepboxEditor input[type=range]:focus::-ms-track {\n\tbackground: ${ColorConfig.uiWidgetFocus};\n}\n.beepboxEditor input[type=range]::-ms-thumb {\n\theight: var(--button-size);\n\twidth: 6px;\n\tborder-radius: 3px;\n\tbackground: currentColor;\n\tcursor: pointer;\n}\n\nli.select2-results__option[role=group] > strong:hover {\n  background-color: #516fbb;\n}\n\n/* wide screen */\n@media (min-width: 711px) {\n\t#beepboxEditorContainer {\n\t\tdisplay: table;\n\t}\n\t.beepboxEditor {\n\t\tflex-direction: row;\n\t}\n\t.beepboxEditor:focus-within {\n\t\toutline: 3px solid ${ColorConfig.uiWidgetBackground};\n\t}\n\t.beepboxEditor .trackAndMuteContainer {\n\t\twidth: 512px;\n\t}\n\t.beepboxEditor .trackSelectBox {\n\t\tdisplay: none;\n\t}\n    .beepboxEditor .muteButtonSelectBox {\n\t\tdisplay: none;\n\t}\n\t.beepboxEditor .play-pause-area {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\t.beepboxEditor .playback-bar-controls {\n\t\tmargin: 2px 0;\n\t}\n\t.beepboxEditor .playback-volume-controls {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tmargin: 2px 0;\n\t\talign-items: center;\n\t}\n\t.beepboxEditor .settings-area {\n\t\twidth: var(--settings-area-width);\n\t}\n}\n\n/* narrow screen */\n@media (max-width: 710px) {\n\t.beepboxEditor {\n\t\tgrid-template-columns: minmax(0, 1fr);\n\t\tgrid-template-rows: min-content 6px min-content min-content;\n\t\tgrid-template-areas: \"pattern-area\" \".\" \"track-area\" \"settings-area\";\n\t\tgrid-row-gap: 0;\n\t}\n\t.beepboxEditor .settings-area {\n\t\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr);\n\t\tgrid-template-rows: min-content min-content 1fr min-content;\n\t\tgrid-template-areas:\n\t\t\t\"play-pause-area play-pause-area\"\n\t\t\t\"menu-area instrument-settings-area\"\n\t\t\t\"song-settings-area instrument-settings-area\"\n\t\t\t\"version-area version-area\";\n\t\tgrid-column-gap: 8px;\n\t\tmargin: 0 4px;\n\t}\n\t.beepboxEditor:focus-within {\n\t\toutline: none;\n\t}\n\t.beepboxEditor .pattern-area {\n\t\tmax-height: 75vh;\n\t}\n\t.beepboxEditor .trackAndMuteContainer {\n\t\toverflow-x: auto;\n\t}\n\t.beepboxEditor .barScrollBar {\n\t\tdisplay: none;\n\t}\n\t.beepboxEditor .play-pause-area {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr);\n\t\tgrid-column-gap: 8px;\n\t\tmargin: 2px 0;\n\t}\n\t.beepboxEditor .playback-bar-controls {\n\t\tflex-grow: 1;\n\t}\n\t.beepboxEditor .playback-volume-controls {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\talign-items: center;\n\t\tflex-grow: 1;\n\t}\n\t\n\t.beepboxEditor .soundIcon {\n\t  background: ${ColorConfig.editorBackground};\n\t  display: inline-block;\n\t  height: 10px;\n\t  margin-left: 0px;\n\t  margin-top: 8px;\n\t\tposition: relative;\n\t\twidth: 10px;\n\t}\n\t.beepboxEditor .soundIcon:before {\n\t  border-bottom: 6px solid transparent;\n\t  border-top: 6px solid transparent;\n\t  border-right: 10px solid ${ColorConfig.editorBackground};\n\t  content: \"\";\n\t  height: 10px;\n\t  left: 6px;\n\t  position: absolute;\n\t  top: -6px;\n\t  width: 0;\n\t}\n}\n\n`));\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\n\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ColorConfig } from \"./ColorConfig\";\n\nexport class BarScrollBar {\n\tprivate readonly _editorWidth: number = 512;\n\tprivate readonly _editorHeight: number = 20;\n\tprivate readonly _playhead: SVGRectElement = SVG.rect(\"rect\", { fill: ColorConfig.playhead, x: 0, y: 0, width: 2, height: this._editorHeight });\n\t\tprivate readonly _notches: SVGSVGElement = SVG.svg({\"pointer-events\": \"none\"});\n\t\tprivate readonly _handle: SVGRectElement = SVG.rect({fill: ColorConfig.uiWidgetBackground, x: 0, y: 2, width: 10, height: this._editorHeight - 4});\n\t\tprivate readonly _handleHighlight: SVGRectElement = SVG.rect({fill: \"none\", stroke: ColorConfig.hoverPreview, \"stroke-width\": 2, \"pointer-events\": \"none\", x: 0, y: 1, width: 10, height: this._editorHeight - 2});\n\t\tprivate readonly _leftHighlight: SVGPathElement = SVG.path({fill: ColorConfig.hoverPreview, \"pointer-events\": \"none\"});\n\t\tprivate readonly _rightHighlight: SVGPathElement = SVG.path({fill: ColorConfig.hoverPreview, \"pointer-events\": \"none\"});\n\tprivate _renderedPlayhead: number = -1;\n\t\t\n\t\tprivate readonly _svg: SVGSVGElement = SVG.svg({style: `background-color: ${ColorConfig.editorBackground}; touch-action: pan-y; position: absolute;`, width: this._editorWidth, height: this._editorHeight},\n\t\tthis._notches,\n\t\tthis._handle,\n\t\tthis._handleHighlight,\n\t\tthis._leftHighlight,\n\t\tthis._rightHighlight,\n\t\tthis._playhead,\n\t);\n\t\t\n\t\tpublic readonly container: HTMLElement = HTML.div({class: \"barScrollBar\", style: \"width: 512px; height: 20px; overflow: hidden; position: relative;\"}, this._svg);\n\t\t\n\tprivate _mouseX: number = 0;\n\tprivate _mouseDown: boolean = false;\n\tprivate _mouseOver: boolean = false;\n\tprivate _dragging: boolean = false;\n\tprivate _dragStart: number;\n\tprivate _notchSpace: number;\n\tprivate _renderedNotchCount: number = -1;\n\tprivate _renderedScrollBarPos: number = -1;\n\t\n\tconstructor(private _doc: SongDocument) {\n\t\tconst center: number = this._editorHeight * 0.5;\n\t\tconst base: number = 20;\n\t\tconst tip: number = 9;\n\t\tconst arrowHeight: number = 6;\n\t\tthis._leftHighlight.setAttribute(\"d\", `M ${tip} ${center} L ${base} ${center + arrowHeight} L ${base} ${center - arrowHeight} z`);\n\t\tthis._rightHighlight.setAttribute(\"d\", `M ${this._editorWidth - tip} ${center} L ${this._editorWidth - base} ${center + arrowHeight} L ${this._editorWidth - base} ${center - arrowHeight} z`);\n\t\t\t\n\t\tthis.container.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"mouseover\", this._whenMouseOver);\n\t\tthis.container.addEventListener(\"mouseout\", this._whenMouseOut);\n\t\t\t\n\t\tthis.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n\t\tthis.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n\t\tthis.container.addEventListener(\"touchend\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"touchcancel\", this._whenCursorReleased);\n\t}\n\n\tpublic animatePlayhead = (): void => {\n\t\tconst playhead = Math.min(512, Math.max(0, (this._notchSpace * this._doc.synth.playhead - 2)));\n\t\tif (this._renderedPlayhead != playhead) {\n\t\t\tthis._renderedPlayhead = playhead;\n\t\t\tthis._playhead.setAttribute(\"x\", \"\" + playhead);\n\t\t}\n\t}\n\t\t\n\tprivate _whenMouseOver = (event: MouseEvent): void => {\n\t\tif (this._mouseOver) return;\n\t\tthis._mouseOver = true;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMouseOut = (event: MouseEvent): void => {\n\t\tif (!this._mouseOver) return;\n\t\tthis._mouseOver = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\t//this._mouseY = (event.clientY || event.pageY) - boundingRect.top;\n\t\tthis._updatePreview();\n\t\tif (this._mouseX >= this._doc.barScrollPos * this._notchSpace && this._mouseX <= (this._doc.barScrollPos + this._doc.trackVisibleBars) * this._notchSpace) {\n\t\t\tthis._dragging = true;\n\t\t\tthis._dragStart = this._mouseX;\n\t\t}\n\t}\n\t\t\n\tprivate _whenTouchPressed = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\t//this._mouseY = event.touches[0].clientY - boundingRect.top;\n\t\tthis._updatePreview();\n\t\tif (this._mouseX >= this._doc.barScrollPos * this._notchSpace && this._mouseX <= (this._doc.barScrollPos + this._doc.trackVisibleBars) * this._notchSpace) {\n\t\t\tthis._dragging = true;\n\t\t\tthis._dragStart = this._mouseX;\n\t\t}\n\t}\n\t\t\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\t//this._mouseY = (event.clientY || event.pageY) - boundingRect.top;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenTouchMoved = (event: TouchEvent): void => {\n\t\tif (!this._mouseDown) return;\n\t\tevent.preventDefault();\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\t//this._mouseY = event.touches[0].clientY - boundingRect.top;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenCursorMoved(): void {\n\t\tif (this._dragging) {\n\t\t\twhile (this._mouseX - this._dragStart < -this._notchSpace * 0.5) {\n\t\t\t\tif (this._doc.barScrollPos > 0) {\n\t\t\t\t\tthis._doc.barScrollPos--;\n\t\t\t\t\tthis._dragStart -= this._notchSpace;\n\t\t\t\t\tthis._doc.notifier.changed();\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (this._mouseX - this._dragStart > this._notchSpace * 0.5) {\n\t\t\t\tif (this._doc.barScrollPos < this._doc.song.barCount - this._doc.trackVisibleBars) {\n\t\t\t\t\tthis._doc.barScrollPos++;\n\t\t\t\t\tthis._dragStart += this._notchSpace;\n\t\t\t\t\tthis._doc.notifier.changed();\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this._mouseOver) this._updatePreview();\n\t}\n\t\t\n\tpublic changePos(offset: number) {\n\t\twhile (Math.abs(offset) >= 1) {\n\n\t\t\tif (offset < 0) {\n\t\t\t\tif (this._doc.barScrollPos > 0) {\n\t\t\t\t\tthis._doc.barScrollPos--;\n\t\t\t\t\tthis._dragStart += this._notchSpace;\n\t\t\t\t\tthis._doc.notifier.changed();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this._doc.barScrollPos < this._doc.song.barCount - this._doc.trackVisibleBars) {\n\t\t\t\t\tthis._doc.barScrollPos++;\n\t\t\t\t\tthis._dragStart += this._notchSpace;\n\t\t\t\t\tthis._doc.notifier.changed();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toffset += (offset > 0) ? -1 : 1;\n\n\t\t}\n\t}\n\n\tprivate _whenCursorReleased = (event: Event): void => {\n\t\tif (!this._dragging && this._mouseDown) {\n\t\t\tif (this._mouseX < (this._doc.barScrollPos + 8) * this._notchSpace) {\n\t\t\t\tif (this._doc.barScrollPos > 0) this._doc.barScrollPos--;\n\t\t\t\tthis._doc.notifier.changed();\n\t\t\t} else {\n\t\t\t\tif (this._doc.barScrollPos < this._doc.song.barCount - this._doc.trackVisibleBars) this._doc.barScrollPos++;\n\t\t\t\tthis._doc.notifier.changed();\n\t\t\t}\n\t\t}\n\t\tthis._mouseDown = false;\n\t\tthis._dragging = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _updatePreview(): void {\n\t\tconst showHighlight: boolean = this._mouseOver && !this._mouseDown;\n\t\tlet showleftHighlight: boolean = false;\n\t\tlet showRightHighlight: boolean = false;\n\t\tlet showHandleHighlight: boolean = false;\n\t\t\t\n\t\tif (showHighlight) {\n\t\t\tif (this._mouseX < this._doc.barScrollPos * this._notchSpace) {\n\t\t\t\tshowleftHighlight = true;\n\t\t\t} else if (this._mouseX > (this._doc.barScrollPos + this._doc.trackVisibleBars) * this._notchSpace) {\n\t\t\t\tshowRightHighlight = true;\n\t\t\t} else {\n\t\t\t\tshowHandleHighlight = true;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tthis._leftHighlight.style.visibility = showleftHighlight ? \"visible\" : \"hidden\";\n\t\tthis._rightHighlight.style.visibility = showRightHighlight ? \"visible\" : \"hidden\";\n\t\tthis._handleHighlight.style.visibility = showHandleHighlight ? \"visible\" : \"hidden\";\n\t}\n\t\t\n\tpublic render(): void {\n\t\t\tthis._notchSpace = (this._editorWidth-1) / Math.max(this._doc.trackVisibleBars, this._doc.song.barCount);\n\t\t\t\n\t\tconst resized: boolean = this._renderedNotchCount != this._doc.song.barCount;\n\t\tif (resized) {\n\t\t\tthis._renderedNotchCount = this._doc.song.barCount;\n\t\t\t\t\n\t\t\twhile (this._notches.firstChild) this._notches.removeChild(this._notches.firstChild);\n\t\t\t\t\n\t\t\tfor (let i: number = 0; i <= this._doc.song.barCount; i++) {\n\t\t\t\tconst lineHeight: number = (i % 16 == 0) ? 0 : ((i % 4 == 0) ? this._editorHeight / 8 : this._editorHeight / 3);\n\t\t\t\t\tthis._notches.appendChild(SVG.rect({fill: ColorConfig.uiWidgetBackground, x: i * this._notchSpace - 1, y: lineHeight, width: 2, height: this._editorHeight - lineHeight * 2}));\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tif (resized || this._renderedScrollBarPos != this._doc.barScrollPos) {\n\t\t\tthis._renderedScrollBarPos = this._doc.barScrollPos;\n\t\t\tthis._handle.setAttribute(\"x\", String(this._notchSpace * this._doc.barScrollPos));\n\t\t\tthis._handle.setAttribute(\"width\", String(this._notchSpace * this._doc.trackVisibleBars));\n\t\t\tthis._handleHighlight.setAttribute(\"x\", String(this._notchSpace * this._doc.barScrollPos));\n\t\t\tthis._handleHighlight.setAttribute(\"width\", String(this._notchSpace * this._doc.trackVisibleBars));\n\t\t}\n\t\t\t\n\t\tthis._updatePreview();\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\ninterface NumberArray {\n\tlength: number;\n\t[index: number]: number;\n}\n\n// A basic FFT operation scales the overall magnitude of elements by the\n// square root of the length of the array, √N. Performing a forward FFT and\n// then an inverse FFT results in the original array, but multiplied by N.\n// This helper function can be used to compensate for that. \nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\n\tfor (let i: number = 0; i < array.length; i++) {\n\t\tarray[i] *= factor;\n\t}\n}\n\nfunction isPowerOf2(n: number): boolean {\n\treturn !!n && !(n & (n - 1));\n}\n\nfunction countBits(n: number): number {\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\n\treturn Math.round(Math.log(n) / Math.log(2));\n}\n\n// Rearranges the elements of the array, swapping the element at an index\n// with an element at an index that is the bitwise reverse of the first\n// index in base 2. Useful for computing the FFT.\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\n\tconst bitCount: number = countBits(fullArrayLength);\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\n\tconst finalShift: number = 16 - bitCount;\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\n\t\tlet j: number;\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\n\t\tif (j > i) {\n\t\t\tlet temp: number = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t}\n\t}\n}\n\n// Provided for educational purposes. Easier to read than\n// fastFourierTransform(), but computes the same result.\n// Takes two parallel arrays representing the real and imaginary elements,\n// respectively, and returns an array containing two new arrays, which\n// contain the complex result of the transform.\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\n\tconst fullArrayLength: number = realArray.length;\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\tconst realOut: number[] = [];\n\tconst imagOut: number[] = [];\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\trealOut[i] = 0.0;\n\t\timagOut[i] = 0.0;\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\n\t\t\tconst c: number = Math.cos(radians);\n\t\t\tconst s: number = Math.sin(radians);\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\n\t\t}\n\t}\n\treturn [realOut, imagOut];\n}\n\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\n// input real and imaginary arrays. Can be used for both forward and inverse\n// transforms: swap the order of the arguments for the inverse.\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\n\tconst fullArrayLength: number = realArray.length;\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\t\t\n\treverseIndexBits(realArray, fullArrayLength);\n\treverseIndexBits(imagArray, fullArrayLength);\n\t\t\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\n\t\tconst startIndex1: number = startIndex + 1;\n\t\tconst startIndex2: number = startIndex + 2;\n\t\tconst startIndex3: number = startIndex + 3;\n\t\t\tconst real0: number = realArray[startIndex ];\n\t\tconst real1: number = realArray[startIndex1];\n\t\tconst real2: number = realArray[startIndex2];\n\t\tconst real3: number = realArray[startIndex3];\n\t\t\tconst imag0: number = imagArray[startIndex ];\n\t\tconst imag1: number = imagArray[startIndex1];\n\t\tconst imag2: number = imagArray[startIndex2];\n\t\tconst imag3: number = imagArray[startIndex3];\n\t\tconst realTemp0: number = real0 + real1;\n\t\tconst realTemp1: number = real0 - real1;\n\t\tconst realTemp2: number = real2 + real3;\n\t\tconst realTemp3: number = real2 - real3;\n\t\tconst imagTemp0: number = imag0 + imag1;\n\t\tconst imagTemp1: number = imag0 - imag1;\n\t\tconst imagTemp2: number = imag2 + imag3;\n\t\tconst imagTemp3: number = imag2 - imag3;\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\n\t}\n\t\t\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\n\t\tconst halfLength: number = stride >>> 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tlet c: number = 1.0;\n\t\t\tlet s: number = 0.0;\n\t\t\tlet cPrev: number = cosIncrement;\n\t\t\tlet sPrev: number = sinIncrement;\n\t\t\tconst secondHalf: number = startIndex + halfLength;\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\n\t\t\t\tconst j: number = i + halfLength;\n\t\t\t\tconst real0: number = realArray[i];\n\t\t\t\tconst imag0: number = imagArray[i];\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\n\t\t\t\trealArray[i] = real0 + real1;\n\t\t\t\timagArray[i] = imag0 + imag1;\n\t\t\t\trealArray[j] = real0 - real1;\n\t\t\t\timagArray[j] = imag0 - imag1;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the Fourier transform from an array of real-valued time-domain\n// samples. The output is specially formatted for space efficieny: elements\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\n// descending frequency. Overwrites the input array.\nexport function forwardRealFourierTransform(array: NumberArray): void {\n\tconst fullArrayLength: number = array.length;\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n\t\t\n\t// First and second pass.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\t// no imaginary elements yet since the input is fully real.\n\t\tconst tempA: number = real0 + real1;\n\t\tconst tempB: number = real2 + real3;\n\t\t\tarray[index ] = tempA + tempB;\n\t\tarray[index1] = real0 - real1;\n\t\tarray[index2] = tempA - tempB;\n\t\tarray[index3] = real2 - real3;\n\t}\n\t\t\n\t// Third pass.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index7: number = index + 7;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst imag3: number = array[index3];\n\t\tconst real4: number = array[index4];\n\t\tconst real5: number = array[index5];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\n\t\t\tarray[index ] = real0 + real4;\n\t\tarray[index1] = real1 + tempA;\n\t\tarray[index3] = real1 - tempA;\n\t\tarray[index4] = real0 - real4;\n\t\tarray[index5] = tempB - imag3;\n\t\tarray[index7] = tempB + imag3;\n\t}\n\t\t\n\t// Handle remaining passes.\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst realStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + realStartB;\n\t\t\tarray[startIndexB] = realStartA - realStartB;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst imag0: number = array[indexA1];\n\t\t\t\tconst real1: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\n\t\t\t\tarray[indexA0] = real0 + tempA;\n\t\t\t\tarray[indexA1] = real0 - tempA;\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\n\t\t\t\tarray[indexB1] = imag0 - tempB;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the inverse Fourier transform from a specially formatted array of\n// scalar values. Elements 0 through N/2 are expected to be the real values of\n// the corresponding complex elements, representing cosine wave amplitudes in\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\n// imaginary values, representing sine wave amplitudes in descending frequency.\n// Generates real-valued time-domain samples. Overwrites the input array.\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\n\t// Perform all but the last few passes in reverse.\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\t\t\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst imagStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\n\t\t\tarray[midIndexA] *= 2;\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\n\t\t\tarray[midIndexB] *= 2;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst real1: number = array[indexA1];\n\t\t\t\tconst imag0: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real0 - real1;\n\t\t\t\tconst tempB: number = imag0 + imag1;\n\t\t\t\tarray[indexA0] = real0 + real1;\n\t\t\t\tarray[indexA1] = imag1 - imag0;\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t// Commented out this block (and compensated with an extra pass above)\n\t// because it's slower in my testing so far.\n\t// Pass with stride 8.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index6: number = index + 6;\n\t\tconst index7: number = index + 7;\n\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\tconst imag4: number = array[index4];\n\t\tconst imag5: number = array[index5];\n\t\tconst imag6: number = array[index6];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = real1 - real3;\n\t\tconst tempB: number = imag5 + imag7;\n\t\tarray[index ] = real0 + imag4;\n\t\tarray[index1] = real1 + real3;\n\t\tarray[index2] = real2 * 2;\n\t\tarray[index3] = imag7 - imag5;\n\t\tarray[index4] = real0 - imag4;\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\n\t\tarray[index6] = imag6 * 2;\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\n\t}\n\t*/\n\t// The final passes with strides 4 and 2, combined into one loop.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1] * 2;\n\t\tconst imag2: number = array[index2];\n\t\tconst imag3: number = array[index3] * 2;\n\t\tconst tempA: number = real0 + imag2;\n\t\tconst tempB: number = real0 - imag2;\n\t\t\tarray[index ] = tempA + real1;\n\t\tarray[index1] = tempA - real1;\n\t\tarray[index2] = tempB + imag3;\n\t\tarray[index3] = tempB - imag3;\n\t}\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nexport class Deque<T> {\n\tprivate _capacity: number = 1;\n\tprivate _buffer: Array<T | undefined> = [undefined];\n\tprivate _mask: number = 0;\n\tprivate _offset: number = 0;\n\tprivate _count: number = 0;\n\n\tpublic pushFront(element: T): void {\n\t\tif (this._count >= this._capacity) this._expandCapacity();\n\t\tthis._offset = (this._offset - 1) & this._mask;\n\t\tthis._buffer[this._offset] = element;\n\t\tthis._count++;\n\t}\n\tpublic pushBack(element: T): void {\n\t\tif (this._count >= this._capacity) this._expandCapacity();\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\n\t\tthis._count++;\n\t}\n\tpublic popFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tconst element: T = <T>this._buffer[this._offset];\n\t\tthis._buffer[this._offset] = undefined;\n\t\tthis._offset = (this._offset + 1) & this._mask;\n\t\tthis._count--;\n\t\treturn element;\n\t}\n\tpublic popBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tthis._count--;\n\t\tconst index: number = (this._offset + this._count) & this._mask;\n\t\tconst element: T = <T>this._buffer[index];\n\t\tthis._buffer[index] = undefined;\n\t\treturn element;\n\t}\n\tpublic peakFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[this._offset];\n\t}\n\tpublic peakBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\n\t}\n\tpublic count(): number {\n\t\treturn this._count;\n\t}\n\tpublic set(index: number, element: T): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\n\t}\n\tpublic get(index: number): T {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\n\t}\n\tpublic remove(index: number): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tif (index <= (this._count >> 1)) {\n\t\t\twhile (index > 0) {\n\t\t\t\tthis.set(index, this.get(index - 1));\n\t\t\t\tindex--;\n\t\t\t}\n\t\t\tthis.popFront();\n\t\t} else {\n\t\t\tindex++;\n\t\t\twhile (index < this._count) {\n\t\t\t\tthis.set(index - 1, this.get(index));\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tthis.popBack();\n\t\t}\n\t}\n\tprivate _expandCapacity(): void {\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\n\t\tthis._capacity = this._capacity << 1;\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\n\t\tconst size: number = this._count | 0;\n\t\tconst offset: number = this._offset | 0;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\n\t\t}\n\t\tfor (let i = size; i < this._capacity; i++) {\n\t\t\tnewBuffer[i] = undefined;\n\t\t}\n\t\tthis._offset = 0;\n\t\tthis._buffer = newBuffer;\n\t\tthis._mask = this._capacity - 1;\n\t}\n}","/*\nThis file contains code to compute digital audio filter coefficients based on\nthe desired type, cutoff frequency, and other parameters. You can use these\ncoefficients to apply the filter to audio samples. It also contains code to\nanalyze these filters, which is useful for graphically displaying their effects.\n\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\nfilters, because older output samples contribute feedback to newer output\nsamples and thus contribute to all future samples, although typically filters\nare design to reduce the contribution of older samples over time.\n\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\nvolume of the signal at all but induce phase changes above the cutoff frequency.\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\nbut raise or lower the volume at that frequency. \n\nThe number of old samples used in the filter determines the \"order\" of the\nfilter. First-order filters generally have shallower slopes, and second-order\nfilters generally have steeper slopes and can be configured to \"resonate\",\nmeaning they have a louder peak at the cutoff frequency. This file contains\nfirst-order filters and second-order filters, meaning one or two older samples\nare involved, as well as the current input sample.\n\nThe class FilterCoefficients is defined lower in this file. You can use it to\nset up a first order filter like this:\n\n\tconst cutoffRadiansPerSample: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst filter: FilterCoefficients = new FilterCoefficients();\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\n\tconst a: number[] = filter.a;\n\t// input sample coefficients are conventionally called b0, b1, etc\n\tconst b: number[] = filter.b;\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\n\tconst x: number[] = [0, 0, 0];\n\t// filter output samples, y[0] will be computed by the filter based on input\n\t// samples and older output samples.\n\tconst y: number[] = [0, 0, 0];\n\nThen to apply the first-order filter to samples inside a loop, using the current\ninput sample (x[0]) as well as previous input and output samples, do this:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\n\t// Remember the input and output samples for next time:\n\tx[1] = x[0];\n\ty[1] = y[0];\n\n2nd order filters are similar, but have more parameters and require more old\nsamples:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\n\t// Remember the input and output samples for next time:\n\tx[2] = x[1];\n\tx[1] = x[0];\n\ty[2] = y[1];\n\ty[1] = y[0];\n\nYou can compose multiple filters into a higher order filter, although doing so\nreduces the numerical stability of the filter:\n\n\tfilter3.combination(filter1, filter2);\n\t// filter3.order will equal: filter1.order + filter2.order\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\n\nThis file also contains a class called FrequencyResponse. You can use it to\ndetermine how much gain or attenuation a filter would apply to sounds at a\nspecific input frequency, as well as the phase offset:\n\n\tconst inputRadians: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst response: FrequencyResponse = new FrequencyResponse();\n\tresponse.analyze(filter, inputRadians);\n\tconst gainResponse = response.magnitude();\n\tconst phaseResponse = response.angle();\n\nThat's basically all you need to know to use this code, but I'll also explain\nhow the analysis works.\n\nA first-order digital IIR filter is ordinarily implemented in a form like this:\n\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\n\nIf we adopt standard naming conventions for audio filters, this same code would\ninstead look like:\n\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\n\ty0 = b0*x0 + b1*x1 - a1*y1;\n\nLeaving behind the world of code for a moment and entering the world of algebra,\nwe can rewrite this equation by moving all the output terms to the left side,\nand we can add a coefficient to the y0 term called a0 (which is typically\nnormalized to 1.0, which is why I didn't bother including it until now):\n\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\n\nThis is known as the symmetrical form of the filter, and it will help us analyze\nthe impact of the filter on an input audio signal. Here's a lesson that helped\nme understand the symmetrical form:\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\n\nThe end of that lesson introduces a concept called the \"delay operator\" which\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\nwhen you multiply them. For example:\n\n\tx0 * z^-1 = x1\n\nThe lesson doesn't explain how it actually works. Audio signals aren't always\npredictable, which means that you generally can't do math on a single sample to\ncompute what the previous sample was. However, some audio signals ARE\npredictable, such as pure sine waves. Fortunately, all audio signals can be\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\ntime, and use it to analyze the filter's impact on waves at that frequency. In\npractice, this tells us what the filter will do to unpredictable input samples\nthat contain a partial sine wave at that frequency.\n\nTechnically, you can't just use a single sine wave sample to determine the\nprevious sine wave sample, because each possible value is passed going upwards\nand downwards once per period and the direction is ambigous. This is where we\nneed to move into the complex number domain, where the real and imaginary\ncomponents can provide enough information to compute the previous position on\nthe input signal. So now instead of talking about sine waves, we're talking\nabout waves where the imaginary component is a sine wave and the real component\nis a cosine wave at the same frequency. Together, they trace around a unit\ncircle in the complex domain, and each sample is just a consistent rotation\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\nthis same rotation applied in reverse, and it can be computed as:\n\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\n\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\nexplaining what that means is probably beyond the scope of this documentation\naside from noting that a complex number on the unit circle represents a 2D\nrotation that you can apply via multiplication.\n\nNow we can rewrite the symmetrical form using the delay operator and algebra:\n\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nThat last equation expresses the relationship between the input and output\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\npoint, the specific values of the input and output samples don't even matter!\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\n\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nIf you plug in actual filter coefficients and express the delay operators as\ncomplex numbers with the appropriate trigonometry functions, the transfer\nfunction can be computed and produces a complex number that represents the\nrelationship between the input and output signals, whose magnitude represents\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\nrepresents how much phase shift is applied by the filter to signals at that\nfrequency.\n\n(Note that in order to compute the transfer function, you'll need to do\nsomething about the complex number in the denominator. It turns out you can turn\nthe denominator into a real number by multiplying both the numerator and\ndenominator by the complex conjugate of the denominator, which is just the\ndenominator with the imaginary component negated.)\n\nFinally, I'll list some of the links that helped me understand filters and\nprovided some of the algorithms I that use here.\n\nHere's where I found accurate 2nd order low-pass, high-pass, and high-shelf\ndigital filters:\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\n\nThis page is how I found a link to the cookbook article above. It claims these\nfilters are Butterworth filters:\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\nI found the first-order digital Butterworth filter coefficients at:\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\n\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\nhttps://www.drpetter.se/project_sfxr.html\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\nnearly identical, but when closer to the nyquist frequency the simpler filters\ncreate extra resonance.\n*/\n\nexport class FilterCoefficients {\n\tpublic readonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\n\tpublic readonly b: number[] = [1.0]; // input coefficients\n\tpublic order: number = 0;\n\t\n\tpublic linearGain0thOrder(linearGain: number): void {\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\n\t\tthis.b[0] = linearGain;\n\t\tthis.order = 0;\n\t}\n\t\n\tpublic lowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth low-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\t// A butterworth filter is one where the amplitude response is equal to:\n\t\t// 1 / √(1 + (freq / cutoffFreq)^(2 * order))\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[1] = this.b[0] = 1 / a0;\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic lowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\n\t\t// then the output is the same as the input, and if the cutoff is higher\n\t\t// than that, then the output actually resonates at high frequencies\n\t\t// instead of attenuating.\n\t\t// I'm guessing this filter was converted from analog to digital using\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\n\t\t// method. The difference is that the bilinear transform warps\n\t\t// frequencies so that the lowpass response of zero at analogue ∞hz maps\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\n\t\t// preserves the frequency of the filter response but also adds the\n\t\t// reflected response from above the nyquist frequency.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 0.0;\n\t\t/*\n\t\t// Alternatively:\n\t\tconst g: number = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\n\t\tconst a0: number = g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = 1.0 / a0;\n\t\tthis.b[1] = 0.0 / a0;\n\t\t*/\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic highPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth high-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = g / a0;\n\t\tthis.b[1] = -g / a0;\n\t\tthis.order = 1;\n\t}\n\t/*\n\tpublic highPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\n\t\t// appoaches the nyquist.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\tpublic highShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\n\t\t// I had trouble figuring this one out because I couldn't find any\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\n\t\t// and I could narrow down a couple of them based on the desired gain at\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\n\t\t// Obviously I don't fully understand the bilinear transform yet!\n\t\tconst tan: number = Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst sqrtGain: number = Math.sqrt(shelfLinearGain);\n\t\tconst g: number = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n\t\tconst a0: number = 1.0;\n\t\tthis.a[1] = g / a0;\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\t/*\n\t// I haven't found a practical use for this version of the all pass filter.\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\n\tpublic allPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = -g;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\t\n\tpublic allPass1stOrderFractionalDelay(delay: number) {\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\n\t\t// differently and for a different purpose! Useful for interpolating\n\t\t// between samples in a delay line.\n\t\tconst g: number = (1.0 - delay) / (1.0 + delay);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic lowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This is Butterworth if peakLinearGain=1/√2 according to:\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\n\t\t// although it gets distorted near the nyquist.\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\n\t\tthis.b[1] = (1 - cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t\n\tpublic lowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This filter is adapted from the one in the SFXR source code:\n\t\t// https://www.drpetter.se/project_sfxr.html\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\n\t\t// above, except it resonates too much when the cutoff appoaches the\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\n\t\t// nyquist/3, then the output is the same as the input.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = g*g;\n\t\tthis.b[1] = 0;\n\t\tthis.b[2] = 0;\n\t\tthis.order = 2;\n\t}\n\t\n\tpublic highPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1.0 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\n\t\tthis.b[1] = -(1.0 + cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\tpublic highPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -2.0;\n\t\tthis.b[2] = 1.0;\n\t\tthis.order = 2;\n\t}\n\t*/\n\tpublic highShelf2ndOrder(cornerRadiansPerSample: number, shelfLinearGain: number, slope: number): void {\n\t\tconst A: number = Math.sqrt(shelfLinearGain);\n\t\tconst c: number = Math.cos(cornerRadiansPerSample);\n\t\tconst Aplus: number = A + 1.0;\n\t\tconst Aminus: number = A - 1.0;\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\n\t\tconst sqrtA2Alpha: number = 2.0 * Math.sqrt(A) * alpha;\n\t\tconst a0: number =   (Aplus  - Aminus * c + sqrtA2Alpha);\n\t\tthis.a[1] =  2 *     (Aminus - Aplus  * c              ) / a0;\n\t\tthis.a[2] =          (Aplus  - Aminus * c - sqrtA2Alpha) / a0;\n\t\tthis.b[0] =      A * (Aplus  + Aminus * c + sqrtA2Alpha) / a0;\n\t\tthis.b[1] = -2 * A * (Aminus + Aplus  * c              ) / a0;\n\t\tthis.b[2] =      A * (Aplus  + Aminus * c - sqrtA2Alpha) / a0;\n\t\tthis.order = 2;\n\t}\n\n\tpublic peak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\n\t\tconst sqrtGain: number = Math.sqrt(peakLinearGain);\n\t\tconst bandWidth: number = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\n\t\t//const bandWidth: number = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\n\t\tconst alpha: number = Math.tan(bandWidth * 0.5);\n\t\tconst a0: number = 1.0 + alpha / sqrtGain;\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\t// Create a higher order filter by combining two lower order filters.\n\t// However, making high order filters in this manner results in instability.\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\n\tpublic combination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\n\t\tthis.order = filter1.order + filter2.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = 0.0;\n\t\t\tthis.b[i] = 0.0;\n\t\t}\n\t\tfor (let i: number = 0; i <= filter1.order; i++) {\n\t\t\tfor (let j: number = 0; j <= filter2.order; j++) {\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic scaledDifference(other: FilterCoefficients, scale: number): void {\n\t\tif (other.order != this.order) throw new Error();\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\n\t\t}\n\t}\n\t\n\tpublic copy(other: FilterCoefficients): void {\n\t\tthis.order = other.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = other.a[i];\n\t\t\tthis.b[i] = other.b[i];\n\t\t}\n\t}\n\t*/\n}\n\nexport class FrequencyResponse {\n\tpublic real: number = 0.0;\n\tpublic imag: number = 0.0;\n\tpublic denom: number = 1.0;\n\t\n\tpublic analyze(filter: FilterCoefficients, radiansPerSample: number): void {\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n\t}\n\t\n\tpublic analyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\n\t\tconst a: number[] = filter.a;\n\t\tconst b: number[] = filter.b;\n\t\tconst realZ1: number = real;\n\t\tconst imagZ1: number = -imag;\n\t\tlet realNum: number = b[0] + b[1] * realZ1;\n\t\tlet imagNum: number = b[1] * imagZ1;\n\t\tlet realDenom: number = 1.0 + a[1] * realZ1;\n\t\tlet imagDenom: number = a[1] * imagZ1;\n\t\tlet realZ: number = realZ1;\n\t\tlet imagZ: number = imagZ1;\n\t\tfor (let i: number = 2; i <= filter.order; i++) {\n\t\t\tconst realTemp: number = realZ * realZ1 - imagZ * imagZ1;\n\t\t\tconst imagTemp: number = realZ * imagZ1 + imagZ * realZ1;\n\t\t\trealZ = realTemp;\n\t\t\timagZ = imagTemp;\n\t\t\trealNum += b[i] * realZ;\n\t\t\timagNum += b[i] * imagZ;\n\t\t\trealDenom += a[i] * realZ;\n\t\t\timagDenom += a[i] * imagZ;\n\t\t}\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\n\t}\n\t\n\tpublic magnitude(): number {\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n\t}\n\t\n\tpublic angle(): number {\n\t\treturn Math.atan2(this.imag, this.real);\n\t}\n}\n\nexport class DynamicBiquadFilter {\n\tpublic a1: number = 0.0;\n\tpublic a2: number = 0.0;\n\tpublic b0: number = 1.0;\n\tpublic b1: number = 0.0;\n\tpublic b2: number = 0.0;\n\tpublic a1Delta: number = 0.0;\n\tpublic a2Delta: number = 0.0;\n\tpublic b0Delta: number = 0.0;\n\tpublic b1Delta: number = 0.0;\n\tpublic b2Delta: number = 0.0;\n\tpublic output1: number = 0.0;\n\tpublic output2: number = 0.0;\n\t\n\t// Some filter types are more stable when interpolating between coefficients\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\n\t// for filter types where the \"b\" coefficients might change sign!\n\tpublic useMultiplicativeInputCoefficients: boolean = false;\n\t\n\tpublic resetOutput(): void {\n\t\tthis.output1 = 0.0;\n\t\tthis.output2 = 0.0;\n\t}\n\t\n\tpublic loadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\n\t\tthis.a1 = start.a[1];\n\t\tthis.a2 = start.a[2];\n\t\tthis.b0 = start.b[0];\n\t\tthis.b1 = start.b[1];\n\t\tthis.b2 = start.b[2];\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n\t\tif (useMultiplicativeInputCoefficients) {\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n\t\t} else {\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n\t\t}\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n\t}\n}\n\n// Filters are typically designed as analog filters first, then converted to\n// digital filters using one of two methods: the \"matched z-transform\" or the\n// \"bilinear transform\". The \"bilinear transform\" does a better job of\n// preserving the magnitudes of the frequency response, but warps the frequency\n// range such that the nyquist frequency of the digital filter (π) maps to the\n// infinity frequency of the analog filter. You can use the below functions to\n// manually perform this warping in either direction.\nexport function warpNyquistToInfinity(radians: number): number {\n\treturn 2.0 * Math.tan(radians * 0.5);\n}\nexport function warpInfinityToNyquist(radians: number): number {\n\treturn 2.0 * Math.atan(radians * 0.5);\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\r\n\r\nimport { DictionaryArray, Key, toNameMap } from \"./SynthConfig\"\r\n\r\nfunction gcd(a: number, b: number): number {\r\n    // If one of the numbers is 0, the other number is the GCD\r\n    if (b === 0) return a;\r\n\r\n    // Otherwise, recursively compute the GCD\r\n    return gcd(b, a % b);\r\n}\r\n\r\nexport function createKeys(edo: number): DictionaryArray<Key> {\r\n    let bestFifth: number = Math.round(Math.log2(3/2)*edo);\r\n    let fifthRatio: number = bestFifth/edo;\r\n    let keys: Array<string> = Array(edo).fill(\"\");\r\n    let whiteKeyNames_5edo: Array<string> = [\"C\", \"D\", \"F\", \"G\", \"A\"];\r\n    let keyNames_diatonicFifthward: Array<string> = [\"C\", \"G\", \"D\", \"A\", \"E\", \"B\", \"F♯\", \"C♯\", \"G♯\", \"D♯\", \"A♯\", \"E♯\", \"B♯\"];\r\n    let keyNames_diatonicFourthward: Array<string> = [\"C\", \"F\", \"B♭\", \"E♭\", \"A♭\", \"D♭\", \"G♭\", \"C♭\", \"F♭\"];\r\n    let keyNames_mavillaFifthward: Array<string> = [\"C\", \"G\", \"D♭\", \"A♭\", \"E♭\", \"B♭\", \"F♭\", \"C♭\"];\r\n    let keyNames_mavillaFourthward: Array<string> = [\"C\", \"F\", \"B\", \"E\", \"A\", \"D\", \"G♯\", \"C♯\", \"F♯\", \"B♯\", \"E♯\", \"A♯\", \"D♯\"];\r\n    let keyNames_oneiroSixthward: Array<string> = [\"C\", \"H\", \"E♭\", \"B♭\", \"G♭\", \"D♭\", \"A♭\", \"F♭\", \"C♭\", \"H♭\"];\r\n    let keyNames_oneiroFourthward: Array<string> = [\"C\", \"F\", \"A\", \"D\", \"G\", \"B\", \"E\", \"H♯\", \"C♯\", \"F♯\", \"A♯\", \"D♯\", \"G♯\", \"B♯\", \"E♯\"];\r\n    if (fifthRatio == 3/5) { // Fifth = 720 cents\r\n        let fifthOctave: number = Math.round(edo/5);\r\n        for ( let i = 0; i < 5; i++ ) {\r\n            keys[i*fifthOctave] = whiteKeyNames_5edo[i]\r\n            for ( let j = 1 ; j <= Math.ceil((fifthOctave-1)/2); j++ ) {\r\n                keys[i*fifthOctave+j] = whiteKeyNames_5edo[i] + \"+\".repeat(j);\r\n            }\r\n            for ( let j = 1 ; j <= Math.floor((fifthOctave-1)/2); j++ ) {\r\n                if (i == 0) {\r\n                    keys[i*fifthOctave-j+edo] = whiteKeyNames_5edo[i] + \"-\".repeat(j);\r\n                } else {\r\n                    keys[i*fifthOctave-j] = whiteKeyNames_5edo[i] + \"-\".repeat(j);\r\n                }\r\n            }\r\n        }\r\n    } else if (fifthRatio == 2/3) { // Only possible in 6edo\r\n        keys = [\"C\", \"D\", \"E\", \"F\", \"A\", \"B\"];\r\n    } else if (fifthRatio >= 4/7 && fifthRatio < 3/5) { // Diatonic fifth (and 7edo equalized diatonic)\r\n        let baseEdo: number = edo / gcd(edo, bestFifth);\r\n        keys[0] = \"C\"\r\n        for ( let i = 1; i <= 5 + Math.min(Math.ceil((baseEdo-7)/2), 7); i++ ) {\r\n            let thisPitch: number = (bestFifth * i) % edo;\r\n            keys[thisPitch] = keyNames_diatonicFifthward[i];\r\n        }\r\n        for ( let i = 1; i <= 1 + Math.min(Math.floor((baseEdo-7)/2), 7); i++ ) {\r\n            let thisPitch: number = ((edo - bestFifth) * i) % edo;\r\n            keys[thisPitch] = keyNames_diatonicFourthward[i];\r\n        }\r\n\r\n        let keysFinished: boolean = false;\r\n\r\n        while (!keysFinished) {\r\n            keysFinished = true;\r\n            for ( let i = 0; i < edo; i++ ) {\r\n                if (keys[i] == \"\") {\r\n                    if (keys[i-1] != \"\") {\r\n                        keys[i] = keys[i-1] + \"+\";\r\n                    } else if (keys[i+1] != \"\") {\r\n                        keys[i] = keys[i+1] + \"-\";\r\n                    } else {\r\n                        keysFinished = false;\r\n                    }\r\n                } else {\r\n                    // do nothing\r\n                }\r\n            }\r\n        }\r\n    } else if (fifthRatio < 4/7) { // Mavilla fifth\r\n        let baseEdo: number = edo / gcd(edo, bestFifth);\r\n        keys[0] = \"C\"\r\n        for ( let i = 1; i <= 5 + Math.min(Math.ceil((baseEdo-7)/2), 7); i++ ) {\r\n            let thisPitch: number = ((edo - bestFifth) * i) % edo;\r\n            keys[thisPitch] = keyNames_mavillaFourthward[i];\r\n        }\r\n        for ( let i = 1; i <= 1 + Math.min(Math.floor((baseEdo-7)/2), 7); i++ ) {\r\n            let thisPitch: number = (bestFifth * i) % edo;\r\n            keys[thisPitch] = keyNames_mavillaFifthward[i];\r\n        }\r\n\r\n        let keysFinished: boolean = false;\r\n\r\n        while (!keysFinished) {\r\n            keysFinished = true;\r\n            for ( let i = 0; i < edo; i++ ) {\r\n                if (keys[i] == \"\") {\r\n                    if (keys[i-1] != \"\") {\r\n                        keys[i] = keys[i-1] + \"+\";\r\n                    } else if (keys[i+1] != \"\") {\r\n                        keys[i] = keys[i+1] + \"-\";\r\n                    } else {\r\n                        keysFinished = false;\r\n                    }\r\n                } else {\r\n                    // do nothing\r\n                }\r\n            }\r\n        }\r\n    } else if (fifthRatio > 3/5) { // Oneirotonic \"fifth\"- techically a sixth because it is the sixth degree of an eight-note scale\r\n        let baseEdo: number = edo / gcd(edo, bestFifth);\r\n        keys[0] = \"C\"\r\n        for ( let i = 1; i <= 5 + Math.min(Math.ceil((baseEdo-7)/2), 7); i++ ) {\r\n            let thisPitch: number = ((edo - bestFifth) * i) % edo;\r\n            keys[thisPitch] = keyNames_oneiroFourthward[i];\r\n        }\r\n        for ( let i = 1; i <= 1 + Math.min(Math.floor((baseEdo-7)/2), 7); i++ ) {\r\n            let thisPitch: number = (bestFifth * i) % edo;\r\n            keys[thisPitch] = keyNames_oneiroSixthward[i];\r\n        }\r\n\r\n        let keysFinished: boolean = false;\r\n\r\n        while (!keysFinished) {\r\n            keysFinished = true;\r\n            for ( let i = 0; i < edo; i++ ) {\r\n                if (keys[i] == \"\") {\r\n                    if (keys[i-1] != \"\") {\r\n                        keys[i] = keys[i-1] + \"+\";\r\n                    } else if (keys[i+1] != \"\") {\r\n                        keys[i] = keys[i+1] + \"-\";\r\n                    } else {\r\n                        keysFinished = false;\r\n                    }\r\n                } else {\r\n                    // do nothing\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let keyArray: Array<Key> = [];\r\n    for ( let i = 0; i < edo; i++) {\r\n        keyArray.push({ \"index\": i, \"name\": keys[i], \"isWhiteKey\": keys[i].length == 1 ? true : false, \"basePitch\": i + edo });\r\n    }\r\n    return toNameMap(keyArray);\r\n}","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Dictionary, DictionaryArray, FilterType, SustainType, EnvelopeType, InstrumentType, EffectType, EnvelopeComputeIndex, Transition, Unison, Chord, Vibrato, Envelope, AutomationTarget, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegralOld, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, OperatorWave } from \"./SynthConfig\";\nimport { EditorConfig } from \"../editor/EditorConfig\";\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\nimport { Deque } from \"./Deque\";\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter, warpInfinityToNyquist } from \"./filtering\";\nimport { createKeys } from \"./CreateScalesAndKeys\";\n\ndeclare global {\n    interface Window {\n        AudioContext: any;\n        webkitAudioContext: any;\n    }\n}\n\nconst epsilon: number = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\n\n// For performance debugging:\n//let samplesAccumulated: number = 0;\n//let samplePerformance: number = 0;\n\nexport function clamp(min: number, max: number, val: number): number {\n    max = max - 1;\n    if (val <= max) {\n        if (val >= min) return val;\n        else return min;\n    } else {\n        return max;\n    }\n}\n\nfunction validateRange(min: number, max: number, val: number): number {\n    if (min <= val && val <= max) return val;\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\n\nconst enum CharCode {\n    SPACE = 32,\n    HASH = 35,\n    PERCENT = 37,\n    AMPERSAND = 38,\n    PLUS = 43,\n    DASH = 45,\n    DOT = 46,\n    NUM_0 = 48,\n    NUM_1 = 49,\n    NUM_2 = 50,\n    NUM_3 = 51,\n    NUM_4 = 52,\n    NUM_5 = 53,\n    NUM_6 = 54,\n    NUM_7 = 55,\n    NUM_8 = 56,\n    NUM_9 = 57,\n    EQUALS = 61,\n    A = 65,\n    B = 66,\n    C = 67,\n    D = 68,\n    E = 69,\n    F = 70,\n    G = 71,\n    H = 72,\n    I = 73,\n    J = 74,\n    K = 75,\n    L = 76,\n    M = 77,\n    N = 78,\n    O = 79,\n    P = 80,\n    Q = 81,\n    R = 82,\n    S = 83,\n    T = 84,\n    U = 85,\n    V = 86,\n    W = 87,\n    X = 88,\n    Y = 89,\n    Z = 90,\n    UNDERSCORE = 95,\n    a = 97,\n    b = 98,\n    c = 99,\n    d = 100,\n    e = 101,\n    f = 102,\n    g = 103,\n    h = 104,\n    i = 105,\n    j = 106,\n    k = 107,\n    l = 108,\n    m = 109,\n    n = 110,\n    o = 111,\n    p = 112,\n    q = 113,\n    r = 114,\n    s = 115,\n    t = 116,\n    u = 117,\n    v = 118,\n    w = 119,\n    x = 120,\n    y = 121,\n    z = 122,\n    LEFT_CURLY_BRACE = 123,\n    RIGHT_CURLY_BRACE = 125,\n}\n\nconst enum SongTagCode {\n    beatCount           = CharCode.a, // added in BeepBox URL version 2\n\tbars                = CharCode.b, // added in BeepBox URL version 2\n\tvibrato             = CharCode.c, // added in BeepBox URL version 2, DEPRECATED\n\tfadeInOut           = CharCode.d, // added in BeepBox URL version 3 for transition, switched to fadeInOut in 9\n\tloopEnd             = CharCode.e, // added in BeepBox URL version 2\n\teqFilter            = CharCode.f, // added in BeepBox URL version 3\n\tbarCount            = CharCode.g, // added in BeepBox URL version 3\n\tunison              = CharCode.h, // added in BeepBox URL version 2\n\tinstrumentCount     = CharCode.i, // added in BeepBox URL version 3\n\tpatternCount        = CharCode.j, // added in BeepBox URL version 3\n\tkey                 = CharCode.k, // added in BeepBox URL version 2\n\tloopStart           = CharCode.l, // added in BeepBox URL version 2\n\treverb              = CharCode.m, // added in BeepBox URL version 5, DEPRECATED\n\tchannelCount        = CharCode.n, // added in BeepBox URL version 6\n\tchannelOctave       = CharCode.o, // added in BeepBox URL version 3\n\tpatterns            = CharCode.p, // added in BeepBox URL version 2\n\teffects             = CharCode.q, // added in BeepBox URL version 7\n\trhythm              = CharCode.r, // added in BeepBox URL version 2\n\tscale               = CharCode.s, // added in BeepBox URL version 2\n\ttempo               = CharCode.t, // added in BeepBox URL version 2\n\tpreset              = CharCode.u, // added in BeepBox URL version 7\n\tvolume              = CharCode.v, // added in BeepBox URL version 2\n\twave                = CharCode.w, // added in BeepBox URL version 2\n\tsupersaw            = CharCode.x, // added in BeepBox URL version 9\n\tfilterResonance     = CharCode.y, // added in BeepBox URL version 7, DEPRECATED\n\tdrumsetEnvelopes    = CharCode.z, // added in BeepBox URL version 7 for filter envelopes, still used for drumset envelopes\n\talgorithm           = CharCode.A, // added in BeepBox URL version 6\n\tfeedbackAmplitude   = CharCode.B, // added in BeepBox URL version 6\n\tchord               = CharCode.C, // added in BeepBox URL version 7, DEPRECATED\n\tdetune              = CharCode.D, // added in JummBox URL version 3(?) for detune, DEPRECATED\n\tenvelopes           = CharCode.E, // added in BeepBox URL version 6 for FM operator envelopes, repurposed in 9 for general envelopes.\n\tfeedbackType        = CharCode.F, // added in BeepBox URL version 6\n\tarpeggioSpeed       = CharCode.G, // added in JummBox URL version 3 for arpeggioSpeed, DEPRECATED\n\tharmonics           = CharCode.H, // added in BeepBox URL version 7\n\tstringSustain       = CharCode.I, // added in BeepBox URL version 9\n\tedo                 = CharCode.J, // added in EdoBox\n//\t                    = CharCode.K,\n\tpan                 = CharCode.L, // added between 8 and 9, DEPRECATED\n\tcustomChipWave      = CharCode.M, // added in JummBox URL version 1(?) for customChipWave\n\tsongTitle           = CharCode.N, // added in JummBox URL version 1(?) for songTitle\n\tlimiterSettings     = CharCode.O, // added in JummBox URL version 3(?) for limiterSettings\n\toperatorAmplitudes  = CharCode.P, // added in BeepBox URL version 6\n\toperatorFrequencies = CharCode.Q, // added in BeepBox URL version 6\n\toperatorWaves       = CharCode.R, // added in JummBox URL version 4 for operatorWaves\n\tspectrum            = CharCode.S, // added in BeepBox URL version 7\n\tstartInstrument     = CharCode.T, // added in BeepBox URL version 6\n\tchannelNames        = CharCode.U, // added in JummBox URL version 4(?) for channelNames\n\tfeedbackEnvelope    = CharCode.V, // added in BeepBox URL version 6, DEPRECATED\n\tpulseWidth          = CharCode.W, // added in BeepBox URL version 7\n\taliases             = CharCode.X, // added in JummBox URL version 4 for aliases, DEPRECATED\n//\t                    = CharCode.Y,\n//\t                    = CharCode.Z,\n//\t                    = CharCode.NUM_0,\n//\t                    = CharCode.NUM_1,\n//\t                    = CharCode.NUM_2,\n//\t                    = CharCode.NUM_3,\n//\t                    = CharCode.NUM_4,\n//\t                    = CharCode.NUM_5,\n//\t                    = CharCode.NUM_6,\n//\t                    = CharCode.NUM_7,\n//\t                    = CharCode.NUM_8,\n//\t                    = CharCode.NUM_9,\n//\t                    = CharCode.DASH,\n//\t                    = CharCode.UNDERSCORE,\n\n}\n\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\n\nclass BitFieldReader {\n    private _bits: number[] = [];\n    private _readIndex: number = 0;\n\n    constructor(source: string, startIndex: number, stopIndex: number) {\n        for (let i: number = startIndex; i < stopIndex; i++) {\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\n            this._bits.push((value >> 5) & 0x1);\n            this._bits.push((value >> 4) & 0x1);\n            this._bits.push((value >> 3) & 0x1);\n            this._bits.push((value >> 2) & 0x1);\n            this._bits.push((value >> 1) & 0x1);\n            this._bits.push(value & 0x1);\n        }\n    }\n\n    public read(bitCount: number): number {\n        let result: number = 0;\n        while (bitCount > 0) {\n            result = result << 1;\n            result += this._bits[this._readIndex++];\n            bitCount--;\n        }\n        return result;\n    }\n\n    public readLongTail(minValue: number, minBits: number): number {\n        let result: number = minValue;\n        let numBits: number = minBits;\n        while (this._bits[this._readIndex++]) {\n            result += 1 << numBits;\n            numBits++;\n        }\n        while (numBits > 0) {\n            numBits--;\n            if (this._bits[this._readIndex++]) {\n                result += 1 << numBits;\n            }\n        }\n        return result;\n    }\n\n    public readPartDuration(): number {\n        return this.readLongTail(1, 3);\n    }\n\n    public readLegacyPartDuration(): number {\n        return this.readLongTail(1, 2);\n    }\n\n    public readPinCount(): number {\n        return this.readLongTail(1, 0);\n    }\n\n    public readPitchInterval(): number {\n        if (this.read(1)) {\n            return -this.readLongTail(1, 3);\n        } else {\n            return this.readLongTail(1, 3);\n        }\n    }\n}\n\nclass BitFieldWriter {\n    private _index: number = 0;\n    private _bits: number[] = [];\n\n    public clear() {\n        this._index = 0;\n    }\n\n    public write(bitCount: number, value: number): void {\n        bitCount--;\n        while (bitCount >= 0) {\n            this._bits[this._index++] = (value >>> bitCount) & 1;\n            bitCount--;\n        }\n    }\n\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\n        if (value < minValue) throw new Error(\"value out of bounds\");\n        value -= minValue;\n        let numBits: number = minBits;\n        while (value >= (1 << numBits)) {\n            this._bits[this._index++] = 1;\n            value -= 1 << numBits;\n            numBits++;\n        }\n        this._bits[this._index++] = 0;\n        while (numBits > 0) {\n            numBits--;\n            this._bits[this._index++] = (value >>> numBits) & 1;\n        }\n    }\n\n    public writePartDuration(value: number): void {\n        this.writeLongTail(1, 3, value);\n    }\n\n    public writePinCount(value: number): void {\n        this.writeLongTail(1, 0, value);\n    }\n\n    public writePitchInterval(value: number): void {\n        if (value < 0) {\n            this.write(1, 1); // sign\n            this.writeLongTail(1, 3, -value);\n        } else {\n            this.write(1, 0); // sign\n            this.writeLongTail(1, 3, value);\n        }\n    }\n\n    public concat(other: BitFieldWriter): void {\n        for (let i: number = 0; i < other._index; i++) {\n            this._bits[this._index++] = other._bits[i];\n        }\n    }\n\n    public encodeBase64(buffer: number[]): number[] {\n\n        for (let i: number = 0; i < this._index; i += 6) {\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\n            buffer.push(base64IntToCharCode[value]);\n        }\n        return buffer;\n    }\n\n    public lengthBase64(): number {\n        return Math.ceil(this._index / 6);\n    }\n}\n\nexport interface NotePin {\n    interval: number;\n    time: number;\n    size: number;\n}\n\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\n    return { interval: interval, time: time, size: size };\n}\n\nexport class Note {\n    public pitches: number[];\n    public pins: NotePin[];\n    public start: number;\n    public end: number;\n    public continuesLastPattern: boolean;\n\n    public constructor(pitch: number, start: number, end: number, size: number, fadeout: boolean = false) {\n        this.pitches = [pitch];\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n        this.start = start;\n        this.end = end;\n        this.continuesLastPattern = false;\n    }\n\n    public pickMainInterval(): number {\n        let longestFlatIntervalDuration: number = 0;\n        let mainInterval: number = 0;\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\n            const pinA: NotePin = this.pins[pinIndex - 1];\n            const pinB: NotePin = this.pins[pinIndex];\n            if (pinA.interval == pinB.interval) {\n                const duration: number = pinB.time - pinA.time;\n                if (longestFlatIntervalDuration < duration) {\n                    longestFlatIntervalDuration = duration;\n                    mainInterval = pinA.interval;\n                }\n            }\n        }\n        if (longestFlatIntervalDuration == 0) {\n            let loudestSize: number = 0;\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\n                const pin: NotePin = this.pins[pinIndex];\n                if (loudestSize < pin.size) {\n                    loudestSize = pin.size;\n                    mainInterval = pin.interval;\n                }\n            }\n        }\n        return mainInterval;\n    }\n\n    public clone(): Note {\n        const newNote: Note = new Note(-1, this.start, this.end, 3);\n        newNote.pitches = this.pitches.concat();\n        newNote.pins = [];\n        for (const pin of this.pins) {\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n        }\n        newNote.continuesLastPattern = this.continuesLastPattern;\n        return newNote;\n    }\n\n    public getEndPinIndex(part: number): number {\n        let endPinIndex: number;\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n            if (this.pins[endPinIndex].time + this.start > part) break;\n        }\n        return endPinIndex;\n    }\n}\n\nexport class Pattern {\n    public notes: Note[] = [];\n    public readonly instruments: number[] = [0];\n\n    public cloneNotes(): Note[] {\n        const result: Note[] = [];\n        for (const note of this.notes) {\n            result.push(note.clone());\n        }\n        return result;\n    }\n\n    public reset(): void {\n        this.notes.length = 0;\n        this.instruments[0] = 0;\n        this.instruments.length = 1;\n    }\n\n    public toJsonObject(song: Song, channel: Channel, isModChannel: boolean): any {\n        const noteArray: Object[] = [];\n        for (const note of this.notes) {\n            // Only one ins per pattern is enforced in mod channels.\n            let instrument: Instrument = channel.instruments[this.instruments[0]];\n            let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\n            let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n            const pointArray: Object[] = [];\n            for (const pin of note.pins) {\n                let useVol: number = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\n                pointArray.push({\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\n                    \"pitchBend\": pin.interval,\n                    \"volume\": useVol,\n                    \"forMod\": isModChannel,\n                });\n            }\n\n            const noteObject: any = {\n                \"pitches\": note.pitches,\n                \"points\": pointArray,\n            };\n            if (note.start == 0) {\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n            }\n            noteArray.push(noteObject);\n        }\n\n        const patternObject: any = { \"notes\": noteArray };\n        if (song.patternInstruments) {\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\n        }\n        return patternObject;\n    }\n\n    public fromJsonObject(patternObject: any, song: Song, channel: Channel, importedPartsPerBeat: number, isNoiseChannel: boolean, isModChannel: boolean): void {\n        if (song.patternInstruments) {\n            if (Array.isArray(patternObject[\"instruments\"])) {\n                const instruments: any[] = patternObject[\"instruments\"];\n                const instrumentCount: number = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n                for (let j: number = 0; j < instrumentCount; j++) {\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n                }\n                this.instruments.length = instrumentCount;\n            } else {\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n                this.instruments.length = 1;\n            }\n        }\n\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n            const maxNoteCount: number = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\n\n            // TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary.\n            //let tickClock: number = 0;\n            for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\n                if (j >= maxNoteCount) break;\n\n                const noteObject = patternObject[\"notes\"][j];\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n                    continue;\n                }\n\n                const note: Note = new Note(0, 0, 0, 0);\n                note.pitches = [];\n                note.pins = [];\n\n                for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\n                    const pitch: number = noteObject[\"pitches\"][k] | 0;\n                    if (note.pitches.indexOf(pitch) != -1) continue;\n                    note.pitches.push(pitch);\n                    if (note.pitches.length >= Config.maxChordSize) break;\n                }\n                if (note.pitches.length < 1) continue;\n\n                //let noteClock: number = tickClock;\n                let startInterval: number = 0;\n                for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\n                    const pointObject: any = noteObject[\"points\"][k];\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\n                    const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n\n                    const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n\n                    let instrument: Instrument = channel.instruments[this.instruments[0]];\n                    let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\n\n                    // Only one instrument per pattern allowed in mod channels.\n                    let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n\n                    // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\n                    // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\n                    let size: number;\n                    if (pointObject[\"volume\"] == undefined) {\n                        size = volumeCap;\n                    } else if (pointObject[\"forMod\"] == undefined) {\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    else {\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n\n                    if (time > song.beatsPerBar * Config.partsPerBeat) continue;\n                    if (note.pins.length == 0) {\n                        //if (time < noteClock) continue;\n                        note.start = time;\n                        startInterval = interval;\n                    } else {\n                        //if (time <= noteClock) continue;\n                    }\n                    //noteClock = time;\n\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n                }\n                if (note.pins.length < 2) continue;\n\n                note.end = note.pins[note.pins.length - 1].time + note.start;\n\n                const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : song.edo * Config.pitchOctaves;\n                let lowestPitch: number = maxPitch;\n                let highestPitch: number = 0;\n                for (let k: number = 0; k < note.pitches.length; k++) {\n                    note.pitches[k] += startInterval;\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n                        note.pitches.splice(k, 1);\n                        k--;\n                    }\n                    if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\n                    if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\n                }\n                if (note.pitches.length < 1) continue;\n\n                for (let k: number = 0; k < note.pins.length; k++) {\n                    const pin: NotePin = note.pins[k];\n                    if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\n                    if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\n                    if (k >= 2) {\n                        if (pin.interval == note.pins[k - 1].interval &&\n                            pin.interval == note.pins[k - 2].interval &&\n                            pin.size == note.pins[k - 1].size &&\n                            pin.size == note.pins[k - 2].size) {\n                            note.pins.splice(k - 1, 1);\n                            k--;\n                        }\n                    }\n                }\n\n                if (note.start == 0) {\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n                } else {\n                    note.continuesLastPattern = false;\n                }\n\n                this.notes.push(note);\n            }\n        }\n    }\n}\n\nexport class Operator {\n    public frequency: number = 0;\n    public amplitude: number = 0;\n    public waveform: number = 0;\n    public pulseWidth: number = 0.5;\n\n    constructor(index: number) {\n        this.reset(index);\n    }\n\n    public reset(index: number): void {\n        this.frequency = 0;\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n        this.waveform = 0;\n        this.pulseWidth = 5;\n    }\n\n    public copy(other: Operator): void {\n        this.frequency = other.frequency;\n        this.amplitude = other.amplitude;\n        this.waveform = other.waveform;\n        this.pulseWidth = other.pulseWidth;\n    }\n}\n\nexport class SpectrumWave {\n    public spectrum: number[] = [];\n    public hash: number = -1;\n\n    constructor(isNoiseChannel: boolean) {\n        this.reset(isNoiseChannel);\n    }\n\n    public reset(isNoiseChannel: boolean): void {\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n            if (isNoiseChannel) {\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n            } else {\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n            }\n        }\n        this.markCustomWaveDirty();\n    }\n\n    public markCustomWaveDirty(): void {\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\n        let hash: number = 0;\n        for (const point of this.spectrum) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nclass SpectrumWaveState {\n    public wave: Float32Array | null = null;\n    private _hash: number = -1;\n\n    public getCustomWave(settings: SpectrumWave, lowestOctave: number): Float32Array {\n        if (this._hash == settings.hash) return this.wave!;\n        this._hash = settings.hash;\n\n        const waveLength: number = Config.spectrumNoiseLength;\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i: number = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const highestOctave: number = 14;\n        const falloffRatio: number = 0.25;\n        // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\n        const pitchTweak: number[] = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\n        function controlPointToOctave(point: number): number {\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n        }\n\n        let combinedAmplitude: number = 1;\n        for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\n            const value1: number = (i <= 0) ? 0 : settings.spectrum[i - 1];\n            const value2: number = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\n            const octave1: number = controlPointToOctave(i - 1);\n            let octave2: number = controlPointToOctave(i);\n            if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n            if (value1 == 0 && value2 == 0) continue;\n\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n        }\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n\n        // Duplicate the first sample at the end for easier wrap-around interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class HarmonicsWave {\n    public harmonics: number[] = [];\n    public hash: number = -1;\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n            this.harmonics[i] = 0;\n        }\n        this.harmonics[0] = Config.harmonicsMax;\n        this.harmonics[3] = Config.harmonicsMax;\n        this.harmonics[6] = Config.harmonicsMax;\n        this.markCustomWaveDirty();\n    }\n\n    public markCustomWaveDirty(): void {\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\n        let hash: number = 0;\n        for (const point of this.harmonics) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nclass HarmonicsWaveState {\n    public wave: Float32Array | null = null;\n    private _hash: number = -1;\n    private _generatedForType: InstrumentType;\n\n    public getCustomWave(settings: HarmonicsWave, instrumentType: InstrumentType): Float32Array {\n        if (this._hash == settings.hash && this._generatedForType == instrumentType) return this.wave!;\n        this._hash = settings.hash;\n        this._generatedForType = instrumentType;\n\n        const harmonicsRendered: number = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n\n        const waveLength: number = Config.harmonicsWavelength;\n        const retroWave: Float32Array = getDrumWave(0, null, null);\n\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i: number = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const overallSlope: number = -0.25;\n        let combinedControlPointAmplitude: number = 1;\n\n        for (let harmonicIndex: number = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n            const harmonicFreq: number = harmonicIndex + 1;\n            let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n            }\n            const normalizedValue: number = controlValue / Config.harmonicsMax;\n            let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n            if (harmonicIndex < Config.harmonicsControlPoints) {\n                combinedControlPointAmplitude += amplitude;\n            }\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\n\n            // Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\n            // retro wave (effectively random) to avoid egregiously tall spikes.\n            amplitude *= retroWave[harmonicIndex + 589];\n\n            wave[waveLength - harmonicFreq] = amplitude;\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n\n        // Limit the maximum wave amplitude.\n        const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n        for (let i: number = 0; i < wave.length; i++) wave[i] *= mult;\n\n        performIntegralOld(wave);\n\n        // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class FilterControlPoint {\n    public freq: number = 0;\n    public gain: number = Config.filterGainCenter;\n    public type: FilterType = FilterType.peak;\n\n    public set(freqSetting: number, gainSetting: number): void {\n        this.freq = freqSetting;\n        this.gain = gainSetting;\n    }\n\n    public getHz(): number {\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\n    }\n\n    public static getHzFromSettingValue(value: number): number {\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n    }\n    public static getSettingValueFromHz(hz: number): number {\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n    }\n    public static getRoundedSettingValueFromHz(hz: number): number {\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n    }\n\n    public getLinearGain(peakMult: number = 1.0): number {\n        const power: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        const neutral: number = (this.type == FilterType.peak) ? 0.0 : -0.5;\n        const interpolatedPower: number = neutral + (power - neutral) * peakMult;\n        return Math.pow(2.0, interpolatedPower);\n    }\n    public static getRoundedSettingValueFromLinearGain(linearGain: number): number {\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n    }\n\n    public toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult: number = 1.0, peakMult: number = 1.0): void {\n        const cornerRadiansPerSample: number = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n        const linearGain: number = this.getLinearGain(peakMult);\n        switch (this.type) {\n            case FilterType.lowPass:\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.highPass:\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.peak:\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n                break;\n            default:\n                throw new Error();\n        }\n    }\n\n    public getVolumeCompensationMult(): number {\n        const octave: number = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n        const gainPow: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        switch (this.type) {\n            case FilterType.lowPass:\n                const freqRelativeTo8khz: number = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n                // Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\n                const warpedFreq: number = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n                const warpedOctave: number = Math.log2(warpedFreq);\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n            case FilterType.highPass:\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n            case FilterType.peak:\n                const distanceFromCenter: number = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n                const freqLoudness: number = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n            default:\n                throw new Error();\n        }\n    }\n}\n\nexport class FilterSettings {\n    public readonly controlPoints: FilterControlPoint[] = [];\n    public controlPointCount: number = 0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.controlPointCount = 0;\n    }\n\n    addPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\n        let controlPoint: FilterControlPoint;\n        if (this.controlPoints.length <= this.controlPointCount) {\n            controlPoint = new FilterControlPoint();\n            this.controlPoints[this.controlPointCount] = controlPoint;\n        } else {\n            controlPoint = this.controlPoints[this.controlPointCount];\n        }\n        this.controlPointCount++;\n        controlPoint.type = type;\n        controlPoint.set(freqSetting, gainSetting);\n    }\n\n    public toJsonObject(): Object {\n        const filterArray: any[] = [];\n        for (let i: number = 0; i < this.controlPointCount; i++) {\n            const point: FilterControlPoint = this.controlPoints[i];\n            filterArray.push({\n                \"type\": Config.filterTypeNames[point.type],\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n            });\n        }\n        return filterArray;\n    }\n\n    public fromJsonObject(filterObject: any): void {\n        this.controlPoints.length = 0;\n        if (filterObject) {\n            for (const pointObject of filterObject) {\n                const point: FilterControlPoint = new FilterControlPoint();\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n                if (<any>point.type == -1) point.type = FilterType.peak;\n                if (pointObject[\"cutoffHz\"] != undefined) {\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n                } else {\n                    point.freq = 0;\n                }\n                if (pointObject[\"linearGain\"] != undefined) {\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n                } else {\n                    point.gain = Config.filterGainCenter;\n                }\n                this.controlPoints.push(point);\n            }\n        }\n        this.controlPointCount = this.controlPoints.length;\n    }\n\n    // Returns true if all filter control points match in number and type (but not freq/gain)\n    public static filtersCanMorph(filterA: FilterSettings, filterB: FilterSettings): boolean {\n        if (filterA.controlPointCount != filterB.controlPointCount)\n            return false;\n        for (let i: number = 0; i < filterA.controlPointCount; i++) {\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\n                return false;\n        }\n        return true;\n    }\n\n    // Interpolate two FilterSettings, where pos=0 is filterA and pos=1 is filterB\n    public static lerpFilters(filterA: FilterSettings, filterB: FilterSettings, pos: number): FilterSettings {\n\n        let lerpedFilter: FilterSettings = new FilterSettings();\n\n        // One setting or another is null, return the other.\n        if (filterA == null) {\n            return filterA;\n        }\n        if (filterB == null) {\n            return filterB;\n        }\n\n        pos = Math.max(0, Math.min(1, pos));\n\n        // Filter control points match in number and type\n        if (this.filtersCanMorph(filterA, filterB)) {\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\n            }\n\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\n\n            return lerpedFilter;\n        }\n        else {\n            // Not allowing morph of unmatching filters for now. It's a hornet's nest of problems, and I had it implemented and mostly working and it didn't sound very interesting since the shape becomes \"mushy\" in between\n            return (pos >= 1) ? filterB : filterA;\n        }\n    }\n\n    public convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax: number = 0.95;\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance: number = 0.95;\n        const legacyFilterCutoffRange: number = 11;\n        const legacyFilterResonanceRange: number = 8;\n\n        const resonant: boolean = (legacyResonanceSetting > 1);\n        const firstOrder: boolean = (legacyResonanceSetting == 0);\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        const envDecays: boolean = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\n\n        const standardSampleRate: number = 48000;\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\n            // The response is flat and there's no envelopes, so don't even bother adding any control points.\n        } else if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves: number = 3.5;\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\n\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            // Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\n            if (envDecays) logGain = Math.min(logGain, -1.0);\n            const convertedGain: number = Math.pow(2.0, logGain);\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain: number = 0.5 / intendedGain;\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio: number = legacyRadians / maxRadians;\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n            if (envDecays) {\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\n            } else {\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            }\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n            if (envDecays) {\n                legacyFilterGain = intendedGain;\n            } else {\n                const legacyFilter: FilterCoefficients = new FilterCoefficients();\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n                const response: FrequencyResponse = new FrequencyResponse();\n                response.analyze(legacyFilter, curvedRadians);\n                legacyFilterGain = response.magnitude();\n            }\n            if (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n        // Added for JummBox - making a 0 point filter does not truncate control points!\n        this.controlPoints.length = this.controlPointCount;\n    }\n\n    // Similar to above, but purpose-fit for quick conversions in synth calls.\n    public convertLegacySettingsForSynth(legacyCutoffSetting: number, legacyResonanceSetting: number, allowFirstOrder: boolean = false): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax: number = 0.95;\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance: number = 0.95;\n        const legacyFilterCutoffRange: number = 11;\n        const legacyFilterResonanceRange: number = 8;\n\n        const firstOrder: boolean = (legacyResonanceSetting == 0 && allowFirstOrder);\n        const standardSampleRate: number = 48000;\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves: number = 3.5;\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\n\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            const convertedGain: number = Math.pow(2.0, logGain);\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain: number = 0.5 / intendedGain;\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio: number = legacyRadians / maxRadians;\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting: number = FilterControlPoint.getSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, curvedRadians);\n            legacyFilterGain = response.magnitude();\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n    }\n}\n\nexport class EnvelopeSettings {\n    public target: number = 0;\n    public index: number = 0;\n    public envelope: number = 0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n    }\n\n    public toJsonObject(): Object {\n        const envelopeObject: any = {\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\n            \"envelope\": Config.envelopes[this.envelope].name,\n        };\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n            envelopeObject[\"index\"] = this.index;\n        }\n        return envelopeObject;\n    }\n\n    public fromJsonObject(envelopeObject: any): void {\n        this.reset();\n\n        let target: AutomationTarget = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n        if (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n        this.target = target.index;\n\n        let envelope: Envelope = Config.envelopes.dictionary[envelopeObject[\"envelope\"]];\n        if (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\n        this.envelope = envelope.index;\n\n        if (envelopeObject[\"index\"] != undefined) {\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n        } else {\n            this.index = 0;\n        }\n    }\n}\n\n// Settings that were available to old versions of BeepBox but are no longer available in the\n// current version that need to be reinterpreted as a group to determine the best way to\n// represent them in the current version.\ninterface LegacySettings {\n    filterCutoff?: number;\n    filterResonance?: number;\n    filterEnvelope?: Envelope;\n    pulseEnvelope?: Envelope;\n    operatorEnvelopes?: Envelope[];\n    feedbackEnvelope?: Envelope;\n}\n\ninterface HeldMod {\n    volume: number;\n    channelIndex: number;\n    instrumentIndex: number;\n    setting: number;\n    holdFor: number;\n}\n\nexport class Instrument {\n    public type: InstrumentType = InstrumentType.chip;\n    public preset: number = 0;\n    public chipWave: number = 2;\n    public chipNoise: number = 1;\n    public eqFilter: FilterSettings = new FilterSettings();\n    public eqFilterType: boolean = false;\n    public eqFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n    public eqFilterSimplePeak: number = 0;\n    public noteFilter: FilterSettings = new FilterSettings();\n    public noteFilterType: boolean = false;\n    public noteFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n    public noteFilterSimplePeak: number = 0;\n    public eqSubFilters: (FilterSettings | null)[] = [];\n    public noteSubFilters: (FilterSettings | null)[] = [];\n    public tmpEqFilterStart: FilterSettings | null;\n    public tmpEqFilterEnd: FilterSettings | null;\n    public tmpNoteFilterStart: FilterSettings | null;\n    public tmpNoteFilterEnd: FilterSettings | null;\n    public envelopes: EnvelopeSettings[] = [];\n    public fadeIn: number = 0;\n    public fadeOut: number = Config.fadeOutNeutral;\n    public envelopeCount: number = 0;\n    public transition: number = Config.transitions.dictionary[\"normal\"].index;\n    public pitchShift: number = 0;\n    public detune: number = 0;\n    public vibrato: number = 0;\n    public interval: number = 0;\n    public vibratoDepth: number = 0;\n    public vibratoSpeed: number = 10;\n    public vibratoDelay: number = 0;\n    public vibratoType: number = 0;\n    public envelopeSpeed: number = 12;\n    public discreteEnvelope: boolean = false;\n    public unison: number = 0;\n    public effects: number = 0;\n    public chord: number = 1;\n    public volume: number = 0;\n    public pan: number = Config.panCenter;\n    public panDelay: number = 10;\n    public arpeggioSpeed: number = 12;\n    public fastTwoNoteArp: boolean = false;\n    public legacyTieOver: boolean = false;\n    public clicklessTransition: boolean = false;\n    public aliases: boolean = false;\n    public pulseWidth: number = Config.pulseWidthRange;\n    public supersawDynamism: number = Config.supersawDynamismMax;\n\tpublic supersawSpread: number = Math.ceil(Config.supersawSpreadMax / 2.0);\n\tpublic supersawShape: number = 0;\n\tpublic stringSustain: number = 10;\n\tpublic stringSustainType: SustainType = SustainType.acoustic;\n    public distortion: number = 0;\n    public bitcrusherFreq: number = 0;\n    public bitcrusherQuantization: number = 0;\n    public chorus: number = 0;\n    public reverb: number = 0;\n    public echoSustain: number = 0;\n    public echoDelay: number = 0;\n    public algorithm: number = 0;\n    public feedbackType: number = 0;\n    public feedbackAmplitude: number = 0;\n    public customChipWave: Float32Array = new Float32Array(64);\n    public customChipWaveIntegral: Float32Array = new Float32Array(65); // One extra element for wrap-around in chipSynth.\n    public readonly operators: Operator[] = [];\n    public readonly spectrumWave: SpectrumWave;\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\n    public readonly drumsetEnvelopes: number[] = [];\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\n    public modChannels: number[] = [];\n    public modInstruments: number[] = [];\n    public modulators: number[] = [];\n    public modFilterTypes: number[] = [];\n    public invalidModulators: boolean[] = [];\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\n\n        // @jummbus - My screed on how modulator arrays for instruments work, for the benefit of myself in the future, or whoever else.\n        //\n        // modulators[mod] is the index in Config.modulators to use, with \"none\" being the first entry.\n        //\n        // modChannels[mod] gives the index of a channel set for this mod. Two special values:\n        //   -2 \"none\"\n        //   -1 \"song\"\n        //   0+ actual channel index\n        //\n        // modInstruments[mod] gives the index of an instrument within the channel set for this mod. Again, two special values:\n        //   [0 ~ channel.instruments.length-1]     channel's instrument index\n        //   channel.instruments.length             \"all\"\n        //   channel.instruments.length+1           \"active\"\n        //\n        // modFilterTypes[mod] gives some info about the filter type: 0 is morph, 1+ is index in the dot selection array (dot 1 x, dot 1 y, dot 2 x...)\n        //   0  filter morph\n        //   1+ filter dot target, starting from dot 1 x and then dot 1 y, then repeating x, y for all dots in order. Note: odd values are always \"x\" targets, even are \"y\".\n\n        if (isModChannel) {\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                this.modChannels.push(-2);\n                this.modInstruments.push(0);\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n            }\n        }\n\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\n        for (let i: number = 0; i < Config.operatorCount; i++) {\n            this.operators[i] = new Operator(i);\n        }\n        for (let i: number = 0; i < Config.drumCount; i++) {\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n        }\n\n        for (let i = 0; i < 64; i++) {\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\n        }\n\n        let sum: number = 0.0;\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\n            sum += this.customChipWave[i];\n        }\n        const average: number = sum / this.customChipWave.length;\n\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n        let cumulative: number = 0;\n        let wavePrev: number = 0;\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\n            cumulative += wavePrev;\n            wavePrev = this.customChipWave[i] - average;\n            this.customChipWaveIntegral[i] = cumulative;\n        }\n\n        // 65th, last sample is for anti-aliasing\n        this.customChipWaveIntegral[64] = 0.0;\n\n    }\n\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\n        // Mod channels are forced to one type.\n        if (isModChannel) type = InstrumentType.mod;\n        this.type = type;\n        this.preset = type;\n        this.volume = 0;\n        this.effects = (1 << EffectType.panning); // Panning enabled by default in JB.\n        this.chorus = Config.chorusRange - 1;\n        this.reverb = 0;\n        this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\n        this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\n        this.eqFilter.reset();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n            this.eqSubFilters[i] = null;\n            this.noteSubFilters[i] = null;\n        }\n        this.noteFilter.reset();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\n        this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5)\n        this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\n        this.pan = Config.panCenter;\n        this.panDelay = 10;\n        this.pitchShift = Config.pitchShiftCenter;\n        this.detune = Config.detuneCenter;\n        this.vibrato = 0;\n        this.unison = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = Config.enableAcousticSustain ? SustainType.acoustic : SustainType.bright;\n        this.clicklessTransition = false;\n        this.arpeggioSpeed = 12;\n        this.envelopeSpeed = 12;\n        this.discreteEnvelope = false;\n        this.legacyTieOver = false;\n        this.aliases = false;\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.envelopeCount = 0;\n        switch (type) {\n            case InstrumentType.chip:\n                this.chipWave = 2;\n                // TODO: enable the chord effect?\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case InstrumentType.customChipWave:\n                this.chipWave = 2;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                for (let i: number = 0; i < 64; i++) {\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\n                }\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average: number = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                this.customChipWaveIntegral[64] = 0.0;\n                break;\n            case InstrumentType.fm:\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.feedbackAmplitude = 0;\n                for (let i: number = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.noise:\n                this.chipNoise = 1;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case InstrumentType.spectrum:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.spectrumWave.reset(isNoiseChannel);\n                break;\n            case InstrumentType.drumset:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                for (let i: number = 0; i < Config.drumCount; i++) {\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n                    }\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n                }\n                break;\n            case InstrumentType.harmonics:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.pwm:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.pulseWidth = Config.pulseWidthRange;\n                break;\n            case InstrumentType.pickedString:\n                this.chord = Config.chords.dictionary[\"strum\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.mod:\n                this.transition = 0;\n                this.vibrato = 0;\n                this.interval = 0;\n                this.effects = 0;\n                this.chord = 0;\n                this.modChannels = [];\n                this.modInstruments = [];\n                this.modulators = [];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    this.modChannels.push(-2);\n                    this.modInstruments.push(0);\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n                    this.invalidModulators[mod] = false;\n                    this.modFilterTypes[mod] = 0;\n                }\n                break;\n\t\t\tcase InstrumentType.supersaw:\n\t\t\t\tthis.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\n\t\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n\t\t\t\tthis.supersawShape = 0;\n\t\t\t\tthis.pulseWidth = Config.pulseWidthRange - 1;\n\t\t\t\tbreak;\n            default:\n                throw new Error(\"Unrecognized instrument type: \" + type);\n        }\n        // Chip/noise instruments had arpeggio and FM had custom interval but neither\n        // explicitly saved the chorus setting beforeSeven so enable it here. The effects\n        // will otherwise get overridden when reading SongTagCode.startInstrument.\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n            // Enable chord if it was used.\n            this.effects = (this.effects | (1 << EffectType.chord));\n        }\n    }\n\n    // (only) difference for JummBox: Returns whether or not the note filter was chosen for filter conversion.\n    public convertLegacySettings(legacySettings: LegacySettings, forceSimpleFilter: boolean): void {\n        let legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\n        let legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\n        let legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\n        let legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\n        let legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\n        let legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\n\n        // legacy defaults:\n        if (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\n        if (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\n        if (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        if (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\n        if (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n        if (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n\n        // The \"punch\" envelope is special: it goes *above* the chosen cutoff. But if the cutoff was already at the max, it couldn't go any higher... except in the current version of BeepBox I raised the max cutoff so it *can* but then it sounds different, so to preserve the original sound let's just remove the punch envelope.\n        const legacyFilterCutoffRange: number = 11;\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        if (cutoffAtMax && legacyFilterEnv.type == EnvelopeType.punch) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n\n        const carrierCount: number = Config.algorithms[this.algorithm].carrierCount;\n        let noCarriersControlledByNoteSize: boolean = true;\n        let allCarriersControlledByNoteSize: boolean = true;\n        let noteSizeControlsSomethingElse: boolean = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\n        if (this.type == InstrumentType.fm) {\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\n            for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n                if (i < carrierCount) {\n                    if (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\n                        allCarriersControlledByNoteSize = false;\n                    } else {\n                        noCarriersControlledByNoteSize = false;\n                    }\n                } else {\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\n                }\n            }\n        }\n\n        this.envelopeCount = 0;\n\n        if (this.type == InstrumentType.fm) {\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\n            } else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\n            }\n        }\n\n        if (legacyFilterEnv.type == EnvelopeType.none) {\n            this.noteFilter.reset();\n            this.noteFilterType = false;\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects &= ~(1 << EffectType.noteFilter);\n            if (forceSimpleFilter || this.eqFilterType) {\n                this.eqFilterType = true;\n                this.eqFilterSimpleCut = legacyCutoffSetting;\n                this.eqFilterSimplePeak = legacyResonanceSetting;\n            }\n        } else {\n            this.eqFilter.reset();\n\n            this.eqFilterType = false;\n            this.noteFilterType = false;\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects |= 1 << EffectType.noteFilter;\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index);\n            if (forceSimpleFilter || this.noteFilterType) {\n                this.noteFilterType = true;\n                this.noteFilterSimpleCut = legacyCutoffSetting;\n                this.noteFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n\n        if (legacyPulseEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index);\n        }\n\n        for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n            if (i < carrierCount && allCarriersControlledByNoteSize) continue;\n            if (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index);\n            }\n        }\n\n        if (legacyFeedbackEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index);\n        }\n    }\n\n    public toJsonObject(): Object {\n        const instrumentObject: any = {\n            \"type\": Config.instrumentTypeNames[this.type],\n            \"volume\": this.volume,\n            \"eqFilter\": this.eqFilter.toJsonObject(),\n            \"eqFilterType\": this.eqFilterType,\n            \"eqSimpleCut\": this.eqFilterSimpleCut,\n            \"eqSimplePeak\": this.eqFilterSimplePeak,\n            \"envelopeSpeed\": this.envelopeSpeed,\n            \"discreteEnvelope\": this.discreteEnvelope\n        };\n\n        if (this.preset != this.type) {\n            instrumentObject[\"preset\"] = this.preset;\n        }\n\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n            if (this.eqSubFilters[i] != null)\n                instrumentObject[\"eqSubFilters\" + i] = this.eqSubFilters[i]!.toJsonObject();\n        }\n\n        const effects: string[] = [];\n        for (const effect of Config.effectOrder) {\n            if (this.effects & (1 << effect)) {\n                effects.push(Config.effectNames[effect]);\n            }\n        }\n        instrumentObject[\"effects\"] = effects;\n\n\n        if (effectsIncludeTransition(this.effects)) {\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\n        }\n        if (effectsIncludeChord(this.effects)) {\n            instrumentObject[\"chord\"] = this.getChord().name;\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\n        }\n        if (effectsIncludePitchShift(this.effects)) {\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n        }\n        if (effectsIncludeDetune(this.effects)) {\n            instrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune);\n        }\n        if (effectsIncludeVibrato(this.effects)) {\n            if (this.vibrato == -1) {\n                this.vibrato = 5;\n            }\n            if (this.vibrato != 5) {\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n            } else {\n                instrumentObject[\"vibrato\"] = \"custom\";\n            }\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\n        }\n        if (effectsIncludeNoteFilter(this.effects)) {\n            instrumentObject[\"noteFilterType\"] = this.noteFilterType;\n            instrumentObject[\"noteSimpleCut\"] = this.noteFilterSimpleCut;\n            instrumentObject[\"noteSimplePeak\"] = this.noteFilterSimplePeak;\n            instrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\n\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null)\n                    instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i]!.toJsonObject();\n            }\n        }\n        if (effectsIncludeDistortion(this.effects)) {\n            instrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\n            instrumentObject[\"aliases\"] = this.aliases;\n        }\n        if (effectsIncludeBitcrusher(this.effects)) {\n            instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\n            instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\n        }\n        if (effectsIncludePanning(this.effects)) {\n            instrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\n            instrumentObject[\"panDelay\"] = this.panDelay;\n        }\n        if (effectsIncludeChorus(this.effects)) {\n            instrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\n        }\n        if (effectsIncludeEcho(this.effects)) {\n            instrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\n            instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\n        }\n        if (effectsIncludeReverb(this.effects)) {\n            instrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\n        }\n\n        if (this.type != InstrumentType.drumset) {\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\n            instrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\n        }\n\n        if (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\n            instrumentObject[\"harmonics\"] = [];\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n            }\n        }\n\n        if (this.type == InstrumentType.noise) {\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n        } else if (this.type == InstrumentType.spectrum) {\n            instrumentObject[\"spectrum\"] = [];\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n            }\n        } else if (this.type == InstrumentType.drumset) {\n            instrumentObject[\"drums\"] = [];\n            for (let j: number = 0; j < Config.drumCount; j++) {\n                const spectrum: number[] = [];\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n                }\n                instrumentObject[\"drums\"][j] = {\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n                    \"spectrum\": spectrum,\n                };\n            }\n        } else if (this.type == InstrumentType.chip) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = Config.unisons[this.unison].name;\n        } else if (this.type == InstrumentType.pwm) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n        } else if (this.type == InstrumentType.supersaw) {\n\t\t\tinstrumentObject[\"pulseWidth\"] = this.pulseWidth;\n\t\t\tinstrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\n\t\t\tinstrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\n\t\t\tinstrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\n\t\t} else if (this.type == InstrumentType.pickedString) {\n            instrumentObject[\"unison\"] = Config.unisons[this.unison].name;\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n            if (Config.enableAcousticSustain) {\n\t\t\t\tinstrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\n\t\t\t}\n        } else if (this.type == InstrumentType.harmonics) {\n            instrumentObject[\"unison\"] = Config.unisons[this.unison].name;\n        } else if (this.type == InstrumentType.fm) {\n            const operatorArray: Object[] = [];\n            for (const operator of this.operators) {\n                operatorArray.push({\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\n                    \"amplitude\": operator.amplitude,\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\n                    \"pulseWidth\": operator.pulseWidth,\n                });\n            }\n            instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n            instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n            instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n            instrumentObject[\"operators\"] = operatorArray;\n        } else if (this.type == InstrumentType.customChipWave) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = Config.unisons[this.unison].name;\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\n            }\n        } else if (this.type == InstrumentType.mod) {\n            instrumentObject[\"modChannels\"] = [];\n            instrumentObject[\"modInstruments\"] = [];\n            instrumentObject[\"modSettings\"] = [];\n            instrumentObject[\"modFilterTypes\"] = [];\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\n            }\n        } else {\n            throw new Error(\"Unrecognized instrument type\");\n        }\n\n        const envelopes: any[] = [];\n        for (let i = 0; i < this.envelopeCount; i++) {\n            envelopes.push(this.envelopes[i].toJsonObject());\n        }\n        instrumentObject[\"envelopes\"] = envelopes;\n\n        return instrumentObject;\n    }\n\n\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean, legacyGlobalReverb: number = 0): void {\n        if (instrumentObject == undefined) instrumentObject = {};\n\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n        if (<any>type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\n\n        this.effects &= ~(1 << EffectType.panning);\n\n        if (instrumentObject[\"preset\"] != undefined) {\n            this.preset = instrumentObject[\"preset\"] >>> 0;\n        }\n\n        if (instrumentObject[\"volume\"] != undefined) {\n            this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\n        } else {\n            this.volume = 0;\n        }\n\n        if (instrumentObject[\"envelopeSpeed\"] != undefined) {\n            this.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0);\n        } else {\n            this.envelopeSpeed = 12;\n        }\n\n        if (instrumentObject[\"discreteEnvelope\"] != undefined) {\n            this.discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\n        }\n        else {\n            this.discreteEnvelope = false;\n        }\n\n        if (Array.isArray(instrumentObject[\"effects\"])) {\n            let effects: number = 0;\n            for (let i: number = 0; i < instrumentObject[\"effects\"].length; i++) {\n                effects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\n            }\n            this.effects = (effects & ((1 << EffectType.length) - 1));\n        } else {\n            // The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\n            const legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\n            this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\n            if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\n        }\n\n        this.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\n        const transitionProperty: any = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\n        if (transitionProperty != undefined) {\n            let transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n                const legacySettings = (<any>{\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    // Note that the old slide transition has the same name as a new slide transition that is different.\n                    // Only apply legacy settings if the instrument JSON was created before, based on the presence\n                    // of the fade in/out fields.\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                })[transitionProperty];\n                if (legacySettings != undefined) {\n                    transition = Config.transitions.dictionary[legacySettings.transition];\n                    // These may be overridden below.\n                    this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\n                    this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n                }\n            }\n            if (transition != undefined) this.transition = transition.index;\n\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n                // Enable transition if it was used.\n                this.effects = (this.effects | (1 << EffectType.transition));\n            }\n        }\n\n        // Overrides legacy settings in transition above.\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\n            this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n        }\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\n            this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n        }\n\n        {\n            // Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\n            const chordProperty: any = instrumentObject[\"chord\"];\n            const legacyChordNames: Dictionary<string> = { \"harmony\": \"simultaneous\" };\n            const chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n            if (chord != undefined) {\n                this.chord = chord.index;\n            } else {\n                // Different instruments have different default chord types based on historical behaviour.\n                if (this.type == InstrumentType.noise) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.pickedString) {\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\n                } else if (this.type == InstrumentType.chip) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.fm) {\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                } else {\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                }\n            }\n        }\n\n        this.unison = Config.unisons.dictionary[\"none\"].index; // default value.\n        const unisonProperty: any = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\n        if (unisonProperty != undefined) {\n            const legacyChorusNames: Dictionary<string> = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\" };\n            const unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n            if (unison != undefined) this.unison = unison.index;\n        }\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\n            // Enable chord if it was used.\n            this.effects = (this.effects | (1 << EffectType.chord));\n        }\n\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n        }\n        if (instrumentObject[\"detuneCents\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\n        }\n\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\n        const vibratoProperty: any = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\n        if (vibratoProperty != undefined) {\n\n            const legacyVibratoNames: Dictionary<string> = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\n            const vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n            if (vibrato != undefined)\n                this.vibrato = vibrato.index;\n            else if (vibratoProperty == \"custom\")\n                this.vibrato = Config.vibratos.length; // custom\n\n            if (this.vibrato == Config.vibratos.length) {\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\n                this.vibratoType = instrumentObject[\"vibratoType\"];\n            }\n            else { // Set defaults for the vibrato profile\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\n                this.vibratoSpeed = 10; // default;\n                this.vibratoType = Config.vibratos[this.vibrato].type;\n            }\n\n            // Old songs may have a vibrato effect without explicitly enabling it.\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\n                this.effects = (this.effects | (1 << EffectType.vibrato));\n            }\n        }\n\n        if (instrumentObject[\"pan\"] != undefined) {\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\n\n            // Old songs may have a panning effect without explicitly enabling it.\n            if (this.pan != Config.panCenter) {\n                this.effects = (this.effects | (1 << EffectType.panning));\n            }\n        } else {\n            this.pan = Config.panCenter;\n        }\n\n        if (instrumentObject[\"panDelay\"] != undefined) {\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\n        } else {\n            this.panDelay = 10;\n        }\n\n        if (instrumentObject[\"detune\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\n        }\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\n            this.detune = Config.detuneCenter;\n        }\n\n        if (instrumentObject[\"distortion\"] != undefined) {\n            this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"bitcrusherOctave\"] != undefined) {\n            this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\n        }\n        if (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\n            this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"echoSustain\"] != undefined) {\n            this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\n        }\n        if (instrumentObject[\"echoDelayBeats\"] != undefined) {\n            this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\n        }\n\n        if (!isNaN(instrumentObject[\"chorus\"])) {\n            this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"reverb\"] != undefined) {\n            this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\n        } else {\n            this.reverb = legacyGlobalReverb;\n        }\n\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\n        } else {\n            this.pulseWidth = Config.pulseWidthRange;\n        }\n\n        if (instrumentObject[\"dynamism\"] != undefined) {\n\t\t\tthis.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\n\t\t}\n\t\tif (instrumentObject[\"spread\"] != undefined) {\n\t\t\tthis.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n\t\t}\n\t\tif (instrumentObject[\"shape\"] != undefined) {\n\t\t\tthis.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawShape = 0;\n\t\t}\n\n        if (instrumentObject[\"harmonics\"] != undefined) {\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n            }\n            this.harmonicsWave.markCustomWaveDirty();\n        } else {\n            this.harmonicsWave.reset();\n        }\n\n        if (instrumentObject[\"spectrum\"] != undefined) {\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n                this.spectrumWave.markCustomWaveDirty();\n            }\n        } else {\n            this.spectrumWave.reset(isNoiseChannel);\n        }\n\n        if (instrumentObject[\"stringSustain\"] != undefined) {\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n        } else {\n            this.stringSustain = 10;\n        }\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : SustainType.bright;\n\t\tif (<any>this.stringSustainType == -1) this.stringSustainType = SustainType.bright;\n\n        if (this.type == InstrumentType.noise) {\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (this.chipNoise == -1) this.chipNoise = 1;\n        }\n\n        const legacyEnvelopeNames: Dictionary<string> = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\n        const getEnvelope = (name: any): Envelope | undefined => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];\n\n        if (this.type == InstrumentType.drumset) {\n            if (instrumentObject[\"drums\"] != undefined) {\n                for (let j: number = 0; j < Config.drumCount; j++) {\n                    const drum: any = instrumentObject[\"drums\"][j];\n                    if (drum == undefined) continue;\n\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\n                    if (drum[\"filterEnvelope\"] != undefined) {\n                        const envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\n                        if (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\n                    }\n                    if (drum[\"spectrum\"] != undefined) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n                        }\n                    }\n                    this.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                }\n            }\n        }\n\n        if (this.type == InstrumentType.chip) {\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\n            this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (this.chipWave == -1) this.chipWave = 1;\n        }\n\n        if (this.type == InstrumentType.fm) {\n            this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\n            if (this.algorithm == -1) this.algorithm = 0;\n            this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\n            if (this.feedbackType == -1) this.feedbackType = 0;\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n            } else {\n                this.feedbackAmplitude = 0;\n            }\n\n            for (let j: number = 0; j < Config.operatorCount; j++) {\n                const operator: Operator = this.operators[j];\n                let operatorObject: any = undefined;\n                if (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\n                if (operatorObject == undefined) operatorObject = {};\n\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\n                if (operator.frequency == -1) operator.frequency = 0;\n                if (operatorObject[\"amplitude\"] != undefined) {\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n                } else {\n                    operator.amplitude = 0;\n                }\n                if (operatorObject[\"waveform\"] != undefined) {\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\n                    if (operator.waveform == -1) {\n                        // GoldBox compatibility\n                        if (operatorObject[\"waveform\"] == \"square\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\n                            operator.pulseWidth = 5;\n                        } else {\n                            operator.waveform = 0;\n                        }\n\n                    }\n                } else {\n                    operator.waveform = 0;\n                }\n                if (operatorObject[\"pulseWidth\"] != undefined) {\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\n                } else {\n                    operator.pulseWidth = 5;\n                }\n            }\n        }\n        else if (this.type == InstrumentType.customChipWave) {\n            if (instrumentObject[\"customChipWave\"]) {\n\n                for (let i: number = 0; i < 64; i++) {\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\n                }\n\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average: number = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                this.customChipWaveIntegral[64] = 0.0;\n            }\n        } else if (this.type == InstrumentType.mod) {\n            if (instrumentObject[\"modChannels\"] != undefined) {\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\n                    // Due to an oversight, this isn't included in JSONs prior to JB 2.6.\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\n                        this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\n                }\n            }\n        }\n\n        if (this.type != InstrumentType.mod) {\n            // Arpeggio speed\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\n            }\n            else {\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\n            }\n\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\n            }\n            else {\n                this.fastTwoNoteArp = useFastTwoNoteArp;\n            }\n\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\n            }\n            else {\n                this.clicklessTransition = false;\n            }\n\n            if (instrumentObject[\"aliases\"] != undefined) {\n                this.aliases = instrumentObject[\"aliases\"];\n            }\n            else {\n                this.aliases = false;\n            }\n\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\n            }\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\n            }\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\n            }\n            if (instrumentObject[\"noteFilter\"] != undefined) {\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n            } else {\n                this.noteFilter.reset();\n            }\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\n                    this.noteSubFilters[i] = new FilterSettings();\n                    this.noteSubFilters[i]!.fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\n                }\n            }\n            if (instrumentObject[\"eqFilterType\"] != undefined) {\n                this.eqFilterType = instrumentObject[\"eqFilterType\"];\n            }\n            if (instrumentObject[\"eqSimpleCut\"] != undefined) {\n                this.eqFilterSimpleCut = instrumentObject[\"eqSimpleCut\"];\n            }\n            if (instrumentObject[\"eqSimplePeak\"] != undefined) {\n                this.eqFilterSimplePeak = instrumentObject[\"eqSimplePeak\"];\n            }\n            if (Array.isArray(instrumentObject[\"eqFilter\"])) {\n                this.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\n            } else {\n                this.eqFilter.reset();\n\n                const legacySettings: LegacySettings = {};\n\n                // Try converting from legacy filter settings.\n                const filterCutoffMaxHz: number = 8000;\n                const filterCutoffRange: number = 11;\n                const filterResonanceRange: number = 8;\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n                } else {\n                    legacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\n                }\n                if (instrumentObject[\"filterResonance\"] != undefined) {\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n                } else {\n                    legacySettings.filterResonance = 0;\n                }\n\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n                if (Array.isArray(instrumentObject[\"operators\"])) {\n                    legacySettings.operatorEnvelopes = [];\n                    for (let j: number = 0; j < Config.operatorCount; j++) {\n                        let envelope: Envelope | undefined;\n                        if (instrumentObject[\"operators\"][j] != undefined) {\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n                        }\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n                    }\n                }\n\n                // Try converting from even older legacy filter settings.\n                if (instrumentObject[\"filter\"] != undefined) {\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                    const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n                    const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\n                    let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n                    if (legacyFilter == -1) legacyFilter = 0;\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n                    legacySettings.filterResonance = 0;\n                }\n\n                this.convertLegacySettings(legacySettings, true);\n            }\n\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"eqSubFilters\" + i])) {\n                    this.eqSubFilters[i] = new FilterSettings();\n                    this.eqSubFilters[i]!.fromJsonObject(instrumentObject[\"eqSubFilters\" + i]);\n                }\n            }\n\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\n                const envelopeArray: any[] = instrumentObject[\"envelopes\"];\n                for (let i = 0; i < envelopeArray.length; i++) {\n                    if (this.envelopeCount >= Config.maxEnvelopeCount) break;\n                    const tempEnvelope: EnvelopeSettings = new EnvelopeSettings();\n                    tempEnvelope.fromJsonObject(envelopeArray[i]);\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);\n                }\n            }\n        }\n    }\n\n    public getLargestControlPointCount(forNoteFilter: boolean) {\n        let largest: number;\n        if (forNoteFilter) {\n            largest = this.noteFilter.controlPointCount;\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i]!.controlPointCount > largest)\n                    largest = this.noteSubFilters[i]!.controlPointCount;\n            }\n        }\n        else {\n            largest = this.eqFilter.controlPointCount;\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (this.eqSubFilters[i] != null && this.eqSubFilters[i]!.controlPointCount > largest)\n                    largest = this.eqSubFilters[i]!.controlPointCount;\n            }\n        }\n        return largest;\n    }\n\n    public static frequencyFromPitch(pitch: number, edo: number): number {\n        return 440.0 * Math.pow(2.0, pitch / edo - 69 / 12);\n    }\n\n    public addEnvelope(target: number, index: number, envelope: number): void {\n        let makeEmpty: boolean = false;\n        if (!this.supportsEnvelopeTarget(target, index)) makeEmpty = true;\n        if (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\n        while (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings();\n        const envelopeSettings: EnvelopeSettings = this.envelopes[this.envelopeCount];\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\n        envelopeSettings.index = makeEmpty ? 0 : index;\n        envelopeSettings.envelope = envelope;\n        this.envelopeCount++;\n    }\n\n    public supportsEnvelopeTarget(target: number, index: number): boolean {\n        const automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\n\t\t\treturn false;\n\t\t}\n        if (index >= automationTarget.maxCount) {\n            return false;\n        }\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n            return false;\n        }\n        if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\n            return false;\n        }\n        if (automationTarget.isFilter) {\n            //if (automationTarget.perNote) {\n            let useControlPointCount: number = this.noteFilter.controlPointCount;\n            if (this.noteFilterType)\n                useControlPointCount = 1;\n            if (index >= useControlPointCount) return false;\n            //} else {\n            //\tif (index >= this.eqFilter.controlPointCount)   return false;\n            //}\n        }\n        return true;\n    }\n\n    public clearInvalidEnvelopeTargets(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n            const target: number = this.envelopes[envelopeIndex].target;\n            const index: number = this.envelopes[envelopeIndex].index;\n            if (!this.supportsEnvelopeTarget(target, index)) {\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                this.envelopes[envelopeIndex].index = 0;\n            }\n        }\n    }\n\n    public getTransition(): Transition {\n        return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :\n            (this.type == InstrumentType.mod ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\n    }\n\n    public getFadeInSeconds(): number {\n        return (this.type == InstrumentType.drumset) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\n    }\n\n    public getFadeOutTicks(): number {\n        return (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut)\n    }\n\n    public getChord(): Chord {\n        return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n    }\n\n    public getDrumsetEnvelope(pitch: number): Envelope {\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\n    }\n}\n\nexport class Channel {\n    public octave: number = 0;\n    public readonly instruments: Instrument[] = [];\n    public readonly patterns: Pattern[] = [];\n    public readonly bars: number[] = [];\n    public muted: boolean = false;\n    public name: string = \"\";\n}\n\nexport class Song {\n    private static readonly _format: string = \"JummBox\";\n    private static readonly _oldestBeepboxVersion: number = 2;\n    private static readonly _latestBeepboxVersion: number = 9;\n    private static readonly _oldestEdoBoxVersion: number = 1;\n    private static readonly _latestEdoBoxVersion: number = 2;\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox.\n    private static readonly _variant = 0x65; //\"e\" ~ edobox\n\n    public title: string;\n    public scale: number;\n    public key: number;\n    public edo: number;\n    public tempo: number;\n    public reverb: number;\n    public beatsPerBar: number;\n    public barCount: number;\n    public patternsPerChannel: number;\n    public rhythm: number;\n    public layeredInstruments: boolean;\n    public patternInstruments: boolean;\n    public loopStart: number;\n    public loopLength: number;\n    public pitchChannelCount: number;\n    public noiseChannelCount: number;\n    public modChannelCount: number;\n    public readonly channels: Channel[] = [];\n    public limitDecay: number = 4.0;\n    public limitRise: number = 4000.0;\n    public compressionThreshold: number = 1.0;\n    public limitThreshold: number = 1.0;\n    public compressionRatio: number = 1.0;\n    public limitRatio: number = 1.0;\n    public masterGain: number = 1.0;\n    public inVolumeCap: number = 0.0;\n    public outVolumeCap: number = 0.0;\n\n    constructor(string?: string) {\n        if (string != undefined) {\n            this.fromBase64String(string);\n        } else {\n            this.initToDefault(true);\n        }\n    }\n\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return 6;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            let vol: number | undefined = Config.modulators[this.channels[modChannel].instruments[modInstrument].modulators[modCount]].newNoteVol;\n\n            // For tempo, actually use user defined tempo\n            let tempoIndex: number = Config.modulators.dictionary[\"tempo\"].index;\n            if (this.channels[modChannel].instruments[modInstrument].modulators[modCount] == tempoIndex) {\n                vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\n            }\n\n            if (vol != undefined)\n                return vol;\n            else\n                return 6;\n        }\n    }\n\n\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return 6;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            let instrument: Instrument = this.channels[modChannel].instruments[modInstrument];\n            let modulator = Config.modulators[instrument.modulators[modCount]];\n            let cap: number | undefined = modulator.maxRawVol;\n\n            if (cap != undefined) {\n                // For filters, cap is dependent on which filter setting is targeted\n                if (modulator.name == \"eq filter\" || modulator.name == \"note filter\") {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (instrument.modFilterTypes[modCount] > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n                return cap;\n            }\n            else\n                return 6;\n        }\n    }\n\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: number, filterType?: number): number => {\n        if (!isMod)\n            return Config.noteSizeMax;\n        else {\n            let cap: number | undefined = Config.modulators[modSetting].maxRawVol;\n            if (cap != undefined) {\n\n                // For filters, cap is dependent on which filter setting is targeted\n                if (filterType != undefined && (Config.modulators[modSetting].name == \"eq filter\" || Config.modulators[modSetting].name == \"note filter\")) {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (filterType > 0 && filterType % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (filterType > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n\n                return cap;\n            }\n            else\n                return Config.noteSizeMax;\n        }\n    }\n\n    public getChannelCount(): number {\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\n    }\n\n    public getMaxInstrumentsPerChannel(): number {\n        return Math.max(\n            this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\n            this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n    }\n\n    public getMaxInstrumentsPerPattern(channelIndex: number): number {\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n    }\n\n    public getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\n        return this.layeredInstruments\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n            : 1;\n    }\n\n    public getChannelIsNoise(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    public getChannelIsMod(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    public initToDefault(andResetChannels: boolean = true): void {\n        this.scale = 0;\n        this.key = 0;\n        this.edo = Config.defaultEdo;\n        this.loopStart = 0;\n        this.loopLength = 4;\n        this.tempo = 150;\n        this.reverb = 0;\n        this.beatsPerBar = 8;\n        this.barCount = 16;\n        this.patternsPerChannel = 8;\n        this.rhythm = 1;\n        this.layeredInstruments = false;\n        this.patternInstruments = false;\n\n        this.title = \"Unnamed\";\n        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n\n        if (andResetChannels) {\n            this.pitchChannelCount = 3;\n            this.noiseChannelCount = 1;\n            this.modChannelCount = 0;\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                if (this.channels.length <= channelIndex) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                const channel: Channel = this.channels[channelIndex];\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\n\n                for (let pattern: number = 0; pattern < this.patternsPerChannel; pattern++) {\n                    if (channel.patterns.length <= pattern) {\n                        channel.patterns[pattern] = new Pattern();\n                    } else {\n                        channel.patterns[pattern].reset();\n                    }\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let instrument: number = 0; instrument < Config.instrumentCountMin; instrument++) {\n                    if (channel.instruments.length <= instrument) {\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\n                    }\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\n                }\n                channel.instruments.length = Config.instrumentCountMin;\n\n                for (let bar: number = 0; bar < this.barCount; bar++) {\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n            this.channels.length = this.getChannelCount();\n        }\n    }\n\n    public toBase64String(): string {\n        let bits: BitFieldWriter;\n        let buffer: number[] = [];\n\n        buffer.push(Song._variant);\n        buffer.push(base64IntToCharCode[Song._latestEdoBoxVersion]);\n\n        // Length of the song name string\n        buffer.push(SongTagCode.songTitle);\n        var encodedSongTitle: string = encodeURIComponent(this.title);\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\n\n        // Actual encoded string follows\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\n            buffer.push(encodedSongTitle.charCodeAt(i));\n        }\n\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\n        buffer.push(SongTagCode.edo, base64IntToCharCode[this.edo]);\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\n\n        // Push limiter settings, but only if they aren't the default!\n        buffer.push(SongTagCode.limiterSettings);\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\n        }\n        else {\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\n        }\n\n        buffer.push(SongTagCode.channelNames);\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\n            // Length of the channel name string\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\n\n            // Actual encoded string follows\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\n                buffer.push(encodedChannelName.charCodeAt(i));\n            }\n        }\n\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\n        if (this.layeredInstruments || this.patternInstruments) {\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n            }\n        }\n\n        buffer.push(SongTagCode.channelOctave);\n        for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n        }\n\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n\n                buffer.push(SongTagCode.eqFilter);\n                buffer.push(base64IntToCharCode[+instrument.eqFilterType]);\n                if (instrument.eqFilterType) {\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);\n                }\n                else {\n                    if (instrument.eqFilter == null) {\n                        // Push null filter settings\n                        buffer.push(base64IntToCharCode[0]);\n                        console.log(\"Null EQ filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                    } else {\n                        buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);\n                        for (let j: number = 0; j < instrument.eqFilter.controlPointCount; j++) {\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[j];\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                        }\n                    }\n\n                    // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                    let usingSubFilterBitfield: number = 0;\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                        usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);\n                    }\n                    // Put subfilter usage into 2 chars (12 bits)\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                    // Put subfilter info in for all used subfilters\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                        if (usingSubFilterBitfield & (1 << j)) {\n                            buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1]!.controlPointCount]);\n                            for (let k: number = 0; k < instrument.eqSubFilters[j + 1]!.controlPointCount; k++) {\n                                const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[k];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                    }\n                }\n\n                // The list of enabled effects is represented as a 12-bit bitfield using two six-bit characters.\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects >> 6], base64IntToCharCode[instrument.effects & 63]);\n                if (effectsIncludeNoteFilter(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\n                    if (instrument.noteFilterType) {\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\n                    }\n                    else {\n                        if (instrument.noteFilter == null) {\n                            // Push null filter settings\n                            buffer.push(base64IntToCharCode[0]);\n                            console.log(\"Null note filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                        }\n                        else {\n                            buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n                            for (let j: number = 0; j < instrument.noteFilter.controlPointCount; j++) {\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[j];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n\n                        // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                        let usingSubFilterBitfield: number = 0;\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                            usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\n                        }\n                        // Put subfilter usage into 2 chars (12 bits)\n                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                        // Put subfilter info in for all used subfilters\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                            if (usingSubFilterBitfield & (1 << j)) {\n                                buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1]!.controlPointCount]);\n                                for (let k: number = 0; k < instrument.noteSubFilters[j + 1]!.controlPointCount; k++) {\n                                    const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[k];\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (effectsIncludeTransition(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.transition]);\n                }\n                if (effectsIncludeChord(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chord]);\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\n                    }\n                }\n                if (effectsIncludePitchShift(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\n                }\n                if (effectsIncludeDetune(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\n                }\n                if (effectsIncludeVibrato(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\n                    // Custom vibrato settings\n                    if (instrument.vibrato == Config.vibratos.length) {\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\n                    }\n                }\n                if (effectsIncludeDistortion(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.distortion]);\n                    // Aliasing is tied into distortion for now\n                    buffer.push(base64IntToCharCode[+instrument.aliases]);\n                }\n                if (effectsIncludeBitcrusher(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\n                }\n                if (effectsIncludePanning(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\n                    buffer.push(base64IntToCharCode[instrument.panDelay]);\n                }\n                if (effectsIncludeChorus(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chorus]);\n                }\n                if (effectsIncludeEcho(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\n                }\n                if (effectsIncludeReverb(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.reverb]);\n                }\n\n                if (instrument.type != InstrumentType.drumset) {\n                    buffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n                    // Transition info follows transition song tag\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\n                }\n\n                if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                    buffer.push(SongTagCode.harmonics);\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n                    }\n                    harmonicsBits.encodeBase64(buffer);\n                }\n\n                if (instrument.type == InstrumentType.chip) {\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                } else if (instrument.type == InstrumentType.fm) {\n                    buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\n                    buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\n\n                    buffer.push(SongTagCode.operatorFrequencies);\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n                    }\n                    buffer.push(SongTagCode.operatorAmplitudes);\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n                    }\n\n                    buffer.push(SongTagCode.operatorWaves);\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\n                        // Push pulse width if that type is used\n                        if (instrument.operators[o].waveform == 3) {\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\n                        }\n                    }\n                } else if (instrument.type == InstrumentType.customChipWave) {\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    buffer.push(SongTagCode.customChipWave);\n                    // Push custom wave values\n                    for (let j: number = 0; j < 64; j++) {\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\n                    }\n                } else if (instrument.type == InstrumentType.noise) {\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\n                } else if (instrument.type == InstrumentType.spectrum) {\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                } else if (instrument.type == InstrumentType.drumset) {\n                    buffer.push(SongTagCode.drumsetEnvelopes);\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n                    }\n\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n                        }\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                } else if (instrument.type == InstrumentType.harmonics) {\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                } else if (instrument.type == InstrumentType.pwm) {\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n                } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\t\t\tbuffer.push(SongTagCode.supersaw, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n\t\t\t\t} else if (instrument.type == InstrumentType.pickedString) {\n                    if (Config.stringSustainRange > 0x20 || SustainType.length > 2) {\n\t\t\t\t\t\tthrow new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\n\t\t\t\t\t}\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    buffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\n                } else if (instrument.type == InstrumentType.mod) {\n                    // Handled down below. Could be moved, but meh.\n                } else {\n                    throw new Error(\"Unknown instrument type.\");\n                }\n\n                buffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\n                // Added in JB v6: Options for envelopes come next.\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\n                buffer.push(base64IntToCharCode[+instrument.discreteEnvelope]);\n                for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n                }\n            }\n        }\n\n        buffer.push(SongTagCode.bars);\n        bits = new BitFieldWriter();\n        let neededBits: number = 0;\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i: number = 0; i < this.barCount; i++) {\n            bits.write(neededBits, this.channels[channelIndex].bars[i]);\n        }\n        bits.encodeBase64(buffer);\n\n        buffer.push(SongTagCode.patterns);\n        bits = new BitFieldWriter();\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\n        const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel: Channel = this.channels[channelIndex];\n            const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n            const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n            const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\n            // Some info about modulator settings immediately follows in mod channels.\n            if (isModChannel) {\n                const neededModInstrumentIndexBits: number = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                    let instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        const modChannel: number = instrument.modChannels[mod];\n                        const modInstrument: number = instrument.modInstruments[mod];\n                        const modSetting: number = instrument.modulators[mod];\n                        const modFilter: number = instrument.modFilterTypes[mod];\n\n                        // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                        // 0 - For pitch/noise\n                        // 1 - (used to be For noise, not needed)\n                        // 2 - For song\n                        // 3 - None\n\n                        let status: number = Config.modulators[modSetting].forSong ? 2 : 0;\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\n                            status = 3;\n\n                        bits.write(2, status);\n\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\n                        if (status == 0 || status == 1) {\n                            bits.write(8, modChannel);\n                            bits.write(neededModInstrumentIndexBits, modInstrument);\n                        }\n\n                        // Only used if setting isn't \"none\".\n                        if (status != 3) {\n                            bits.write(6, modSetting);\n                        }\n\n                        // Write mod filter info, only if this is a filter mod\n                        if (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\") {\n                            bits.write(6, modFilter);\n                        }\n                    }\n                }\n            }\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * this.edo;\n            let lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n            const recentShapes: string[] = [];\n            for (let i: number = 0; i < recentPitches.length; i++) {\n                recentPitches[i] += octaveOffset;\n            }\n            for (const pattern of channel.patterns) {\n                if (this.patternInstruments) {\n                    const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n                    for (let i: number = 0; i < instrumentCount; i++) {\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n                    }\n                }\n\n                if (pattern.notes.length > 0) {\n                    bits.write(1, 1);\n\n                    let curPart: number = 0;\n                    for (const note of pattern.notes) {\n\n                        // For mod channels, a negative offset may be necessary.\n                        if (note.start < curPart && isModChannel) {\n                            bits.write(2, 0); // rest, then...\n                            bits.write(1, 1); // negative offset\n                            bits.writePartDuration(curPart - note.start);\n                        }\n\n                        if (note.start > curPart) {\n                            bits.write(2, 0); // rest\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\n                            bits.writePartDuration(note.start - curPart);\n                        }\n\n                        shapeBits.clear();\n\n                        // Old format was:\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\n                        // New format is:\n                        //      0: 1 pitch\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                        if (note.pitches.length == 1) {\n                            shapeBits.write(1, 0);\n                        } else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(3, note.pitches.length - 2);\n                        }\n\n                        shapeBits.writePinCount(note.pins.length - 1);\n\n                        if (!isModChannel) {\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size); // volume\n                        }\n                        else {\n                            shapeBits.write(9, note.pins[0].size); // Modulator value. 9 bits for now = 512 max mod value?\n                        }\n\n                        let shapePart: number = 0;\n                        let startPitch: number = note.pitches[0];\n                        let currentPitch: number = startPitch;\n                        const pitchBends: number[] = [];\n                        for (let i: number = 1; i < note.pins.length; i++) {\n                            const pin: NotePin = note.pins[i];\n                            const nextPitch: number = startPitch + pin.interval;\n                            if (currentPitch != nextPitch) {\n                                shapeBits.write(1, 1);\n                                pitchBends.push(nextPitch);\n                                currentPitch = nextPitch;\n                            } else {\n                                shapeBits.write(1, 0);\n                            }\n                            shapeBits.writePartDuration(pin.time - shapePart);\n                            shapePart = pin.time;\n                            if (!isModChannel) {\n                                shapeBits.write(bitsPerNoteSize, pin.size);\n                            } else {\n                                shapeBits.write(9, pin.size);\n                            }\n                        }\n\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\n                        if (shapeIndex == -1) {\n                            bits.write(2, 1); // new shape\n                            bits.concat(shapeBits);\n                        } else {\n                            bits.write(1, 1); // old shape\n                            bits.writeLongTail(0, 0, shapeIndex);\n                            recentShapes.splice(shapeIndex, 1);\n                        }\n                        recentShapes.unshift(shapeString);\n                        if (recentShapes.length > 10) recentShapes.pop();\n\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\n                        for (let i: number = 0; i < allPitches.length; i++) {\n                            const pitch: number = allPitches[i];\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\n                            if (pitchIndex == -1) {\n                                let interval: number = 0;\n                                let pitchIter: number = lastPitch;\n                                if (pitchIter < pitch) {\n                                    while (pitchIter != pitch) {\n                                        pitchIter++;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\n                                    }\n                                } else {\n                                    while (pitchIter != pitch) {\n                                        pitchIter--;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\n                                    }\n                                }\n                                bits.write(1, 0);\n                                bits.writePitchInterval(interval);\n                            } else {\n                                bits.write(1, 1);\n                                bits.write(4, pitchIndex);\n                                recentPitches.splice(pitchIndex, 1);\n                            }\n                            recentPitches.unshift(pitch);\n                            if (recentPitches.length > 16) recentPitches.pop();\n\n                            if (i == note.pitches.length - 1) {\n                                lastPitch = note.pitches[0];\n                            } else {\n                                lastPitch = pitch;\n                            }\n                        }\n\n                        if (note.start == 0) {\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\n                        }\n\n                        curPart = note.end;\n                    }\n\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                        bits.write(2, 0); // rest\n                        if (isModChannel) bits.write(1, 0); // positive offset\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\n                    }\n                } else {\n                    bits.write(1, 0);\n                }\n            }\n        }\n        let stringLength: number = bits.lengthBase64();\n        let digits: number[] = [];\n        while (stringLength > 0) {\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n            stringLength = stringLength >> 6;\n        }\n        buffer.push(base64IntToCharCode[digits.length]);\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\n        bits.encodeBase64(buffer);\n\n        const maxApplyArgs: number = 64000;\n        if (buffer.length < maxApplyArgs) {\n            // Note: Function.apply may break for long argument lists. \n            return String.fromCharCode.apply(null, buffer);\n        } else {\n            let result: string = \"\";\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n            }\n            return result;\n        }\n    }\n\n    private static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\n        // I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\n        if (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n    }\n\n    public fromBase64String(compressed: string): void {\n        if (compressed == null || compressed == \"\") {\n            this.initToDefault(true);\n            return;\n        }\n        let charIndex: number = 0;\n        // skip whitespace.\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\n        // skip hash mark.\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\n        // if it starts with curly brace, treat it as JSON.\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\n            return;\n        }\n\n        const variantTest: number = compressed.charCodeAt(charIndex);\n        let fromBeepBox: boolean;\n        let fromJummBox: boolean;\n\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\n        if (variantTest == 0x65) { // \"e\"\n            fromBeepBox = false;\n            fromJummBox = true;\n            charIndex++;\n        } else {\n            return;\n        }\n\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return; // Just here so I don't break the code- it can't actually load anything from EdoBox/JummBox\n        if (fromJummBox && (version == -1 || version > Song._latestEdoBoxVersion || version < Song._oldestEdoBoxVersion)) return;\n        const beforeTwo: boolean = false;\n        const beforeThree: boolean = false;\n        const beforeFour: boolean = false;\n        const beforeFive: boolean = false;\n        const beforeSix: boolean = false;\n        const beforeSeven: boolean = false;\n        const beforeEight: boolean = false;\n        const beforeNine: boolean = false;\n        this.initToDefault((fromBeepBox && beforeNine) || (fromJummBox && beforeFive));\n        const forceSimpleFilter: boolean = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\n\n        if (beforeThree && fromBeepBox) {\n            // Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\n            for (const channel of this.channels) {\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n                channel.instruments[0].effects |= 1 << EffectType.transition;\n            }\n            this.channels[3].instruments[0].chipNoise = 0;\n        }\n\n        let legacySettingsCache: LegacySettings[][] | null = null;\n        if ((fromBeepBox && beforeNine) || (fromJummBox && beforeFive)) {\n            // Unfortunately, old versions of BeepBox had a variety of different ways of saving\n            // filter-and-envelope-related parameters in the URL, and none of them directly\n            // correspond to the new way of saving these parameters. We can approximate the old\n            // settings by collecting all the old settings for an instrument and passing them to\n            // convertLegacySettings(), so I use this data structure to collect the settings\n            // for each instrument if necessary.\n            legacySettingsCache = [];\n            for (let i: number = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                legacySettingsCache[i] = [];\n                for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\n            }\n        }\n\n        let legacyGlobalReverb: number = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\n\n        let instrumentChannelIterator: number = 0;\n        let instrumentIndexIterator: number = -1;\n        let command: number;\n        let useSlowerArpSpeed: boolean = false;\n        let useFastTwoNoteArp: boolean = false;\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\n            case SongTagCode.songTitle: {\n                // Length of song name string\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n\n                charIndex += songNameLength;\n            } break;\n            case SongTagCode.channelCount: {\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                if (fromBeepBox || beforeTwo) {\n                    // No mod channel support before jummbox v2\n                    this.modChannelCount = 0;\n                } else {\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\n\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                this.channels.length = this.getChannelCount();\n                if ((fromBeepBox && beforeNine) || (fromJummBox && beforeFive)) {\n                    for (let i: number = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\n                        legacySettingsCache![i] = [];\n                        for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\n                    }\n                }\n            } break;\n            case SongTagCode.scale: {\n                this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                // All the scales were jumbled around by Jummbox. Just convert to free.\n                if (fromBeepBox) this.scale = 0;\n            } break;\n            case SongTagCode.key: {\n                if (beforeSeven && fromBeepBox) {\n                    this.key = clamp(0, createKeys(this.edo).length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                } else {\n                    this.key = clamp(0, createKeys(this.edo).length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.edo: {\n                this.edo = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n            } break;\n            case SongTagCode.loopStart: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n            } break;\n            case SongTagCode.loopEnd: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n            } break;\n            case SongTagCode.tempo: {\n                if (beforeFour && fromBeepBox) {\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else if (beforeSeven && fromBeepBox) {\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n            } break;\n            case SongTagCode.reverb: {\n                if (beforeNine && fromBeepBox) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else if (beforeFive && fromJummBox) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else {\n                    // Do nothing, BeepBox v9+ do not support song-wide reverb - JummBox still does via modulator.\n                }\n            } break;\n            case SongTagCode.beatCount: {\n                if (beforeThree && fromBeepBox) {\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n            } break;\n            case SongTagCode.barCount: {\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n                for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                    for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n                        this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\n                    }\n                    this.channels[channelIndex].bars.length = this.barCount;\n                }\n            } break;\n            case SongTagCode.patternCount: {\n                let patternsPerChannel: number;\n                if (beforeEight && fromBeepBox) {\n                    patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                } else {\n                    patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n                const channelCount: number = this.getChannelCount();\n                for (let channelIndex: number = 0; channelIndex < channelCount; channelIndex++) {\n                    const patterns: Pattern[] = this.channels[channelIndex].patterns;\n                    for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n                        patterns[pattern] = new Pattern();\n                    }\n                    patterns.length = this.patternsPerChannel;\n                }\n            } break;\n            case SongTagCode.instrumentCount: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    const instrumentsPerChannel: number = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                    this.layeredInstruments = false;\n                    this.patternInstruments = (instrumentsPerChannel > 1);\n\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                        const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n\n                        for (let instrumentIndex: number = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                            this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        this.channels[channelIndex].instruments.length = instrumentsPerChannel;\n                        if (beforeSix && fromBeepBox) {\n                            for (let instrumentIndex: number = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\n                            }\n                        }\n\n                        for (let j: number = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\n                            legacySettingsCache![channelIndex][j] = {};\n                        }\n                    }\n                } else {\n                    const instrumentsFlagBits: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n                    this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        let instrumentCount: number = 1;\n                        if (this.layeredInstruments || this.patternInstruments) {\n                            instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                        }\n                        const channel: Channel = this.channels[channelIndex];\n                        const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n                        const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n                        for (let i: number = channel.instruments.length; i < instrumentCount; i++) {\n                            channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        channel.instruments.length = instrumentCount;\n                    }\n                }\n            } break;\n            case SongTagCode.rhythm: {\n                this.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                // Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\n                if (fromJummBox && beforeThree || fromBeepBox) {\n                    // These are all the rhythms that had 4 ticks/arpeggio instead of 3.\n                    if (this.rhythm == Config.rhythms.dictionary[\"÷3 (triplets)\"].index || this.rhythm == Config.rhythms.dictionary[\"÷6\"].index) {\n                        useSlowerArpSpeed = true;\n                    }\n                    // Use faster two note arp on these rhythms\n                    if (this.rhythm >= Config.rhythms.dictionary[\"÷6\"].index) {\n                        useFastTwoNoteArp = true;\n                    }\n                }\n            } break;\n            case SongTagCode.channelOctave: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                    if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                } else if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                        if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                    }\n                } else {\n                    for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    for (let channelIndex: number = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = 0;\n                    }\n                }\n            } break;\n            case SongTagCode.startInstrument: {\n                instrumentIndexIterator++;\n                if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n                    instrumentChannelIterator++;\n                    instrumentIndexIterator = 0;\n                }\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // JB before v5 had custom chip and mod before pickedString and supersaw were added. Index +2.\n                let instrumentType: number = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if (fromJummBox && beforeFive) {\n                    if (instrumentType == InstrumentType.pickedString || instrumentType == InstrumentType.supersaw) {\n                        instrumentType += 2;\n                    }\n                }\n                // Similar story here, JB before v5 had custom chip and mod before supersaw was added. Index +1.\n                else if (fromJummBox && beforeSix) {\n                    if (instrumentType == InstrumentType.supersaw || instrumentType == InstrumentType.customChipWave) {\n                        instrumentType += 1;\n                    }\n                }\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\n\n                // Anti-aliasing was added in BeepBox 3.0 (v6->v7) and JummBox 1.3 (v1->v2 roughly but some leakage possible)\n                if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == InstrumentType.chip || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.pwm)) {\n                    instrument.aliases = true;\n                    instrument.distortion = 0;\n                    instrument.effects |= 1 << EffectType.distortion;\n                }\n                if (useSlowerArpSpeed) {\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\n                }\n                if (useFastTwoNoteArp) {\n                    instrument.fastTwoNoteArp = true;\n                }\n\n                if (beforeSeven && fromBeepBox) {\n                    instrument.effects = 0;\n                    // Chip/noise instruments had arpeggio and FM had custom interval but neither\n                    // explicitly saved the chorus setting beforeSeven so enable it here.\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.effects |= 1 << EffectType.chord;\n                    }\n                }\n            } break;\n            case SongTagCode.preset: {\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n                // Picked string was inserted before custom chip in JB v5, so bump up preset index.\n                if (fromJummBox && beforeFive) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.pickedString) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\n                    }\n                }\n                // Similar story, supersaw is also before custom chip (and mod, but mods can't have presets).\n                else if (fromJummBox && beforeSix) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.supersaw) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\n                    }\n                }\n                // BeepBox directly tweaked \"grand piano\", but JB kept it the same. The most up to date version is now \"grand piano 3\"\n                if ( fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\") ) {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset =  EditorConfig.nameToPresetValue(\"grand piano 3\")!;\n                }\n            } break;\n            case SongTagCode.wave: {\n                if (beforeThree && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                    instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n\n                    // Version 2 didn't save any settings for settings for filters, or envelopes,\n                    // just waves, so initialize them here I guess.\n                    instrument.convertLegacySettings(legacySettingsCache![channelIndex][0], forceSimpleFilter);\n\n                } else if (beforeSix && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            if (channelIndex >= this.pitchChannelCount) {\n                                instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            } else {\n                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            }\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                    }\n                } else {\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            } break;\n            case SongTagCode.eqFilter: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    if (beforeSeven && fromBeepBox) {\n                        const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                        const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n                            const legacyFilter: number = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        } else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n                                    const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                    if (channelIndex < this.pitchChannelCount) {\n                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    } else {\n                                        legacySettings.filterCutoff = 10;\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n                                    }\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                            }\n                        } else {\n                            const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    } else {\n                        const filterCutoffRange: number = 11;\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    if (fromBeepBox || typeCheck == 0) {\n                        instrument.eqFilterType = false;\n                        if (fromJummBox)\n                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next to get control point count\n                        const originalControlPointCount: number = typeCheck;\n                        instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                        for (let i: number = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\n                            instrument.eqFilter.controlPoints[i] = new FilterControlPoint();\n                        }\n                        for (let i: number = 0; i < instrument.eqFilter.controlPointCount; i++) {\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[i];\n                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        for (let i: number = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                            charIndex += 3;\n                        }\n\n                        // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                        instrument.eqSubFilters[0] = instrument.eqFilter;\n                        if (fromJummBox && !beforeFive) {\n                            let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                if (usingSubFilterBitfield & (1 << j)) {\n                                    // Number of control points\n                                    const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (instrument.eqSubFilters[j + 1] == null)\n                                        instrument.eqSubFilters[j + 1] = new FilterSettings();\n                                    instrument.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPoints.length; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                        instrument.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i: number = 0; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                        const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[i];\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                        charIndex += 3;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        instrument.eqFilterType = true;\n                        instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            } break;\n            case SongTagCode.filterResonance: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    const filterResonanceRange: number = 8;\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.drumsetEnvelopes: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    if (instrument.type == InstrumentType.drumset) {\n                        for (let i: number = 0; i < Config.drumCount; i++) {\n                            instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]).index;\n                        }\n                    } else {\n                        // This used to be used for general filter envelopes.\n                        // The presence of an envelope affects how convertLegacySettings\n                        // decides the closest possible approximation, so update it.\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    // This tag is now only used for drumset filter envelopes.\n                    for (let i: number = 0; i < Config.drumCount; i++) {\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            } break;\n            case SongTagCode.pulseWidth: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)), base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if (fromBeepBox) {\n                    // BeepBox formula\n                    instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\n\n                }\n\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n            } break;\n\t\t\tcase SongTagCode.supersaw: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tinstrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\tinstrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\tinstrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t} break;\n            case SongTagCode.stringSustain: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tconst sustainValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\tinstrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\n\t\t\t\tinstrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, SustainType.length, sustainValue >> 5) : SustainType.bright;\n            } break;\n            case SongTagCode.fadeInOut: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    // this tag was used for a combination of transition and fade in/out.\n                    const legacySettings = [\n                        { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                        { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                        { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                    ];\n                    if (beforeThree && fromBeepBox) {\n                        const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    } else if (beforeSix && fromBeepBox) {\n                        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                            for (const instrument of this.channels[channelIndex].instruments) {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    // Enable transition if it was used.\n                                    instrument.effects |= 1 << EffectType.transition;\n                                }\n                            }\n                        }\n                    } else if (beforeFour || fromBeepBox) {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    } else {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n\n                        // Read tie-note \n                        if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\n                            // Set legacy tie over flag, which is only used to port notes in patterns using this instrument as tying.\n                            instrument.legacyTieOver = true;\n\n                        }\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (fromJummBox)\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                }\n            } break;\n            case SongTagCode.vibrato: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    if (beforeSeven && fromBeepBox) {\n                        if (beforeThree && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 3, 2, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.effects |= 1 << EffectType.vibrato;\n                            }\n                        } else if (beforeSix && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                        // Imitate the legacy tremolo with a filter envelope.\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        // Enable vibrato if it was used.\n                                        instrument.effects |= 1 << EffectType.vibrato;\n                                    }\n                                    if ((legacyGlobalReverb != 0 || (fromJummBox && beforeFive)) && !this.getChannelIsNoise(channelIndex)) {\n                                        // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                        instrument.effects |= 1 << EffectType.reverb;\n                                        instrument.reverb = legacyGlobalReverb;\n                                    }\n                                }\n                            }\n                        } else {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.effects |= 1 << EffectType.vibrato;\n                            }\n                            if (legacyGlobalReverb != 0 || (fromJummBox && beforeFive)) {\n                                // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                instrument.effects |= 1 << EffectType.reverb;\n                                instrument.reverb = legacyGlobalReverb;\n                            }\n                        }\n                    } else {\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.vibrato = vibrato;\n                        if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                            // Enable vibrato if it was used.\n                            instrument.effects |= 1 << EffectType.vibrato;\n                        }\n                        // Custom vibrato\n                        if (vibrato == Config.vibratos.length) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.effects |= 1 << EffectType.vibrato;\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.arpeggioSpeed: {\n                // Deprecated, but supported for legacy purposes\n                if (fromJummBox && beforeFive) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\n                }\n                else {\n                    // Do nothing, deprecated for now\n                }\n            } break;\n            case SongTagCode.unison: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            let unison: number = clamp(0, Config.unisons.length, originalValue);\n                            if (originalValue == 8) {\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                                unison = 2;\n                                instrument.chord = 3;\n                            }\n                            instrument.unison = unison;\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    let unison: number = clamp(0, Config.unisons.length, originalValue);\n                    if (originalValue == 8) {\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                        unison = 2;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\n                    }\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;\n                } else {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.chord: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.effects |= 1 << EffectType.chord;\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.effects: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\n                    if (legacyGlobalReverb == 0 && !(fromJummBox && beforeFive)) {\n                        // Disable reverb if legacy song reverb was zero.\n                        instrument.effects &= ~(1 << EffectType.reverb);\n                    } else if (effectsIncludeReverb(instrument.effects)) {\n                        instrument.reverb = legacyGlobalReverb;\n                    }\n                    // @jummbus - Enabling pan effect on song import no matter what to make it a default.\n                    //if (instrument.pan != Config.panCenter) {\n                    instrument.effects |= 1 << EffectType.panning;\n                    //}\n                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                        // Enable vibrato if it was used.\n                        instrument.effects |= 1 << EffectType.vibrato;\n                    }\n                    if (instrument.detune != Config.detuneCenter) {\n                        // Enable detune if it was used.\n                        instrument.effects |= 1 << EffectType.detune;\n                    }\n                    if (instrument.aliases)\n                        instrument.effects |= 1 << EffectType.distortion;\n                    else\n                        instrument.effects &= ~(1 << EffectType.distortion);\n\n                    // convertLegacySettings may need to force-enable note filter, call\n                    // it again here to make sure that this override takes precedence.\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // BeepBox currently uses two base64 characters at 6 bits each for a bitfield representing all the enabled effects.\n                    if (EffectType.length > 12) throw new Error();\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                    if (effectsIncludeNoteFilter(instrument.effects)) {\n                        let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (fromBeepBox || typeCheck == 0) {\n                            instrument.noteFilterType = false;\n                            if (fromJummBox)\n                                typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next index in jummbox to get actual count\n                            instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\n                            for (let i: number = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n                                instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n                            }\n                            for (let i: number = 0; i < instrument.noteFilter.controlPointCount; i++) {\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[i];\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let i: number = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {\n                                charIndex += 3;\n                            }\n\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                            instrument.noteSubFilters[0] = instrument.noteFilter;\n                            if (fromJummBox && !beforeFive) {\n                                let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                    if (usingSubFilterBitfield & (1 << j)) {\n                                        // Number of control points\n                                        const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (instrument.noteSubFilters[j + 1] == null)\n                                            instrument.noteSubFilters[j + 1] = new FilterSettings();\n                                        instrument.noteSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPoints.length; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                            instrument.noteSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                        }\n                                        for (let i: number = 0; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                            const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[i];\n                                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                            charIndex += 3;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            instrument.noteFilterType = true;\n                            instrument.noteFilter.reset();\n                            instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                        }\n                    }\n                    if (effectsIncludeTransition(instrument.effects)) {\n                        instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeChord(instrument.effects)) {\n                        instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        // Custom arpeggio speed... only in JB, and only if the instrument arpeggiates.\n                        if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && fromJummBox) {\n                            instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                        }\n                    }\n                    if (effectsIncludePitchShift(instrument.effects)) {\n                        instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeDetune(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // Convert from BeepBox's formula\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\n                        } else {\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    if (effectsIncludeVibrato(instrument.effects)) {\n                        instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                        // Custom vibrato\n                        if (instrument.vibrato == Config.vibratos.length && fromJummBox) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                    if (effectsIncludeDistortion(instrument.effects)) {\n                        instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (fromJummBox && !beforeFive)\n                            instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                    }\n                    if (effectsIncludeBitcrusher(instrument.effects)) {\n                        instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludePanning(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                            instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\n                        }\n                        else {\n                            instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n\n                        // Now, pan delay follows on new versions of jummbox.\n                        if (fromJummBox && !beforeTwo)\n                            instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                    if (effectsIncludeChorus(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // BeepBox has 4 chorus values vs. JB's 8\n                            instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                        }\n                        else {\n                            instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    if (effectsIncludeEcho(instrument.effects)) {\n                        instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeReverb(instrument.effects)) {\n                        if (fromBeepBox) {\n                            instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\n                        } else {\n                            instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n                // Clamp the range.\n                instrument.effects &= (1 << EffectType.length) - 1;\n            } break;\n            case SongTagCode.volume: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (fromBeepBox) {\n                    // Beepbox v9's volume range is 0-7 (0 is max, 7 is mute)\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\n                }\n            } break;\n            case SongTagCode.pan: {\n                if (beforeNine && fromBeepBox) {\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\n                } else if (beforeFive && fromJummBox) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // Pan delay follows on v3 + v4\n                    if (fromJummBox && !beforeThree) {\n                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.detune: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if (fromJummBox && beforeFive) {\n                    // Before jummbox v5, detune was -50 to 50. Now it is 0 to 400\n                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\n                    instrument.effects |= 1 << EffectType.detune;\n                } else {\n                    // Now in v5, tag code is deprecated and handled thru detune effects.\n                }\n            } break;\n            case SongTagCode.customChipWave: {\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // Pop custom wave values\n                for (let j: number = 0; j < 64; j++) {\n                    instrument.customChipWave[j]\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\n                }\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                    sum += instrument.customChipWave[i];\n                }\n                const average: number = sum / instrument.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = instrument.customChipWave[i] - average;\n                    instrument.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                instrument.customChipWaveIntegral[64] = 0.0;\n\n            } break;\n            case SongTagCode.limiterSettings: {\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                // Check if limiter settings are used... if not, restore to default\n                if (nextValue == 0x3f) {\n                    this.restoreLimiterDefaults();\n                }\n                else {\n                    // Limiter is used, grab values\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\n                }\n            } break;\n            case SongTagCode.channelNames: {\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\n                    var channelNameLength;\n                    if (beforeFour)\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\n                    else\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\n\n                    charIndex += channelNameLength;\n                }\n            } break;\n            case SongTagCode.algorithm: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    // The algorithm determines the carrier count, which affects how legacy settings are imported.\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n            } break;\n            case SongTagCode.feedbackType: {\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n            } break;\n            case SongTagCode.feedbackAmplitude: {\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n            } break;\n            case SongTagCode.feedbackEnvelope: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.operatorFrequencies: {\n                for (let o: number = 0; o < Config.operatorCount; o++) {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.operatorAmplitudes: {\n                for (let o: number = 0; o < Config.operatorCount; o++) {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.envelopes: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.operatorEnvelopes = [];\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\n                        legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    const envelopeCount: number = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // JB v6 adds some envelope options here in the sequence.\n                    if (fromJummBox && !beforeSix) {\n                        instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.discreteEnvelope = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                    }\n                    for (let i: number = 0; i < envelopeCount; i++) {\n                        const target: number = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        let index: number = 0;\n                        const maxCount: number = Config.instrumentAutomationTargets[target].maxCount;\n                        if (maxCount > 1) {\n                            index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        const envelope: number = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.addEnvelope(target, index, envelope);\n                    }\n                }\n            } break;\n            case SongTagCode.operatorWaves: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                for (let o: number = 0; o < Config.operatorCount; o++) {\n                    instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // Pulse width follows, if it is a pulse width operator wave\n                    if (instrument.operators[o].waveform == 3) {\n                        instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            } break;\n            case SongTagCode.spectrum: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.spectrum) {\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                    }\n                    instrument.spectrumWave.markCustomWaveDirty();\n                    charIndex += byteCount;\n                } else if (instrument.type == InstrumentType.drumset) {\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                        }\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                    }\n                    charIndex += byteCount;\n                } else {\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\n                }\n            } break;\n            case SongTagCode.harmonics: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n                }\n                instrument.harmonicsWave.markCustomWaveDirty();\n                charIndex += byteCount;\n            } break;\n            case SongTagCode.aliases: {\n                if (fromJummBox && beforeFive) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                    if (instrument.aliases) {\n                        instrument.distortion = 0;\n                        instrument.effects |= 1 << EffectType.distortion;\n                    }\n                } else {\n                    // Do nothing, deprecated\n                }\n            }\n                break;\n            case SongTagCode.bars: {\n                let subStringLength: number;\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    subStringLength = Math.ceil(barCount * 0.5);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let i: number = 0; i < barCount; i++) {\n                        this.channels[channelIndex].bars[i] = bits.read(3) + 1;\n                    }\n                } else if (beforeFive && fromBeepBox) {\n                    let neededBits: number = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i: number = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n                        }\n                    }\n                } else {\n                    let neededBits: number = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i: number = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits);\n                        }\n                    }\n                }\n                charIndex += subStringLength;\n            } break;\n            case SongTagCode.patterns: {\n                let bitStringLength: number = 0;\n                let channelIndex: number;\n                let largerChords: boolean = !((beforeFour && fromJummBox) || fromBeepBox);\n                let recentPitchBitLength: number = (largerChords ? 4 : 3);\n                let recentPitchLength: number = (largerChords ? 16 : 8);\n                if (beforeThree && fromBeepBox) {\n                    channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    bitStringLength = bitStringLength << 6;\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    channelIndex = 0;\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    while (bitStringLengthLength > 0) {\n                        bitStringLength = bitStringLength << 6;\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        bitStringLengthLength--;\n                    }\n                }\n\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n                charIndex += bitStringLength;\n\n                const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n                let songReverbChannel: number = -1;\n                let songReverbInstrument: number = -1;\n                let songReverbIndex: number = -1;\n\n                while (true) {\n                    const channel: Channel = this.channels[channelIndex];\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n                    const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n\n                    const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n                    const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n\n                    const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\n                    // Some info about modulator settings immediately follows in mod channels.\n                    if (isModChannel) {\n\n                        // 2 more indices for 'all' and 'active'\n                        const neededModInstrumentIndexBits: number = (beforeFive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n\n                        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                            let instrument: Instrument = channel.instruments[instrumentIndex];\n\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                                // 0 - For pitch/noise\n                                // 1 - (used to be For noise, not needed)\n                                // 2 - For song\n                                // 3 - None\n                                let status: number = bits.read(2);\n\n                                switch (status) {\n                                    case 0: // Pitch\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\n                                        break;\n                                    case 1: // Noise\n                                        // Getting a status of 1 means this is legacy mod info. Need to add pitch channel count, as it used to just store noise channel index and not overall channel index\n                                        instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\n                                        break;\n                                    case 2: // For song\n                                        instrument.modChannels[mod] = -1;\n                                        break;\n                                    case 3: // None\n                                        instrument.modChannels[mod] = -2;\n                                        break;\n                                }\n\n                                // Mod setting is only used if the status isn't \"none\".\n                                if (status != 3) {\n                                    instrument.modulators[mod] = bits.read(6);\n                                }\n\n                                if (!beforeFive && (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\")) {\n                                    instrument.modFilterTypes[mod] = bits.read(6);\n                                }\n\n                                if (beforeFive && instrument.modChannels[mod] >= 0) {\n                                    let forNoteFilter: boolean = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);\n\n                                    // For legacy filter cut/peak, need to denote since scaling must be applied\n                                    if (instrument.modulators[mod] == 7) {\n                                        // Legacy filter cut index\n                                        // Check if there is no filter dot on prospective filter. If so, add a low pass at max possible freq.\n\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 1; // Dot 1 X\n\n                                    }\n                                    else if (instrument.modulators[mod] == 8) {\n                                        // Legacy filter peak index\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 2; // Dot 1 Y\n                                    }\n                                }\n                                else if (beforeFive) {\n                                    // Check for song reverb mod, which must be handled differently now that it is a multiplier\n                                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\n                                        songReverbChannel = channelIndex;\n                                        songReverbInstrument = instrumentIndex;\n                                        songReverbIndex = mod;\n                                    }\n                                }\n\n                                // Based on setting, enable some effects for the modulated instrument. This isn't always set, say if the instrument's pan was right in the center.\n                                // Only used on import of old songs, because sometimes an invalid effect can be set in a mod in the new version that is actually unused. In that case,\n                                // keeping the mod invalid is better since it preserves the state.\n                                if (beforeFive && Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length) {\n                                    this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;\n                                }\n                            }\n                        }\n                    }\n\n                    // Scalar applied to detune mods since its granularity was upped. Could be repurposed later if any other granularity changes occur.\n                    const detuneScaleNotes: number[][] = [];\n                    for (let j: number = 0; j < channel.instruments.length; j++) {\n                        detuneScaleNotes[j] = [];\n                        for (let i: number = 0; i < Config.modCount; i++) {\n                            detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(beforeFive && fromJummBox && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\n                        }\n                    }\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * this.edo;\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n                    const recentShapes: any[] = [];\n                    for (let i: number = 0; i < recentPitches.length; i++) {\n                        recentPitches[i] += octaveOffset;\n                    }\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\n                        const newPattern: Pattern = channel.patterns[i];\n\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)) {\n                            newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n                            newPattern.instruments.length = 1;\n                        } else {\n                            if (this.patternInstruments) {\n                                const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n                                for (let j: number = 0; j < instrumentCount; j++) {\n                                    newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\n                                }\n                                newPattern.instruments.length = instrumentCount;\n                            } else {\n                                newPattern.instruments[0] = 0;\n                                newPattern.instruments.length = Config.instrumentCountMin;\n                            }\n                        }\n\n                        if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\n                            newPattern.notes.length = 0;\n                            continue;\n                        }\n\n                        let curPart: number = 0;\n                        const newNotes: Note[] = newPattern.notes;\n                        let noteCount: number = 0;\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n\n                            const useOldShape: boolean = bits.read(1) == 1;\n                            let newNote: boolean = false;\n                            let shapeIndex: number = 0;\n                            if (useOldShape) {\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n                            } else {\n                                newNote = bits.read(1) == 1;\n                            }\n\n                            if (!useOldShape && !newNote) {\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\n                                if (isModChannel) {\n                                    const isBackwards: boolean = bits.read(1) == 1;\n                                    const restLength: number = bits.readPartDuration();\n                                    if (isBackwards) {\n                                        curPart -= restLength;\n                                    }\n                                    else {\n                                        curPart += restLength;\n                                    }\n                                } else {\n                                    const restLength: number = (beforeSeven && fromBeepBox)\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                        : bits.readPartDuration();\n                                    curPart += restLength;\n\n                                }\n                            } else {\n                                let shape: any;\n                                if (useOldShape) {\n                                    shape = recentShapes[shapeIndex];\n                                    recentShapes.splice(shapeIndex, 1);\n                                } else {\n                                    shape = {};\n\n                                    if (!largerChords) {\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\n                                        shape.pitchCount = 1;\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\n                                    }\n                                    else {\n                                        // New format is:\n                                        //      0: 1 pitch\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                                        if (bits.read(1) == 1) {\n                                            shape.pitchCount = bits.read(3) + 2;\n                                        }\n                                        else {\n                                            shape.pitchCount = 1;\n                                        }\n                                    }\n\n                                    shape.pinCount = bits.readPinCount();\n                                    if (fromBeepBox) {\n                                        shape.initialSize = bits.read(2) * 2;\n                                    } else if (!isModChannel) {\n                                        shape.initialSize = bits.read(bitsPerNoteSize);\n                                    } else {\n                                        shape.initialSize = bits.read(9);\n                                    }\n\n                                    shape.pins = [];\n                                    shape.length = 0;\n                                    shape.bendCount = 0;\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\n                                        let pinObj: any = {};\n                                        pinObj.pitchBend = bits.read(1) == 1;\n                                        if (pinObj.pitchBend) shape.bendCount++;\n                                        shape.length += (beforeSeven && fromBeepBox)\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                            : bits.readPartDuration();\n                                        pinObj.time = shape.length;\n                                        if (fromBeepBox) {\n                                            pinObj.size = bits.read(2) * 2;\n                                        } else if (!isModChannel) {\n                                            pinObj.size = bits.read(bitsPerNoteSize);\n                                        }\n                                        else {\n                                            pinObj.size = bits.read(9);\n                                        }\n                                        shape.pins.push(pinObj);\n                                    }\n                                }\n                                recentShapes.unshift(shape);\n                                if (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\n\n                                let note: Note;\n                                if (newNotes.length <= noteCount) {\n                                    note = new Note(0, curPart, curPart + shape.length, shape.initialSize);\n                                    newNotes[noteCount++] = note;\n                                } else {\n                                    note = newNotes[noteCount++];\n                                    note.start = curPart;\n                                    note.end = curPart + shape.length;\n                                    note.pins[0].size = shape.initialSize;\n                                }\n\n                                let pitch: number;\n                                let pitchCount: number = 0;\n                                const pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\n                                    const useOldPitch: boolean = bits.read(1) == 1;\n                                    if (!useOldPitch) {\n                                        const interval: number = bits.readPitchInterval();\n                                        pitch = lastPitch;\n                                        let intervalIter: number = interval;\n                                        while (intervalIter > 0) {\n                                            pitch++;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\n                                            intervalIter--;\n                                        }\n                                        while (intervalIter < 0) {\n                                            pitch--;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\n                                            intervalIter++;\n                                        }\n                                    } else {\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\n                                        pitch = recentPitches[pitchIndex];\n                                        recentPitches.splice(pitchIndex, 1);\n                                    }\n\n                                    recentPitches.unshift(pitch);\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\n\n                                    if (j < shape.pitchCount) {\n                                        note.pitches[pitchCount++] = pitch;\n                                    } else {\n                                        pitchBends.push(pitch);\n                                    }\n\n                                    if (j == shape.pitchCount - 1) {\n                                        lastPitch = note.pitches[0];\n                                    } else {\n                                        lastPitch = pitch;\n                                    }\n                                }\n                                note.pitches.length = pitchCount;\n                                pitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\n                                if (isModChannel) {\n                                    note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                }\n                                let pinCount: number = 1;\n                                for (const pinObj of shape.pins) {\n                                    if (pinObj.pitchBend) pitchBends.shift();\n\n                                    const interval: number = pitchBends[0] - note.pitches[0];\n                                    if (note.pins.length <= pinCount) {\n                                        if (isModChannel) {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]]);\n                                        } else {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n                                        }\n                                    } else {\n                                        const pin: NotePin = note.pins[pinCount++];\n                                        pin.interval = interval;\n                                        pin.time = pinObj.time;\n                                        if (isModChannel) {\n                                            pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                        } else {\n                                            pin.size = pinObj.size;\n                                        }\n                                    }\n                                }\n                                note.pins.length = pinCount;\n\n                                if (note.start == 0) {\n                                    if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox))) {\n                                        note.continuesLastPattern = (bits.read(1) == 1);\n                                    } else {\n                                        if (beforeFour || fromBeepBox) {\n                                            note.continuesLastPattern = false;\n                                        } else {\n                                            note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\n                                        }\n                                    }\n                                }\n\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n                            }\n                        }\n                        newNotes.length = noteCount;\n                    }\n\n                    if (beforeThree && fromBeepBox) {\n                        break;\n                    } else {\n                        channelIndex++;\n                        if (channelIndex >= this.getChannelCount()) break;\n                    }\n                } // while (true)\n\n                // Correction for old JB songs that had song reverb mods. Change all instruments using reverb to max reverb\n                if (fromJummBox && beforeFive && songReverbIndex >= 0) {\n                    for (let channelIndex: number = 0; channelIndex < this.channels.length; channelIndex++) {\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            if (effectsIncludeReverb(instrument.effects)) {\n                                instrument.reverb = Config.reverbRange - 1;\n                            }\n                            // Set song reverb via mod to the old setting at song start.\n                            if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\n                                const patternIndex: number = this.channels[channelIndex].bars[0];\n                                if (patternIndex > 0) {\n                                    // Doesn't work if 1st pattern isn't using the right ins for song reverb...\n                                    // Add note to start of pattern\n                                    const pattern: Pattern = this.channels[channelIndex].patterns[patternIndex - 1];\n                                    let lowestPart: number = 6;\n                                    for (const note of pattern.notes) {\n                                        if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\n                                            lowestPart = Math.min(lowestPart, note.start);\n                                        }\n                                    }\n\n                                    if (lowestPart > 0) {\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\n                                    }\n                                }\n                                else {\n                                    // Add pattern\n                                    if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\n                                        const pattern: Pattern = new Pattern();\n                                        this.channels[channelIndex].patterns.push(pattern);\n                                        this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\n                                        if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\n                                            for (let chn: number = 0; chn < this.channels.length; chn++) {\n                                                if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\n                                                    this.channels[chn].patterns.push(new Pattern());\n                                                }\n                                            }\n                                            this.patternsPerChannel++;\n                                        }\n                                        pattern.instruments.length = 1;\n                                        pattern.instruments[0] = songReverbInstrument;\n                                        pattern.notes.length = 0;\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } break;\n            default: {\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\n            } break;\n        }\n    }\n\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\n        const channelArray: Object[] = [];\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel: Channel = this.channels[channelIndex];\n            const instrumentArray: Object[] = [];\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n            for (const instrument of channel.instruments) {\n                instrumentArray.push(instrument.toJsonObject());\n            }\n\n            const patternArray: Object[] = [];\n            for (const pattern of channel.patterns) {\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\n            }\n\n            const sequenceArray: number[] = [];\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n\n            const channelObject: any = {\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\n                \"name\": channel.name,\n                \"instruments\": instrumentArray,\n                \"patterns\": patternArray,\n                \"sequence\": sequenceArray,\n            };\n            if (!isNoiseChannel) {\n                // For compatibility with old versions the octave is offset by one.\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\n            }\n            channelArray.push(channelObject);\n        }\n\n        return {\n            \"name\": this.title,\n            \"format\": Song._format,\n            \"version\": Song._latestEdoBoxVersion,\n            \"scale\": Config.scales[this.scale].name,\n            \"key\": createKeys(this.edo)[this.key].name,\n            \"edo\": this.edo,\n            \"introBars\": this.loopStart,\n            \"loopBars\": this.loopLength,\n            \"beatsPerBar\": this.beatsPerBar,\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n            \"beatsPerMinute\": this.tempo,\n            \"reverb\": this.reverb,\n            \"masterGain\": this.masterGain,\n            \"compressionThreshold\": this.compressionThreshold,\n            \"limitThreshold\": this.limitThreshold,\n            \"limitDecay\": this.limitDecay,\n            \"limitRise\": this.limitRise,\n            \"limitRatio\": this.limitRatio,\n            \"compressionRatio\": this.compressionRatio,\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\n            \"layeredInstruments\": this.layeredInstruments,\n            \"patternInstruments\": this.patternInstruments,\n            \"channels\": channelArray,\n        };\n    }\n\n    public fromJsonObject(jsonObject: any): void {\n        this.initToDefault(true);\n        if (!jsonObject) return;\n\n        //const version: number = jsonObject[\"version\"] | 0;\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\n\n        if (jsonObject[\"name\"] != undefined) {\n            this.title = jsonObject[\"name\"];\n        }\n\n        this.scale = 0; // default to free.\n        if (jsonObject[\"scale\"] != undefined) {\n            const oldScaleNames: Dictionary<string> = {\n\t\t\t\t\"romani :)\": \"double harmonic :)\",\n\t\t\t\t\"romani :(\": \"double harmonic :(\",\n\t\t\t\t\"dbl harmonic :)\": \"double harmonic :)\",\n\t\t\t\t\"dbl harmonic :(\": \"double harmonic :(\",\n                \"enigma\": \"strange\",\n            };\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\n            if (scale != -1) this.scale = scale;\n        }\n\n        if (jsonObject[\"edo\"] != undefined) {\n            this.edo = jsonObject[\"edo\"]\n        } else {\n            this.edo = 12\n        }\n\n        if (jsonObject[\"key\"] != undefined) {\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % createKeys(this.edo).length;\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\n                const key: string = jsonObject[\"key\"];\n                const letter: string = key.charAt(0).toUpperCase();\n                const symbol: string = key.charAt(1).toLowerCase();\n                const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\n                const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\n                let index: number | undefined = letterMap[letter];\n                const offset: number | undefined = accidentalMap[symbol];\n                if (index != undefined) {\n                    if (offset != undefined) index += offset;\n                    if (index < 0) index += this.edo;\n                    index = index % this.edo;\n                    this.key = index;\n                }\n            }\n        }\n\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n        }\n\n        let legacyGlobalReverb: number = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\n        if (jsonObject[\"reverb\"] != undefined) {\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\n        }\n\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n        }\n\n        let importedPartsPerBeat: number = 4;\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\n            if (this.rhythm == -1) {\n                this.rhythm = 1;\n            }\n        }\n\n        // Read limiter settings. Ranges and defaults are based on slider settings\n\n        if (jsonObject[\"masterGain\"] != undefined) {\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\n        } else {\n            this.masterGain = 1.0;\n        }\n\n        if (jsonObject[\"limitThreshold\"] != undefined) {\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\n        }\n        else {\n            this.limitThreshold = 1.0;\n        }\n\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\n        }\n        else {\n            this.compressionThreshold = 1.0;\n        }\n\n        if (jsonObject[\"limitRise\"] != undefined) {\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\n        }\n        else {\n            this.limitRise = 4000.0;\n        }\n\n        if (jsonObject[\"limitDecay\"] != undefined) {\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\n        }\n        else {\n            this.limitDecay = 4.0;\n        }\n\n        if (jsonObject[\"limitRatio\"] != undefined) {\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\n        }\n        else {\n            this.limitRatio = 1.0;\n        }\n\n        if (jsonObject[\"compressionRatio\"] != undefined) {\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\n        }\n        else {\n            this.compressionRatio = 1.0;\n        }\n\n        let maxInstruments: number = 1;\n        let maxPatterns: number = 1;\n        let maxBars: number = 1;\n        if (jsonObject[\"channels\"] != undefined) {\n            for (const channelObject of jsonObject[\"channels\"]) {\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n            }\n        }\n\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n        } else {\n            this.layeredInstruments = false;\n        }\n        if (jsonObject[\"patternInstruments\"] != undefined) {\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\n        } else {\n            this.patternInstruments = (maxInstruments > 1);\n        }\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n        this.barCount = Math.min(maxBars, Config.barCountMax);\n\n        if (jsonObject[\"introBars\"] != undefined) {\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n        }\n        if (jsonObject[\"loopBars\"] != undefined) {\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n        }\n\n        const newPitchChannels: Channel[] = [];\n        const newNoiseChannels: Channel[] = [];\n        const newModChannels: Channel[] = [];\n        if (jsonObject[\"channels\"] != undefined) {\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\n\n                const channel: Channel = new Channel();\n\n                let isNoiseChannel: boolean = false;\n                let isModChannel: boolean = false;\n                if (channelObject[\"type\"] != undefined) {\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\n                } else {\n                    // for older files, assume drums are channel 3.\n                    isNoiseChannel = (channelIndex >= 3);\n                }\n                if (isNoiseChannel) {\n                    newNoiseChannels.push(channel);\n                } else if (isModChannel) {\n                    newModChannels.push(channel);\n                }\n                else {\n                    newPitchChannels.push(channel);\n                }\n\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n                    if (isNoiseChannel) channel.octave = 0;\n                }\n\n                if (channelObject[\"name\"] != undefined) {\n                    channel.name = channelObject[\"name\"];\n                }\n                else {\n                    channel.name = \"\";\n                }\n\n                if (Array.isArray(channelObject[\"instruments\"])) {\n                    const instrumentObjects: any[] = channelObject[\"instruments\"];\n                    for (let i: number = 0; i < instrumentObjects.length; i++) {\n                        if (i >= this.getMaxInstrumentsPerChannel()) break;\n                        const instrument: Instrument = new Instrument(isNoiseChannel, isModChannel);\n                        channel.instruments[i] = instrument;\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb);\n                    }\n\n                }\n\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\n                    const pattern: Pattern = new Pattern();\n                    channel.patterns[i] = pattern;\n\n                    let patternObject: any = undefined;\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\n                    if (patternObject == undefined) continue;\n\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel);\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let i: number = 0; i < this.barCount; i++) {\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n        }\n\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\n        this.pitchChannelCount = newPitchChannels.length;\n        this.noiseChannelCount = newNoiseChannels.length;\n        this.modChannelCount = newModChannels.length;\n        this.channels.length = 0;\n        Array.prototype.push.apply(this.channels, newPitchChannels);\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\n        Array.prototype.push.apply(this.channels, newModChannels);\n    }\n\n    public getPattern(channelIndex: number, bar: number): Pattern | null {\n        if (bar < 0 || bar >= this.barCount) return null;\n        const patternIndex: number = this.channels[channelIndex].bars[bar];\n        if (patternIndex == 0) return null;\n        return this.channels[channelIndex].patterns[patternIndex - 1];\n    }\n\n    public getBeatsPerMinute(): number {\n        return this.tempo;\n    }\n\n    public static getNeededBits(maxValue: number): number {\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n    }\n\n    public restoreLimiterDefaults(): void {\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.limitRise = 4000.0;\n        this.limitDecay = 4.0;\n        this.limitThreshold = 1.0;\n        this.compressionThreshold = 1.0;\n        this.masterGain = 1.0;\n    }\n}\n\nclass PickedString {\n    public delayLine: Float32Array | null = null;\n    public delayIndex: number;\n    public allPassSample: number;\n    public allPassPrevInput: number;\n    public sustainFilterSample: number;\n\tpublic sustainFilterPrevOutput2: number;\n\tpublic sustainFilterPrevInput1: number;\n\tpublic sustainFilterPrevInput2: number;\n    public fractionalDelaySample: number;\n    public prevDelayLength: number;\n    public delayLengthDelta: number;\n    public delayResetOffset: number;\n\n    public allPassG: number = 0.0;\n    public allPassGDelta: number = 0.0;\n   public sustainFilterA1: number = 0.0;\n\tpublic sustainFilterA1Delta: number = 0.0;\n\tpublic sustainFilterA2: number = 0.0;\n\tpublic sustainFilterA2Delta: number = 0.0;\n\tpublic sustainFilterB0: number = 0.0;\n\tpublic sustainFilterB0Delta: number = 0.0;\n\tpublic sustainFilterB1: number = 0.0;\n\tpublic sustainFilterB1Delta: number = 0.0;\n\tpublic sustainFilterB2: number = 0.0;\n\tpublic sustainFilterB2Delta: number = 0.0;\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        this.delayIndex = -1;\n        this.allPassSample = 0.0;\n        this.allPassPrevInput = 0.0;\n        this.sustainFilterSample = 0.0;\n\t\tthis.sustainFilterPrevOutput2 = 0.0;\n\t\tthis.sustainFilterPrevInput1 = 0.0;\n\t\tthis.sustainFilterPrevInput2 = 0.0;\n        this.fractionalDelaySample = 0.0;\n        this.prevDelayLength = -1.0;\n        this.delayResetOffset = 0;\n    }\n\n    public update(synth: Synth, instrumentState: InstrumentState, tone: Tone, stringIndex: number, roundedSamplesPerTick: number, stringDecayStart: number, stringDecayEnd: number, sustainType: SustainType): void {\n        const allPassCenter: number = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n\n        const prevDelayLength: number = this.prevDelayLength;\n\n        const phaseDeltaStart: number = tone.phaseDeltas[stringIndex];\n        const phaseDeltaScale: number = tone.phaseDeltaScales[stringIndex];\n        const phaseDeltaEnd: number = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\n\n        const radiansPerSampleStart: number = Math.PI * 2.0 * phaseDeltaStart;\n        const radiansPerSampleEnd: number = Math.PI * 2.0 * phaseDeltaEnd;\n\n        const centerHarmonicStart: number = radiansPerSampleStart * 2.0;\n        const centerHarmonicEnd: number = radiansPerSampleEnd * 2.0;\n\n        const allPassRadiansStart: number = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\n        const allPassRadiansEnd: number = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\n        const shelfRadians: number = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n\t\tconst decayCurveStart: number = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n\t\tconst decayCurveEnd: number   = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\n\t\tconst register: number = sustainType == SustainType.acoustic ? 0.25 : 0.0;\n\t\tconst registerShelfCenter: number = 15.6;\n\t\tconst registerLowpassCenter: number = 3.0 * synth.samplesPerSecond / 48000;\n\t\t//const decayRateStart: number = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);\n\t\t//const decayRateEnd: number   = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd);\n\t\tconst decayRateStart: number = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n\t\tconst decayRateEnd:   number = Math.pow(0.5, decayCurveEnd   * Math.pow(shelfRadians / (radiansPerSampleEnd   * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n\t\t\n        const expressionDecayStart: number = Math.pow(decayRateStart, 0.002);\n        const expressionDecayEnd: number = Math.pow(decayRateEnd, 0.002);\n\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const allPassGStart: number = Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const allPassGEnd: number = Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n        // 1st order shelf filters and 2nd order lowpass filters have differently shaped frequency\n\t\t// responses, as well as adjustable shapes. I originally picked a 1st order shelf filter,\n\t\t// but I kinda prefer 2nd order lowpass filters now and I designed a couple settings:\n\t\tconst enum PickedStringBrightnessType {\n\t\t\tbright, // 1st order shelf\n\t\t\tnormal, // 2nd order lowpass, rounded corner\n\t\t\tresonant, // 3rd order lowpass, harder corner\n\t\t}\n\t\tconst brightnessType: PickedStringBrightnessType = <any> sustainType == SustainType.bright ? PickedStringBrightnessType.bright : PickedStringBrightnessType.normal;\n\t\tif (brightnessType == PickedStringBrightnessType.bright) {\n\t\t\tconst shelfGainStart: number = Math.pow(decayRateStart, Config.stringDecayRate);\n\t\t\tconst shelfGainEnd: number   = Math.pow(decayRateEnd,   Config.stringDecayRate);\n\t\t\tSynth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\n\t\t\tSynth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\n\t\t} else {\n\t\t\tconst cornerHardness: number = Math.pow(brightnessType == PickedStringBrightnessType.normal ? 0.0 : 1.0, 0.25);\n\t\t\tconst lowpass1stOrderCutoffRadiansStart: number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\n\t\t\tconst lowpass1stOrderCutoffRadiansEnd:   number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd   * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd,   .5);\n\t\t\tconst lowpass2ndOrderCutoffRadiansStart: number = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n\t\t\tconst lowpass2ndOrderCutoffRadiansEnd:   number = lowpass1stOrderCutoffRadiansEnd   * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n\t\t\tconst lowpass2ndOrderGainStart: number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n\t\t\tconst lowpass2ndOrderGainEnd:   number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n\t\t\tSynth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\n\t\t\tSynth.tempFilterEndCoefficients  .lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd),   lowpass2ndOrderGainEnd);\n\t\t}\n\t\t\n\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n\t\tconst sustainFilterA1Start: number = Synth.tempFilterStartCoefficients.a[1];\n\t\tconst sustainFilterA2Start: number = Synth.tempFilterStartCoefficients.a[2];\n\t\tconst sustainFilterB0Start: number = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\n\t\tconst sustainFilterB1Start: number = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\n\t\tconst sustainFilterB2Start: number = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\n\t\tconst sustainFilterPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\t\t\n\t\tsynth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n\t\tconst sustainFilterA1End: number = Synth.tempFilterEndCoefficients.a[1];\n\t\tconst sustainFilterA2End: number = Synth.tempFilterEndCoefficients.a[2];\n\t\tconst sustainFilterB0End: number = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\n\t\tconst sustainFilterB1End: number = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\n\t\tconst sustainFilterB2End: number = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\n\t\tconst sustainFilterPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\t\t\n\t\tconst periodLengthStart: number = 1.0 / phaseDeltaStart;\n\t\tconst periodLengthEnd: number = 1.0 / phaseDeltaEnd;\n\t\tconst minBufferLength: number = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\n\t\tconst delayLength: number = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\n\t\tconst delayLengthEnd: number = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\n\t\t\n\t\tthis.prevDelayLength = delayLength;\n\t\tthis.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\n\t\tthis.allPassG = allPassGStart;\n\t\tthis.sustainFilterA1 = sustainFilterA1Start;\n\t\tthis.sustainFilterA2 = sustainFilterA2Start;\n\t\tthis.sustainFilterB0 = sustainFilterB0Start;\n\t\tthis.sustainFilterB1 = sustainFilterB1Start;\n\t\tthis.sustainFilterB2 = sustainFilterB2Start;\n\t\tthis.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\n\t\tthis.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\n\t\tthis.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\n\t\tthis.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\n\t\tthis.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\n\t\tthis.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\n\n        const pitchChanged: boolean = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\n\n        const reinitializeImpulse: boolean = (this.delayIndex == -1 || pitchChanged);\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\n            // The delay line buffer will get reused for other tones so might as well\n            // start off with a buffer size that is big enough for most notes.\n            const likelyMaximumLength: number = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(((synth.song) ? synth.song.edo : 12)*2, ((synth.song) ? synth.song.edo : 12)));\n            const newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n            if (!reinitializeImpulse && this.delayLine != null) {\n                // If the tone has already started but the buffer needs to be reallocated,\n                // transfer the old data to the new buffer.\n                const oldDelayBufferMask: number = (this.delayLine.length - 1) >> 0;\n                const startCopyingFromIndex: number = this.delayIndex + this.delayResetOffset;\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\n                for (let i: number = 0; i < this.delayLine.length; i++) {\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                }\n            }\n            this.delayLine = newDelayLine;\n        }\n        const delayLine: Float32Array = this.delayLine;\n        const delayBufferMask: number = (delayLine.length - 1) >> 0;\n\n        if (reinitializeImpulse) {\n            // -1 delay index means the tone was reset.\n            // Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\n\n            this.delayIndex = 0;\n            this.allPassSample = 0.0;\n            this.allPassPrevInput = 0.0;\n            this.sustainFilterSample = 0.0;\n\t\t\tthis.sustainFilterPrevOutput2 = 0.0;\n\t\t\tthis.sustainFilterPrevInput1 = 0.0;\n\t\t\tthis.sustainFilterPrevInput2 = 0.0;\n            this.fractionalDelaySample = 0.0;\n\n            // Clear away a region of the delay buffer for the new impulse.\n            const startImpulseFrom: number = -delayLength;\n            const startZerosFrom: number = Math.floor(startImpulseFrom - periodLengthStart / 2);\n            const stopZerosAt: number = Math.ceil(startZerosFrom + periodLengthStart * 2);\n            this.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\n            for (let i: number = startZerosFrom; i <= stopZerosAt; i++) {\n                delayLine[i & delayBufferMask] = 0.0;\n            }\n\n            const impulseWave: Float32Array = instrumentState.wave!;\n            const impulseWaveLength: number = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n            const impulsePhaseDelta: number = impulseWaveLength / periodLengthStart;\n\n            const fadeDuration: number = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\n            const startImpulseFromSample: number = Math.ceil(startImpulseFrom);\n            const stopImpulseAt: number = startImpulseFrom + periodLengthStart + fadeDuration;\n            const stopImpulseAtSample: number = stopImpulseAt;\n            let impulsePhase: number = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n            let prevWaveIntegral: number = 0.0;\n            for (let i: number = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n                const impulsePhaseInt: number = impulsePhase | 0;\n                const index: number = impulsePhaseInt % impulseWaveLength;\n                let nextWaveIntegral: number = impulseWave[index];\n                const phaseRatio: number = impulsePhase - impulsePhaseInt;\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\n                const sample: number = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n                const fadeIn: number = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n                const fadeOut: number = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n                const combinedFade: number = fadeIn * fadeOut;\n                const curvedFade: number = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\n                delayLine[i & delayBufferMask] += sample * curvedFade;\n                prevWaveIntegral = nextWaveIntegral;\n                impulsePhase += impulsePhaseDelta;\n            }\n        }\n    }\n}\n\nclass EnvelopeComputer {\n    // \"Unscaled\" values do not increase with Envelope Speed's timescale factor. Thus they are \"real\" seconds since the start of the note.\n    // Fade envelopes notable use unscaled values instead of being ties to Envelope Speed.\n    public noteSecondsStart: number = 0.0;\n    public noteSecondsStartUnscaled: number = 0.0;\n    public noteSecondsEnd: number = 0.0;\n    public noteSecondsEndUnscaled: number = 0.0;\n    public noteTicksStart: number = 0.0;\n    public noteTicksEnd: number = 0.0;\n    public noteSizeStart: number = Config.noteSizeMax;\n    public noteSizeEnd: number = Config.noteSizeMax;\n    public prevNoteSize: number = Config.noteSizeMax;\n    public nextNoteSize: number = Config.noteSizeMax;\n    private _noteSizeFinal: number = Config.noteSizeMax;\n    public prevNoteSecondsStart: number = 0.0;\n    public prevNoteSecondsStartUnscaled: number = 0.0;\n    public prevNoteSecondsEnd: number = 0.0;\n    public prevNoteSecondsEndUnscaled: number = 0.0;\n    public prevNoteTicksStart: number = 0.0;\n    public prevNoteTicksEnd: number = 0.0;\n    private _prevNoteSizeFinal: number = Config.noteSizeMax;\n\n    public prevSlideStart: boolean = false;\n    public prevSlideEnd: boolean = false;\n    public nextSlideStart: boolean = false;\n    public nextSlideEnd: boolean = false;\n    public prevSlideRatioStart: number = 0.0;\n    public prevSlideRatioEnd: number = 0.0;\n    public nextSlideRatioStart: number = 0.0;\n    public nextSlideRatioEnd: number = 0.0;\n\n    public readonly envelopeStarts: number[] = [];\n    public readonly envelopeEnds: number[] = [];\n    private readonly _modifiedEnvelopeIndices: number[] = [];\n    private _modifiedEnvelopeCount: number = 0;\n    public lowpassCutoffDecayVolumeCompensation: number = 1.0;\n\n    constructor(/*private _perNote: boolean*/) {\n        //const length: number = this._perNote ? EnvelopeComputeIndex.length : InstrumentAutomationIndex.length;\n        const length: number = EnvelopeComputeIndex.length;\n        for (let i: number = 0; i < length; i++) {\n            this.envelopeStarts[i] = 1.0;\n            this.envelopeEnds[i] = 1.0;\n        }\n\n        this.reset();\n    }\n\n    public reset(): void {\n        this.noteSecondsEnd = 0.0;\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksEnd = 0.0;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsEnd = 0.0;\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this._modifiedEnvelopeCount = 0;\n    }\n\n    public computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number, tickTimeStartReal: number, secondsPerTick: number, tone: Tone | null, timeScale: number): void {\n        const secondsPerTickUnscaled: number = secondsPerTick;\n        secondsPerTick *= timeScale;\n        const transition: Transition = instrument.getTransition();\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n            this.prevNoteSecondsEnd = this.noteSecondsEnd;\n            this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled;\n            this.prevNoteTicksEnd = this.noteTicksEnd;\n            this._prevNoteSizeFinal = this._noteSizeFinal;\n            this.noteSecondsEnd = 0.0;\n            this.noteSecondsEndUnscaled = 0.0;\n            this.noteTicksEnd = 0.0;\n        }\n        if (tone != null) {\n            if (tone.note != null) {\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n            } else {\n                this._noteSizeFinal = Config.noteSizeMax;\n            }\n        }\n        const tickTimeEnd: number = tickTimeStart + timeScale;\n        const tickTimeEndReal: number = tickTimeStartReal + 1.0;\n        const noteSecondsStart: number = this.noteSecondsEnd;\n        const noteSecondsStartUnscaled: number = this.noteSecondsEndUnscaled;\n        const noteSecondsEnd: number = noteSecondsStart + secondsPerTick;\n        const noteSecondsEndUnscaled: number = noteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const noteTicksStart: number = this.noteTicksEnd;\n        const noteTicksEnd: number = noteTicksStart + 1.0;\n        const prevNoteSecondsStart: number = this.prevNoteSecondsEnd;\n        const prevNoteSecondsStartUnscaled: number = this.prevNoteSecondsEndUnscaled;\n        const prevNoteSecondsEnd: number = prevNoteSecondsStart + secondsPerTick;\n        const prevNoteSecondsEndUnscaled: number = prevNoteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const prevNoteTicksStart: number = this.prevNoteTicksEnd;\n        const prevNoteTicksEnd: number = prevNoteTicksStart + 1.0;\n\n        const beatsPerTick: number = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n        const beatTimeStart: number = beatsPerTick * tickTimeStart;\n        const beatTimeEnd: number = beatsPerTick * tickTimeEnd;\n\n        let noteSizeStart: number = this._noteSizeFinal;\n        let noteSizeEnd: number = this._noteSizeFinal;\n        let prevNoteSize: number = this._prevNoteSizeFinal;\n        let nextNoteSize: number = 0;\n        let prevSlideStart: boolean = false;\n        let prevSlideEnd: boolean = false;\n        let nextSlideStart: boolean = false;\n        let nextSlideEnd: boolean = false;\n        let prevSlideRatioStart: number = 0.0;\n        let prevSlideRatioEnd: number = 0.0;\n        let nextSlideRatioStart: number = 0.0;\n        let nextSlideRatioEnd: number = 0.0;\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\n            const endPinIndex: number = tone.note.getEndPinIndex(currentPart);\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\n            const endPin: NotePin = tone.note.pins[endPinIndex];\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart: number = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd: number = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n\n            if (transition.slides) {\n                const noteStartTick: number = tone.noteStartPart * Config.ticksPerPart;\n                const noteEndTick: number = tone.noteEndPart * Config.ticksPerPart;\n                const noteLengthTicks: number = noteEndTick - noteStartTick;\n                const maximumSlideTicks: number = noteLengthTicks * 0.5;\n                const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\n                        prevSlideStart = true;\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\n                    }\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\n                        prevSlideEnd = true;\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\n                    }\n                }\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\n                    nextNoteSize = tone.nextNote.pins[0].size\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\n                        nextSlideStart = true;\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\n                    }\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\n                        nextSlideEnd = true;\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\n                    }\n                }\n            }\n        }\n\n        let lowpassCutoffDecayVolumeCompensation: number = 1.0;\n        let usedNoteSize: boolean = false;\n        for (let envelopeIndex: number = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n            let automationTarget: AutomationTarget;\n            let targetIndex: number;\n            let envelope: Envelope;\n            if (envelopeIndex == instrument.envelopeCount) {\n                if (usedNoteSize /*|| !this._perNote*/) break;\n                // Special case: if no other envelopes used note size, default to applying it to note volume.\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n                targetIndex = 0;\n                envelope = Config.envelopes.dictionary[\"note size\"];\n            } else {\n                let envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n                targetIndex = envelopeSettings.index;\n                envelope = Config.envelopes[envelopeSettings.envelope];\n                if (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\n            }\n            if (/*automationTarget.perNote == this._perNote &&*/ automationTarget.computeIndex != null) {\n                const computeIndex: number = automationTarget.computeIndex + targetIndex;\n                let envelopeStart: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);\n                if (prevSlideStart) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n                }\n                if (nextSlideStart) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n                }\n                let envelopeEnd: number = envelopeStart;\n                if (instrument.discreteEnvelope == false) {\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd, beatTimeEnd, noteSizeEnd);\n                    if (prevSlideEnd) {\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n                    }\n                    if (nextSlideEnd) {\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n                    }\n                }\n\n                this.envelopeStarts[computeIndex] *= envelopeStart;\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\n\n                if (automationTarget.isFilter) {\n                    const filterSettings: FilterSettings = /*this._perNote ?*/ (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter /*: instrument.eqFilter*/;\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));\n                    }\n                }\n            }\n        }\n\n        this.noteSecondsStart = noteSecondsStart;\n        this.noteSecondsStartUnscaled = noteSecondsStartUnscaled;\n        this.noteSecondsEnd = noteSecondsEnd;\n        this.noteSecondsEndUnscaled = noteSecondsEndUnscaled;\n        this.noteTicksStart = noteTicksStart;\n        this.noteTicksEnd = noteTicksEnd;\n        this.prevNoteSecondsStart = prevNoteSecondsStart;\n        this.prevNoteSecondsStartUnscaled = prevNoteSecondsStartUnscaled;\n        this.prevNoteSecondsEnd = prevNoteSecondsEnd;\n        this.prevNoteSecondsEndUnscaled = prevNoteSecondsEndUnscaled;\n        this.prevNoteTicksStart = prevNoteTicksStart;\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\n        this.prevNoteSize = prevNoteSize;\n        this.nextNoteSize = nextNoteSize;\n        this.noteSizeStart = noteSizeStart;\n        this.noteSizeEnd = noteSizeEnd;\n        this.prevSlideStart = prevSlideStart;\n        this.prevSlideEnd = prevSlideEnd;\n        this.nextSlideStart = nextSlideStart;\n        this.nextSlideEnd = nextSlideEnd;\n        this.prevSlideRatioStart = prevSlideRatioStart;\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\n        this.nextSlideRatioStart = nextSlideRatioStart;\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n    }\n\n    public clearEnvelopes(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\n            const computeIndex: number = this._modifiedEnvelopeIndices[envelopeIndex];\n            this.envelopeStarts[computeIndex] = 1.0;\n            this.envelopeEnds[computeIndex] = 1.0;\n        }\n        this._modifiedEnvelopeCount = 0;\n    }\n\n    public static computeEnvelope(envelope: Envelope, time: number, beats: number, noteSize: number): number {\n        switch (envelope.type) {\n            case EnvelopeType.noteSize: return Synth.noteSizeToVolumeMult(noteSize);\n            case EnvelopeType.none: return 1.0;\n            case EnvelopeType.twang: return 1.0 / (1.0 + time * envelope.speed);\n            case EnvelopeType.swell: return 1.0 - 1.0 / (1.0 + time * envelope.speed);\n            case EnvelopeType.tremolo: return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\n            case EnvelopeType.tremolo2: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\n            case EnvelopeType.punch: return Math.max(1.0, 2.0 - time * 10.0);\n            case EnvelopeType.flare: const attack: number = 0.25 / Math.sqrt(envelope.speed); return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);\n            case EnvelopeType.decay: return Math.pow(2, -envelope.speed * time);\n            case EnvelopeType.blip: return 1.0 * +(time < (0.25 / Math.sqrt(envelope.speed)));\n            default: throw new Error(\"Unrecognized operator envelope type.\");\n        }\n\n    }\n\n    public static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope): number {\n        // This is a little hokey in the details, but I designed it a while ago and keep it \n        // around for compatibility. This decides how much to increase the volume (or\n        // expression) to compensate for a decaying lowpass cutoff to maintain perceived\n        // volume overall.\n        if (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * envelope.speed;\n        if (envelope.type == EnvelopeType.twang) return 1.0 + 0.02 * envelope.speed;\n        return 1.0;\n    }\n}\n\nclass Tone {\n    public instrumentIndex: number;\n    public readonly pitches: number[] = Array(Config.maxChordSize).fill(0);\n    public pitchCount: number = 0;\n    public chordSize: number = 0;\n    public drumsetPitch: number | null = null;\n    public note: Note | null = null;\n    public prevNote: Note | null = null;\n    public nextNote: Note | null = null;\n    public prevNotePitchIndex: number = 0;\n    public nextNotePitchIndex: number = 0;\n    public freshlyAllocated: boolean = true;\n    public atNoteStart: boolean = false;\n    public isOnLastTick: boolean = false; // Whether the tone is finished fading out and ready to be freed.\n    public passedEndOfNote: boolean = false;\n    public forceContinueAtStart: boolean = false;\n    public forceContinueAtEnd: boolean = false;\n    public noteStartPart: number = 0;\n    public noteEndPart: number = 0;\n    public ticksSinceReleased: number = 0;\n    public liveInputSamplesHeld: number = 0;\n    public lastInterval: number = 0;\n    public noiseSample: number = 0.0;\n    public stringSustainStart: number = 0;\n    public stringSustainEnd: number = 0;\n    public readonly phases: number[] = [];\n    public readonly operatorWaves: OperatorWave[] = [];\n    public readonly phaseDeltas: number[] = [];\n    public readonly phaseDeltaScales: number[] = [];\n    public expression: number = 0.0;\n    public expressionDelta: number = 0.0;\n    public readonly operatorExpressions: number[] = [];\n    public readonly operatorExpressionDeltas: number[] = [];\n    public readonly prevPitchExpressions: Array<number | null> = Array(Config.maxPitchOrOperatorCount).fill(null);\n    public prevVibrato: number | null = null;\n    public prevStringDecay: number | null = null;\n    public pulseWidth: number = 0.0;\n    public pulseWidthDelta: number = 0.0;\n    public supersawDynamism: number = 0.0;\n\tpublic supersawDynamismDelta: number = 0.0;\n\tpublic supersawUnisonDetunes: number[] = []; // These can change over time, but slowly enough that I'm not including corresponding delta values within a tick run.\n\tpublic supersawShape: number = 0.0;\n\tpublic supersawShapeDelta: number = 0.0;\n\tpublic supersawDelayLength: number = 0.0;\n\tpublic supersawDelayLengthDelta: number = 0.0;\n\tpublic supersawDelayLine: Float32Array | null = null;\n\tpublic supersawDelayIndex: number = -1;\n\tpublic supersawPrevPhaseDelta: number | null = null;\n    public readonly pickedStrings: PickedString[] = [];\n\n    public readonly noteFilters: DynamicBiquadFilter[] = [];\n    public noteFilterCount: number = 0;\n    public initialNoteFilterInput1: number = 0.0;\n    public initialNoteFilterInput2: number = 0.0;\n\n    public specialIntervalExpressionMult: number = 1.0;\n    public readonly feedbackOutputs: number[] = [];\n    public feedbackMult: number = 0.0;\n    public feedbackDelta: number = 0.0;\n    public stereoVolumeLStart: number = 0.0;\n    public stereoVolumeRStart: number = 0.0;\n    public stereoVolumeLDelta: number = 0.0;\n    public stereoVolumeRDelta: number = 0.0;\n    public stereoDelayStart: number = 0.0;\n    public stereoDelayEnd: number = 0.0;\n    public stereoDelayDelta: number = 0.0;\n    public customVolumeStart: number = 0.0;\n    public customVolumeEnd: number = 0.0;\n    public filterResonanceStart: number = 0.0;\n    public filterResonanceDelta: number = 0.0;\n    public isFirstOrder: boolean = false;\n\n    public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(/*true*/);\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        this.noiseSample = 0.0;\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            this.phases[i] = 0.0;\n            this.operatorWaves[i] = Config.operatorWaves[0];\n            this.feedbackOutputs[i] = 0.0;\n            this.prevPitchExpressions[i] = null;\n        }\n        for (let i: number = 0; i < this.noteFilterCount; i++) {\n            this.noteFilters[i].resetOutput();\n        }\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInput1 = 0.0;\n        this.initialNoteFilterInput2 = 0.0;\n        this.liveInputSamplesHeld = 0;\n        this.supersawDelayIndex = -1;\n        for (const pickedString of this.pickedStrings) {\n            pickedString.reset();\n        }\n        this.envelopeComputer.reset();\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.supersawPrevPhaseDelta = null;\n        this.drumsetPitch = null;\n    }\n}\n\nclass InstrumentState {\n    public awake: boolean = false; // Whether the instrument's effects-processing loop should continue.\n    public computed: boolean = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\n    public tonesAddedInThisTick: boolean = false; // Whether any instrument tones are currently active.\n    public flushingDelayLines: boolean = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\n    public deactivateAfterThisTick: boolean = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\n    public attentuationProgress: number = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\n    public flushedSamples: number = 0; // How many delay line samples have been flushed to zero.\n    public readonly activeTones: Deque<Tone> = new Deque<Tone>();\n    public readonly activeModTones: Deque<Tone> = new Deque<Tone>();\n    public readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\n    public readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\n\n    public type: InstrumentType = InstrumentType.chip;\n    public synthesizer: Function | null = null;\n    public wave: Float32Array | null = null;\n    public noisePitchFilterMult: number = 1.0;\n    public unison: Unison | null = null;\n    public chord: Chord | null = null;\n    public effects: number = 0;\n\n    public volumeScale: number = 0;\n    public aliases: boolean = false;\n    public arpTime: number = 0;\n    public vibratoTime: number = 0;\n    public nextVibratoTime: number = 0;\n    public envelopeTime: number = 0;\n\n    public eqFilterVolume: number = 1.0;\n    public eqFilterVolumeDelta: number = 0.0;\n    public mixVolume: number = 1.0;\n    public mixVolumeDelta: number = 0.0;\n    public delayInputMult: number = 0.0;\n    public delayInputMultDelta: number = 0.0;\n\n    public distortion: number = 0.0;\n    public distortionDelta: number = 0.0;\n    public distortionDrive: number = 0.0;\n    public distortionDriveDelta: number = 0.0;\n    public distortionFractionalInput1: number = 0.0;\n    public distortionFractionalInput2: number = 0.0;\n    public distortionFractionalInput3: number = 0.0;\n    public distortionPrevInput: number = 0.0;\n    public distortionNextOutput: number = 0.0;\n\n    public bitcrusherPrevInput: number = 0.0;\n    public bitcrusherCurrentOutput: number = 0.0;\n    public bitcrusherPhase: number = 1.0;\n    public bitcrusherPhaseDelta: number = 0.0;\n    public bitcrusherPhaseDeltaScale: number = 1.0;\n    public bitcrusherScale: number = 1.0;\n    public bitcrusherScaleScale: number = 1.0;\n    public bitcrusherFoldLevel: number = 1.0;\n    public bitcrusherFoldLevelScale: number = 1.0;\n\n    public readonly eqFilters: DynamicBiquadFilter[] = [];\n    public eqFilterCount: number = 0;\n    public initialEqFilterInput1: number = 0.0;\n    public initialEqFilterInput2: number = 0.0;\n\n    public panningDelayLine: Float32Array | null = null;\n    public panningDelayPos: number = 0;\n    public panningVolumeL: number = 0.0;\n    public panningVolumeR: number = 0.0;\n    public panningVolumeDeltaL: number = 0.0;\n    public panningVolumeDeltaR: number = 0.0;\n    public panningOffsetL: number = 0.0;\n    public panningOffsetR: number = 0.0;\n    public panningOffsetDeltaL: number = 0.0;\n    public panningOffsetDeltaR: number = 0.0;\n\n    public chorusDelayLineL: Float32Array | null = null;\n    public chorusDelayLineR: Float32Array | null = null;\n    public chorusDelayLineDirty: boolean = false;\n    public chorusDelayPos: number = 0;\n    public chorusPhase: number = 0;\n    public chorusVoiceMult: number = 0;\n    public chorusVoiceMultDelta: number = 0;\n    public chorusCombinedMult: number = 0;\n    public chorusCombinedMultDelta: number = 0;\n\n    public echoDelayLineL: Float32Array | null = null;\n    public echoDelayLineR: Float32Array | null = null;\n    public echoDelayLineDirty: boolean = false;\n    public echoDelayPos: number = 0;\n    public echoDelayOffsetStart: number = 0;\n    public echoDelayOffsetEnd: number | null = null;\n    public echoDelayOffsetRatio: number = 0.0;\n    public echoDelayOffsetRatioDelta: number = 0.0;\n    public echoMult: number = 0.0;\n    public echoMultDelta: number = 0.0;\n    public echoShelfA1: number = 0.0;\n    public echoShelfB0: number = 0.0;\n    public echoShelfB1: number = 0.0;\n    public echoShelfSampleL: number = 0.0;\n    public echoShelfSampleR: number = 0.0;\n    public echoShelfPrevInputL: number = 0.0;\n    public echoShelfPrevInputR: number = 0.0;\n\n    public reverbDelayLine: Float32Array | null = null;\n    public reverbDelayLineDirty: boolean = false;\n    public reverbDelayPos: number = 0;\n    public reverbMult: number = 0.0;\n    public reverbMultDelta: number = 0.0;\n    public reverbShelfA1: number = 0.0;\n    public reverbShelfB0: number = 0.0;\n    public reverbShelfB1: number = 0.0;\n    public reverbShelfSample0: number = 0.0;\n    public reverbShelfSample1: number = 0.0;\n    public reverbShelfSample2: number = 0.0;\n    public reverbShelfSample3: number = 0.0;\n    public reverbShelfPrevInput0: number = 0.0;\n    public reverbShelfPrevInput1: number = 0.0;\n    public reverbShelfPrevInput2: number = 0.0;\n    public reverbShelfPrevInput3: number = 0.0;\n\n    //public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(false);\n\n    public readonly spectrumWave: SpectrumWaveState = new SpectrumWaveState();\n    public readonly harmonicsWave: HarmonicsWaveState = new HarmonicsWaveState();\n    public readonly drumsetSpectrumWaves: SpectrumWaveState[] = [];\n\n    constructor() {\n        for (let i: number = 0; i < Config.drumCount; i++) {\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\n        }\n    }\n\n\n    public allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\n        if (effectsIncludePanning(instrument.effects)) {\n            if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\n                this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\n            }\n        }\n        if (effectsIncludeChorus(instrument.effects)) {\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n            }\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n            }\n        }\n        if (effectsIncludeEcho(instrument.effects)) {\n            // account for tempo and delay automation changing delay length during a tick?\n            const safeEchoDelaySteps: number = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\n            const baseEchoDelayBufferSize: number = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n            const safeEchoDelayBufferSize: number = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\n\n            if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n                this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n                this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n            } else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n                // The echo delay length may change whlie the song is playing if tempo changes,\n                // so buffers may need to be reallocated, but we don't want to lose any echoes\n                // so we need to copy the contents of the old buffer to the new one.\n                const newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n                const newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n                const oldMask: number = this.echoDelayLineL.length - 1;\n\n                for (let i = 0; i < this.echoDelayLineL.length; i++) {\n                    newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n                    newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n                }\n\n                this.echoDelayPos = this.echoDelayLineL.length;\n                this.echoDelayLineL = newDelayLineL;\n                this.echoDelayLineR = newDelayLineR;\n            }\n        }\n        if (effectsIncludeReverb(instrument.effects)) {\n            // TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\n            if (this.reverbDelayLine == null) {\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n            }\n        }\n    }\n\n    public deactivate(): void {\n        this.bitcrusherPrevInput = 0.0;\n        this.bitcrusherCurrentOutput = 0.0;\n        this.bitcrusherPhase = 1.0;\n        for (let i: number = 0; i < this.eqFilterCount; i++) {\n            this.eqFilters[i].resetOutput();\n        }\n        this.eqFilterCount = 0;\n        this.initialEqFilterInput1 = 0.0;\n        this.initialEqFilterInput2 = 0.0;\n        this.distortionFractionalInput1 = 0.0;\n        this.distortionFractionalInput2 = 0.0;\n        this.distortionFractionalInput3 = 0.0;\n        this.distortionPrevInput = 0.0;\n        this.distortionNextOutput = 0.0;\n        this.panningDelayPos = 0;\n        if (this.panningDelayLine != null) for (let i: number = 0; i < this.panningDelayLine.length; i++) this.panningDelayLine[i] = 0.0;\n        this.echoDelayOffsetEnd = null;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n\n        this.volumeScale = 1.0;\n        this.aliases = false;\n\n        this.awake = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n    }\n\n    public resetAllEffects(): void {\n        this.deactivate();\n        // LFOs are reset here rather than in deactivate() for periodic oscillation that stays \"on the beat\". Resetting in deactivate() will cause it to reset with each note.\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.arpTime = 0;\n        this.envelopeTime = 0;\n\n        if (this.chorusDelayLineDirty) {\n            for (let i: number = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\n            for (let i: number = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\n        }\n        if (this.echoDelayLineDirty) {\n            for (let i: number = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\n            for (let i: number = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\n        }\n        if (this.reverbDelayLineDirty) {\n            for (let i: number = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\n        }\n\n        this.chorusPhase = 0.0;\n    }\n\n    public compute(synth: Synth, instrument: Instrument, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number): void {\n        this.computed = true;\n\n        this.type = instrument.type;\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\n        this.unison = Config.unisons[instrument.unison];\n        this.chord = instrument.getChord();\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\n        this.effects = instrument.effects;\t\n\n        this.aliases = instrument.aliases;\n        this.volumeScale = 1.0;\n\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n\n        const samplesPerSecond: number = synth.samplesPerSecond;\n        this.updateWaves(instrument, samplesPerSecond, ((synth.song) ? synth.song.edo : 12));\n\n        //const ticksIntoBar: number = synth.getTicksIntoBar();\n        //const tickTimeStart: number = ticksIntoBar;\n        //const tickTimeEnd:   number = ticksIntoBar + 1.0;\n        //const secondsPerTick: number = samplesPerTick / synth.samplesPerSecond;\n        //const currentPart: number = synth.getCurrentPart();\n        //this.envelopeComputer.computeEnvelopes(instrument, currentPart, tickTimeStart, secondsPerTick, tone);\n        //const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\n        //const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\n\n        const usesDistortion: boolean = effectsIncludeDistortion(this.effects);\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(this.effects);\n        const usesPanning: boolean = effectsIncludePanning(this.effects);\n        const usesChorus: boolean = effectsIncludeChorus(this.effects);\n        const usesEcho: boolean = effectsIncludeEcho(this.effects);\n        const usesReverb: boolean = effectsIncludeReverb(this.effects);\n\n        if (usesDistortion) {\n            let useDistortionStart: number = instrument.distortion;\n            let useDistortionEnd: number = instrument.distortion;\n\n            // Check for distortion mods\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            const distortionSliderStart = Math.min(1.0, /*envelopeStarts[InstrumentAutomationIndex.distortion] **/ useDistortionStart / (Config.distortionRange - 1));\n            const distortionSliderEnd = Math.min(1.0, /*envelopeEnds[  InstrumentAutomationIndex.distortion] **/ useDistortionEnd / (Config.distortionRange - 1));\n            const distortionStart: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\n            const distortionEnd: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\n            const distortionDriveStart: number = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\n            const distortionDriveEnd: number = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\n            this.distortion = distortionStart;\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\n            this.distortionDrive = distortionDriveStart;\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\n        }\n\n        if (usesBitcrusher) {\n            let freqSettingStart: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherFrequency])*/;\n            let freqSettingEnd: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherFrequency])*/;\n\n            // Check for freq crush mods\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false);\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            let quantizationSettingStart: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherQuantization])*/;\n            let quantizationSettingEnd: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherQuantization])*/;\n\n            // Check for bitcrush mods\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false);\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            const basePitch: number = synth.song ? createKeys(synth.song.edo)[synth.song!.key].basePitch : createKeys(12)[synth.song!.key].basePitch; // TODO: What if there's a key change mid-song?\n            const freqStart: number = Instrument.frequencyFromPitch(basePitch + 60, ((synth.song) ? synth.song.edo : 12)) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n            const freqEnd: number = Instrument.frequencyFromPitch(basePitch + 60, ((synth.song) ? synth.song.edo : 12)) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\n            const phaseDeltaStart: number = Math.min(1.0, freqStart / samplesPerSecond);\n            const phaseDeltaEnd: number = Math.min(1.0, freqEnd / samplesPerSecond);\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\n\n            const scaleStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n            const scaleEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\n            this.bitcrusherScale = scaleStart;\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\n\n            const foldLevelStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n            const foldLevelEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n            this.bitcrusherFoldLevel = foldLevelStart;\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\n        }\n\n        let eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (instrument.eqFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const eqFilterSettingsStart: FilterSettings = instrument.eqFilter;\n            if (instrument.eqSubFilters[1] == null)\n                instrument.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd: FilterSettings = instrument.eqSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq: number = instrument.eqFilterSimpleCut;\n            let startSimpleGain: number = instrument.eqFilterSimplePeak;\n            let endSimpleFreq: number = instrument.eqFilterSimpleCut;\n            let endSimpleGain: number = instrument.eqFilterSimplePeak;\n\n            let filterChanges: boolean = false;\n\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n                startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n                endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n                startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n                endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            }\n\n            let startPoint: FilterControlPoint;\n\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint: FilterControlPoint = eqFilterSettingsEnd.controlPoints[0];\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\n            } else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\n            }\n\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n            this.eqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        else {\n            const eqFilterSettings: FilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;\n            //const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\n            //const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\n            for (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\n                //const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\n                //const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\n                //const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\n                //const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\n                let startPoint: FilterControlPoint = eqFilterSettings.controlPoints[i];\n                let endPoint: FilterControlPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\n                if (this.eqFilters.length <= i) this.eqFilters[i] = new DynamicBiquadFilter();\n                this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n            }\n            this.eqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n\n        const mainInstrumentVolume: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        this.mixVolume = mainInstrumentVolume /** envelopeStarts[InstrumentAutomationIndex.mixVolume]*/;\n        let mixVolumeEnd: number = mainInstrumentVolume /** envelopeEnds[  InstrumentAutomationIndex.mixVolume]*/;\n\n        // Check for mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex)) {\n            // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n            const startVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, false);\n            const endVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, true)\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n        }\n\n        // Check for SONG mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\n        }\n\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\n\n        let eqFilterVolumeStart: number = eqFilterVolume;\n        let eqFilterVolumeEnd: number = eqFilterVolume;\n        let delayInputMultStart: number = 1.0;\n        let delayInputMultEnd: number = 1.0;\n\n        if (usesPanning) {\n            //const panEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.panning] * 2.0 - 1.0;\n            //const panEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.panning] * 2.0 - 1.0;\n\n            let usePanStart: number = instrument.pan;\n            let usePanEnd: number = instrument.pan;\n            // Check for pan mods\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            let panStart: number = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter /** panEnvelopeStart*/));\n            let panEnd: number = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter /** panEnvelopeEnd  */));\n\n            const volumeStartL: number = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n            const volumeStartR: number = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n            const volumeEndL: number = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\n            const volumeEndR: number = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\n            const maxDelaySamples: number = samplesPerSecond * Config.panDelaySecondsMax;\n\n            let usePanDelayStart: number = instrument.panDelay;\n            let usePanDelayEnd: number = instrument.panDelay;\n            // Check for pan delay mods\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            const delayStart: number = panStart * usePanDelayStart * maxDelaySamples / 10;\n            const delayEnd: number = panEnd * usePanDelayEnd * maxDelaySamples / 10;\n            const delayStartL: number = Math.max(0.0, delayStart);\n            const delayStartR: number = Math.max(0.0, -delayStart);\n            const delayEndL: number = Math.max(0.0, delayEnd);\n            const delayEndR: number = Math.max(0.0, -delayEnd);\n\n            this.panningVolumeL = volumeStartL;\n            this.panningVolumeR = volumeStartR;\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\n        }\n\n        if (usesChorus) {\n            //const chorusEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.chorus];\n            //const chorusEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.chorus];\n            let useChorusStart: number = instrument.chorus;\n            let useChorusEnd: number = instrument.chorus;\n            // Check for chorus mods\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\n            }\n\n            let chorusStart: number = Math.min(1.0, /*chorusEnvelopeStart **/ useChorusStart / (Config.chorusRange - 1));\n            let chorusEnd: number = Math.min(1.0, /*chorusEnvelopeEnd   **/ useChorusEnd / (Config.chorusRange - 1));\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n            this.chorusVoiceMult = chorusStart;\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\n            this.chorusCombinedMult = chorusCombinedMultStart;\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\n        }\n\n        let maxEchoMult = 0.0;\n        let averageEchoDelaySeconds: number = 0.0;\n        if (usesEcho) {\n            //const echoSustainEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.echoSustain];\n            //const echoSustainEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.echoSustain];\n            let useEchoSustainStart: number = instrument.echoSustain;\n            let useEchoSustainEnd: number = instrument.echoSustain;\n            // Check for echo mods\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\n                useEchoSustainStart = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false) );\n                useEchoSustainEnd = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true) );\n            }\n            const echoMultStart: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeStart **/ useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\n            const echoMultEnd: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeEnd   **/ useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\n            this.echoMult = echoMultStart;\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\n\n            // TODO: After computing a tick's settings once for multiple run lengths (which is\n            // good for audio worklet threads), compute the echo delay envelopes at tick (or\n            // part) boundaries to interpolate between two delay taps.\n            //const echoDelayEnvelopeStart:   number = envelopeStarts[InstrumentAutomationIndex.echoDelay];\n            //const echoDelayEnvelopeEnd:     number = envelopeEnds[  InstrumentAutomationIndex.echoDelay];\n            let useEchoDelayStart: number = instrument.echoDelay;\n            let useEchoDelayEnd: number = instrument.echoDelay;\n            let ignoreTicks: boolean = false;\n            // Check for pan delay mods\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false);\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true);\n                ignoreTicks = true;\n            }\n\n            const tmpEchoDelayOffsetStart: number = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            const tmpEchoDelayOffsetEnd: number = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            if (this.echoDelayOffsetEnd != null && !ignoreTicks) {\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\n            } else {\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\n            }\n\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n\n            this.echoDelayOffsetRatio = 0.0;\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\n\n            const shelfRadians: number = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n\n        let maxReverbMult = 0.0;\n        if (usesReverb) {\n            //const reverbEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.reverb];\n            //const reverbEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.reverb];\n\n            let useReverbStart: number = instrument.reverb;\n            let useReverbEnd: number = instrument.reverb;\n\n            // Check for mod reverb, instrument level\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\n            }\n            // Check for mod reverb, song scalar\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n            }\n\n            const reverbStart: number = Math.min(1.0, Math.pow(/*reverbEnvelopeStart **/ useReverbStart / Config.reverbRange, 0.667)) * 0.425;\n            const reverbEnd: number = Math.min(1.0, Math.pow(/*reverbEnvelopeEnd   **/ useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\n\n            this.reverbMult = reverbStart;\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\n\n            const shelfRadians: number = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n\n        if (this.tonesAddedInThisTick) {\n            this.attentuationProgress = 0.0;\n            this.flushedSamples = 0;\n            this.flushingDelayLines = false;\n        } else if (!this.flushingDelayLines) {\n            // If this instrument isn't playing tones anymore, the volume can fade out by the\n            // end of the first tick. It's possible for filters and the panning delay line to\n            // continue past the end of the tone but they should have mostly dissipated by the\n            // end of the tick anyway.\n            if (this.attentuationProgress == 0.0) {\n                eqFilterVolumeEnd = 0.0;\n            } else {\n                eqFilterVolumeStart = 0.0;\n                eqFilterVolumeEnd = 0.0;\n            }\n\n            const attenuationThreshold: number = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\n            const halfLifeMult: number = -Math.log2(attenuationThreshold);\n            let delayDuration: number = 0.0;\n\n            if (usesChorus) {\n                delayDuration += Config.chorusMaxDelay;\n            }\n\n            if (usesEcho) {\n                const attenuationPerSecond: number = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n                const echoDuration: number = halfLife * halfLifeMult;\n                delayDuration += echoDuration;\n            }\n\n            if (usesReverb) {\n                const averageMult: number = maxReverbMult * 2.0;\n                const averageReverbDelaySeconds: number = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n                const attenuationPerSecond: number = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n                const reverbDuration: number = halfLife * halfLifeMult;\n                delayDuration += reverbDuration;\n            }\n\n            const secondsInTick: number = samplesPerTick / samplesPerSecond;\n            const progressInTick: number = secondsInTick / delayDuration;\n            const progressAtEndOfTick: number = this.attentuationProgress + progressInTick;\n            if (progressAtEndOfTick >= 1.0) {\n                delayInputMultEnd = 0.0;\n            }\n\n            this.attentuationProgress = progressAtEndOfTick;\n            if (this.attentuationProgress >= 1.0) {\n                this.flushingDelayLines = true;\n            }\n        } else {\n            // Flushing delay lines to zero since the signal has mostly dissipated.\n            eqFilterVolumeStart = 0.0;\n            eqFilterVolumeEnd = 0.0;\n            delayInputMultStart = 0.0;\n            delayInputMultEnd = 0.0;\n\n            let totalDelaySamples: number = 0;\n            if (usesChorus) totalDelaySamples += synth.chorusDelayBufferSize;\n            if (usesEcho) totalDelaySamples += this.echoDelayLineL!.length;\n            if (usesReverb) totalDelaySamples += Config.reverbDelayBufferSize;\n\n            this.flushedSamples += roundedSamplesPerTick;\n            if (this.flushedSamples >= totalDelaySamples) {\n                this.deactivateAfterThisTick = true;\n            }\n        }\n\n        this.eqFilterVolume = eqFilterVolumeStart;\n        this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n        this.delayInputMult = delayInputMultStart;\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\n    }\n\n    public updateWaves(instrument: Instrument, samplesPerSecond: number, edo: number): void {\n        this.volumeScale = 1.0;\n        if (instrument.type == InstrumentType.chip) {\n            this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            this.wave = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\n            this.volumeScale = 0.05;\n        } else if (instrument.type == InstrumentType.noise) {\n            this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n        } else if (instrument.type == InstrumentType.harmonics) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n        } else if (instrument.type == InstrumentType.pickedString) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n        } else if (instrument.type == InstrumentType.spectrum) {\n            this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\n        } else if (instrument.type == InstrumentType.drumset) {\n            for (let i: number = 0; i < Config.drumCount; i++) {\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i, 12));\n            }\n            this.wave = null;\n        } else {\n            this.wave = null;\n        }\n    }\n\n    public getDrumsetWave(pitch: number): Float32Array {\n        if (this.type == InstrumentType.drumset) {\n            return this.drumsetSpectrumWaves[pitch].wave!;\n        } else {\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\n        }\n    }\n\n    public static drumsetIndexReferenceDelta(index: number, edo: number): number {\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6, edo) / 44100;\n    }\n\n    private static _drumsetIndexToSpectrumOctave(index: number, edo: number): number {\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index, edo));\n    }\n}\n\nclass ChannelState {\n    public readonly instruments: InstrumentState[] = [];\n    public muted: boolean = false;\n    public singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n}\n\nexport class Synth {\n\n    private syncSongState(): void {\n        const channelCount: number = this.song!.getChannelCount();\n        for (let i: number = this.channels.length; i < channelCount; i++) {\n            this.channels[i] = new ChannelState();\n        }\n        this.channels.length = channelCount;\n        for (let i: number = 0; i < channelCount; i++) {\n            const channel: Channel = this.song!.channels[i];\n            const channelState: ChannelState = this.channels[i];\n            for (let j: number = channelState.instruments.length; j < channel.instruments.length; j++) {\n                channelState.instruments[j] = new InstrumentState();\n            }\n            channelState.instruments.length = channel.instruments.length;\n\n            if (channelState.muted != channel.muted) {\n                channelState.muted = channel.muted;\n                if (channelState.muted) {\n                    for (const instrumentState of channelState.instruments) {\n                        instrumentState.resetAllEffects();\n                    }\n                }\n            }\n        }\n    }\n\n    public initModFilters(song: Song | null): void {\n        if (song != null) {\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    instrument.tmpEqFilterStart = instrument.eqFilter;\n                    instrument.tmpEqFilterEnd = null;\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\n                    instrument.tmpNoteFilterEnd = null;\n                }\n            }\n        }\n    }\n    public warmUpSynthesizer(song: Song | null): void {\n        // Don't bother to generate the drum waves unless the song actually\n        // uses them, since they may require a lot of computation.\n        if (song != null) {\n            this.syncSongState();\n            const samplesPerTick: number = this.getSamplesPerTick();\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    Synth.getInstrumentSynthFunction(instrument);\n                    instrumentState.vibratoTime = 0;\n                    instrumentState.nextVibratoTime = 0;\n                    instrumentState.envelopeTime = 0;\n                    instrumentState.arpTime = 0;\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond, song.edo);\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n                }\n\n            }\n        }\n        // JummBox needs to run synth functions for at least one sample (for JIT purposes)\n\t\t// before starting audio callbacks to avoid skipping the initial output.\n        var dummyArray = new Float32Array(1);\n        this.isPlayingSong = true;\n        this.synthesize(dummyArray, dummyArray, 1, true);\n        this.isPlayingSong = false;\n    }\n\n    public computeLatestModValues(): void {\n\n        if (this.song != null && this.song.modChannelCount > 0) {\n\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\n            let latestModTimes: (number | null)[] = [];\n            let latestModInsTimes: (number | null)[][][] = [];\n            this.modValues = [];\n            this.nextModValues = [];\n            this.modInsValues = [];\n            this.nextModInsValues = [];\n            this.heldMods = [];\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                latestModInsTimes[channel] = [];\n                this.modInsValues[channel] = [];\n                this.nextModInsValues[channel] = [];\n\n                for (let instrument: number = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\n                    this.modInsValues[channel][instrument] = [];\n                    this.nextModInsValues[channel][instrument] = [];\n                    latestModInsTimes[channel][instrument] = [];\n                }\n            }\n\n            // Find out where we're at in the fraction of the current bar.\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\n\n            // For mod channels, calculate last set value for each mod\n            for (let channelIndex: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\n                if (!(this.song.channels[channelIndex].muted)) {\n\n                    let pattern: Pattern | null;\n\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\n                        pattern = this.song.getPattern(channelIndex, currentBar);\n\n                        if (pattern != null) {\n                            let instrumentIdx: number = pattern.instruments[0];\n                            let instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\n                            let latestPinParts: number[] = [];\n                            let latestPinValues: number[] = [];\n\n                            let partsInBar: number = (currentBar == this.bar)\n                                ? currentPart\n                                : this.findPartsInBar(currentBar);\n\n                            for (const note of pattern.notes) {\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\n                                    if (note.start == partsInBar) { // This can happen with next bar mods, and the value of the aligned note's start pin will be used.\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\n                                    }\n                                    if (note.end <= partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // Set modulator value, if it wasn't set in another pattern already scanned\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                if (latestPinParts[mod] != null) {\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modulators[mod]] as number)) {\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                        }\n                                    }\n                                    else {\n                                        // Generate list of used instruments\n                                        let usedInstruments: number[] = [];\n                                        // All\n                                        if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            for (let i: number = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                                                usedInstruments.push(i);\n                                            }\n                                        }\n                                        // Active\n                                        else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            const tgtPattern: Pattern | null = this.song.getPattern(instrument.modChannels[mod], currentBar);\n                                            if (tgtPattern != null)\n                                                usedInstruments = tgtPattern.instruments;\n                                        } else {\n                                            usedInstruments.push(instrument.modInstruments[mod]);\n                                        }\n                                        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n                                            // Iterate through all used instruments by this modulator\n                                            // Special indices for mod filter targets, since they control multiple things.\n                                            const eqFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index;\n                                            const noteFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                            let modulatorAdjust: number = instrument.modulators[mod];\n                                            if (eqFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\n                                            } else if (noteFilterParam) {\n                                                // Skip all possible indices for eq filter\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\n                                            }\n\n                                            if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]!) {\n\n                                                if (eqFilterParam) {\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];\n                                                    } else {\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpEqFilterStart != null && tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {\n                                                                tgtInstrument.tmpEqFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;\n                                                } else if (noteFilterParam) {\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\n                                                    } else {\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\n                                                }\n                                                else this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);\n\n                                                latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Detects if a modulator is set, but not valid for the current effects/instrument type/filter type\n    // Note, setting 'none' or the intermediary steps when clicking to add a mod, like an unset channel/unset instrument, counts as valid.\n    // TODO: This kind of check is mirrored in SongEditor.ts' whenUpdated. Creates a lot of redundancy for adding new mods. Can be moved into new properties for mods, to avoid this later.\n    public determineInvalidModulators(instrument: Instrument): void {\n        if (this.song == null)\n            return;\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\n            instrument.invalidModulators[mod] = true;\n            // For song modulator, valid if any setting used\n            if (instrument.modChannels[mod] == -1) {\n                if (instrument.modulators[mod] != 0)\n                    instrument.invalidModulators[mod] = false;\n                continue;\n            }\n            const channel: Channel | null = this.song.channels[instrument.modChannels[mod]];\n            if (channel == null) continue;\n            let tgtInstrumentList: Instrument[] = [];\n            if (instrument.modInstruments[mod] >= channel.instruments.length) { // All or active\n                tgtInstrumentList = channel.instruments;\n            } else {\n                tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];\n            }\n            for (let i: number = 0; i < tgtInstrumentList.length; i++) {\n                const tgtInstrument: Instrument | null = tgtInstrumentList[i];\n                if (tgtInstrument == null) continue;\n                const str: string = Config.modulators[instrument.modulators[mod]].name;\n                // Check effects\n                if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))\n                    // Instrument type specific\n                    || (tgtInstrument.type != InstrumentType.fm && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\n                    || ((tgtInstrument.type != InstrumentType.pwm && tgtInstrument.type != InstrumentType.supersaw) && (str == \"pulse width\"))\n                    || ((tgtInstrument.type != InstrumentType.supersaw) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\n                    // Arp check\n                    || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\n                    // EQ Filter check\n                    || (tgtInstrument.eqFilterType && str == \"eq filter\")\n                    || (!tgtInstrument.eqFilterType && (str == \"eq filt cut\" || str == \"eq filt peak\"))\n                    || (str == \"eq filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\n                    // Note Filter check\n                    || (tgtInstrument.noteFilterType && str == \"note filter\")\n                    || (!tgtInstrument.noteFilterType && (str == \"note filt cut\" || str == \"note filt peak\"))\n                    || (str == \"note filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true)))) {\n\n                    instrument.invalidModulators[mod] = false;\n                    i = tgtInstrumentList.length;\n                }\n            }\n\n        }\n    }\n\n    private static operatorAmplitudeCurve(amplitude: number): number {\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n    }\n\n    public samplesPerSecond: number = 44100;\n    public panningDelayBufferSize: number;\n    public panningDelayBufferMask: number;\n    public chorusDelayBufferSize: number;\n    public chorusDelayBufferMask: number;\n    // TODO: reverb\n\n    public song: Song | null = null;\n    public preferLowerLatency: boolean = false; // enable when recording performances from keyboard or MIDI. Takes effect next time you activate audio.\n    public anticipatePoorPerformance: boolean = false; // enable on mobile devices to reduce audio stutter glitches. Takes effect next time you activate audio.\n    public liveInputDuration: number = 0;\n    public liveBassInputDuration: number = 0;\n    public liveInputStarted: boolean = false;\n    public liveBassInputStarted: boolean = false;\n    public liveInputPitches: number[] = [];\n    public liveBassInputPitches: number[] = [];\n    public liveInputChannel: number = 0;\n    public liveBassInputChannel: number = 0;\n    public liveInputInstruments: number[] = [];\n    public liveBassInputInstruments: number[] = [];\n    public loopRepeatCount: number = -1;\n    public volume: number = 1.0;\n    public enableMetronome: boolean = false;\n    public countInMetronome: boolean = false;\n    public renderingSong: boolean = false;\n    public heldMods: HeldMod[] = [];\n    private wantToSkip: boolean = false;\n    private playheadInternal: number = 0.0;\n    private bar: number = 0;\n    private prevBar: number | null = null;\n    private nextBar: number | null = null;\n    private beat: number = 0;\n    private part: number = 0;\n    private tick: number = 0;\n    public isAtStartOfTick: boolean = true;\n    public isAtEndOfTick: boolean = true;\n    public tickSampleCountdown: number = 0;\n    private modValues: (number | null)[] = [];\n    private modInsValues: (number | null)[][][] = [];\n    private nextModValues: (number | null)[] = [];\n    private nextModInsValues: (number | null)[][][] = [];\n    private isPlayingSong: boolean = false;\n    private isRecording: boolean = false;\n    private liveInputEndTime: number = 0.0;\n    private browserAutomaticallyClearsAudioBuffer: boolean = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\n\n    public static readonly tempFilterStartCoefficients: FilterCoefficients = new FilterCoefficients();\n    public static readonly tempFilterEndCoefficients: FilterCoefficients = new FilterCoefficients();\n    private tempDrumSetControlPoint: FilterControlPoint = new FilterControlPoint();\n    public tempFrequencyResponse: FrequencyResponse = new FrequencyResponse();\n    public loopBarStart: number = -1;\n    public loopBarEnd: number = -1;\n\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\n    private static readonly effectsFunctionCache: Function[] = Array(1 << 7).fill(undefined); // keep in sync with the number of post-process effects.\n    private static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\n\n    private readonly channels: ChannelState[] = [];\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\n    private readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\n\n    private startedMetronome: boolean = false;\n    private metronomeSamplesRemaining: number = -1;\n    private metronomeAmplitude: number = 0.0;\n    private metronomePrevAmplitude: number = 0.0;\n    private metronomeFilter: number = 0.0;\n    private limit: number = 0.0;\n\n    private tempMonoInstrumentSampleBuffer: Float32Array | null = null;\n\n    private audioCtx: any | null = null;\n    private scriptNode: any | null = null;\n\n    public get playing(): boolean {\n        return this.isPlayingSong;\n    }\n\n    public get recording(): boolean {\n        return this.isRecording;\n    }\n\n    public get playhead(): number {\n        return this.playheadInternal;\n    }\n\n    public set playhead(value: number) {\n        if (this.song != null) {\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n            let remainder: number = this.playheadInternal;\n            this.bar = Math.floor(remainder);\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\n            this.beat = Math.floor(remainder);\n            remainder = Config.partsPerBeat * (remainder - this.beat);\n            this.part = Math.floor(remainder);\n            remainder = Config.ticksPerPart * (remainder - this.part);\n            this.tick = Math.floor(remainder);\n            this.tickSampleCountdown = 0;\n            this.isAtStartOfTick = true;\n            this.prevBar = null;\n        }\n    }\n\n    public getSamplesPerBar(): number {\n        if (this.song == null) throw new Error();\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n    }\n\n    public getTicksIntoBar(): number {\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n    }\n    public getCurrentPart(): number {\n        return (this.beat * Config.partsPerBeat + this.part);\n    }\n\n    private findPartsInBar(bar: number): number {\n        if (this.song == null) return 0;\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n            if (pattern != null) {\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                        for (const note of pattern.notes) {\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                // Find the earliest next bar note.\n                                if (partsInBar > note.start)\n                                    partsInBar = note.start;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return partsInBar;\n    }\n\n    // Returns the total samples in the song\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\n        if (this.song == null)\n            return -1;\n\n        // Compute the window to be checked (start bar to end bar)\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\n        let hasTempoMods: boolean = false;\n        let hasNextBarMods: boolean = false;\n        let prevTempo: number = this.song.tempo;\n\n        // Determine if any tempo or next bar mods happen anywhere in the window\n        for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n            for (let bar: number = startBar; bar < endBar; bar++) {\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                if (pattern != null) {\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                            hasTempoMods = true;\n                        }\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                            hasNextBarMods = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\n        if (startBar > 0) {\n            let latestTempoPin: number | null = null;\n            let latestTempoValue: number = 0;\n\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\n                for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                    let pattern = this.song.getPattern(channel, bar);\n\n                    if (pattern != null) {\n                        let instrumentIdx: number = pattern.instruments[0];\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n\n                        let partsInBar: number = this.findPartsInBar(bar);\n\n                        for (const note of pattern.notes) {\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\n                                    if (note.end <= partsInBar) {\n                                        latestTempoPin = note.end;\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestTempoPin = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\n                if (latestTempoPin != null) {\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                    bar = -1;\n                }\n            }\n        }\n\n        if (hasTempoMods || hasNextBarMods) {\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\n            let bar: number = startBar;\n            let ended: boolean = false;\n            let totalSamples: number = 0;\n\n            while (!ended) {\n                // Compute the subsection of the pattern that will play\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\n                let currentPart: number = 0;\n\n                if (hasNextBarMods) {\n                    partsInBar = this.findPartsInBar(bar);\n                }\n\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\n                if (hasTempoMods) {\n                    let foundMod: boolean = false;\n                    for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                        if (foundMod == false) {\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                            if (pattern != null) {\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\n                                        foundMod = true;\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                                        for (const note of pattern.notes) {\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                                // Compute samples up to this note\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                                                if (note.start < partsInBar) {\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\n                                                        // Compute samples up to this pin\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\n                                                            const prevPinTempo: number = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            let currPinTempo: number = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            }\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\n\n                                                            if (currPinTempo != prevPinTempo) {\n\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\n                                                                // The starting formula is\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\n                                                                //\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\n                                                                //\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\n\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\n\n                                                            }\n                                                            else {\n\n                                                                // No tempo change between the two pins.\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\n\n                                                            }\n                                                            prevTempo = currPinTempo;\n                                                        }\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Compute samples for the rest of the bar\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                bar++;\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\n                    bar = this.song.loopStart;\n                    if (loop > 0) loop--;\n                }\n                if (bar >= endBar) {\n                    ended = true;\n                }\n\n            }\n\n            return Math.ceil(totalSamples);\n        }\n        else {\n            // No tempo or next bar mods... phew! Just calculate normally.\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\n        }\n    }\n\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\n        if (this.song == null) throw new Error();\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\n        if (enableIntro) bars += this.song.loopStart;\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n        return bars;\n    }\n\n    constructor(song: Song | string | null = null) {\n        this.computeDelayBufferSizes();\n        if (song != null) this.setSong(song);\n    }\n\n    public setSong(song: Song | string): void {\n        if (typeof (song) == \"string\") {\n            this.song = new Song(song);\n        } else if (song instanceof Song) {\n            this.song = song;\n        }\n        this.prevBar = null;\n    }\n\n    private computeDelayBufferSizes(): void {\n        this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n        this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n    }\n\n    private activateAudio(): void {\n        const bufferSize: number = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\n            if (this.scriptNode != null) this.deactivateAudio();\n            const latencyHint: string = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\n            this.samplesPerSecond = this.audioCtx.sampleRate;\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2); // bufferSize samples per callback buffer, 0 input channels, 2 output channels (left/right)\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\n            this.scriptNode.channelCountMode = 'explicit';\n            this.scriptNode.channelInterpretation = 'speakers';\n            this.scriptNode.connect(this.audioCtx.destination);\n\n            this.computeDelayBufferSizes();\n        }\n        this.audioCtx.resume();\n    }\n\n    private deactivateAudio(): void {\n        if (this.audioCtx != null && this.scriptNode != null) {\n            this.scriptNode.disconnect(this.audioCtx.destination);\n            this.scriptNode = null;\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\n            this.audioCtx = null;\n        }\n    }\n\n    public maintainLiveInput(): void {\n        this.activateAudio();\n        this.liveInputEndTime = performance.now() + 10000.0;\n    }\n\n    public play(): void {\n        if (this.isPlayingSong) return;\n        this.initModFilters(this.song);\n        this.computeLatestModValues();\n        this.activateAudio();\n        this.warmUpSynthesizer(this.song);\n        this.isPlayingSong = true;\n    }\n\n    public pause(): void {\n        if (!this.isPlayingSong) return;\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.modValues = [];\n        this.nextModValues = [];\n        this.heldMods = [];\n        if (this.song != null) {\n            this.song.inVolumeCap = 0.0;\n            this.song.outVolumeCap = 0.0;\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                this.modInsValues[channelIndex] = [];\n                this.nextModInsValues[channelIndex] = [];\n            }\n        }\n    }\n\n    public startRecording(): void {\n        this.preferLowerLatency = true;\n        this.isRecording = true;\n        this.play();\n    }\n\n    public resetEffects(): void {\n        this.limit = 0.0;\n        this.freeAllTones();\n        if (this.song != null) {\n            for (const channelState of this.channels) {\n                for (const instrumentState of channelState.instruments) {\n                    instrumentState.resetAllEffects();\n                }\n            }\n        }\n    }\n\n    public setModValue(volumeStart: number, volumeEnd: number, channelIndex: number, instrumentIndex: number, setting: number): number {\n        let val: number = volumeStart + Config.modulators[setting].convertRealFactor;\n        let nextVal: number = volumeEnd + Config.modulators[setting].convertRealFactor;\n        if (Config.modulators[setting].forSong) {\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\n                this.modValues[setting] = val;\n                this.nextModValues[setting] = nextVal;\n            }\n        } else {\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\n            }\n        }\n\n        return val;\n    }\n\n    public getModValue(setting: number, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\n        const forSong: boolean = Config.modulators[setting].forSong;\n        if (forSong) {\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\n            }\n        } else if (channel != undefined && instrument != undefined) {\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\n            }\n        }\n        return -1;\n    }\n\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\n    public isAnyModActive(channel: number, instrument: number): boolean {\n        for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n            if ((this.modValues != undefined && this.modValues[setting] != null)\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public unsetMod(setting: number, channel?: number, instrument?: number) {\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\n            this.modValues[setting] = null;\n            this.nextModValues[setting] = null;\n            for (let i: number = 0; i < this.heldMods.length; i++) {\n                if (channel != undefined && instrument != undefined) {\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                } else {\n                    if (this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n            }\n            if (channel != undefined && instrument != undefined) {\n                this.modInsValues[channel][instrument][setting] = null;\n                this.nextModInsValues[channel][instrument][setting] = null;\n            }\n        }\n    }\n\n    public isFilterModActive(forNoteFilter: boolean, channelIdx: number, instrumentIdx: number) {\n        const instrument: Instrument = this.song!.channels[channelIdx].instruments[instrumentIdx];\n\n        if (forNoteFilter) {\n            if (instrument.noteFilterType)\n                return false;\n            if (instrument.tmpNoteFilterEnd != null)\n                return true;\n        }\n        else {\n            if (instrument.eqFilterType)\n                return false;\n            if (instrument.tmpEqFilterEnd != null)\n                return true;\n        }\n        return false\n    }\n\n    public isModActive(setting: number, channel?: number, instrument?: number): boolean {\n        const forSong: boolean = Config.modulators[setting].forSong;\n        if (forSong) {\n            return (this.modValues != undefined && this.modValues[setting] != null);\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\n            return (this.modInsValues[channel][instrument][setting] != null);\n        }\n        return false;\n    }\n\n    // Force a modulator to be held at the given volumeStart for a brief duration.\n    public forceHoldMods(volumeStart: number, channelIndex: number, instrumentIndex: number, setting: number): void {\n        let found: boolean = false;\n        for (let i: number = 0; i < this.heldMods.length; i++) {\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\n                this.heldMods[i].volume = volumeStart;\n                this.heldMods[i].holdFor = 24;\n                found = true;\n            }\n        }\n        // Default: hold for 24 ticks / 12 parts (half a beat).\n        if (!found)\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\n    }\n\n    public snapToStart(): void {\n        this.bar = 0;\n        this.resetEffects();\n        this.snapToBar();\n    }\n\n    public goToBar(bar: number): void {\n        this.bar = bar;\n        this.resetEffects();\n        this.playheadInternal = this.bar;\n    }\n\n    public snapToBar(): void {\n        this.playheadInternal = this.bar;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = 0;\n    }\n\n    public jumpIntoLoop(): void {\n        if (!this.song) return;\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n            const oldBar: number = this.bar;\n            this.bar = this.song.loopStart;\n            this.playheadInternal += this.bar - oldBar;\n\n            if (this.playing)\n                this.computeLatestModValues();\n        }\n    }\n\n    public goToNextBar(): void {\n        if (!this.song) return;\n        this.prevBar = this.bar;\n        const oldBar: number = this.bar;\n        this.bar++;\n        if (this.bar >= this.song.barCount) {\n            this.bar = 0;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    public goToPrevBar(): void {\n        if (!this.song) return;\n        this.prevBar = null;\n        const oldBar: number = this.bar;\n        this.bar--;\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\n            this.bar = this.song.barCount - 1;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    private getNextBar(): number {\n        let nextBar: number = this.bar + 1;\n        if (this.isRecording) {\n            if (nextBar >= this.song!.barCount) {\n                nextBar = this.song!.barCount - 1;\n            }\n        } else if (this.bar == this.loopBarEnd && !this.renderingSong) {\n            nextBar = this.loopBarStart;\n        }\n        else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd+1, this.song!.loopStart + this.song!.loopLength)) {\n            nextBar = this.song!.loopStart;\n        }\n        return nextBar;\n    }\n\n    public skipBar(): void {\n        if (!this.song) return;\n        const samplesPerTick: number = this.getSamplesPerTick();\n        this.prevBar = this.bar; // Bugfix by LeoV\n        if (this.loopBarEnd != this.bar)\n            this.bar++;\n        else {\n            this.bar = this.loopBarStart;\n        }\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = samplesPerTick;\n        this.isAtStartOfTick = true;\n\n        if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {\n            this.bar = this.song.loopStart;\n            if (this.loopBarStart != -1)\n                this.bar = this.loopBarStart;\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\n        }\n\n    }\n\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\n        const outputBuffer = audioProcessingEvent.outputBuffer;\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\n\n        if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\n            // If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\n            this.browserAutomaticallyClearsAudioBuffer = false;\n        }\n        if (!this.browserAutomaticallyClearsAudioBuffer) {\n            // If this browser does not clear the buffer automatically, do so manually before continuing.\n            const length: number = outputBuffer.length;\n            for (let i: number = 0; i < length; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n        }\n\n        if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\n            this.deactivateAudio();\n        } else {\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n        }\n    }\n\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\n        if (this.song == null) {\n            for (let i: number = 0; i < outputBufferLength; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n            this.deactivateAudio();\n            return;\n        }\n\n        const song: Song = this.song;\n        this.song.inVolumeCap = 0.0 // Reset volume cap for this run\n        this.song.outVolumeCap = 0.0;\n\n        let samplesPerTick: number = this.getSamplesPerTick();\n        let ended: boolean = false;\n\n        // Check the bounds of the playhead:\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\n            this.tickSampleCountdown = samplesPerTick;\n            this.isAtStartOfTick = true;\n        }\n        if (playSong) {\n            if (this.beat >= song.beatsPerBar) {\n                this.beat = 0;\n                this.part = 0;\n                this.tick = 0;\n                this.tickSampleCountdown = samplesPerTick;\n                this.isAtStartOfTick = true;\n\n                this.prevBar = this.bar;\n                this.bar = this.getNextBar();\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n            }\n            if (this.bar >= song.barCount) {\n                this.bar = 0;\n                if (this.loopRepeatCount != -1) {\n                    ended = true;\n                    this.pause();\n                }\n            }\n        }\n\n        //const synthStartTime: number = performance.now();\n\n        this.syncSongState();\n\n        if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\n            this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\n        }\n\n        // Post processing parameters:\n        const volume: number = +this.volume;\n        const limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\n        const limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\n        let limit: number = +this.limit;\n        let skippedBars: number[] = [];\n        let firstSkippedBufferIndex: number = -1;\n\n        let bufferIndex: number = 0;\n        while (bufferIndex < outputBufferLength && !ended) {\n\n            this.nextBar = this.getNextBar();\n            if (this.nextBar >= song.barCount) this.nextBar = null;\n\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\n            const samplesLeftInTick: number = Math.ceil(this.tickSampleCountdown);\n            const runLength: number = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n            const runEnd: number = bufferIndex + runLength;\n            \n            // Handle mod synth\n            if (this.isPlayingSong || this.renderingSong) {\n\n                // First modulation pass. Determines active tones.\n                // Runs everything but Dot X/Y mods, to let them always come after morph.\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel: Channel = song.channels[channelIndex];\n                    const channelState: ChannelState = this.channels[channelIndex];\n\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\n\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone: Tone = instrumentState.activeModTones.get(i);\n                            const channel: Channel = song.channels[channelIndex];\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                continue;\n                            }\n\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                        }\n                    }\n                }\n\n                // Second modulation pass.\n                // Only for Dot X/Y mods.\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel: Channel = song.channels[channelIndex];\n                    const channelState: ChannelState = this.channels[channelIndex];\n\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone: Tone = instrumentState.activeModTones.get(i);\n                            const channel: Channel = song.channels[channelIndex];\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                            }\n\n                        }\n                    }\n                }\n            }\n\n            // Handle next bar mods if they were set\n            if (this.wantToSkip) {\n                // Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.\n                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.\n                let barVisited: boolean = skippedBars.includes(this.bar);\n                if (barVisited && bufferIndex == firstSkippedBufferIndex) {\n                    this.pause();\n                    return;\n                }\n                if (firstSkippedBufferIndex == -1) {\n                    firstSkippedBufferIndex = bufferIndex;\n                }\n                if (!barVisited)\n                    skippedBars.push(this.bar);\n\n                this.wantToSkip = false;\n                this.skipBar();\n\n                continue;\n            }\n\n            for (let channelIndex: number = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\n                const channel: Channel = song.channels[channelIndex];\n                const channelState: ChannelState = this.channels[channelIndex];\n\n                if (this.isAtStartOfTick) {\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\n                }\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\n                    const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n\n                    if (this.isAtStartOfTick) {\n                        let tonesPlayedInThisInstrument: number = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\n\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone: Tone = instrumentState.releasedTones.get(i);\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                                continue;\n                            }\n                            const shouldFadeOutFast: boolean = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\n                            tonesPlayedInThisInstrument++;\n                        }\n\n                        if (instrumentState.awake) {\n                            if (!instrumentState.computed) {\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\n                            }\n\n                            instrumentState.computed = false;\n                            //instrumentState.envelopeComputer.clearEnvelopes();\n                        }\n                    }\n\n                    for (let i: number = 0; i < instrumentState.activeTones.count(); i++) {\n                        const tone: Tone = instrumentState.activeTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i: number = 0; i < instrumentState.liveInputTones.count(); i++) {\n                        const tone: Tone = instrumentState.liveInputTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                        const tone: Tone = instrumentState.releasedTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    if (instrumentState.awake) {\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n                    }\n\n                    // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\n\n                    const tickSampleCountdown: number = this.tickSampleCountdown;\n                    const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\n                    const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n                    const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n                    const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\n                    const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\n                    const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n                    const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\n\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\n\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\n                    }\n\n                    if (useVibratoSpeed == 0) {\n                        instrumentState.vibratoTime = 0;\n                        instrumentState.nextVibratoTime = 0;\n                    }\n                    else {\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\n                    }\n                }\n            }\n\n            if (this.enableMetronome || this.countInMetronome) {\n                if (this.part == 0) {\n                    if (!this.startedMetronome) {\n                        const midBeat: boolean = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\n                        const periods: number = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\n                        const hz: number = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\n                        const amplitude: number = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\n                        const samplesPerPeriod: number = this.samplesPerSecond / hz;\n                        const radiansPerSample: number = Math.PI * 2.0 / samplesPerPeriod;\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\n                        this.metronomePrevAmplitude = 0.0;\n\n                        this.startedMetronome = true;\n                    }\n                    if (this.metronomeSamplesRemaining > 0) {\n                        const stopIndex: number = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\n                        for (let i: number = bufferIndex; i < stopIndex; i++) {\n                            outputDataL[i] += this.metronomeAmplitude;\n                            outputDataR[i] += this.metronomeAmplitude;\n                            const tempAmplitude: number = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\n                            this.metronomeAmplitude = tempAmplitude;\n                        }\n                    }\n                } else {\n                    this.startedMetronome = false;\n                }\n            }\n\n            // Post processing:\n            for (let i: number = bufferIndex; i < runEnd; i++) {\n                // A compressor/limiter.\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\n                const abs: number = absL > absR ? absL : absR;\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\n                const limitRange: number = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\n                // Determine the target amplification based on the range of the curve\n                const limitTarget: number =\n                    (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\n                    + (+(limitRange == 1)) * (1.05)\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\n                // Move the limit towards the target\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n                outputDataL[i] = sampleL * limitedVolume;\n                outputDataR[i] = sampleR * limitedVolume;\n\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\n            }\n\n            bufferIndex += runLength;\n\n            this.isAtStartOfTick = false;\n            this.tickSampleCountdown -= runLength;\n            if (this.tickSampleCountdown <= 0) {\n                this.isAtStartOfTick = true;\n\n                // Track how long tones have been released, and free them if there are too many.\n                // Also reset awake InstrumentStates that didn't have any Tones during this tick.\n                for (const channelState of this.channels) {\n                    for (const instrumentState of channelState.instruments) {\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone: Tone = instrumentState.releasedTones.get(i);\n                            if (tone.isOnLastTick) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                            } else {\n                                tone.ticksSinceReleased++;\n                            }\n                        }\n                        if (instrumentState.deactivateAfterThisTick) {\n                            instrumentState.deactivate();\n                        }\n                        instrumentState.tonesAddedInThisTick = false;\n                    }\n                }\n\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let instrumentState: InstrumentState = this.channels[channel].instruments[instrumentIdx];\n  \n                        // Update arpeggio time, which is used to calculate arpeggio position\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\n                            useArpeggioSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length-1, this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false)));\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            } else {\n                                // Linear interpolate arpeggio values\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        else {\n                            instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                        }\n\n                        // Update envelope time, which is used to calculate (all envelopes') position\n                        let useEnvelopeSpeed: number = instrument.envelopeSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\n                            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length-1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\n                            if (Number.isInteger(useEnvelopeSpeed)) {\n                                instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];\n                            } else {\n                                // Linear interpolate envelope values\n                                instrumentState.envelopeTime += (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];\n                            }\n                        }\n                        else {\n                            instrumentState.envelopeTime += Config.arpSpeedScale[useEnvelopeSpeed];\n                        }\n                    }\n                }\n\n                // Update next-used filters after each run\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        if (instrument.tmpEqFilterEnd != null) {\n                            instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;\n                        } else {\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\n                        }\n                        if (instrument.tmpNoteFilterEnd != null) {\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\n                        } else {\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                        }\n                    }\n                }\n\n                this.tick++;\n                this.tickSampleCountdown += samplesPerTick;\n                if (this.tick == Config.ticksPerPart) {\n                    this.tick = 0;\n                    this.part++;\n                    this.liveInputDuration--;\n                    this.liveBassInputDuration--;\n                    // Decrement held modulator counters after each run\n                    for (let i: number = 0; i < this.heldMods.length; i++) {\n                        this.heldMods[i].holdFor--;\n                        if (this.heldMods[i].holdFor <= 0) {\n                            this.heldMods.splice(i, 1);\n                        }\n                    }\n\n                    if (this.part == Config.partsPerBeat) {\n                        this.part = 0;\n\n                        if (playSong) {\n                            this.beat++;\n                            if (this.beat == song.beatsPerBar) {\n                                // bar changed, reset for next bar:\n                                this.beat = 0;\n\n                                if (this.countInMetronome) {\n                                    this.countInMetronome = false;\n                                } else {\n                                    this.prevBar = this.bar;\n                                    this.bar = this.getNextBar();\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n                                    if (this.bar >= song.barCount) {\n                                        this.bar = 0;\n                                        if (this.loopRepeatCount != -1) {\n                                            ended = true;\n                                            this.resetEffects();\n                                            this.pause();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Update mod values so that next values copy to current values\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\n                    this.modValues[setting] = this.nextModValues[setting];\n            }\n\n            // Set samples per tick if song tempo mods changed it\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n                samplesPerTick = this.getSamplesPerTick();\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\n            }\n\n            // Bound LFO times to be within their period (to keep values from getting large)\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    const instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\n                    instrumentState.envelopeTime = (instrumentState.envelopeTime % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\n                }\n            }\n\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrument: number = 0; instrument < this.song.getMaxInstrumentsPerChannel(); instrument++) {\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Optimization: Avoid persistent reverb values in the float denormal range.\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\n        this.limit = limit;\n\n        if (playSong && !this.countInMetronome) {\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n        }\n\n        /*\n        const synthDuration: number = performance.now() - synthStartTime;\n        // Performance measurements:\n        samplesAccumulated += outputBufferLength;\n        samplePerformance += synthDuration;\n    \t\n        if (samplesAccumulated >= 44100 * 4) {\n            const secondsGenerated = samplesAccumulated / 44100;\n            const secondsRequired = samplePerformance / 1000;\n            const ratio = secondsRequired / secondsGenerated;\n            console.log(ratio);\n            samplePerformance = 0;\n            samplesAccumulated = 0;\n        }\n        */\n    }\n\n    private freeTone(tone: Tone): void {\n        this.tonePool.pushBack(tone);\n    }\n\n    private newTone(): Tone {\n        if (this.tonePool.count() > 0) {\n            const tone: Tone = this.tonePool.popBack();\n            tone.freshlyAllocated = true;\n            return tone;\n        }\n        return new Tone();\n    }\n\n    private releaseTone(instrumentState: InstrumentState, tone: Tone): void {\n        instrumentState.releasedTones.pushFront(tone);\n        tone.atNoteStart = false;\n        tone.passedEndOfNote = true;\n    }\n\n    private freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\n        instrumentState.releasedTones.remove(toneIndex);\n    }\n\n    public freeAllTones(): void {\n        for (const channelState of this.channels) {\n            for (const instrumentState of channelState.instruments) {\n                while (instrumentState.activeTones.count() > 0) this.freeTone(instrumentState.activeTones.popBack());\n                while (instrumentState.activeModTones.count() > 0) this.freeTone(instrumentState.activeModTones.popBack());\n                while (instrumentState.releasedTones.count() > 0) this.freeTone(instrumentState.releasedTones.popBack());\n                while (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\n            }\n        }\n    }\n\n    private determineLiveInputTones(song: Song, channelIndex: number, samplesPerTick: number): void {\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const pitches: number[] = this.liveInputPitches;\n        const bassPitches: number[] = this.liveBassInputPitches;\n\n        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n            const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.liveInputTones;\n            let toneCount: number = 0;\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument: Instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i: number = 0; i < pitches.length; i++) {\n                        tone.pitches[i] = pitches[i];\n                    }\n                    tone.pitchCount = pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition: Transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\n\n                    for (let i: number = 0; i < pitches.length; i++) {\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = pitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = pitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument: Instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i: number = 0; i < bassPitches.length; i++) {\n                        tone.pitches[i] = bassPitches[i];\n                    }\n                    tone.pitchCount = bassPitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveBassInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition: Transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\n\n                    for (let i: number = 0; i < bassPitches.length; i++) {\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = bassPitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = bassPitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveBassInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            while (toneList.count() > toneCount) {\n                this.releaseTone(instrumentState, toneList.popBack());\n            }\n\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\n        }\n\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n    }\n\n    // Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\n    // seamless transition across patterns, otherwise returns null.\n    private adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean): Chord | null {\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n            // The adjacent pattern does not contain the same instrument as the current pattern.\n\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n                // The current or adjacent pattern contains more than one instrument, don't bother\n                // trying to connect them.\n                return null;\n            }\n            // Otherwise, the two patterns each contain one instrument, but not the same instrument.\n            // Try to connect them.\n            const otherInstrument: Instrument = channel.instruments[otherPattern.instruments[0]];\n\n            if (forceContinue) {\n                // Even non-seamless instruments can be connected across patterns if forced.\n                return otherInstrument.getChord();\n            }\n\n            // Otherwise, check that both instruments are seamless across patterns.\n            const otherTransition: Transition = otherInstrument.getTransition();\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n                return otherInstrument.getChord();\n            } else {\n                return null;\n            }\n        } else {\n            // If both patterns contain the same instrument, check that it is seamless across patterns.\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n        }\n    }\n\n    public static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\n        if (firstNote.pitches.length != secondNote.pitches.length) return false;\n        const firstNoteInterval: number = firstNote.pins[firstNote.pins.length - 1].interval;\n        for (const pitch of firstNote.pitches) {\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\n        }\n        return true;\n    }\n\n    private moveTonesIntoOrderedTempMatchedList(toneList: Deque<Tone>, notePitches: number[]): void {\n        // The tones are about to seamlessly transition to a new note. The pitches\n        // from the old note may or may not match any of the pitches in the new\n        // note, and not necessarily in order, but if any do match, they'll sound\n        // better if those tones continue to have the same pitch. Attempt to find\n        // the right spot for each old tone in the new chord if possible.\n\n        for (let i: number = 0; i < toneList.count(); i++) {\n            const tone: Tone = toneList.get(i);\n            const pitch: number = tone.pitches[0] + tone.lastInterval;\n            for (let j: number = 0; j < notePitches.length; j++) {\n                if (notePitches[j] == pitch) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    toneList.remove(i);\n                    i--;\n                    break;\n                }\n            }\n        }\n\n        // Any tones that didn't get matched should just fill in the gaps.\n        while (toneList.count() > 0) {\n            const tone: Tone = toneList.popFront();\n            for (let j: number = 0; j < this.tempMatchedPitchTones.length; j++) {\n                if (this.tempMatchedPitchTones[j] == null) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    break;\n                }\n            }\n        }\n    }\n\n    private determineCurrentActiveTones(song: Song, channelIndex: number, samplesPerTick: number, playSong: boolean): void {\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\n        const currentPart: number = this.getCurrentPart();\n        const currentTick: number = this.tick + Config.ticksPerPart * currentPart;\n\n        if (playSong && song.getChannelIsMod(channelIndex)) {\n\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\n            let notes: (Note | null)[] = [];\n            let prevNotes: (Note | null)[] = [];\n            let nextNotes: (Note | null)[] = [];\n            let fillCount: number = Config.modCount;\n            while (fillCount--) {\n                notes.push(null);\n                prevNotes.push(null);\n                nextNotes.push(null);\n            }\n\n            if (pattern != null && !channel.muted) {\n                for (let i: number = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        // Actually need to check which note starts closer to the start of this note.\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        // Actually need to check which note starts closer to the end of this note.\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                }\n            }\n\n            let modToneCount: number = 0;\n            const newInstrumentIndex: number = (song.patternInstruments && (pattern != null)) ? pattern!.instruments[0] : 0;\n            const instrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.activeModTones;\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                if (notes[mod] != null) {\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\n\n                }\n\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n\n                if (notes[mod] != null) {\n                    let prevNoteForThisInstrument: Note | null = prevNotes[mod];\n                    let nextNoteForThisInstrument: Note | null = nextNotes[mod];\n\n                    let forceContinueAtStart: boolean = false;\n                    let forceContinueAtEnd: boolean = false;\n                    const atNoteStart: boolean = (Config.ticksPerPart * notes[mod]!.start == currentTick) && this.isAtStartOfTick;\n                    let tone: Tone;\n                    if (toneList.count() <= modToneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (atNoteStart && (prevNoteForThisInstrument == null)) {\n                        const oldTone: Tone = toneList.get(modToneCount);\n                        if (oldTone.isOnLastTick) {\n                            this.freeTone(oldTone);\n                        } else {\n                            this.releaseTone(instrumentState, oldTone);\n                        }\n                        tone = this.newTone();\n                        toneList.set(modToneCount, tone);\n                    } else {\n                        tone = toneList.get(modToneCount);\n                    }\n                    modToneCount++;\n\n                    for (let i: number = 0; i < notes[mod]!.pitches.length; i++) {\n                        tone.pitches[i] = notes[mod]!.pitches[i];\n                    }\n                    tone.pitchCount = notes[mod]!.pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = newInstrumentIndex;\n                    tone.note = notes[mod];\n                    tone.noteStartPart = notes[mod]!.start;\n                    tone.noteEndPart = notes[mod]!.end;\n                    tone.prevNote = prevNoteForThisInstrument;\n                    tone.nextNote = nextNoteForThisInstrument;\n                    tone.prevNotePitchIndex = 0;\n                    tone.nextNotePitchIndex = 0;\n                    tone.atNoteStart = atNoteStart;\n                    tone.passedEndOfNote = false;\n                    tone.forceContinueAtStart = forceContinueAtStart;\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\n                }\n            }\n            // Automatically free or release seamless tones if there's no new note to take over.\n            while (toneList.count() > modToneCount) {\n                const tone: Tone = toneList.popBack();\n                const channel: Channel = song.channels[channelIndex];\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n                    this.releaseTone(instrumentState, tone);\n                } else {\n                    this.freeTone(tone);\n                }\n            }\n\n        }\n        else if (!song.getChannelIsMod(channelIndex)) {\n\n            let note: Note | null = null;\n            let prevNote: Note | null = null;\n            let nextNote: Note | null = null;\n\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\n                for (let i: number = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        prevNote = pattern.notes[i];\n                    } else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        note = pattern.notes[i];\n                    } else if (pattern.notes[i].start > currentPart) {\n                        nextNote = pattern.notes[i];\n                        break;\n                    }\n                }\n\n                if (note != null) {\n                    if (prevNote != null && prevNote.end != note.start) prevNote = null;\n                    if (nextNote != null && nextNote.start != note.end) nextNote = null;\n                }\n            }\n\n            // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n                const newInstrumentIndex: number = song.patternInstruments ? pattern.instruments[0] : 0;\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeTones.count() > 0) {\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n            } else {\n                channelState.singleSeamlessInstrument = null;\n            }\n\n            for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                const toneList: Deque<Tone> = instrumentState.activeTones;\n                let toneCount: number = 0;\n                if ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\n                    let prevNoteForThisInstrument: Note | null = prevNote;\n                    let nextNoteForThisInstrument: Note | null = nextNote;\n\n                    const partsPerBar: Number = Config.partsPerBeat * song.beatsPerBar;\n                    const transition: Transition = instrument.getTransition();\n                    const chord: Chord = instrument.getChord();\n                    let forceContinueAtStart: boolean = false;\n                    let forceContinueAtEnd: boolean = false;\n                    let tonesInPrevNote: number = 0;\n                    let tonesInNextNote: number = 0;\n                    if (note.start == 0) {\n                        // If the beginning of the note coincides with the beginning of the pattern,\n                        let prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n                        if (prevPattern != null) {\n                            const lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n                            if (lastNote != null && lastNote.end == partsPerBar) {\n                                const patternForcesContinueAtStart: boolean = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    prevNoteForThisInstrument = lastNote;\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                                    forceContinueAtStart = patternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (prevNoteForThisInstrument != null) {\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                    }\n                    if (note.end == partsPerBar) {\n                        // If the end of the note coincides with the end of the pattern, look for an\n                        // adjacent note at the beginning of the next pattern.\n                        let nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n                        if (nextPattern != null) {\n                            const firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n                            if (firstNote != null && firstNote.start == 0) {\n                                const nextPatternForcesContinueAtStart: boolean = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    nextNoteForThisInstrument = firstNote;\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (nextNoteForThisInstrument != null) {\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                    }\n\n                    if (chord.singleTone) {\n                        const atNoteStart: boolean = (Config.ticksPerPart * note.start == currentTick);\n                        let tone: Tone;\n                        if (toneList.count() <= toneCount) {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        } else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n                            const oldTone: Tone = toneList.get(toneCount);\n                            if (oldTone.isOnLastTick) {\n                                this.freeTone(oldTone);\n                            } else {\n                                this.releaseTone(instrumentState, oldTone);\n                            }\n                            tone = this.newTone();\n                            toneList.set(toneCount, tone);\n                        } else {\n                            tone = toneList.get(toneCount);\n                        }\n                        toneCount++;\n\n                        for (let i: number = 0; i < note.pitches.length; i++) {\n                            tone.pitches[i] = note.pitches[i];\n                        }\n                        tone.pitchCount = note.pitches.length;\n                        tone.chordSize = 1;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = note;\n                        tone.noteStartPart = note.start;\n                        tone.noteEndPart = note.end;\n                        tone.prevNote = prevNoteForThisInstrument;\n                        tone.nextNote = nextNoteForThisInstrument;\n                        tone.prevNotePitchIndex = 0;\n                        tone.nextNotePitchIndex = 0;\n                        tone.atNoteStart = atNoteStart;\n                        tone.passedEndOfNote = false;\n                        tone.forceContinueAtStart = forceContinueAtStart;\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    } else {\n                        const transition: Transition = instrument.getTransition();\n\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\n                        }\n\n                        let strumOffsetParts: number = 0;\n                        for (let i: number = 0; i < note.pitches.length; i++) {\n\n                            let prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n                            let noteForThisTone: Note = note;\n                            let nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n                            let noteStartPart: number = noteForThisTone.start + strumOffsetParts;\n                            let passedEndOfNote: boolean = false;\n\n                            // Strumming may mean that a note's actual start time may be after the\n                            // note's displayed start time. If the note start hasn't been reached yet,\n                            // carry over the previous tone if available and seamless, otherwise skip\n                            // the new tone until it is ready to start.\n                            if (noteStartPart > currentPart) {\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n                                    // Continue the previous note's chord until the current one takes over.\n                                    nextNoteForThisTone = noteForThisTone;\n                                    noteForThisTone = prevNoteForThisTone;\n                                    prevNoteForThisTone = null;\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\n                                    passedEndOfNote = true;\n                                } else {\n                                    // This and the rest of the tones in the chord shouldn't start yet.\n                                    break;\n                                }\n                            }\n\n                            let noteEndPart: number = noteForThisTone.end;\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\n                            }\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n                                strumOffsetParts += chord.strumParts;\n                            }\n\n                            const atNoteStart: boolean = (Config.ticksPerPart * noteStartPart == currentTick);\n                            let tone: Tone;\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\n                                tone = this.tempMatchedPitchTones[toneCount]!;\n                                this.tempMatchedPitchTones[toneCount] = null;\n                                toneList.pushBack(tone);\n                            } else if (toneList.count() <= toneCount) {\n                                tone = this.newTone();\n                                toneList.pushBack(tone);\n                            } else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n                                const oldTone: Tone = toneList.get(toneCount);\n                                if (oldTone.isOnLastTick) {\n                                    this.freeTone(oldTone);\n                                } else {\n                                    this.releaseTone(instrumentState, oldTone);\n                                }\n                                tone = this.newTone();\n                                toneList.set(toneCount, tone);\n                            } else {\n                                tone = toneList.get(toneCount);\n                            }\n                            toneCount++;\n\n                            tone.pitches[0] = noteForThisTone.pitches[i];\n                            tone.pitchCount = 1;\n                            tone.chordSize = noteForThisTone.pitches.length;\n                            tone.instrumentIndex = instrumentIndex;\n                            tone.note = noteForThisTone;\n                            tone.noteStartPart = noteStartPart;\n                            tone.noteEndPart = noteEndPart;\n                            tone.prevNote = prevNoteForThisTone;\n                            tone.nextNote = nextNoteForThisTone;\n                            tone.prevNotePitchIndex = i;\n                            tone.nextNotePitchIndex = i;\n                            tone.atNoteStart = atNoteStart;\n                            tone.passedEndOfNote = passedEndOfNote;\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                        }\n                    }\n                }\n                // Automatically free or release seamless tones if there's no new note to take over.\n                while (toneList.count() > toneCount) {\n                    const tone: Tone = toneList.popBack();\n                    const channel: Channel = song.channels[channelIndex];\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n                        this.releaseTone(instrumentState, tone);\n                    } else {\n                        this.freeTone(tone);\n                    }\n                }\n\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\n            }\n        }\n    }\n\n    private clearTempMatchedPitchTones(toneCount: number, instrumentState: InstrumentState): void {\n        for (let i: number = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n            const oldTone: Tone | null = this.tempMatchedPitchTones[i];\n            if (oldTone != null) {\n                if (oldTone.isOnLastTick) {\n                    this.freeTone(oldTone);\n                } else {\n                    this.releaseTone(instrumentState, oldTone);\n                }\n                this.tempMatchedPitchTones[i] = null;\n            }\n        }\n    }\n\n\n    private playTone(channelIndex: number, bufferIndex: number, runLength: number, tone: Tone): void {\n        const channelState: ChannelState = this.channels[channelIndex];\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n\n        if (instrumentState.synthesizer != null) instrumentState.synthesizer!(this, bufferIndex, runLength, tone, instrumentState);\n        tone.envelopeComputer.clearEnvelopes();\n    }\n\n    // Computes mod note position at the start and end of the window and \"plays\" the mod tone, setting appropriate mod data.\n    private playModTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const channel: Channel = song.channels[channelIndex];\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n\n        if (tone.note != null) {\n            const ticksIntoBar: number = this.getTicksIntoBar();\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\n            const tickSampleCountdown: number = this.tickSampleCountdown;\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\n            const endRatio: number = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n            const tickTimeStart: number = Config.ticksPerPart * partTimeStart;\n            const tickTimeEnd: number = Config.ticksPerPart * partTimeEnd;\n            const endPinIndex: number = tone.note.getEndPinIndex(this.getCurrentPart());\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\n            const endPin: NotePin = tone.note.pins[endPinIndex];\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\n\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\n        }\n    }\n\n    private static computeChordExpression(chordSize: number): number {\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n    }\n\n    private computeTone(song: Song, channelIndex: number, samplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const roundedSamplesPerTick: number = Math.ceil(samplesPerTick);\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n        instrumentState.awake = true;\n        instrumentState.tonesAddedInThisTick = true;\n        if (!instrumentState.computed) {\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\n        }\n        const transition: Transition = instrument.getTransition();\n        const chord: Chord = instrument.getChord();\n        const chordExpression: number = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channelIndex);\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\n        const sampleTime: number = 1.0 / this.samplesPerSecond;\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\n        const ticksIntoBar: number = this.getTicksIntoBar();\n        const partTimeStart: number = (ticksIntoBar) / Config.ticksPerPart;\n        const partTimeEnd: number = (ticksIntoBar + 1.0) / Config.ticksPerPart;\n        const currentPart: number = this.getCurrentPart();\n\n        let specialIntervalMult: number = 1.0;\n        tone.specialIntervalExpressionMult = 1.0;\n\n        //if (synth.isModActive(ModSetting.mstPan, channelIndex, tone.instrumentIndex)) {\n        //    startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\n        //    endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\n        //}\n\n        let toneIsOnLastTick: boolean = shouldFadeOutFast;\n        let intervalStart: number = 0.0;\n        let intervalEnd: number = 0.0;\n        let fadeExpressionStart: number = 1.0;\n        let fadeExpressionEnd: number = 1.0;\n        let chordExpressionStart: number = chordExpression;\n        let chordExpressionEnd: number = chordExpression;\n\n        let expressionReferencePitch: number = 16; // A low \"E\" as a MIDI pitch.\n        let basePitch: number = createKeys(song.edo)[song.key].basePitch;\n        let baseExpression: number = 1.0;\n        let pitchDamping: number = 48;\n        if (instrument.type == InstrumentType.spectrum) {\n            baseExpression = Config.spectrumBaseExpression;\n            if (isNoiseChannel) {\n                basePitch = Config.spectrumBasePitch;\n                baseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\n            }\n            expressionReferencePitch = Config.spectrumBasePitch;\n            pitchDamping = 28;\n        } else if (instrument.type == InstrumentType.drumset) {\n            basePitch = Config.spectrumBasePitch;\n            baseExpression = Config.drumsetBaseExpression;\n            expressionReferencePitch = basePitch;\n        } else if (instrument.type == InstrumentType.noise) {\n            basePitch = Config.chipNoises[instrument.chipNoise].basePitch;\n            baseExpression = Config.noiseBaseExpression;\n            expressionReferencePitch = basePitch;\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n        } else if (instrument.type == InstrumentType.fm) {\n            baseExpression = Config.fmBaseExpression;\n        } else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\n            baseExpression = Config.chipBaseExpression;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            baseExpression = Config.harmonicsBaseExpression;\n        } else if (instrument.type == InstrumentType.pwm) {\n            baseExpression = Config.pwmBaseExpression;\n        } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\tbaseExpression = Config.supersawBaseExpression;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            baseExpression = Config.pickedStringBaseExpression;\n        } else if (instrument.type == InstrumentType.mod) {\n            baseExpression = 1.0;\n            expressionReferencePitch = 0;\n            pitchDamping = 1.0;\n            basePitch = 0;\n        } else {\n            throw new Error(\"Unknown instrument type in computeTone.\");\n        }\n\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n            tone.reset();\n        }\n        tone.freshlyAllocated = false;\n\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            tone.phaseDeltas[i] = 0.0;\n            tone.phaseDeltaScales[i] = 0.0;\n            tone.operatorExpressions[i] = 0.0;\n            tone.operatorExpressionDeltas[i] = 0.0;\n        }\n        tone.expression = 0.0;\n        tone.expressionDelta = 0.0;\n        for (let i: number = 0; i < Config.operatorCount; i++) {\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\n        }\n\n        if (released) {\n            const startTicksSinceReleased: number = tone.ticksSinceReleased;\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + 1.0;\n            intervalStart = intervalEnd = tone.lastInterval;\n            const fadeOutTicks: number = Math.abs(instrument.getFadeOutTicks());\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n\n            if (shouldFadeOutFast) {\n                fadeExpressionEnd = 0.0;\n            }\n\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\n        } else if (tone.note == null) {\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\n            tone.lastInterval = 0;\n            tone.ticksSinceReleased = 0;\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\n        } else {\n            const note: Note = tone.note;\n            const nextNote: Note | null = tone.nextNote;\n\n            const noteStartPart: number = tone.noteStartPart;\n            const noteEndPart: number = tone.noteEndPart;\n\n\n            const endPinIndex: number = note.getEndPinIndex(currentPart);\n            const startPin: NotePin = note.pins[endPinIndex - 1];\n            const endPin: NotePin = note.pins[endPinIndex];\n            const noteStartTick: number = noteStartPart * Config.ticksPerPart;\n            const noteEndTick: number = noteEndPart * Config.ticksPerPart;\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\n\n            tone.ticksSinceReleased = 0;\n\n            const tickTimeStart: number = currentPart * Config.ticksPerPart + this.tick;\n            const tickTimeEnd: number = tickTimeStart + 1.0;\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\n            fadeExpressionStart = 1.0;\n            fadeExpressionEnd = 1.0;\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n            tone.lastInterval = intervalEnd;\n\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n                const fadeOutTicks: number = -instrument.getFadeOutTicks();\n                if (fadeOutTicks > 0.0) {\n                    // If the tone should fade out before the end of the note, do so here.\n                    const noteLengthTicks: number = noteEndTick - noteStartTick;\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\n                }\n            }\n\n        }\n\n        tone.isOnLastTick = toneIsOnLastTick;\n\n        let tmpNoteFilter: FilterSettings = instrument.noteFilter;\n        let startPoint: FilterControlPoint;\n        let endPoint: FilterControlPoint;\n\n        if (instrument.noteFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const noteFilterSettingsStart: FilterSettings = instrument.noteFilter;\n            if (instrument.noteSubFilters[1] == null)\n                instrument.noteSubFilters[1] = new FilterSettings();\n            const noteFilterSettingsEnd: FilterSettings = instrument.noteSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq: number = instrument.noteFilterSimpleCut;\n            let startSimpleGain: number = instrument.noteFilterSimplePeak;\n            let endSimpleFreq: number = instrument.noteFilterSimpleCut;\n            let endSimpleGain: number = instrument.noteFilterSimplePeak;\n            let filterChanges: boolean = false;\n\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\n\n            startPoint = noteFilterSettingsStart.controlPoints[0];\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\n\n            // Temporarily override so that envelope computer uses appropriate computed note filter\n            instrument.noteFilter = noteFilterSettingsStart;\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\n        }\n\n        // Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\n        const envelopeComputer: EnvelopeComputer = tone.envelopeComputer;\n        let useEnvelopeSpeed: number = Config.arpSpeedScale[instrument.envelopeSpeed];\n        if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\n            if (Number.isInteger(useEnvelopeSpeed)) {\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\n            } else {\n                // Linear interpolate envelope values\n                useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)];\n            }\n        }\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, useEnvelopeSpeed);\n        const envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\n        const envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\n        instrument.noteFilter = tmpNoteFilter;\n\n        if (tone.note != null && transition.slides) {\n            // Slide interval and chordExpression at the start and/or end of the note if necessary.\n            const prevNote: Note | null = tone.prevNote;\n            const nextNote: Note | null = tone.nextNote;\n            if (prevNote != null) {\n                const intervalDiff: number = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\n                if (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n                if (envelopeComputer.prevSlideEnd) intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff: number = prevNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n                    if (envelopeComputer.prevSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n                }\n            }\n            if (nextNote != null) {\n                const intervalDiff: number = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\n                if (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n                if (envelopeComputer.nextSlideEnd) intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff: number = nextNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n                    if (envelopeComputer.nextSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n                }\n            }\n        }\n\n        if (effectsIncludePitchShift(instrument.effects)) {\n            let pitchShift: number = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n            let pitchShiftScalarStart: number = 1.0;\n            let pitchShiftScalarEnd: number = 1.0;\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\n            }\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.pitchShift];\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.pitchShift];\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\n        }\n        if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.detune];\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.detune];\n            let modDetuneStart: number = instrument.detune;\n            let modDetuneEnd: number = instrument.detune;\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\n            }\n            intervalStart += Synth.detuneToCents(modDetuneStart) * envelopeStart * song.edo / (12.0 * 100.0);\n            intervalEnd += Synth.detuneToCents(modDetuneEnd) * envelopeEnd * song.edo / (12.0 * 100.0);\n        }\n\n        if (effectsIncludeVibrato(instrument.effects)) {\n            let delayTicks: number;\n            let vibratoAmplitudeStart: number;\n            let vibratoAmplitudeEnd: number;\n            // Custom vibrato\n            if (instrument.vibrato == Config.vibratos.length) {\n                delayTicks = instrument.vibratoDelay * 2; // Delay was changed from parts to ticks in BB v9\n                // Special case: if vibrato delay is max, NEVER vibrato.\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\n                    delayTicks = Number.POSITIVE_INFINITY;\n                vibratoAmplitudeStart = instrument.vibratoDepth;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            } else {\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2; // Delay was changed from parts to ticks in BB v9\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\n                    delayTicks = Number.POSITIVE_INFINITY;\n\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\n            }\n\n\n            // To maintain pitch continuity, (mostly for picked string which retriggers impulse\n            // otherwise) remember the vibrato at the end of this run and reuse it at the start\n            // of the next run if available.\n            let vibratoStart: number;\n            if (tone.prevVibrato != null) {\n                vibratoStart = tone.prevVibrato;\n            } else {\n                let vibratoLfoStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\n                const vibratoDepthEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.vibratoDepth];\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoStart: number = delayTicks - envelopeComputer.noteTicksStart;\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n                }\n            }\n\n            let vibratoLfoEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\n            const vibratoDepthEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.vibratoDepth];\n            if (instrument.type != InstrumentType.mod) {\n                let vibratoEnd: number = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoEnd: number = delayTicks - envelopeComputer.noteTicksEnd;\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\n                }\n\n                tone.prevVibrato = vibratoEnd;\n\n                intervalStart += vibratoStart;\n                intervalEnd += vibratoEnd;\n            }\n        }\n\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n            // Fade in the beginning of the note.\n            const fadeInSeconds: number = instrument.getFadeInSeconds();\n            if (fadeInSeconds > 0.0) {\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStartUnscaled / fadeInSeconds);\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEndUnscaled / fadeInSeconds);\n            }\n        }\n\n        if (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\n            // It's possible that the note will change while the user is editing it,\n            // but the tone's pitches don't get updated because the tone has already\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\n            tone.drumsetPitch = tone.pitches[0];\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n        }\n\n        let noteFilterExpression: number = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (!effectsIncludeNoteFilter(instrument.effects)) {\n            tone.noteFilterCount = 0;\n        } else {\n\n            const noteAllFreqsEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterAllFreqs];\n            const noteAllFreqsEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterAllFreqs];\n\n            // Simple note filter\n            if (instrument.noteFilterType) {\n                const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0];\n                const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0];\n                const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0];\n                const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0];\n\n                startPoint!.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                endPoint!.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n\n                if (tone.noteFilters.length < 1) tone.noteFilters[0] = new DynamicBiquadFilter();\n                tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\n                noteFilterExpression *= startPoint!.getVolumeCompensationMult();\n\n                tone.noteFilterCount = 1;\n            }\n            else {\n                const noteFilterSettings: FilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n\n                for (let i: number = 0; i < noteFilterSettings.controlPointCount; i++) {\n                    const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                    const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                    const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0 + i];\n                    const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0 + i];\n                    let startPoint: FilterControlPoint = noteFilterSettings.controlPoints[i];\n                    const endPoint: FilterControlPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\n\n                    // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                    if (startPoint.type != endPoint.type) {\n                        startPoint = endPoint;\n                    }\n\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                    if (tone.noteFilters.length <= i) tone.noteFilters[i] = new DynamicBiquadFilter();\n                    tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                    noteFilterExpression *= startPoint.getVolumeCompensationMult();\n                }\n                tone.noteFilterCount = noteFilterSettings.controlPointCount;\n            }\n        }\n\n        if (instrument.type == InstrumentType.drumset) {\n            const drumsetFilterEnvelope: Envelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\n\n            // If the drumset lowpass cutoff decays, compensate by increasing expression.\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope)\n\n            // Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\n            let drumsetFilterEnvelopeStart: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);\n\n            // Apply slide interpolation to drumset envelope.\n            if (envelopeComputer.prevSlideStart) {\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;\n            }\n            if (envelopeComputer.nextSlideStart) {\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;\n            }\n\n            let drumsetFilterEnvelopeEnd: number = drumsetFilterEnvelopeStart;\n\n            if ( instrument.discreteEnvelope == false ) {\n                drumsetFilterEnvelopeEnd = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.noteSizeEnd);\n\n                if (envelopeComputer.prevSlideEnd) {\n                    const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);\n                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;\n                }\n                if (envelopeComputer.nextSlideEnd) {\n                    const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);\n                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;\n                }\n            }\n\n            const point: FilterControlPoint = this.tempDrumSetControlPoint;\n            point.type = FilterType.lowPass;\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n            // Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n            if (tone.noteFilters.length == tone.noteFilterCount) tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\n            tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFilterCount++;\n        }\n\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\n\n        if (instrument.type == InstrumentType.fm) {\n            // phase modulation!\n\n            let sineExpressionBoost: number = 1.0;\n            let totalCarrierExpression: number = 0.0;\n\n            let arpeggioInterval: number = 0;\n            const arpeggiates: boolean = chord.arpeggiates;\n            if (tone.pitchCount > 1 && arpeggiates) {\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n            }\n\n            const carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\n            for (let i: number = 0; i < Config.operatorCount; i++) {\n\n                const associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\n                const pitch: number = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n                const pitchStart: number = basePitch + (pitch + intervalStart) * intervalScale + interval;\n                const pitchEnd: number = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n                const baseFreqStart: number = Instrument.frequencyFromPitch(pitchStart, song.edo);\n                const baseFreqEnd: number = Instrument.frequencyFromPitch(pitchEnd, song.edo);\n                const hzOffset: number = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n                const targetFreqStart: number = freqMult * baseFreqStart + hzOffset;\n                const targetFreqEnd: number = freqMult * baseFreqEnd + hzOffset;\n\n                const freqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.operatorFrequency0 + i];\n                const freqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.operatorFrequency0 + i];\n                let freqStart: number;\n                let freqEnd: number;\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\n                } else {\n                    freqStart = targetFreqStart;\n                    freqEnd = targetFreqEnd;\n                }\n                tone.phaseDeltas[i] = freqStart * sampleTime;\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\n\n                let amplitudeStart: number = instrument.operators[i].amplitude;\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\n                if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\n                    amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\n                    amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\n                }\n\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n\n                let expressionStart: number = amplitudeMultStart;\n                let expressionEnd: number = amplitudeMultEnd;\n\n\n                if (i < carrierCount) {\n                    // carrier\n                    let pitchExpressionStart: number;\n                    if (tone.prevPitchExpressions[i] != null) {\n                        pitchExpressionStart = tone.prevPitchExpressions[i]!;\n                    } else {\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n                    }\n                    const pitchExpressionEnd: number = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\n                    expressionStart *= pitchExpressionStart;\n                    expressionEnd *= pitchExpressionEnd;\n\n                    totalCarrierExpression += amplitudeCurveEnd;\n                } else {\n                    // modulator\n                    expressionStart *= Config.sineWaveLength * 1.5;\n                    expressionEnd *= Config.sineWaveLength * 1.5;\n\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n                }\n\n                expressionStart *= envelopeStarts[EnvelopeComputeIndex.operatorAmplitude0 + i];\n                expressionEnd *= envelopeEnds[EnvelopeComputeIndex.operatorAmplitude0 + i];\n\n                // Check for mod-related volume delta\n                // @jummbus - This amplification is also applied to modulator FM operators which distorts the sound.\n                // The fix is to apply this only to carriers, but as this is a legacy bug and it can cause some interesting sounds, it's left in.\n                // You can use the mix volume modulator instead to avoid this effect.\n\n                if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                    const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                    const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n                }\n\n                tone.operatorExpressions[i] = expressionStart;\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n            }\n\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n            const expressionStart: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\n            const expressionEnd: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\n            }\n\n            let feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\n\n            let feedbackStart: number = feedbackAmplitudeStart * envelopeStarts[EnvelopeComputeIndex.feedbackAmplitude];\n            let feedbackEnd: number = feedbackAmplitudeEnd * envelopeEnds[EnvelopeComputeIndex.feedbackAmplitude];\n            tone.feedbackMult = feedbackStart;\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\n\n\n        } else {\n            const freqEndRatio: number = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / song.edo);\n\t\t\tconst basePhaseDeltaScale: number = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\n\t\t\t\n            let pitch: number = tone.pitches[0];\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                if (chord.customInterval) {\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / song.edo);\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n                } else {\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\n                }\n            }\n\n            const startPitch: number = basePitch + (pitch + intervalStart) * intervalScale;\n            const endPitch: number = basePitch + (pitch + intervalEnd) * intervalScale;\n            let pitchExpressionStart: number;\n            // TODO: use the second element of prevPitchExpressions for the unison voice, compute a separate expression delta for it.\n            if (tone.prevPitchExpressions[0] != null) {\n                pitchExpressionStart = tone.prevPitchExpressions[0]!;\n            } else {\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n            }\n            const pitchExpressionEnd: number = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\n            let settingsExpressionMult: number = baseExpression * noteFilterExpression;\n\n            if (instrument.type == InstrumentType.noise) {\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n            }\n            if (instrument.type == InstrumentType.chip) {\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n            }\n            if (instrument.type == InstrumentType.pwm) {\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart: number = basePulseWidth;\n                let pulseWidthModEnd: number = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                const pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                const pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n            }\n            if (instrument.type == InstrumentType.pickedString) {\n                // Check for sustain mods\n                let useSustainStart: number = instrument.stringSustain;\n                let useSustainEnd: number = instrument.stringSustain;\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\n                }\n\n                tone.stringSustainStart = useSustainStart;\n                tone.stringSustainEnd = useSustainEnd;\n\n                // Increase expression to compensate for string decay.\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\n\n            }\n\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch, song.edo);\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                // These instruments have two waves at different frequencies for the unison feature.\n                const unison: Unison = Config.unisons[instrument.unison];\n                const voiceCountExpression: number = (instrument.type == InstrumentType.pickedString) ? 1 : unison.voices / 2.0;\n                settingsExpressionMult *= unison.expression * voiceCountExpression;\n                const unisonEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.unison];\n                const unisonEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.unison];\n                const unisonAStart: number = Math.pow(2.0, (unison.offset + unison.spread) * unisonEnvelopeStart / song.edo);\n                const unisonAEnd: number = Math.pow(2.0, (unison.offset + unison.spread) * unisonEnvelopeEnd / song.edo);\n                const unisonBStart: number = Math.pow(2.0, (unison.offset - unison.spread) * unisonEnvelopeStart / song.edo) * specialIntervalMult;\n                const unisonBEnd: number = Math.pow(2.0, (unison.offset - unison.spread) * unisonEnvelopeEnd / song.edo) * specialIntervalMult;\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;\n                tone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / roundedSamplesPerTick);\n                tone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);\n            } else {\n                tone.phaseDeltas[0] = startFreq * sampleTime;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\n            }\n\n            // TODO: make expressionStart and expressionEnd variables earlier and modify those\n\t\t\t// instead of these supersawExpression variables.\n\t\t\tlet supersawExpressionStart: number = 1.0;\n\t\t\tlet supersawExpressionEnd: number = 1.0;\n\t\t\tif (instrument.type == InstrumentType.supersaw) {\n\t\t\t\tconst minFirstVoiceAmplitude: number = 1.0 / Math.sqrt(Config.supersawVoiceCount);\n\t\t\t\t\n                // Dynamism mods\n                let useDynamismStart: number = instrument.supersawDynamism / Config.supersawDynamismMax;\n                let useDynamismEnd: number = instrument.supersawDynamism / Config.supersawDynamismMax;\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\n                }\n\n\t\t\t\tconst curvedDynamismStart: number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[EnvelopeComputeIndex.supersawDynamism]), 0.2);\n\t\t\t\tconst curvedDynamismEnd:   number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[  EnvelopeComputeIndex.supersawDynamism]), 0.2);\n\t\t\t\tconst firstVoiceAmplitudeStart: number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\n\t\t\t\tconst firstVoiceAmplitudeEnd:   number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\n\n\t\t\t\tconst dynamismStart: number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n\t\t\t\tconst dynamismEnd:   number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n\t\t\t\ttone.supersawDynamism = dynamismStart;\n\t\t\t\ttone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\n\t\t\t\t\n\t\t\t\tconst initializeSupersaw: boolean = (tone.supersawDelayIndex == -1);\n\t\t\t\tif (initializeSupersaw) {\n\t\t\t\t\t// Goal: generate sawtooth phases such that the combined initial amplitude\n\t\t\t\t\t// cancel out to minimize pop. Algorithm: generate sorted phases, iterate over\n\t\t\t\t\t// their sawtooth drop points to find a combined zero crossing, then offset the\n\t\t\t\t\t// phases so they start there.\n\t\t\t\t\t\n\t\t\t\t\t// Generate random phases in ascending order by adding positive randomly\n\t\t\t\t\t// sized gaps between adjacent phases. For a proper distribution of random\n\t\t\t\t\t// events, the gaps sizes should be an \"exponential distribution\", which is\n\t\t\t\t\t// just: -Math.log(Math.random()). At the end, normalize the phases to a 0-1\n\t\t\t\t\t// range by dividing by the final value of the accumulator.\n\t\t\t\t\tlet accumulator: number = 0.0;\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\ttone.phases[i] = accumulator;\n\t\t\t\t\t\taccumulator += -Math.log(Math.random());\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst amplitudeSum: number = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\n\t\t\t\t\tconst slope: number = amplitudeSum;\n\t\t\t\t\t\n\t\t\t\t\t// Find the initial amplitude of the sum of sawtooths with the normalized\n\t\t\t\t\t// set of phases.\n\t\t\t\t\tlet sample: number = 0.0;\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\n\t\t\t\t\t\tconst normalizedPhase: number = tone.phases[i] / accumulator;\n\t\t\t\t\t\ttone.phases[i] = normalizedPhase;\n\t\t\t\t\t\tsample += (normalizedPhase - 0.5) * amplitude;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the phase of the zero crossing of the sum of the sawtooths. You can\n\t\t\t\t\t// use a constant slope and the distance between sawtooth drops to determine if\n\t\t\t\t\t// the zero crossing occurs between them. Note that a small phase means that\n\t\t\t\t\t// the corresponding drop for that wave is far away, and a big phase means the\n\t\t\t\t\t// drop is nearby, so to iterate forward through the drops we iterate backward\n\t\t\t\t\t// through the phases.\n\t\t\t\t\tlet zeroCrossingPhase: number = 1.0;\n\t\t\t\t\tlet prevDrop: number = 0.0;\n\t\t\t\t\tfor (let i: number = Config.supersawVoiceCount - 1; i >= 0; i--) {\n\t\t\t\t\t\tconst nextDrop: number = 1.0 - tone.phases[i];\n\t\t\t\t\t\tconst phaseDelta: number = nextDrop - prevDrop;\n\t\t\t\t\t\tif (sample < 0.0) {\n\t\t\t\t\t\t\tconst distanceToZeroCrossing: number = -sample / slope;\n\t\t\t\t\t\t\tif (distanceToZeroCrossing < phaseDelta) {\n\t\t\t\t\t\t\t\tzeroCrossingPhase = prevDrop + distanceToZeroCrossing;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\n\t\t\t\t\t\tsample += phaseDelta * slope - amplitude;\n\t\t\t\t\t\tprevDrop = nextDrop;\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\ttone.phases[i] += zeroCrossingPhase;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Randomize the (initially sorted) order of the phases (aside from the\n\t\t\t\t\t// first one) so that they don't correlate to the detunes that are also\n\t\t\t\t\t// based on index.\n\t\t\t\t\tfor (let i: number = 1; i < Config.supersawVoiceCount - 1; i++) {\n\t\t\t\t\t\tconst swappedIndex: number = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\n\t\t\t\t\t\tconst temp: number = tone.phases[i];\n\t\t\t\t\t\ttone.phases[i] = tone.phases[swappedIndex];\n\t\t\t\t\t\ttone.phases[swappedIndex] = temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst baseSpreadSlider: number = instrument.supersawSpread / Config.supersawSpreadMax;\n\t\t\t\t// Spread mods\n\t\t\t\tlet useSpreadStart: number = baseSpreadSlider;\n\t\t\t\tlet useSpreadEnd:   number = baseSpreadSlider;\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\n                }\n                \n\t\t\t\tconst spreadSliderStart: number = useSpreadStart * envelopeStarts[EnvelopeComputeIndex.supersawSpread];\n\t\t\t\tconst spreadSliderEnd:   number = useSpreadEnd * envelopeEnds[  EnvelopeComputeIndex.supersawSpread];\n\t\t\t\t// Just use the average detune for the current tick in the below loop.\n\t\t\t\tconst averageSpreadSlider: number = (spreadSliderStart + spreadSliderEnd) * 0.5;\n\t\t\t\tconst curvedSpread: number = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\n\t\t\t\tfor (let i = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t// Spread out the detunes around the center;\n\t\t\t\t\tconst offset: number = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\n\t\t\t\t\ttone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / song.edo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst baseShape: number = instrument.supersawShape / Config.supersawShapeMax;\n\t\t\t\t// Saw shape mods\n\t\t\t\tlet useShapeStart: number = baseShape * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n\t\t\t\tlet useShapeEnd:   number = baseShape * envelopeEnds[  EnvelopeComputeIndex.supersawShape];\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\n                }\n\n\t\t\t\tconst shapeStart: number = useShapeStart * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n\t\t\t\tconst shapeEnd:   number = useShapeEnd * envelopeEnds[  EnvelopeComputeIndex.supersawShape];\n\t\t\t\ttone.supersawShape = shapeStart;\n\t\t\t\ttone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\n\t\t\t\t\n\t\t\t\tconst basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\t\t\t\t\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart: number = basePulseWidth;\n                let pulseWidthModEnd: number = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                const pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                const pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n\t\t\t\tconst phaseDeltaStart: number = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\n\t\t\t\tconst phaseDeltaEnd: number = startFreq * sampleTime * freqEndRatio;\n\t\t\t\ttone.supersawPrevPhaseDelta = phaseDeltaEnd;\n\t\t\t\tconst delayLengthStart = pulseWidthStart / phaseDeltaStart;\n\t\t\t\tconst delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\n\t\t\t\ttone.supersawDelayLength = delayLengthStart;\n\t\t\t\ttone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\n\t\t\t\tconst minBufferLength: number = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\n\t\t\t\t\n\t\t\t\tif (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\n\t\t\t\t\t// The delay line buffer will get reused for other tones so might as well\n\t\t\t\t\t// start off with a buffer size that is big enough for most notes.\n\t\t\t\t\tconst likelyMaximumLength: number = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(song.edo*2, song.edo));\n\t\t\t\t\tconst newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n\t\t\t\t\tif (!initializeSupersaw && tone.supersawDelayLine != null) {\n\t\t\t\t\t\t// If the tone has already started but the buffer needs to be reallocated,\n\t\t\t\t\t\t// transfer the old data to the new buffer.\n\t\t\t\t\t\tconst oldDelayBufferMask: number = (tone.supersawDelayLine.length - 1) >> 0;\n\t\t\t\t\t\tconst startCopyingFromIndex: number = tone.supersawDelayIndex;\n\t\t\t\t\t\tfor (let i: number = 0; i < tone.supersawDelayLine.length; i++) {\n\t\t\t\t\t\t\tnewDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttone.supersawDelayLine = newDelayLine;\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\n\t\t\t\t} else if (initializeSupersaw) {\n\t\t\t\t\ttone.supersawDelayLine.fill(0.0);\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst pulseExpressionRatio: number = Config.pwmBaseExpression / Config.supersawBaseExpression;\n\t\t\t\tsupersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\n\t\t\t\tsupersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\n\t\t\t}\n\t\t\t\n\t\t\tlet expressionStart: number = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume] * supersawExpressionStart;\n\t\t\tlet expressionEnd:   number = settingsExpressionMult * fadeExpressionEnd   * chordExpressionEnd   * pitchExpressionEnd   * envelopeEnds[  EnvelopeComputeIndex.noteVolume] * supersawExpressionEnd;\n\n            // Check for mod-related volume delta\n            if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true)\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n            }\n\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n            if (instrument.type == InstrumentType.pickedString) {\n                let stringDecayStart: number;\n                if (tone.prevStringDecay != null) {\n                    stringDecayStart = tone.prevStringDecay;\n                } else {\n                    const sustainEnvelopeStart: number = tone.envelopeComputer.envelopeStarts[EnvelopeComputeIndex.stringSustain];\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n                }\n                const sustainEnvelopeEnd: number = tone.envelopeComputer.envelopeEnds[EnvelopeComputeIndex.stringSustain];\n                let stringDecayEnd: number = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n                tone.prevStringDecay = stringDecayEnd;\n\n                const unison: Unison = Config.unisons[instrument.unison];\n                for (let i: number = tone.pickedStrings.length; i < unison.voices; i++) {\n                    tone.pickedStrings[i] = new PickedString();\n                }\n\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n                    for (const pickedString of tone.pickedStrings) {\n                        // Force the picked string to retrigger the attack impulse at the start of the note.\n                        pickedString.delayIndex = -1;\n                    }\n                }\n\n                for (let i: number = 0; i < unison.voices; i++) {\n                    \ttone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\n                }\n            }\n        }\n    }\n\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\n        let effect: number = 0.0;\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n        }\n        return effect;\n    }\n\n\n    public static getInstrumentSynthFunction(instrument: Instrument): Function {\n        if (instrument.type == InstrumentType.fm) {\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j: number = 0; j < Config.operatorCount; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                const wrappedFmSynth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n\t\t\t\t\n\t\t\t\tSynth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\n\t\t\t\n            }\n            return Synth.fmSynthFunctionCache[fingerprint];\n        } else if (instrument.type == InstrumentType.chip) {\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            return Synth.harmonicsSynth;\n        } else if (instrument.type == InstrumentType.pwm) {\n            return Synth.pulseWidthSynth;\n        } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\treturn Synth.supersawSynth;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            return Synth.pickedStringSynth;\n        } else if (instrument.type == InstrumentType.noise) {\n            return Synth.noiseSynth;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            return Synth.spectrumSynth;\n        } else if (instrument.type == InstrumentType.drumset) {\n            return Synth.drumsetSynth;\n        } else if (instrument.type == InstrumentType.mod) {\n            return Synth.modSynth;\n        } else {\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\n        }\n    }\n\n    private static chipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const volumeScale = instrumentState.volumeScale;\n\n        // For all but aliasing custom chip, the first sample is duplicated at the end, so don't double-count it.\n        const waveLength: number = (aliases && instrumentState.type == InstrumentType.customChipWave) ? wave.length : wave.length - 1;\n\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unison!.sign;\n        if (instrumentState.unison!.voices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n        let prevWaveIntegralA: number = 0;\n        let prevWaveIntegralB: number = 0;\n\n        if (!aliases) {\n            const phaseAInt: number = phaseA | 0;\n            const phaseBInt: number = phaseB | 0;\n            const indexA: number = phaseAInt % waveLength;\n            const indexB: number = phaseBInt % waveLength;\n            const phaseRatioA: number = phaseA - phaseAInt;\n            const phaseRatioB: number = phaseB - phaseBInt;\n            prevWaveIntegralA = +wave[indexA];\n            prevWaveIntegralB = +wave[indexB];\n            prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n            prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n        }\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            let waveA: number;\n            let waveB: number;\n            let inputSample: number;\n\n            if (aliases) {\n                waveA = wave[(0 | phaseA) % waveLength];\n                waveB = wave[(0 | phaseB) % waveLength];\n                inputSample = waveA + waveB;\n            } else {\n                const phaseAInt: number = phaseA | 0;\n                const phaseBInt: number = phaseB | 0;\n                const indexA: number = phaseAInt % waveLength;\n                const indexB: number = phaseBInt % waveLength;\n                let nextWaveIntegralA: number = wave[indexA];\n                let nextWaveIntegralB: number = wave[indexB];\n                const phaseRatioA: number = phaseA - phaseAInt;\n                const phaseRatioB: number = phaseB - phaseBInt;\n                nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n                nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n                waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n                waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n                prevWaveIntegralA = nextWaveIntegralA;\n                prevWaveIntegralB = nextWaveIntegralB;\n                inputSample = waveA + waveB * unisonSign;\n            }\n\n            const sample: number = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample * volumeScale;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static harmonicsSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unison!.sign;\n        if (instrumentState.unison!.voices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        const phaseAInt: number = phaseA | 0;\n        const phaseBInt: number = phaseB | 0;\n        const indexA: number = phaseAInt % waveLength;\n        const indexB: number = phaseBInt % waveLength;\n        const phaseRatioA: number = phaseA - phaseAInt;\n        const phaseRatioB: number = phaseB - phaseBInt;\n        let prevWaveIntegralA: number = +wave[indexA];\n        let prevWaveIntegralB: number = +wave[indexB];\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            const phaseAInt: number = phaseA | 0;\n            const phaseBInt: number = phaseB | 0;\n            const indexA: number = phaseAInt % waveLength;\n            const indexB: number = phaseBInt % waveLength;\n            let nextWaveIntegralA: number = wave[indexA];\n            let nextWaveIntegralB: number = wave[indexB];\n            const phaseRatioA: number = phaseA - phaseAInt;\n            const phaseRatioB: number = phaseB - phaseBInt;\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n            const waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n            const waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n            prevWaveIntegralA = nextWaveIntegralA;\n            prevWaveIntegralB = nextWaveIntegralB;\n\n            const inputSample: number = waveA + waveB * unisonSign;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static pickedStringSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        // This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\n        // all-pass filter for dispersion and with more control over the impulse harmonics.\n        // The source code is processed as a string before being compiled, in order to\n        // handle the unison feature. If unison is disabled or set to none, then only one\n        // string voice is required, otherwise two string voices are required. We only want\n        // to compute the minimum possible number of string voices, so omit the code for\n        // processing extra ones if possible. Any line containing a \"#\" is duplicated for\n        // each required voice, replacing the \"#\" with the voice index.\n\n        const voiceCount: number = instrumentState.unison!.voices;\n        let pickedStringFunction: Function = Synth.pickedStringFunctionCache[voiceCount];\n        if (pickedStringFunction == undefined) {\n            let pickedStringSource: string = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n\t\t\t\n            pickedStringSource += `\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (`\n\n            const sampleList: string[] = [];\n            for (let voice: number = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice == 1 ? \" * unisonSign\" : \"\"));\n            }\n\n            pickedStringSource += sampleList.join(\" + \");\n\n            pickedStringSource += `) * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t\t}`\n\n            // Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n                const lines = [];\n                for (let voice: number = 0; voice < voiceCount; voice++) {\n                    lines.push(line.replace(/\\#/g, String(voice)));\n                }\n                return lines.join(\"\\n\");\n            });\n\n            //console.log(pickedStringSource);\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\n\t\t\tSynth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n        }\n\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n\n    private static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrumentState: InstrumentState): void {\n        // TODO: If automation is involved, don't assume sliders will stay at zero.\n        // @jummbus - ^ Correct, removed the non-zero checks as modulation can change them.\n\n        const usesDistortion: boolean = effectsIncludeDistortion(instrumentState.effects);\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(instrumentState.effects);\n        const usesEqFilter: boolean = instrumentState.eqFilterCount > 0;\n        const usesPanning: boolean = effectsIncludePanning(instrumentState.effects);\n        const usesChorus: boolean = effectsIncludeChorus(instrumentState.effects);\n        const usesEcho: boolean = effectsIncludeEcho(instrumentState.effects);\n        const usesReverb: boolean = effectsIncludeReverb(instrumentState.effects);\n        let signature: number = 0; if (usesDistortion) signature = signature | 1;\n        signature = signature << 1; if (usesBitcrusher) signature = signature | 1;\n        signature = signature << 1; if (usesEqFilter) signature = signature | 1;\n        signature = signature << 1; if (usesPanning) signature = signature | 1;\n        signature = signature << 1; if (usesChorus) signature = signature | 1;\n        signature = signature << 1; if (usesEcho) signature = signature | 1;\n        signature = signature << 1; if (usesReverb) signature = signature | 1;\n\n        let effectsFunction: Function = Synth.effectsFunctionCache[signature];\n        if (effectsFunction == undefined) {\n            let effectsSource: string = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\n\n            const usesDelays: boolean = usesChorus || usesReverb || usesEcho;\n\n            effectsSource += `\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`\n            }\n\n            if (usesDistortion) {\n                // Distortion can sometimes create noticeable aliasing.\n                // It seems the established industry best practice for distortion antialiasing\n                // is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\n                // at the original nyquist frequency), perform the distortion, then downsample\n                // (the lowpass again followed by dropping in-between samples). This is\n                // \"mathematically correct\" in that it preserves only the intended frequencies,\n                // but it has several unfortunate tradeoffs depending on the choice of filter,\n                // introducing latency and/or time smearing, since no true brick wall filter\n                // exists. For the time being, I've opted to instead generate in-between input\n                // samples using fractional delay all-pass filters, and after distorting them,\n                // I \"downsample\" these with a simple weighted sum.\n\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;`\n            }\n\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\n            effectsSource += `\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`\n            }\n\n            effectsSource += `\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`\n\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;`\n            }\n\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\n            effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`\n            } else {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;\n                    `\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;`\n            }\n\n            effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`\n            }\n\n            effectsSource += `\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;`\n            }\n\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`\n\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`\n            }\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`\n            }\n            \n            effectsSource += \"}\";\n\n            //console.log(effectsSource);\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\n            Synth.effectsFunctionCache[signature] = effectsFunction;\n        }\n\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n    }\n\n    private static pulseWidthSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\n        let phaseDelta: number = tone.phaseDeltas[0];\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phase: number = (tone.phases[0] % 1);\n\n        let pulseWidth: number = tone.pulseWidth;\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            const sawPhaseA: number = phase % 1;\n            const sawPhaseB: number = (phase + pulseWidth) % 1;\n\n            let pulseWave: number = sawPhaseB - sawPhaseA;\n\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n            if (!instrument.aliases) {\n                if (sawPhaseA < phaseDelta) {\n                    var t = sawPhaseA / phaseDelta;\n                    pulseWave += (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseA > 1.0 - phaseDelta) {\n                    var t = (sawPhaseA - 1.0) / phaseDelta;\n                    pulseWave += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseB < phaseDelta) {\n                    var t = sawPhaseB / phaseDelta;\n                    pulseWave -= (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseB > 1.0 - phaseDelta) {\n                    var t = (sawPhaseB - 1.0) / phaseDelta;\n                    pulseWave -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\n            const inputSample: number = pulseWave;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n            pulseWidth += pulseWidthDelta;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase;\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.pulseWidth = pulseWidth;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static supersawSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\tconst voiceCount: number = Config.supersawVoiceCount|0;\n\t\t\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\t\tlet phases: number[] = tone.phases;\n\t\t\n\t\tlet dynamism: number = +tone.supersawDynamism;\n\t\tconst dynamismDelta: number = +tone.supersawDynamismDelta;\n\t\tconst unisonDetunes: number[] = tone.supersawUnisonDetunes;\n\t\tlet shape: number = +tone.supersawShape;\n\t\tconst shapeDelta: number = +tone.supersawShapeDelta;\n\t\tlet delayLength: number = +tone.supersawDelayLength;\n\t\tconst delayLengthDelta: number = +tone.supersawDelayLengthDelta;\n\t\tconst delayLine: Float32Array = tone.supersawDelayLine!;\n\t\tconst delayBufferMask: number = (delayLine.length - 1) >> 0;\n\t\tlet delayIndex: number = tone.supersawDelayIndex|0;\n\t\tdelayIndex = (delayIndex & delayBufferMask) + delayLine.length;\n\t\t\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t// The phase initially starts at a zero crossing so apply\n\t\t\t// the delta before first sample to get a nonzero value.\n\t\t\tlet phase: number = (phases[0] + phaseDelta) % 1.0;\n\t\t\tlet supersawSample: number = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\n\t\t\t\n\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n            if (!instrumentState.aliases) {\n                if (phase < phaseDelta) {\n                    var t: number = phase / phaseDelta;\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\n                } else if (phase > 1.0 - phaseDelta) {\n                    var t: number = (phase - 1.0) / phaseDelta;\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\t\t\t\n\t\t\tphases[0] = phase;\n\t\t\t\n\t\t\tfor (let i: number = 1; i < voiceCount; i++) {\n\t\t\t\tconst detunedPhaseDelta: number = phaseDelta * unisonDetunes[i];\n\t\t\t\t// The phase initially starts at a zero crossing so apply\n\t\t\t\t// the delta before first sample to get a nonzero value.\n\t\t\t\tlet phase: number = (phases[i] + detunedPhaseDelta) % 1.0;\n\t\t\t\tsupersawSample += phase * dynamism;\n\t\t\t\t\n\t\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n                if (!instrumentState.aliases) {\n                    if (phase < detunedPhaseDelta) {\n                        const t: number = phase / detunedPhaseDelta;\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\n                    } else if (phase > 1.0 - detunedPhaseDelta) {\n                        const t: number = (phase - 1.0) / detunedPhaseDelta;\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\n                    }\n                }\n\t\t\t\t\n\t\t\t\tphases[i] = phase;\n\t\t\t}\n\t\t\t\n\t\t\tdelayLine[delayIndex & delayBufferMask] = supersawSample;\n\t\t\tconst delaySampleTime: number = delayIndex - delayLength;\n\t\t\tconst lowerIndex: number = delaySampleTime | 0;\n\t\t\tconst upperIndex: number = lowerIndex + 1;\n\t\t\tconst delayRatio: number = delaySampleTime - lowerIndex;\n\t\t\tconst prevDelaySample: number = delayLine[lowerIndex & delayBufferMask];\n\t\t\tconst nextDelaySample: number = delayLine[upperIndex & delayBufferMask];\n\t\t\tconst delaySample: number = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\n\t\t\tdelayIndex++;\n\t\t\t\n\t\t\tconst inputSample: number = supersawSample - delaySample * shape;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tphaseDelta *= phaseDeltaScale;\n\t\t\tdynamism += dynamismDelta;\n\t\t\tshape += shapeDelta;\n\t\t\tdelayLength += delayLengthDelta;\n\t\t\t\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phaseDeltas[0] = phaseDelta;\n\t\ttone.expression = expression;\n\t\ttone.supersawDynamism = dynamism;\n\t\ttone.supersawShape = shape;\n\t\ttone.supersawDelayLength = delayLength;\n\t\ttone.supersawDelayIndex = delayIndex;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\n    private static fmSourceTemplate: string[] = (`\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t`).split(\"\\n\");\n\n    private static operatorSourceTemplate: string[] = (`\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t`).split(\"\\n\");\n\n    private static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        let phaseDelta: number = +tone.phaseDeltas[0];\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\n        if (tone.phases[0] == 0.0) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phase = Math.random() * Config.chipNoiseLength;\n        }\n        const phaseMask: number = Config.chipNoiseLength - 1;\n        let noiseSample: number = +tone.noiseSample;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta * instrumentState.noisePitchFilterMult);\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const waveSample: number = wave[phase & phaseMask];\n\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.chipNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.noiseSample = noiseSample;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const samplesInPeriod: number = (1 << 7);\n        let phaseDelta: number = tone.phaseDeltas[0] * samplesInPeriod;\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let noiseSample: number = +tone.noiseSample;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\n        if (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\n\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta);\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseInt: number = phase | 0;\n            const index: number = phaseInt & phaseMask;\n            let waveSample: number = wave[index];\n            const phaseRatio: number = phase - phaseInt;\n            waveSample += (wave[index + 1] - waveSample) * phaseRatio;\n\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\n\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta / samplesInPeriod;\n        tone.expression = expression;\n        tone.noiseSample = noiseSample;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        let wave: Float32Array = instrumentState.getDrumsetWave(tone.drumsetPitch!);\n        const referenceDelta: number = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch!, ((synth.song) ? synth.song.edo : 12));\n        let phaseDelta: number = tone.phaseDeltas[0] / referenceDelta;\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\n        if (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseInt: number = phase | 0;\n            const index: number = phaseInt & phaseMask;\n            let noiseSample: number = wave[index];\n            const phaseRatio: number = phase - phaseInt;\n            noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta * referenceDelta;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static modSynth(synth: Synth, stereoBufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\n        // Note: present modulator value is tone.expressionStarts[0].\n\n        if (!synth.song) return;\n\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n        // Flagged as invalid because unused by current settings, skip\n        if (instrument.invalidModulators[mod]) return;\n\n        let setting: number = instrument.modulators[mod];\n\n        // Generate list of used instruments\n        let usedInstruments: number[] = [];\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\n            // Instrument doesn't matter for song, just push a random index to run the modsynth once\n            usedInstruments.push(0);\n        } else {\n            // All\n            if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                for (let i: number = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                    usedInstruments.push(i);\n                }\n            }\n            // Active\n            else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar)!.instruments;\n            } else {\n                usedInstruments.push(instrument.modInstruments[mod]);\n            }\n        }\n\n        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n\n            // If mods are being held (for smoother playback while recording mods), use those values instead.\n            for (let i: number = 0; i < synth.heldMods.length; i++) {\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\n                    if (synth.heldMods[i].setting == setting)\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n                }\n                else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n                }\n            }\n\n            // Reset arps, but only at the start of the note\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\n            }\n            // Denote next bar skip\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\n                synth.wantToSkip = true;\n            }\n            // Extra info for eq filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"eq filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n\n                if (!tgtInstrument.eqFilterType) {\n\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                        let pinIdx: number = 0;\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                        // 0 to 1 based on distance to next morph\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                        // Compute the new settings to go to.\n                        if (tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                        } else {\n                            // No mutation will occur to the filter object so we can safely return it without copying\n                            tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;\n                        }\n\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                    else {\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {\n                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpEqFilterEnd == null) {\n                            tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());\n                        }\n\n                        if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) { // X\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            } else { // Y\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n            // Extra info for note filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"note filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n\n                if (!tgtInstrument.noteFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                        let pinIdx: number = 0;\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                        // 0 to 1 based on distance to next morph\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                        // Compute the new settings to go to.\n                        if (tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                        } else {\n                            // No mutation will occur to the filter object so we can safely return it without copying\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\n                        }\n\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                    else {\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\n                        }\n\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) { // X\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            } else { // Y\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number {\n        let phase: number = Math.random() * waveLength;\n        const phaseMask: number = waveLength - 1;\n\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\n        // otherwise they pop. Try to find a zero crossing.\n        let indexPrev: number = phase & phaseMask;\n        let wavePrev: number = wave[indexPrev];\n        const stride: number = 16;\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\n            const indexNext: number = (indexPrev + stride) & phaseMask;\n            const waveNext: number = wave[indexNext];\n            if (wavePrev * waveNext <= 0.0) {\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\n                for (let i: number = 0; i < stride; i++) {\n                    const innerIndexNext: number = (indexPrev + 1) & phaseMask;\n                    const innerWaveNext: number = wave[innerIndexNext];\n                    if (wavePrev * innerWaveNext <= 0.0) {\n                        // Found the zero crossing again! Now let's find the exact intersection.\n                        const slope: number = innerWaveNext - wavePrev;\n                        phase = indexPrev;\n                        if (Math.abs(slope) > 0.00000001) {\n                            phase += -wavePrev / slope;\n                        }\n                        phase = Math.max(0, phase) % waveLength;\n                        break;\n                    } else {\n                        indexPrev = innerIndexNext;\n                        wavePrev = innerWaveNext;\n                    }\n                }\n                break;\n            } else {\n                indexPrev = indexNext;\n                wavePrev = waveNext;\n            }\n        }\n\n        return phase;\n    }\n\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n    }\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\n    }\n    public static noteSizeToVolumeMult(size: number): number {\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n    }\n    public static volumeMultToNoteSize(volumeMult: number): number {\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\n    }\n\n    public static fadeInSettingToSeconds(setting: number): number {\n        return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n    }\n    public static secondsToFadeInSetting(seconds: number): number {\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n    }\n    public static fadeOutSettingToTicks(setting: number): number {\n        return Config.fadeOutTicks[setting];\n    }\n    public static ticksToFadeOutSetting(ticks: number): number {\n        let lower: number = Config.fadeOutTicks[0];\n        if (ticks <= lower) return 0;\n        for (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\n            let upper: number = Config.fadeOutTicks[i];\n            if (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\n            lower = upper;\n        }\n        return Config.fadeOutTicks.length - 1;\n    }\n\n    public static detuneToCents(detune: number): number {\n        // BeepBox formula, for reference:\n        // return detune * (Math.abs(detune) + 1) / 2;\n        return detune - Config.detuneCenter;\n    }\n    public static centsToDetune(cents: number): number {\n        // BeepBox formula, for reference:\n        // return Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\n        return cents + Config.detuneCenter;\n    }\n\n    public static getOperatorWave(waveform: number, pulseWidth: number) {\n        if (waveform != 3) {\n            return Config.operatorWaves[waveform];\n        }\n        else {\n            return Config.pwmOperatorWaves[pulseWidth];\n        }\n    }\n\n    private getSamplesPerTick(): number {\n        if (this.song == null) return 0;\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\n        }\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\n    }\n\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\n        return this.samplesPerSecond / tickPerSecond;\n    }\n\n    public static fittingPowerOfTwo(x: number): number {\n        return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n    }\n\n    private sanitizeFilters(filters: DynamicBiquadFilter[]): void {\n        let reset: boolean = false;\n        for (const filter of filters) {\n            const output1: number = Math.abs(filter.output1);\n            const output2: number = Math.abs(filter.output2);\n            // If either is a large value, Infinity, or NaN, then just reset all filter history.\n            if (!(output1 < 100) || !(output2 < 100)) {\n                reset = true;\n                break;\n            }\n            if (output1 < epsilon) filter.output1 = 0.0;\n            if (output2 < epsilon) filter.output2 = 0.0;\n        }\n        if (reset) {\n            for (const filter of filters) {\n                filter.output1 = 0.0;\n                filter.output2 = 0.0;\n            }\n        }\n    }\n\n    public static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\n        while (true) {\n            lastIndex--;\n            const index: number = lastIndex & mask;\n            const sample: number = Math.abs(delayLine[index]);\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\n            delayLine[index] = 0.0;\n        }\n    }\n\n    public static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\n        for (let i: number = 0; i < filterCount; i++) {\n            const filter: DynamicBiquadFilter = filters[i];\n            const output1: number = filter.output1;\n            const output2: number = filter.output2;\n            const a1: number = filter.a1;\n            const a2: number = filter.a2;\n            const b0: number = filter.b0;\n            const b1: number = filter.b1;\n            const b2: number = filter.b2;\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n            filter.a1 = a1 + filter.a1Delta;\n            filter.a2 = a2 + filter.a2Delta;\n            if (filter.useMultiplicativeInputCoefficients) {\n                filter.b0 = b0 * filter.b0Delta;\n                filter.b1 = b1 * filter.b1Delta;\n                filter.b2 = b2 * filter.b2Delta;\n            } else {\n                filter.b0 = b0 + filter.b0Delta;\n                filter.b1 = b1 + filter.b1Delta;\n                filter.b2 = b2 + filter.b2Delta;\n            }\n            filter.output2 = output1;\n            filter.output1 = sample;\n            // Updating the input values is waste if the next filter doesn't exist...\n            input2 = output2;\n            input1 = output1;\n        }\n        return sample;\n    }\n}\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\nexport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nexport class Change {\n\tprivate _noop: boolean = true;\n\t\t\n\tprotected _didSomething(): void {\n\t\tthis._noop = false;\n\t}\n\t\t\n\tpublic isNoop(): boolean {\n\t\treturn this._noop;\n\t}\n\t\t\n\tpublic commit(): void {}\n}\n\nexport class UndoableChange extends Change {\n\tprivate _reversed: boolean;\n\tprivate _doneForwards: boolean;\n\tconstructor(reversed: boolean) {\n\t\tsuper();\n\t\tthis._reversed = reversed;\n\t\tthis._doneForwards = !reversed;\n\t}\n\t\t\n\tpublic undo(): void {\n\t\tif (this._reversed) {\n\t\t\tthis._doForwards();\n\t\t\tthis._doneForwards = true;\n\t\t} else {\n\t\t\tthis._doBackwards();\n\t\t\tthis._doneForwards = false;\n\t\t}\n\t}\n\t\t\n\tpublic redo(): void {\n\t\tif (this._reversed) {\n\t\t\tthis._doBackwards();\n\t\t\tthis._doneForwards = false;\n\t\t} else {\n\t\t\tthis._doForwards();\n\t\t\tthis._doneForwards = true;\n\t\t}\n\t}\n\t\t\n\t// isDoneForwards() returns whether or not the Change was most recently \n\t// performed forwards or backwards. If the change created something, do not \n\t// delete it in the change destructor unless the Change was performed \n\t// backwards: \n\tprotected _isDoneForwards(): boolean {\n\t\treturn this._doneForwards;\n\t}\n\t\t\n\tprotected _doForwards(): void {\n\t\tthrow new Error(\"Change.doForwards(): Override me.\");\n\t}\n\t\t\n\tprotected _doBackwards(): void {\n\t\tthrow new Error(\"Change.doBackwards(): Override me.\");\n\t}\n}\n\nexport class ChangeGroup extends Change {\n\tconstructor() {\n\t\tsuper();\n\t}\n\t\t\n\tpublic append(change: Change): void {\n\t\tif (change.isNoop()) return;\n\t\tthis._didSomething();\n\t}\n}\n\nexport class ChangeSequence extends UndoableChange {\n\tprivate _changes: UndoableChange[];\n\tprivate _committed: boolean;\n\tconstructor(changes?: UndoableChange[]) {\n\t\tsuper(false);\n\t\tif (changes == undefined) {\n\t\t\tthis._changes = [];\n\t\t} else {\n\t\t\tthis._changes = changes.concat();\n\t\t}\n\t\tthis._committed = false;\n\t}\n\n\tpublic checkFirst(): UndoableChange | null {\n\t\tif (this._changes.length > 0)\n\t\t\treturn this._changes[0];\n\t\treturn null;\n    }\n\t\t\n\tpublic append(change: UndoableChange): void {\n\t\tif (change.isNoop()) return;\n\t\tthis._changes[this._changes.length] = change;\n\t\tthis._didSomething();\n\t}\n\t\t\n\tprotected _doForwards(): void {\n\t\tfor (let i: number = 0; i < this._changes.length; i++) {\n\t\t\tthis._changes[i].redo();\n\t\t}\n\t}\n\t\t\n\tprotected _doBackwards(): void {\n\t\t\tfor (let i: number = this._changes.length-1; i >= 0 ; i--) {\n\t\t\tthis._changes[i].undo();\n\t\t}\n\t}\n\n\tpublic isCommitted(): boolean {\n\t\treturn this._committed;\n\t}\n\n\tpublic commit(): void {\n\t\tthis._committed = true;\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Algorithm, Dictionary, FilterType, SustainType, InstrumentType, EffectType, AutomationTarget, Config, effectsIncludeDistortion } from \"../synth/SynthConfig\";\nimport { NotePin, Note, makeNotePin, Pattern, FilterSettings, FilterControlPoint, SpectrumWave, HarmonicsWave, Instrument, Channel, Song, Synth } from \"../synth/synth\";\nimport { Preset, PresetCategory, EditorConfig } from \"./EditorConfig\";\nimport { Change, ChangeGroup, ChangeSequence, UndoableChange } from \"./Change\";\nimport { SongDocument } from \"./SongDocument\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { Slider } from \"./HTMLWrapper\";\n\nexport function patternsContainSameInstruments(pattern1Instruments: number[], pattern2Instruments: number[]): boolean {\n    const pattern2Has1Instruments: boolean = pattern1Instruments.every(instrument => pattern2Instruments.indexOf(instrument) != -1);\n    const pattern1Has2Instruments: boolean = pattern2Instruments.every(instrument => pattern1Instruments.indexOf(instrument) != -1);\n    return pattern2Has1Instruments && pattern1Has2Instruments && pattern2Instruments.length == pattern1Instruments.length;\n}\n\nexport function discardInvalidPatternInstruments(instruments: number[], song: Song, channelIndex: number) {\n    const uniqueInstruments: Set<number> = new Set(instruments);\n    instruments.length = 0;\n    instruments.push(...uniqueInstruments);\n    for (let i: number = 0; i < instruments.length; i++) {\n        if (instruments[i] >= song.channels[channelIndex].instruments.length) {\n            instruments.splice(i, 1);\n            i--;\n        }\n    }\n    if (instruments.length > song.getMaxInstrumentsPerPattern(channelIndex)) {\n        instruments.length = song.getMaxInstrumentsPerPattern(channelIndex);\n    }\n    if (instruments.length <= 0) {\n        instruments[0] = 0;\n    }\n}\n\nexport function unionOfUsedNotes(pattern: Pattern, flags: boolean[], edo: number): void {\n    for (const note of pattern.notes) {\n        for (const pitch of note.pitches) {\n            for (const pin of note.pins) {\n                const key: number = (pitch + pin.interval) % edo;\n                if (!flags[key]) {\n                    flags[key] = true;\n                }\n            }\n        }\n    }\n}\n\nexport function generateScaleMap(oldScaleFlags: ReadonlyArray<boolean>, newScaleValue: number, edo: number): number[] {\n    const newScaleFlags: ReadonlyArray<boolean> = Config.scales[newScaleValue].flags;\n    const oldScale: number[] = [];\n    const newScale: number[] = [];\n    for (let i: number = 0; i < edo; i++) {\n        if (oldScaleFlags[i]) oldScale.push(i);\n        if (newScaleFlags[i]) newScale.push(i);\n    }\n    const largerToSmaller: boolean = oldScale.length > newScale.length;\n    const smallerScale: number[] = largerToSmaller ? newScale : oldScale;\n    const largerScale: number[] = largerToSmaller ? oldScale : newScale;\n\n    const roles: string[] = [\"root\", \"second\", \"second\", \"third\", \"third\", \"fourth\", \"tritone\", \"fifth\", \"sixth\", \"sixth\", \"seventh\", \"seventh\", \"root\"];\n    let bestScore: number = Number.MAX_SAFE_INTEGER;\n    let bestIndexMap: number[] = [];\n    const stack: number[][] = [[0]]; // Root always maps to root.\n\n    while (stack.length > 0) {\n        const indexMap: number[] = stack.pop()!;\n\n        if (indexMap.length == smallerScale.length) {\n            // Score this mapping.\n            let score: number = 0;\n            for (let i: number = 0; i < indexMap.length; i++) {\n                score += Math.abs(smallerScale[i] - largerScale[indexMap[i]]);\n                if (roles[smallerScale[i]] != roles[largerScale[indexMap[i]]]) {\n                    // Penalize changing roles.\n                    score += 0.75;\n                }\n            }\n            if (bestScore > score) {\n                bestScore = score;\n                bestIndexMap = indexMap;\n            }\n        } else {\n            // Recursively choose next indices for mapping.\n            const lowIndex: number = indexMap[indexMap.length - 1] + 1;\n            const highIndex: number = largerScale.length - smallerScale.length + indexMap.length;\n            for (let i: number = lowIndex; i <= highIndex; i++) {\n                stack.push(indexMap.concat(i));\n            }\n        }\n    }\n\n    const sparsePitchMap: number[][] = [];\n    for (let i: number = 0; i < bestIndexMap.length; i++) {\n        const smallerScalePitch = smallerScale[i];\n        const largerScalePitch = largerScale[bestIndexMap[i]];\n        sparsePitchMap[i] = largerToSmaller\n            ? [largerScalePitch, smallerScalePitch]\n            : [smallerScalePitch, largerScalePitch];\n    }\n\n    // To make it easier to wrap around.\n    sparsePitchMap.push([edo, edo]);\n    newScale.push(edo);\n\n    let sparseIndex: number = 0;\n    const fullPitchMap: number[] = [];\n    for (let i: number = 0; i < edo; i++) {\n        const oldLow: number = sparsePitchMap[sparseIndex][0];\n        const newLow: number = sparsePitchMap[sparseIndex][1];\n        const oldHigh: number = sparsePitchMap[sparseIndex + 1][0];\n        const newHigh: number = sparsePitchMap[sparseIndex + 1][1];\n        if (i == oldHigh - 1) sparseIndex++;\n\n        const transformedPitch: number = (i - oldLow) * (newHigh - newLow) / (oldHigh - oldLow) + newLow;\n\n        let nearestPitch: number = 0;\n        let nearestPitchDistance: number = Number.MAX_SAFE_INTEGER;\n        for (const newPitch of newScale) {\n            let distance: number = Math.abs(newPitch - transformedPitch);\n            if (roles[newPitch] != roles[i]) {\n                // Again, penalize changing roles.\n                distance += 0.1;\n            }\n            if (nearestPitchDistance > distance) {\n                nearestPitchDistance = distance;\n                nearestPitch = newPitch;\n            }\n        }\n\n        fullPitchMap[i] = nearestPitch;\n    }\n\n    return fullPitchMap;\n}\n\nfunction removeRedundantPins(pins: NotePin[]): void {\n    for (let i: number = 1; i < pins.length - 1;) {\n        if (pins[i - 1].interval == pins[i].interval &&\n            pins[i].interval == pins[i + 1].interval &&\n            pins[i - 1].size == pins[i].size &&\n            pins[i].size == pins[i + 1].size) {\n            pins.splice(i, 1);\n        } else {\n            i++;\n        }\n    }\n}\n\nfunction projectNoteIntoBar(oldNote: Note, timeOffset: number, noteStartPart: number, noteEndPart: number, newNotes: Note[]): void {\n    // Create a new note, and interpret the pitch bend and size events\n    // to determine where we need to insert pins to control interval and volume.\n    const newNote: Note = new Note(-1, noteStartPart, noteEndPart, Config.noteSizeMax, false);\n    newNote.pins.length = 0;\n    newNote.pitches.length = 0;\n    const newNoteLength: number = noteEndPart - noteStartPart;\n\n    for (const pitch of oldNote.pitches) {\n        newNote.pitches.push(pitch);\n    }\n\n    for (let pinIndex: number = 0; pinIndex < oldNote.pins.length; pinIndex++) {\n        const pin: NotePin = oldNote.pins[pinIndex];\n        const newPinTime: number = pin.time + timeOffset;\n        if (newPinTime < 0) {\n            if (pinIndex + 1 >= oldNote.pins.length) throw new Error(\"Error converting pins in note overflow.\");\n            const nextPin: NotePin = oldNote.pins[pinIndex + 1];\n            const nextPinTime: number = nextPin.time + timeOffset;\n            if (nextPinTime > 0) {\n                // Insert an interpolated pin at the start of the new note.\n                const ratio: number = (-newPinTime) / (nextPinTime - newPinTime);\n                newNote.pins.push(makeNotePin(Math.round(pin.interval + ratio * (nextPin.interval - pin.interval)), 0, Math.round(pin.size + ratio * (nextPin.size - pin.size))));\n\n            }\n        } else if (newPinTime <= newNoteLength) {\n            newNote.pins.push(makeNotePin(pin.interval, newPinTime, pin.size));\n        } else {\n            if (pinIndex < 1) throw new Error(\"Error converting pins in note overflow.\");\n            const prevPin: NotePin = oldNote.pins[pinIndex - 1];\n            const prevPinTime: number = prevPin.time + timeOffset;\n            if (prevPinTime < newNoteLength) {\n                // Insert an interpolated pin at the end of the new note.\n                const ratio: number = (newNoteLength - prevPinTime) / (newPinTime - prevPinTime);\n                newNote.pins.push(makeNotePin(Math.round(prevPin.interval + ratio * (pin.interval - prevPin.interval)), newNoteLength, Math.round(prevPin.size + ratio * (pin.size - prevPin.size))));\n            }\n        }\n    }\n    \n    // Fix from Jummbus: Ensure the first pin's interval is zero, adjust pitches and pins to compensate.\n    const offsetInterval: number = newNote.pins[0].interval;\n    for (let pitchIdx: number = 0; pitchIdx < newNote.pitches.length; pitchIdx++) {\n        newNote.pitches[pitchIdx] += offsetInterval;\n    }\n    for (let pinIdx: number = 0; pinIdx < newNote.pins.length; pinIdx++) {\n        newNote.pins[pinIdx].interval -= offsetInterval;\n    }\n\n    let joinedWithPrevNote: boolean = false;\n    if (newNote.start == 0) {\n        newNote.continuesLastPattern = (timeOffset < 0 || oldNote.continuesLastPattern);\n    } else {\n        newNote.continuesLastPattern = false;\n        if (newNotes.length > 0 && oldNote.continuesLastPattern) {\n            const prevNote: Note = newNotes[newNotes.length - 1];\n            if (prevNote.end == newNote.start && Synth.adjacentNotesHaveMatchingPitches(prevNote, newNote)) {\n                joinedWithPrevNote = true;\n                const newIntervalOffset: number = prevNote.pins[prevNote.pins.length - 1].interval;\n                const newTimeOffset: number = prevNote.end - prevNote.start;\n                for (let pinIndex: number = 1; pinIndex < newNote.pins.length; pinIndex++) {\n                    const tempPin: NotePin = newNote.pins[pinIndex];\n                    const transformedPin: NotePin = makeNotePin(tempPin.interval + newIntervalOffset, tempPin.time + newTimeOffset, tempPin.size);\n                    prevNote.pins.push(transformedPin);\n                    prevNote.end = prevNote.start + transformedPin.time;\n                }\n                removeRedundantPins(prevNote.pins);\n            }\n        }\n    }\n    if (!joinedWithPrevNote) {\n        newNotes.push(newNote);\n    }\n}\n\nexport class ChangeMoveAndOverflowNotes extends ChangeGroup {\n    constructor(doc: SongDocument, newBeatsPerBar: number, partsToMove: number) {\n        super();\n\n        const pitchChannels: Channel[] = [];\n        const noiseChannels: Channel[] = [];\n        const modChannels: Channel[] = []\n\n        for (let channelIndex: number = 0; channelIndex < doc.song.getChannelCount(); channelIndex++) {\n            const oldChannel: Channel = doc.song.channels[channelIndex];\n            const newChannel: Channel = new Channel();\n\n            if (channelIndex < doc.song.pitchChannelCount) {\n                pitchChannels.push(newChannel);\n            } else if (channelIndex < doc.song.pitchChannelCount + doc.song.noiseChannelCount) {\n                noiseChannels.push(newChannel);\n            }\n            else {\n                modChannels.push(newChannel);\n            }\n\n            newChannel.muted = oldChannel.muted;\n            newChannel.octave = oldChannel.octave;\n            newChannel.name = oldChannel.name;\n\n            for (const instrument of oldChannel.instruments) {\n                newChannel.instruments.push(instrument);\n            }\n\n            const oldPartsPerBar: number = Config.partsPerBeat * doc.song.beatsPerBar;\n            const newPartsPerBar: number = Config.partsPerBeat * newBeatsPerBar;\n            let currentBar: number = -1;\n            let pattern: Pattern | null = null;\n\n            for (let oldBar: number = 0; oldBar < doc.song.barCount; oldBar++) {\n                const oldPattern: Pattern | null = doc.song.getPattern(channelIndex, oldBar);\n                if (oldPattern != null) {\n                    const oldBarStart: number = oldBar * oldPartsPerBar;\n                    for (const oldNote of oldPattern.notes) {\n\n                        const absoluteNoteStart: number = oldNote.start + oldBarStart + partsToMove;\n                        const absoluteNoteEnd: number = oldNote.end + oldBarStart + partsToMove;\n\n                        const startBar: number = Math.floor(absoluteNoteStart / newPartsPerBar);\n                        const endBar: number = Math.ceil(absoluteNoteEnd / newPartsPerBar);\n                        for (let bar: number = startBar; bar < endBar; bar++) {\n                            const barStartPart: number = bar * newPartsPerBar;\n                            const noteStartPart: number = Math.max(0, absoluteNoteStart - barStartPart);\n                            const noteEndPart: number = Math.min(newPartsPerBar, absoluteNoteEnd - barStartPart);\n\n                            if (noteStartPart < noteEndPart) {\n\n                                // Ensure a pattern exists for the current bar before inserting notes into it.\n                                if (currentBar < bar || pattern == null) {\n                                    currentBar++;\n                                    while (currentBar < bar) {\n                                        newChannel.bars[currentBar] = 0;\n                                        currentBar++;\n                                    }\n                                    pattern = new Pattern();\n                                    newChannel.patterns.push(pattern);\n                                    newChannel.bars[currentBar] = newChannel.patterns.length;\n                                    pattern.instruments.length = 0;\n                                    pattern.instruments.push(...oldPattern.instruments);\n                                }\n\n                                // This is a consideration to allow arbitrary note sequencing, e.g. for mod channels (so the pattern being used can jump around)\n                                pattern = newChannel.patterns[newChannel.bars[bar] - 1];\n\n                                projectNoteIntoBar(oldNote, absoluteNoteStart - barStartPart - noteStartPart, noteStartPart, noteEndPart, pattern.notes);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        removeDuplicatePatterns(pitchChannels);\n        removeDuplicatePatterns(noiseChannels);\n        removeDuplicatePatterns(modChannels);\n        this.append(new ChangeReplacePatterns(doc, pitchChannels, noiseChannels, modChannels));\n    }\n}\n\nclass ChangePins extends UndoableChange {\n    protected _oldStart: number;\n    protected _newStart: number;\n    protected _oldEnd: number;\n    protected _newEnd: number;\n    protected _oldPins: NotePin[];\n    protected _newPins: NotePin[];\n    protected _oldPitches: number[];\n    protected _newPitches: number[];\n    protected _oldContinuesLastPattern: boolean;\n    protected _newContinuesLastPattern: boolean;\n    constructor(protected _doc: SongDocument | null, protected _note: Note) {\n        super(false);\n        this._oldStart = this._note.start;\n        this._oldEnd = this._note.end;\n        this._newStart = this._note.start;\n        this._newEnd = this._note.end;\n        this._oldPins = this._note.pins;\n        this._newPins = [];\n        this._oldPitches = this._note.pitches;\n        this._newPitches = [];\n        this._oldContinuesLastPattern = this._note.continuesLastPattern;\n        this._newContinuesLastPattern = this._note.continuesLastPattern;\n    }\n\n    protected _finishSetup(continuesLastPattern?: boolean): void {\n        for (let i: number = 0; i < this._newPins.length - 1;) {\n            if (this._newPins[i].time >= this._newPins[i + 1].time) {\n                this._newPins.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n\n        removeRedundantPins(this._newPins);\n\n        const firstInterval: number = this._newPins[0].interval;\n        const firstTime: number = this._newPins[0].time;\n        for (let i: number = 0; i < this._oldPitches.length; i++) {\n            this._newPitches[i] = this._oldPitches[i] + firstInterval;\n        }\n        for (let i: number = 0; i < this._newPins.length; i++) {\n            this._newPins[i].interval -= firstInterval;\n            this._newPins[i].time -= firstTime;\n        }\n        this._newStart = this._oldStart + firstTime;\n        this._newEnd = this._newStart + this._newPins[this._newPins.length - 1].time;\n\n        if (continuesLastPattern != undefined) {\n            this._newContinuesLastPattern = continuesLastPattern;\n        }\n        if (this._newStart != 0) {\n            this._newContinuesLastPattern = false;\n        }\n\n        this._doForwards();\n        this._didSomething();\n    }\n\n    protected _doForwards(): void {\n        this._note.pins = this._newPins;\n        this._note.pitches = this._newPitches;\n        this._note.start = this._newStart;\n        this._note.end = this._newEnd;\n        this._note.continuesLastPattern = this._newContinuesLastPattern;\n        if (this._doc != null) this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._note.pins = this._oldPins;\n        this._note.pitches = this._oldPitches;\n        this._note.start = this._oldStart;\n        this._note.end = this._oldEnd;\n        this._note.continuesLastPattern = this._oldContinuesLastPattern;\n        if (this._doc != null) this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeCustomizeInstrument extends Change {\n    constructor(doc: SongDocument) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        if (instrument.preset != instrument.type) {\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeCustomWave extends Change {\n    constructor(doc: SongDocument, newArray: Float32Array) {\n        super();\n        const oldArray: Float32Array = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].customChipWave;\n        var comparisonResult: boolean = true;\n        for (let i: number = 0; i < oldArray.length; i++) {\n            if (oldArray[i] != newArray[i]) {\n                comparisonResult = false;\n                i = oldArray.length;\n            }\n        }\n        if (comparisonResult == false) {\n            let instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n            for (let i: number = 0; i < newArray.length; i++) {\n                instrument.customChipWave[i] = newArray[i];\n            }\n\n            let sum: number = 0.0;\n            for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                sum += instrument.customChipWave[i];\n            }\n            const average: number = sum / instrument.customChipWave.length;\n\n            // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n            let cumulative: number = 0;\n            let wavePrev: number = 0;\n            for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                cumulative += wavePrev;\n                wavePrev = instrument.customChipWave[i] - average;\n                instrument.customChipWaveIntegral[i] = cumulative;\n            }\n\n            instrument.customChipWaveIntegral[64] = 0.0;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangePreset extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.preset;\n        if (oldValue != newValue) {\n            const preset: Preset | null = EditorConfig.valueToPreset(newValue);\n            if (preset != null) {\n                if (preset.customType != undefined) {\n                    instrument.type = preset.customType;\n                    if (!Config.instrumentTypeHasSpecialInterval[instrument.type] && Config.chords[instrument.chord].customInterval) {\n                        instrument.chord = 0;\n                    }\n                    instrument.clearInvalidEnvelopeTargets();\n                } else if (preset.settings != undefined) {\n                    const tempVolume: number = instrument.volume;\n                    const tempPan: number = instrument.pan;\n                    const tempPanDelay = instrument.panDelay;\n                    //const usesPanning: boolean = effectsIncludePanning(instrument.effects);\n                    instrument.fromJsonObject(preset.settings, doc.song.getChannelIsNoise(doc.channel), doc.song.getChannelIsMod(doc.channel), doc.song.rhythm == 0 || doc.song.rhythm == 2, doc.song.rhythm >= 2);\n                    instrument.volume = tempVolume;\n                    instrument.pan = tempPan;\n                    instrument.panDelay = tempPanDelay;\n                    //@jummbus - Disable this check, pan will be on by default.\n                    //if (usesPanning && instrument.pan != Config.panCenter) {\n                        instrument.effects = (instrument.effects | (1 << EffectType.panning));\n                    //}\n                }\n            }\n            instrument.preset = newValue;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeRandomGeneratedInstrument extends Change {\n    constructor(doc: SongDocument) {\n        super();\n\n        interface ItemWeight<T> {\n            readonly item: T;\n            readonly weight: number;\n        }\n        function selectWeightedRandom<T>(entries: ReadonlyArray<ItemWeight<T>>): T {\n            let total: number = 0;\n            for (const entry of entries) {\n                total += entry.weight;\n            }\n            let random: number = Math.random() * total;\n            for (const entry of entries) {\n                random -= entry.weight;\n                if (random <= 0.0) return entry.item;\n            }\n            return entries[(Math.random() * entries.length) | 0].item;\n        }\n        function selectCurvedDistribution(min: number, max: number, peak: number, width: number): number {\n            const entries: Array<ItemWeight<number>> = [];\n            for (let i: number = min; i <= max; i++) {\n                entries.push({ item: i, weight: 1.0 / (Math.pow((i - peak) / width, 2.0) + 1.0) });\n            }\n            return selectWeightedRandom(entries);\n        }\n\n        class PotentialFilterPoint {\n            constructor(\n                public readonly chance: number,\n                public readonly type: FilterType,\n                public readonly minFreq: number,\n                public readonly maxFreq: number,\n                public readonly centerHz: number,\n                public readonly centerGain: number,\n            ) { };\n        }\n        function applyFilterPoints(filter: FilterSettings, potentialPoints: ReadonlyArray<PotentialFilterPoint>): void {\n            filter.reset();\n            const usedFreqs: number[] = [];\n            for (const potentialPoint of potentialPoints) {\n                if (Math.random() > potentialPoint.chance) continue;\n                const point: FilterControlPoint = new FilterControlPoint();\n                point.type = potentialPoint.type;\n                point.freq = selectCurvedDistribution(potentialPoint.minFreq, potentialPoint.maxFreq, FilterControlPoint.getRoundedSettingValueFromHz(potentialPoint.centerHz), 1.0 / Config.filterFreqStep);\n                point.gain = selectCurvedDistribution(0, Config.filterGainRange - 1, Config.filterGainCenter + potentialPoint.centerGain, 2.0 / Config.filterGainStep);\n                if (point.type == FilterType.peak && point.gain == Config.filterGainCenter) continue; // skip pointless points. :P\n                if (usedFreqs.includes(point.freq)) continue;\n                usedFreqs.push(point.freq);\n                filter.controlPoints[filter.controlPointCount] = point;\n                filter.controlPointCount++;\n            }\n        }\n\n        const isNoise: boolean = doc.song.getChannelIsNoise(doc.channel);\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        instrument.effects = 1 << EffectType.panning; // disable all existing effects except panning, which should always be on.\n        instrument.aliases = false;\n        instrument.envelopeCount = 0;\n\n        const midFreq: number = FilterControlPoint.getRoundedSettingValueFromHz(700.0);\n        const maxFreq: number = Config.filterFreqRange - 1;\n        applyFilterPoints(instrument.eqFilter, [\n            new PotentialFilterPoint(0.8, FilterType.lowPass, midFreq, maxFreq, 4000.0, -1),\n            new PotentialFilterPoint(0.4, FilterType.highPass, 0, midFreq - 1, 250.0, -1),\n            new PotentialFilterPoint(0.5, FilterType.peak, 0, maxFreq, 2000.0, 0),\n            new PotentialFilterPoint(0.4, FilterType.peak, 0, maxFreq, 1400.0, 0),\n            new PotentialFilterPoint(0.3, FilterType.peak, 0, maxFreq, 1000.0, 0),\n            new PotentialFilterPoint(0.2, FilterType.peak, 0, maxFreq, 500.0, 0),\n        ]);\n\n        if (isNoise) {\n            const type: InstrumentType = selectWeightedRandom([\n                { item: InstrumentType.noise, weight: 1 },\n                { item: InstrumentType.spectrum, weight: 3 },\n            ]);\n            instrument.preset = instrument.type = type;\n\n            instrument.fadeIn = (Math.random() < 0.8) ? 0 : selectCurvedDistribution(0, Config.fadeInRange - 1, 0, 2);\n            instrument.fadeOut = selectCurvedDistribution(0, Config.fadeOutTicks.length - 1, Config.fadeOutNeutral, 2);\n\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.transition;\n                instrument.transition = Config.transitions.dictionary[selectWeightedRandom([\n                    { item: \"normal\", weight: 30 },\n                    { item: \"interrupt\", weight: 1 },\n                    { item: \"slide\", weight: 2 },\n                ])].index;\n            }\n            if (Math.random() < 0.2) {\n                instrument.effects |= 1 << EffectType.chord;\n                instrument.chord = Config.chords.dictionary[selectWeightedRandom([\n                    { item: \"strum\", weight: 2 },\n                    { item: \"arpeggio\", weight: 1 },\n                ])].index;\n            }\n            if (Math.random() < 0.1) {\n                instrument.pitchShift = selectCurvedDistribution(0, Config.pitchShiftRange - 1, Config.pitchShiftCenter, 2);\n                if (instrument.pitchShift != Config.pitchShiftCenter) {\n                    instrument.effects |= 1 << EffectType.pitchShift;\n                    instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pitchShift\"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([\n                        { item: \"flare 1\", weight: 2 },\n                        { item: \"flare 2\", weight: 1 },\n                        { item: \"flare 3\", weight: 1 },\n                        { item: \"twang 1\", weight: 16 },\n                        { item: \"twang 2\", weight: 8 },\n                        { item: \"twang 3\", weight: 4 },\n                        { item: \"tremolo1\", weight: 1 },\n                        { item: \"tremolo2\", weight: 1 },\n                        { item: \"tremolo3\", weight: 1 },\n                        { item: \"decay 1\", weight: 4 },\n                        { item: \"decay 2\", weight: 2 },\n                        { item: \"decay 3\", weight: 1 },\n                    ])].index);\n                }\n            }\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.vibrato;\n                instrument.vibrato = selectCurvedDistribution(0, Config.echoSustainRange - 1, Config.echoSustainRange >> 1, 2);\n                instrument.vibrato = Config.vibratos.dictionary[selectWeightedRandom([\n                    { item: \"light\", weight: 2 },\n                    { item: \"delayed\", weight: 2 },\n                    { item: \"heavy\", weight: 1 },\n                    { item: \"shaky\", weight: 2 },\n                ])].index;\n            }\n            if (Math.random() < 0.8) {\n                instrument.effects |= 1 << EffectType.noteFilter;\n                applyFilterPoints(instrument.noteFilter, [\n                    new PotentialFilterPoint(1.0, FilterType.lowPass, midFreq, maxFreq, 8000.0, -1),\n                ]);\n                instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([\n                    { item: \"punch\", weight: 4 },\n                    { item: \"flare 1\", weight: 2 },\n                    { item: \"flare 2\", weight: 2 },\n                    { item: \"flare 3\", weight: 2 },\n                    { item: \"twang 1\", weight: 8 },\n                    { item: \"twang 2\", weight: 8 },\n                    { item: \"twang 3\", weight: 8 },\n                    { item: \"swell 1\", weight: 2 },\n                    { item: \"swell 2\", weight: 2 },\n                    { item: \"swell 3\", weight: 1 },\n                    { item: \"tremolo1\", weight: 1 },\n                    { item: \"tremolo2\", weight: 1 },\n                    { item: \"tremolo3\", weight: 1 },\n                    { item: \"tremolo4\", weight: 1 },\n                    { item: \"tremolo5\", weight: 1 },\n                    { item: \"tremolo6\", weight: 1 },\n                    { item: \"decay 1\", weight: 4 },\n                    { item: \"decay 2\", weight: 4 },\n                    { item: \"decay 3\", weight: 4 },\n                ])].index);\n            }\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.distortion;\n                instrument.distortion = selectCurvedDistribution(1, Config.distortionRange - 1, Config.distortionRange - 1, 2);\n            }\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.bitcrusher;\n                instrument.bitcrusherFreq = selectCurvedDistribution(0, Config.bitcrusherFreqRange - 1, Config.bitcrusherFreqRange >> 1, 2);\n                instrument.bitcrusherQuantization = selectCurvedDistribution(0, Config.bitcrusherQuantizationRange - 1, Config.bitcrusherQuantizationRange >> 1, 2);\n            }\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.chorus;\n                instrument.chorus = selectCurvedDistribution(1, Config.chorusRange - 1, Config.chorusRange - 1, 1);\n            }\n            if (Math.random() < 0.1) {\n                instrument.echoSustain = selectCurvedDistribution(0, Config.echoSustainRange - 1, Config.echoSustainRange >> 1, 2);\n                instrument.echoDelay = selectCurvedDistribution(0, Config.echoDelayRange - 1, Config.echoDelayRange >> 1, 2);\n                if (instrument.echoSustain != 0 || instrument.echoDelay != 0) {\n                    instrument.effects |= 1 << EffectType.echo;\n                }\n            }\n            if (Math.random() < 0.5) {\n                instrument.effects |= 1 << EffectType.reverb;\n                instrument.reverb = selectCurvedDistribution(1, Config.reverbRange - 1, 1, 1);\n            }\n\n            function normalize(harmonics: number[]): void {\n                let max: number = 0;\n                for (const value of harmonics) {\n                    if (value > max) max = value;\n                }\n                for (let i: number = 0; i < harmonics.length; i++) {\n                    harmonics[i] = Config.harmonicsMax * harmonics[i] / max;\n                }\n            }\n            switch (type) {\n                case InstrumentType.noise: {\n                    instrument.chipNoise = (Math.random() * Config.chipNoises.length) | 0;\n                } break;\n                case InstrumentType.spectrum: {\n                    const spectrumGenerators: Function[] = [\n                        (): number[] => {\n                            const spectrum: number[] = [];\n                            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                                spectrum[i] = (Math.random() < 0.5) ? Math.random() : 0.0;\n                            }\n                            return spectrum;\n                        },\n                        (): number[] => {\n                            let current: number = 1.0;\n                            const spectrum: number[] = [current];\n                            for (let i = 1; i < Config.spectrumControlPoints; i++) {\n                                current *= Math.pow(2, Math.random() - 0.52);\n                                spectrum[i] = current;\n                            }\n                            return spectrum;\n                        },\n                        (): number[] => {\n                            let current: number = 1.0;\n                            const spectrum: number[] = [current];\n                            for (let i = 1; i < Config.spectrumControlPoints; i++) {\n                                current *= Math.pow(2, Math.random() - 0.52);\n                                spectrum[i] = current * Math.random();\n                            }\n                            return spectrum;\n                        },\n                    ];\n                    const generator = spectrumGenerators[(Math.random() * spectrumGenerators.length) | 0];\n                    const spectrum: number[] = generator();\n                    normalize(spectrum);\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        instrument.spectrumWave.spectrum[i] = Math.round(spectrum[i]);\n                    }\n                    instrument.spectrumWave.markCustomWaveDirty();\n                } break;\n                default: throw new Error(\"Unhandled noise instrument type in random generator.\");\n            }\n        } else {\n            const type: InstrumentType = selectWeightedRandom([\n                { item: InstrumentType.chip, weight: 4 },\n                { item: InstrumentType.pwm, weight: 4 },\n                { item: InstrumentType.supersaw, weight: 5 },\n                // { item: InstrumentType.customChipWave, weight: 3 },\n                { item: InstrumentType.harmonics, weight: 5 },\n                { item: InstrumentType.pickedString, weight: 5 },\n                { item: InstrumentType.spectrum, weight: 1 },\n                { item: InstrumentType.fm, weight: 5 },\n            ]);\n            instrument.preset = instrument.type = type;\n\n            instrument.fadeIn = (Math.random() < 0.5) ? 0 : selectCurvedDistribution(0, Config.fadeInRange - 1, 0, 2);\n            instrument.fadeOut = selectCurvedDistribution(0, Config.fadeOutTicks.length - 1, Config.fadeOutNeutral, 2);\n            if (type == InstrumentType.chip || type == InstrumentType.harmonics || type == InstrumentType.pickedString) {\n                instrument.unison = Config.unisons.dictionary[selectWeightedRandom([\n                    { item: \"none\", weight: 10 },\n                    { item: \"shimmer\", weight: 5 },\n                    { item: \"hum\", weight: 4 },\n                    { item: \"honky tonk\", weight: 3 },\n                    { item: \"dissonant\", weight: 1 },\n                    { item: \"fifth\", weight: 1 },\n                    { item: \"octave\", weight: 2 },\n                    { item: \"bowed\", weight: 2 },\n                    { item: \"piano\", weight: 5 },\n                    { item: \"warbled\", weight: 3 },\n                ])].index;\n            }\n\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.transition;\n                instrument.transition = Config.transitions.dictionary[selectWeightedRandom([\n                    { item: \"interrupt\", weight: 1 },\n                    { item: \"slide\", weight: 2 },\n                ])].index;\n            }\n            if (Math.random() < 0.2) {\n                instrument.effects |= 1 << EffectType.chord;\n                instrument.chord = Config.chords.dictionary[selectWeightedRandom([\n                    { item: \"strum\", weight: 2 },\n                    { item: \"arpeggio\", weight: 1 },\n                ])].index;\n            }\n            if (Math.random() < 0.05) {\n                instrument.pitchShift = selectCurvedDistribution(0, Config.pitchShiftRange - 1, Config.pitchShiftCenter, 1);\n                if (instrument.pitchShift != Config.pitchShiftCenter) {\n                    instrument.effects |= 1 << EffectType.pitchShift;\n                    instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pitchShift\"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([\n                        { item: \"flare 1\", weight: 2 },\n                        { item: \"flare 2\", weight: 1 },\n                        { item: \"flare 3\", weight: 1 },\n                        { item: \"twang 1\", weight: 16 },\n                        { item: \"twang 2\", weight: 8 },\n                        { item: \"twang 3\", weight: 4 },\n                        { item: \"decay 1\", weight: 4 },\n                        { item: \"decay 2\", weight: 2 },\n                        { item: \"decay 3\", weight: 1 },\n                    ])].index);\n                }\n            }\n            if (Math.random() < 0.25) {\n                instrument.effects |= 1 << EffectType.vibrato;\n                instrument.vibrato = selectCurvedDistribution(0, Config.echoSustainRange - 1, Config.echoSustainRange >> 1, 2);\n                instrument.vibrato = Config.vibratos.dictionary[selectWeightedRandom([\n                    { item: \"light\", weight: 2 },\n                    { item: \"delayed\", weight: 2 },\n                    { item: \"heavy\", weight: 1 },\n                    { item: \"shaky\", weight: 2 },\n                ])].index;\n            }\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.distortion;\n                instrument.distortion = selectCurvedDistribution(1, Config.distortionRange - 1, Config.distortionRange - 1, 2);\n            }\n            if (effectsIncludeDistortion(instrument.effects) && Math.random() < 0.8) {\n                instrument.effects |= 1 << EffectType.noteFilter;\n                applyFilterPoints(instrument.noteFilter, [\n                    new PotentialFilterPoint(1.0, FilterType.lowPass, midFreq, maxFreq, 2000.0, -1),\n                    new PotentialFilterPoint(0.9, FilterType.highPass, 0, midFreq - 1, 500.0, -1),\n                    new PotentialFilterPoint(0.4, FilterType.peak, 0, maxFreq, 1400.0, 0),\n                ]);\n            } else if (Math.random() < 0.5) {\n                instrument.effects |= 1 << EffectType.noteFilter;\n                applyFilterPoints(instrument.noteFilter, [\n                    new PotentialFilterPoint(1.0, FilterType.lowPass, midFreq, maxFreq, 8000.0, -1),\n                ]);\n                instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([\n                    { item: \"punch\", weight: 6 },\n                    { item: \"flare 1\", weight: 2 },\n                    { item: \"flare 2\", weight: 4 },\n                    { item: \"flare 3\", weight: 2 },\n                    { item: \"twang 1\", weight: 2 },\n                    { item: \"twang 2\", weight: 4 },\n                    { item: \"twang 3\", weight: 4 },\n                    { item: \"swell 1\", weight: 4 },\n                    { item: \"swell 2\", weight: 2 },\n                    { item: \"swell 3\", weight: 1 },\n                    { item: \"tremolo1\", weight: 1 },\n                    { item: \"tremolo2\", weight: 1 },\n                    { item: \"tremolo3\", weight: 1 },\n                    { item: \"tremolo4\", weight: 1 },\n                    { item: \"tremolo5\", weight: 1 },\n                    { item: \"tremolo6\", weight: 1 },\n                    { item: \"decay 1\", weight: 1 },\n                    { item: \"decay 2\", weight: 2 },\n                    { item: \"decay 3\", weight: 2 },\n                ])].index);\n            }\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.bitcrusher;\n                instrument.bitcrusherFreq = selectCurvedDistribution(0, Config.bitcrusherFreqRange - 1, 0, 2);\n                instrument.bitcrusherQuantization = selectCurvedDistribution(0, Config.bitcrusherQuantizationRange - 1, Config.bitcrusherQuantizationRange >> 1, 2);\n            }\n            if (Math.random() < 0.1) {\n                instrument.effects |= 1 << EffectType.chorus;\n                instrument.chorus = selectCurvedDistribution(1, Config.chorusRange - 1, Config.chorusRange - 1, 1);\n            }\n            if (Math.random() < 0.1) {\n                instrument.echoSustain = selectCurvedDistribution(0, Config.echoSustainRange - 1, Config.echoSustainRange >> 1, 2);\n                instrument.echoDelay = selectCurvedDistribution(0, Config.echoDelayRange - 1, Config.echoDelayRange >> 1, 2);\n                if (instrument.echoSustain != 0 || instrument.echoDelay != 0) {\n                    instrument.effects |= 1 << EffectType.echo;\n                }\n            }\n            if (Math.random() < 0.5) {\n                instrument.effects |= 1 << EffectType.reverb;\n                instrument.reverb = selectCurvedDistribution(1, Config.reverbRange - 1, 1, 1);\n            }\n\n            function normalize(harmonics: number[]): void {\n                let max: number = 0;\n                for (const value of harmonics) {\n                    if (value > max) max = value;\n                }\n                for (let i: number = 0; i < harmonics.length; i++) {\n                    harmonics[i] = Config.harmonicsMax * harmonics[i] / max;\n                }\n            }\n            switch (type) {\n                case InstrumentType.chip: {\n                    instrument.chipWave = (Math.random() * Config.chipWaves.length) | 0;\n                } break;\n                case InstrumentType.pwm:\n                case InstrumentType.supersaw: {\n\t\t\t\t\tif (type == InstrumentType.supersaw) {\n\t\t\t\t\t\tinstrument.supersawDynamism = selectCurvedDistribution(0, Config.supersawDynamismMax, Config.supersawDynamismMax, 2);\n\t\t\t\t\t\tinstrument.supersawSpread = selectCurvedDistribution(0, Config.supersawSpreadMax, Math.ceil(Config.supersawSpreadMax / 3), 4);\n\t\t\t\t\t\tinstrument.supersawShape = selectCurvedDistribution(0, Config.supersawShapeMax, 0, 4);\n\t\t\t\t\t}\n                    instrument.pulseWidth = selectCurvedDistribution(0, Config.pulseWidthRange - 1, Config.pulseWidthRange - 1, 2);\n\n                    if (Math.random() < 0.6) {\n                        instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([\n                            { item: \"punch\", weight: 6 },\n                            { item: \"flare 1\", weight: 2 },\n                            { item: \"flare 2\", weight: 4 },\n                            { item: \"flare 3\", weight: 2 },\n                            { item: \"twang 1\", weight: 2 },\n                            { item: \"twang 2\", weight: 4 },\n                            { item: \"twang 3\", weight: 4 },\n                            { item: \"swell 1\", weight: 4 },\n                            { item: \"swell 2\", weight: 2 },\n                            { item: \"swell 3\", weight: 1 },\n                            { item: \"tremolo1\", weight: 1 },\n                            { item: \"tremolo2\", weight: 1 },\n                            { item: \"tremolo3\", weight: 1 },\n                            { item: \"tremolo4\", weight: 1 },\n                            { item: \"tremolo5\", weight: 1 },\n                            { item: \"tremolo6\", weight: 1 },\n                            { item: \"decay 1\", weight: 1 },\n                            { item: \"decay 2\", weight: 2 },\n                            { item: \"decay 3\", weight: 2 },\n                        ])].index);\n                    }\n                } break;\n                case InstrumentType.pickedString:\n                case InstrumentType.harmonics: {\n                    if (type == InstrumentType.pickedString) {\n                        instrument.stringSustain = (Math.random() * Config.stringSustainRange) | 0;\n                    }\n\n                    const harmonicGenerators: Function[] = [\n                        (): number[] => {\n                            const harmonics: number[] = [];\n                            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                                harmonics[i] = (Math.random() < 0.4) ? Math.random() : 0.0;\n                            }\n                            harmonics[(Math.random() * 8) | 0] = Math.pow(Math.random(), 0.25);\n                            return harmonics;\n                        },\n                        (): number[] => {\n                            let current: number = 1.0;\n                            const harmonics: number[] = [current];\n                            for (let i = 1; i < Config.harmonicsControlPoints; i++) {\n                                current *= Math.pow(2, Math.random() - 0.55);\n                                harmonics[i] = current;\n                            }\n                            return harmonics;\n                        },\n                        (): number[] => {\n                            let current: number = 1.0;\n                            const harmonics: number[] = [current];\n                            for (let i = 1; i < Config.harmonicsControlPoints; i++) {\n                                current *= Math.pow(2, Math.random() - 0.55);\n                                harmonics[i] = current * Math.random();\n                            }\n                            return harmonics;\n                        },\n                    ];\n                    const generator = harmonicGenerators[(Math.random() * harmonicGenerators.length) | 0];\n                    const harmonics: number[] = generator();\n                    normalize(harmonics);\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                        instrument.harmonicsWave.harmonics[i] = Math.round(harmonics[i]);\n                    }\n                    instrument.harmonicsWave.markCustomWaveDirty();\n                } break;\n                case InstrumentType.spectrum: {\n                    const spectrum: number[] = [];\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21;\n                        if (isHarmonic) {\n                            spectrum[i] = Math.pow(Math.random(), 0.25);\n                        } else {\n                            spectrum[i] = Math.pow(Math.random(), 3) * 0.5;\n                        }\n                    }\n                    normalize(spectrum);\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        instrument.spectrumWave.spectrum[i] = Math.round(spectrum[i]);\n                    }\n                    instrument.spectrumWave.markCustomWaveDirty();\n                } break;\n                case InstrumentType.fm: {\n                    instrument.algorithm = (Math.random() * Config.algorithms.length) | 0;\n                    instrument.feedbackType = (Math.random() * Config.feedbacks.length) | 0;\n                    const algorithm: Algorithm = Config.algorithms[instrument.algorithm];\n                    for (let i: number = 0; i < algorithm.carrierCount; i++) {\n                        instrument.operators[i].frequency = selectCurvedDistribution(0, Config.operatorFrequencies.length - 1, 0, 3);\n                        instrument.operators[i].amplitude = selectCurvedDistribution(0, Config.operatorAmplitudeMax, Config.operatorAmplitudeMax - 1, 2);\n                        instrument.operators[i].waveform = Config.operatorWaves.dictionary[selectWeightedRandom([\n                            { item: \"sine\", weight: 10 },\n                            { item: \"triangle\", weight: 6 },\n                            { item: \"sawtooth\", weight: 3 },\n                            { item: \"pulse width\", weight: 6 },\n                            { item: \"ramp\", weight: 3 },\n                            { item: \"trapezoid\", weight: 4 },\n                        ])].index;\n                        if (instrument.operators[i].waveform == 3/*\"pulse width\"*/) {\n                            instrument.operators[i].pulseWidth = selectWeightedRandom([\n                                { item: 0, weight: 3 },\n                                { item: 1, weight: 5 },\n                                { item: 2, weight: 7 },\n                                { item: 3, weight: 10 },\n                                { item: 4, weight: 15 },\n                                { item: 5, weight: 25 }, // 50%\n                                { item: 6, weight: 15 },\n                                { item: 7, weight: 10 },\n                                { item: 8, weight: 7 },\n                                { item: 9, weight: 5 },\n                                { item: 9, weight: 3 },\n                            ]);\n                        }\n                    }\n                    for (let i: number = algorithm.carrierCount; i < Config.operatorCount; i++) {\n                        instrument.operators[i].frequency = selectCurvedDistribution(3, Config.operatorFrequencies.length - 1, 0, 3);\n                        instrument.operators[i].amplitude = (Math.pow(Math.random(), 2) * Config.operatorAmplitudeMax) | 0;\n                        if (instrument.envelopeCount < Config.maxEnvelopeCount && Math.random() < 0.4) {\n                            instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, Config.envelopes.dictionary[selectWeightedRandom([\n                                { item: \"punch\", weight: 2 },\n                                { item: \"flare 1\", weight: 2 },\n                                { item: \"flare 2\", weight: 2 },\n                                { item: \"flare 3\", weight: 2 },\n                                { item: \"twang 1\", weight: 2 },\n                                { item: \"twang 2\", weight: 2 },\n                                { item: \"twang 3\", weight: 2 },\n                                { item: \"swell 1\", weight: 2 },\n                                { item: \"swell 2\", weight: 2 },\n                                { item: \"swell 3\", weight: 2 },\n                                { item: \"tremolo1\", weight: 1 },\n                                { item: \"tremolo2\", weight: 1 },\n                                { item: \"tremolo3\", weight: 1 },\n                                { item: \"tremolo4\", weight: 1 },\n                                { item: \"tremolo5\", weight: 1 },\n                                { item: \"tremolo6\", weight: 1 },\n                                { item: \"decay 1\", weight: 1 },\n                                { item: \"decay 2\", weight: 1 },\n                                { item: \"decay 3\", weight: 1 },\n                            ])].index);\n                            instrument.operators[i].waveform = Config.operatorWaves.dictionary[selectWeightedRandom([\n                                { item: \"sine\", weight: 10 },\n                                { item: \"triangle\", weight: 6 },\n                                { item: \"sawtooth\", weight: 3 },\n                                { item: \"pulse width\", weight: 6 },\n                                { item: \"ramp\", weight: 3 },\n                                { item: \"trapezoid\", weight: 4 },\n                            ])].index;\n                            if (instrument.operators[i].waveform == 3) {\n                                instrument.operators[i].pulseWidth = selectWeightedRandom([\n                                    { item: 0, weight: 3 },\n                                    { item: 1, weight: 5 },\n                                    { item: 2, weight: 7 },\n                                    { item: 3, weight: 10 },\n                                    { item: 4, weight: 15 },\n                                    { item: 5, weight: 25 }, // 50%\n                                    { item: 6, weight: 15 },\n                                    { item: 7, weight: 10 },\n                                    { item: 8, weight: 7 },\n                                    { item: 9, weight: 5 },\n                                    { item: 9, weight: 3 },\n                                ]);\n                            }\n                        }\n                        if (instrument.envelopeCount < Config.maxEnvelopeCount && Math.random() < 0.05) {\n                            instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorFrequency\"].index, i, Config.envelopes.dictionary[selectWeightedRandom([\n                                { item: \"punch\", weight: 4 },\n                                { item: \"flare 1\", weight: 4 },\n                                { item: \"flare 2\", weight: 2 },\n                                { item: \"flare 3\", weight: 1 },\n                                { item: \"twang 1\", weight: 16 },\n                                { item: \"twang 2\", weight: 2 },\n                                { item: \"twang 3\", weight: 1 },\n                                { item: \"swell 1\", weight: 4 },\n                                { item: \"swell 2\", weight: 2 },\n                                { item: \"swell 3\", weight: 1 },\n                                { item: \"decay 1\", weight: 2 },\n                                { item: \"decay 2\", weight: 1 },\n                                { item: \"decay 3\", weight: 1 },\n                            ])].index);\n                        }\n                    }\n                    instrument.feedbackAmplitude = (Math.pow(Math.random(), 3) * Config.operatorAmplitudeMax) | 0;\n                    if (instrument.envelopeCount < Config.maxEnvelopeCount && Math.random() < 0.4) {\n                        instrument.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, Config.envelopes.dictionary[selectWeightedRandom([\n                            { item: \"punch\", weight: 2 },\n                            { item: \"flare 1\", weight: 2 },\n                            { item: \"flare 2\", weight: 2 },\n                            { item: \"flare 3\", weight: 2 },\n                            { item: \"twang 1\", weight: 2 },\n                            { item: \"twang 2\", weight: 2 },\n                            { item: \"twang 3\", weight: 2 },\n                            { item: \"swell 1\", weight: 2 },\n                            { item: \"swell 2\", weight: 2 },\n                            { item: \"swell 3\", weight: 2 },\n                            { item: \"tremolo1\", weight: 1 },\n                            { item: \"tremolo2\", weight: 1 },\n                            { item: \"tremolo3\", weight: 1 },\n                            { item: \"tremolo4\", weight: 1 },\n                            { item: \"tremolo5\", weight: 1 },\n                            { item: \"tremolo6\", weight: 1 },\n                            { item: \"decay 1\", weight: 1 },\n                            { item: \"decay 2\", weight: 1 },\n                            { item: \"decay 3\", weight: 1 },\n                        ])].index);\n                    }\n                } break;\n                default: throw new Error(\"Unhandled pitched instrument type in random generator.\");\n            }\n        }\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeTransition extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.transition;\n        if (oldValue != newValue) {\n            this._didSomething();\n            instrument.transition = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n        }\n    }\n}\n\nexport class ChangeToggleEffects extends Change {\n    constructor(doc: SongDocument, toggleFlag: number, useInstrument: Instrument | null) {\n        super();\n        let instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        if (useInstrument != null)\n            instrument = useInstrument;\n        const oldValue: number = instrument.effects;\n        const wasSelected: boolean = ((oldValue & (1 << toggleFlag)) != 0);\n        const newValue: number = wasSelected ? (oldValue & (~(1 << toggleFlag))) : (oldValue | (1 << toggleFlag));\n        instrument.effects = newValue;\n        // As a special case, toggling the panning effect doesn't remove the preset.\n        if (toggleFlag != EffectType.panning) instrument.preset = instrument.type;\n        // Remove AA when distortion is turned off.\n        if (toggleFlag == EffectType.distortion && wasSelected)\n            instrument.aliases = false;\n        if (wasSelected) instrument.clearInvalidEnvelopeTargets();\n        this._didSomething();\n        doc.notifier.changed();\n    }\n}\n\n\nexport class ChangePatternNumbers extends Change {\n    constructor(doc: SongDocument, value: number, startBar: number, startChannel: number, width: number, height: number) {\n        super();\n        if (value > doc.song.patternsPerChannel) throw new Error(\"invalid pattern\");\n\n        for (let bar: number = startBar; bar < startBar + width; bar++) {\n            for (let channelIndex: number = startChannel; channelIndex < startChannel + height; channelIndex++) {\n                if (doc.song.channels[channelIndex].bars[bar] != value) {\n                    doc.song.channels[channelIndex].bars[bar] = value;\n                    this._didSomething();\n                }\n            }\n        }\n\n        //Make mod channels shift viewed instrument over when pattern numbers change\n        if (startChannel >= doc.song.pitchChannelCount + doc.song.noiseChannelCount) {\n            const pattern: Pattern | null = doc.getCurrentPattern();\n            if (pattern != null) {\n                doc.viewedInstrument[startChannel] = pattern.instruments[0];\n            }\n            else {\n                doc.viewedInstrument[startChannel] = 0;\n            }\n        }\n\n        doc.notifier.changed();\n    }\n}\n\nexport class ChangeBarCount extends Change {\n    constructor(doc: SongDocument, newValue: number, atBeginning: boolean) {\n        super();\n        if (doc.song.barCount != newValue) {\n            for (const channel of doc.song.channels) {\n                if (atBeginning) {\n                    while (channel.bars.length < newValue) {\n                        channel.bars.unshift(0);\n                    }\n                    if (doc.song.barCount > newValue) {\n                        channel.bars.splice(0, doc.song.barCount - newValue);\n                    }\n                } else {\n                    while (channel.bars.length < newValue) {\n                        channel.bars.push(0);\n                    }\n                    channel.bars.length = newValue;\n                }\n            }\n\n            if (atBeginning) {\n                const diff: number = newValue - doc.song.barCount;\n                doc.bar = Math.max(0, doc.bar + diff);\n                if (diff < 0 || doc.barScrollPos > 0) {\n                    doc.barScrollPos = Math.max(0, doc.barScrollPos + diff);\n                }\n                doc.song.loopStart = Math.max(0, doc.song.loopStart + diff);\n            }\n            doc.bar = Math.min(doc.bar, newValue - 1);\n            doc.song.loopLength = Math.min(newValue, doc.song.loopLength);\n            doc.song.loopStart = Math.min(newValue - doc.song.loopLength, doc.song.loopStart);\n            doc.song.barCount = newValue;\n            doc.notifier.changed();\n\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeInsertBars extends Change {\n    constructor(doc: SongDocument, start: number, count: number) {\n        super();\n\n        const newLength: number = Math.min(Config.barCountMax, doc.song.barCount + count);\n        count = newLength - doc.song.barCount;\n        if (count == 0) return;\n\n        for (const channel of doc.song.channels) {\n            while (channel.bars.length < newLength) {\n                channel.bars.splice(start, 0, 0);\n            }\n        }\n        doc.song.barCount = newLength;\n\n        doc.bar += count;\n        doc.barScrollPos += count;\n        if (doc.song.loopStart >= start) {\n            doc.song.loopStart += count;\n        } else if (doc.song.loopStart + doc.song.loopLength >= start) {\n            doc.song.loopLength += count;\n        }\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeDeleteBars extends Change {\n    constructor(doc: SongDocument, start: number, count: number) {\n        super();\n\n        for (const channel of doc.song.channels) {\n            channel.bars.splice(start, count);\n            if (channel.bars.length == 0) channel.bars.push(0);\n        }\n        doc.song.barCount = Math.max(1, doc.song.barCount - count);\n\n        doc.bar = Math.max(0, doc.bar - count);\n\n        doc.barScrollPos = Math.max(0, doc.barScrollPos - count);\n        if (doc.song.loopStart >= start) {\n            doc.song.loopStart = Math.max(0, doc.song.loopStart - count);\n        } else if (doc.song.loopStart + doc.song.loopLength > start) {\n            doc.song.loopLength -= count;\n        }\n        doc.song.loopLength = Math.max(1, Math.min(doc.song.barCount - doc.song.loopStart, doc.song.loopLength));\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeLimiterSettings extends Change {\n    constructor(doc: SongDocument, limitRatio: number, compressionRatio: number, limitThreshold: number, compressionThreshold: number, limitRise: number, limitDecay: number, masterGain: number) {\n        super();\n\n        // This check causes issues with the state change handler because it gets superceded by whenupdated when the limiter prompt closes for some reason, causing the state to revert. I think it's because the notifier change needs to happen right as the prompt closes.\n        //if (limitRatio != doc.song.limitRatio || compressionRatio != doc.song.compressionRatio || limitThreshold != doc.song.limitThreshold || compressionThreshold != doc.song.compressionThreshold || limitRise != doc.song.limitRise || limitDecay != doc.song.limitDecay) {\n\n        doc.song.limitRatio = limitRatio;\n        doc.song.compressionRatio = compressionRatio;\n        doc.song.limitThreshold = limitThreshold;\n        doc.song.compressionThreshold = compressionThreshold;\n        doc.song.limitRise = limitRise;\n        doc.song.limitDecay = limitDecay;\n        doc.song.masterGain = masterGain;\n\n        doc.notifier.changed();\n        this._didSomething();\n        //}\n    }\n}\n\nexport class ChangeChannelOrder extends Change {\n    constructor(doc: SongDocument, selectionMin: number, selectionMax: number, offset: number) {\n        super();\n        // Change the order of two channels by swapping.\n        doc.song.channels.splice(selectionMin + offset, 0, ...doc.song.channels.splice(selectionMin, selectionMax - selectionMin + 1));\n\n        // Update mods for each channel\n        selectionMax = Math.max(selectionMax, selectionMin);\n        for (let channelIndex: number = doc.song.pitchChannelCount + doc.song.noiseChannelCount; channelIndex < doc.song.getChannelCount(); channelIndex++) {\n            for (let instrumentIdx: number = 0; instrumentIdx < doc.song.channels[channelIndex].instruments.length; instrumentIdx++) {\n                let instrument: Instrument = doc.song.channels[channelIndex].instruments[instrumentIdx];\n                for (let i: number = 0; i < Config.modCount; i++) {\n                    if (instrument.modChannels[i] >= selectionMin && instrument.modChannels[i] <= selectionMax) {\n                        instrument.modChannels[i] += offset;\n                    }\n                    else if (instrument.modChannels[i] >= selectionMin + offset && instrument.modChannels[i] <= selectionMax + offset) {\n                        instrument.modChannels[i] -= offset * (selectionMax - selectionMin + 1);\n                    }\n                }\n            }\n        }\n\n        doc.notifier.changed();\n        this._didSomething();\n\n    }\n}\n\nexport class ChangeChannelCount extends Change {\n    constructor(doc: SongDocument, newPitchChannelCount: number, newNoiseChannelCount: number, newModChannelCount: number) {\n        super();\n        if (doc.song.pitchChannelCount != newPitchChannelCount || doc.song.noiseChannelCount != newNoiseChannelCount || doc.song.modChannelCount != newModChannelCount) {\n            const newChannels: Channel[] = [];\n\n            function changeGroup(newCount: number, oldCount: number, newStart: number, oldStart: number, octave: number, isNoise: boolean, isMod: boolean): void {\n                for (let i: number = 0; i < newCount; i++) {\n                    const channelIndex = i + newStart;\n                    const oldChannel = i + oldStart;\n                    if (i < oldCount) {\n                        newChannels[channelIndex] = doc.song.channels[oldChannel];\n                    } else {\n                        newChannels[channelIndex] = new Channel();\n                        newChannels[channelIndex].octave = octave;\n                        for (let j: number = 0; j < Config.instrumentCountMin; j++) {\n                            const instrument: Instrument = new Instrument(isNoise, isMod);\n                            if (!isMod) {\n                                const presetValue: number = pickRandomPresetValue(isNoise);\n                                const preset: Preset = EditorConfig.valueToPreset(presetValue)!;\n                                instrument.fromJsonObject(preset.settings, isNoise, isMod, doc.song.rhythm == 0 || doc.song.rhythm == 2, doc.song.rhythm >= 2);\n                                instrument.effects |= (1 << EffectType.panning); // Panning is enabled by default in JB.\n                                instrument.preset = presetValue;\n                            }\n                            newChannels[channelIndex].instruments[j] = instrument;\n                        }\n                        for (let j: number = 0; j < doc.song.patternsPerChannel; j++) {\n                            newChannels[channelIndex].patterns[j] = new Pattern();\n                        }\n                        for (let j: number = 0; j < doc.song.barCount; j++) {\n                            newChannels[channelIndex].bars[j] = 0;\n                        }\n                    }\n                }\n            }\n\n            changeGroup(newPitchChannelCount, doc.song.pitchChannelCount, 0, 0, 3, false, false);\n            changeGroup(newNoiseChannelCount, doc.song.noiseChannelCount, newPitchChannelCount, doc.song.pitchChannelCount, 0, true, false);\n            changeGroup(newModChannelCount, doc.song.modChannelCount, newNoiseChannelCount + newPitchChannelCount, doc.song.pitchChannelCount + doc.song.noiseChannelCount, 0, false, true);\n\n            let oldPitchCount: number = doc.song.pitchChannelCount;\n            doc.song.pitchChannelCount = newPitchChannelCount;\n            doc.song.noiseChannelCount = newNoiseChannelCount;\n            doc.song.modChannelCount = newModChannelCount;\n\n            for (let channelIndex: number = 0; channelIndex < doc.song.getChannelCount(); channelIndex++) {\n                doc.song.channels[channelIndex] = newChannels[channelIndex];\n            }\n            doc.song.channels.length = doc.song.getChannelCount();\n\n            doc.channel = Math.min(doc.channel, newPitchChannelCount + newNoiseChannelCount + newModChannelCount - 1);\n\n            // Determine if any mod instruments now refer to an invalid channel. Unset them if so\n            for (let channelIndex: number = doc.song.pitchChannelCount + doc.song.noiseChannelCount; channelIndex < doc.song.getChannelCount(); channelIndex++) {\n                for (let instrumentIdx: number = 0; instrumentIdx < doc.song.channels[channelIndex].instruments.length; instrumentIdx++) {\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n\n                        let instrument: Instrument = doc.song.channels[channelIndex].instruments[instrumentIdx];\n                        let modChannel: number = instrument.modChannels[mod];\n\n                        // Boundary checking\n                        if ((modChannel >= doc.song.pitchChannelCount && modChannel < oldPitchCount) || modChannel >= doc.song.pitchChannelCount + doc.song.noiseChannelCount) {\n                            instrument.modulators[mod] = Config.modulators.dictionary[\"none\"].index;\n                        }\n\n                        // Bump indices - new pitch channel added, bump all noise mods.\n                        if (modChannel >= oldPitchCount && oldPitchCount < newPitchChannelCount) {\n                            instrument.modChannels[mod] += newPitchChannelCount - oldPitchCount;\n                        }\n                    }\n                }\n            }\n\n            doc.notifier.changed();\n\n            ColorConfig.resetColors();\n\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeAddChannel extends ChangeGroup {\n\tconstructor(doc: SongDocument, index: number, isNoise: boolean, isMod: boolean) {\n\t\tsuper();\n\t\tconst newPitchChannelCount: number = doc.song.pitchChannelCount + (isNoise || isMod ? 0 : 1);\n        const newNoiseChannelCount: number = doc.song.noiseChannelCount + (!isNoise || isMod ? 0 : 1);\n        const newModChannelCount: number = doc.song.modChannelCount + (isNoise || !isMod ? 0 : 1);\n\n        if (newPitchChannelCount <= Config.pitchChannelCountMax && newNoiseChannelCount <= Config.noiseChannelCountMax && newModChannelCount <= Config.modChannelCountMax) {\n            const addedChannelIndex: number = isNoise ? doc.song.pitchChannelCount + doc.song.noiseChannelCount : doc.song.pitchChannelCount;\n            this.append(new ChangeChannelCount(doc, newPitchChannelCount, newNoiseChannelCount, newModChannelCount));\n            if (addedChannelIndex - 1 >= index) {\n                this.append(new ChangeChannelOrder(doc, index, addedChannelIndex - 1, 1));\n            }\n\n            doc.synth.computeLatestModValues();\n            doc.recalcChannelNames = true;\n\t\t}\n\t}\n}\n\nexport class ChangeRemoveChannel extends ChangeGroup {\n\tconstructor(doc: SongDocument, minIndex: number, maxIndex: number) {\n        super();\n\n        const oldMax: number = maxIndex;\n\n        // Update modulators - if a higher index was removed, shift down\n        for (let modChannel: number = doc.song.pitchChannelCount + doc.song.noiseChannelCount; modChannel < doc.song.channels.length; modChannel++) {\n            for (let instrumentIndex: number = 0; instrumentIndex < doc.song.channels[modChannel].instruments.length; instrumentIndex++) {\n                const modInstrument: Instrument = doc.song.channels[modChannel].instruments[instrumentIndex];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    if (modInstrument.modChannels[mod] >= minIndex && modInstrument.modChannels[mod] <= oldMax) {\n                        this.append(new ChangeModChannel(doc, mod, 0, modInstrument));\n                    }\n                    else if (modInstrument.modChannels[mod] > oldMax) {\n                        this.append(new ChangeModChannel(doc, mod, modInstrument.modChannels[mod] - (oldMax - minIndex + 1) + 2, modInstrument));\n                    }\n                }\n            }\n        }\n\n\t\twhile (maxIndex >= minIndex) {\n            const isNoise: boolean = doc.song.getChannelIsNoise(maxIndex);\n            const isMod: boolean = doc.song.getChannelIsMod(maxIndex);\n\t\t\tdoc.song.channels.splice(maxIndex, 1);\n            if (isNoise) {\n                doc.song.noiseChannelCount--;\n            } else if (isMod) {\n                doc.song.modChannelCount--;\n            } else {\n\t\t\t\tdoc.song.pitchChannelCount--;\n\t\t\t}\n            maxIndex--;\n\t\t}\n\t\t\n        if (doc.song.pitchChannelCount < Config.pitchChannelCountMin) {\n            this.append(new ChangeChannelCount(doc, Config.pitchChannelCountMin, doc.song.noiseChannelCount, doc.song.modChannelCount));\n        }\n\n        ColorConfig.resetColors();\n        doc.recalcChannelNames = true;\n\n\t\tthis.append(new ChangeChannelBar(doc, Math.max(0, minIndex - 1), doc.bar));\n\n        doc.synth.computeLatestModValues();\n\n\t\tthis._didSomething();\n\t\tdoc.notifier.changed();\n\t}\n}\n\nexport class ChangeChannelBar extends Change {\n    constructor(doc: SongDocument, newChannel: number, newBar: number, silently: boolean = false) {\n        super();\n        const oldChannel: number = doc.channel;\n        const oldBar: number = doc.bar;\n        doc.channel = newChannel;\n        doc.bar = newBar;\n        if (!silently) {\n            doc.selection.scrollToSelectedPattern();\n        }\n        // Mod channels always jump to viewing the active instrument for the mod.\n        if (doc.song.getChannelIsMod(doc.channel)) {\n            const pattern: Pattern | null = doc.song!.getPattern(doc.channel, doc.bar);\n            if (pattern != null)\n                doc.viewedInstrument[doc.channel] = pattern.instruments[0];\n        }\n        doc.notifier.changed();\n        if (oldChannel != newChannel || oldBar != newBar) {\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeUnison extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.unison;\n        if (oldValue != newValue) {\n            this._didSomething();\n            instrument.unison = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n        }\n    }\n}\n\nexport class ChangeChord extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.chord;\n        if (oldValue != newValue) {\n            this._didSomething();\n            instrument.chord = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n        }\n    }\n}\n\nexport class ChangeVibrato extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.vibrato;\n        if (oldValue != newValue) {\n            instrument.vibrato = newValue;\n            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n            instrument.vibratoSpeed = 10; // default\n            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeVibratoDepth extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        let prevVibrato: number = instrument.vibrato;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"vibrato depth\"].index, doc.channel, doc.getCurrentInstrument());\n\n        doc.notifier.changed();\n        if (oldValue != newValue || prevVibrato != Config.vibratos.length) {\n            instrument.vibratoDepth = newValue / 25;\n            instrument.vibrato = Config.vibratos.length; // Custom\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeEnvelopeSpeed extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        doc.synth.unsetMod(Config.modulators.dictionary[\"envelope speed\"].index, doc.channel, doc.getCurrentInstrument());\n\n        doc.notifier.changed();\n        if (oldValue != newValue) {\n            instrument.envelopeSpeed = newValue;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeVibratoSpeed extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        let prevVibrato: number = instrument.vibrato;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"vibrato speed\"].index, doc.channel, doc.getCurrentInstrument());\n\n        doc.notifier.changed();\n        if (oldValue != newValue || prevVibrato != Config.vibratos.length) {\n            instrument.vibratoSpeed = newValue;\n            instrument.vibrato = Config.vibratos.length; // Custom\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeVibratoDelay extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        let prevVibrato: number = instrument.vibrato;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"vibrato delay\"].index, doc.channel, doc.getCurrentInstrument());\n\n        doc.notifier.changed();\n        if (oldValue != newValue || prevVibrato != Config.vibratos.length) {\n            instrument.vibratoDelay = newValue;\n            instrument.vibrato = Config.vibratos.length; // Custom\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeVibratoType extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.vibratoType;\n        let prevVibrato: number = instrument.vibrato;\n\n        doc.notifier.changed();\n        if (oldValue != newValue || prevVibrato != Config.vibratos.length) {\n            instrument.vibratoType = newValue;\n            instrument.vibrato = Config.vibratos.length; // Custom\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeArpeggioSpeed extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        instrument.arpeggioSpeed = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"arp speed\"].index, doc.channel, doc.getCurrentInstrument());\n\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeFastTwoNoteArp extends Change {\n    constructor(doc: SongDocument, newValue: boolean) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue = instrument.fastTwoNoteArp;\n\n        doc.notifier.changed();\n        if (oldValue != newValue) {\n            instrument.fastTwoNoteArp = newValue;\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeClicklessTransition extends Change {\n    constructor(doc: SongDocument, newValue: boolean) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue = instrument.clicklessTransition;\n\n        doc.notifier.changed();\n        if (oldValue != newValue) {\n            instrument.clicklessTransition = newValue;\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeAliasing extends Change {\n    constructor(doc: SongDocument, newValue: boolean) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue = instrument.aliases;\n\n        doc.notifier.changed();\n        if (oldValue != newValue) {\n            instrument.aliases = newValue;\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeDiscreteEnvelope extends Change {\n    constructor(doc: SongDocument, newValue: boolean) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue = instrument.discreteEnvelope;\n\n        doc.notifier.changed();\n        if (oldValue != newValue) {\n            instrument.discreteEnvelope = newValue;\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeSpectrum extends Change {\n    constructor(doc: SongDocument, instrument: Instrument, spectrumWave: SpectrumWave) {\n        super();\n        spectrumWave.markCustomWaveDirty();\n        instrument.preset = instrument.type;\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeHarmonics extends Change {\n    constructor(doc: SongDocument, instrument: Instrument, harmonicsWave: HarmonicsWave) {\n        super();\n        harmonicsWave.markCustomWaveDirty();\n        instrument.preset = instrument.type;\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeDrumsetEnvelope extends Change {\n    constructor(doc: SongDocument, drumIndex: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.drumsetEnvelopes[drumIndex];\n        if (oldValue != newValue) {\n            instrument.drumsetEnvelopes[drumIndex] = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nclass ChangeInstrumentSlider extends Change {\n    protected _instrument: Instrument;\n    constructor(private _doc: SongDocument) {\n        super();\n        this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n    }\n\n    public commit(): void {\n        if (!this.isNoop()) {\n            this._instrument.preset = this._instrument.type;\n            this._doc.notifier.changed();\n        }\n    }\n}\n\nexport class ChangePulseWidth extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.pulseWidth = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"pulse width\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeSupersawDynamism extends ChangeInstrumentSlider {\n\tconstructor(doc: SongDocument, oldValue: number, newValue: number) {\n\t\tsuper(doc);\n\t\tthis._instrument.supersawDynamism = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"dynamism\"].index, doc.channel, doc.getCurrentInstrument());\n\t\tdoc.notifier.changed();\n\t\tif (oldValue != newValue) this._didSomething();\n\t}\n}\nexport class ChangeSupersawSpread extends ChangeInstrumentSlider {\n\tconstructor(doc: SongDocument, oldValue: number, newValue: number) {\n\t\tsuper(doc);\n\t\tthis._instrument.supersawSpread = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"spread\"].index, doc.channel, doc.getCurrentInstrument());\n\t\tdoc.notifier.changed();\n\t\tif (oldValue != newValue) this._didSomething();\n\t}\n}\nexport class ChangeSupersawShape extends ChangeInstrumentSlider {\n\tconstructor(doc: SongDocument, oldValue: number, newValue: number) {\n\t\tsuper(doc);\n\t\tthis._instrument.supersawShape = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"saw shape\"].index, doc.channel, doc.getCurrentInstrument());\n\t\tdoc.notifier.changed();\n\t\tif (oldValue != newValue) this._didSomething();\n\t}\n}\n\nexport class ChangePitchShift extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.pitchShift = newValue;\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeDetune extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.detune = newValue + Config.detuneCenter;\n        doc.notifier.changed();\n        doc.synth.unsetMod(Config.modulators.dictionary[\"detune\"].index, doc.channel, doc.getCurrentInstrument());\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeDistortion extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.distortion = newValue;\n        doc.notifier.changed();\n        doc.synth.unsetMod(Config.modulators.dictionary[\"distortion\"].index, doc.channel, doc.getCurrentInstrument());\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeBitcrusherFreq extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.bitcrusherFreq = newValue;\n        //doc.synth.unsetMod(Config.modulators.dictionary[\"bit crush\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeBitcrusherQuantization extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        //doc.synth.unsetMod(Config.modulators.dictionary[\"freq crush\"].index, doc.channel, doc.getCurrentInstrument());\n        this._instrument.bitcrusherQuantization = newValue;\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeStringSustain extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.stringSustain = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"sustain\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeStringSustainType extends Change {\n\tconstructor(doc: SongDocument, newValue: SustainType) {\n\t\tsuper();\n\t\tconst instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n\t\tconst oldValue: SustainType = instrument.stringSustainType;\n\t\tif (oldValue != newValue) {\n\t\t\tinstrument.stringSustainType = newValue;\n\t\t\tinstrument.preset = instrument.type;\n\t\t\tdoc.notifier.changed();\n\t\t\tthis._didSomething();\n\t\t}\n\t}\n}\n\nexport class ChangeEQFilterType extends Change {\n    constructor(doc: SongDocument, instrument: Instrument, newValue: boolean) {\n        super();\n        instrument.eqFilterType = newValue;\n        if (newValue == true) { // To Simple - clear eq filter\n            instrument.eqFilter.reset();\n            instrument.tmpEqFilterStart = instrument.eqFilter;\n            instrument.tmpEqFilterEnd = null;\n        }\n        else {\n            // To Advanced - convert filter\n            instrument.eqFilter.convertLegacySettings(instrument.eqFilterSimpleCut, instrument.eqFilterSimplePeak, Config.envelopes.dictionary[\"none\"]);\n            instrument.tmpEqFilterStart = instrument.eqFilter;\n            instrument.tmpEqFilterEnd = null;\n        }\n        instrument.clearInvalidEnvelopeTargets();\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeNoteFilterType extends Change {\n    constructor(doc: SongDocument, instrument: Instrument, newValue: boolean) {\n        super();\n        instrument.noteFilterType = newValue;\n        if (newValue == true) { // To Simple - clear note filter, kill modulators\n            instrument.noteFilter.reset();\n            instrument.tmpNoteFilterStart = instrument.noteFilter;\n            instrument.tmpNoteFilterEnd = null;\n        }\n        else {\n            // To Advanced - convert filter, kill modulators\n            instrument.noteFilter.convertLegacySettings(instrument.noteFilterSimpleCut, instrument.noteFilterSimplePeak, Config.envelopes.dictionary[\"none\"]);\n            instrument.tmpNoteFilterStart = instrument.noteFilter;\n            instrument.tmpNoteFilterEnd = null;\n        }\n        instrument.clearInvalidEnvelopeTargets();\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeEQFilterSimpleCut extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.eqFilterSimpleCut = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"eq filt cut\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeEQFilterSimplePeak extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.eqFilterSimplePeak = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"eq filt peak\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeNoteFilterSimpleCut extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.noteFilterSimpleCut = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"note filt cut\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeNoteFilterSimplePeak extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.noteFilterSimplePeak = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"note filt peak\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeFilterAddPoint extends UndoableChange {\n    private _doc: SongDocument;\n    private _instrument: Instrument;\n    private _instrumentPrevPreset: number;\n    private _instrumentNextPreset: number;\n    private _filterSettings: FilterSettings;\n    private _point: FilterControlPoint;\n    private _index: number;\n    private _envelopeTargetsAdd: number[] = [];\n    private _envelopeIndicesAdd: number[] = [];\n    private _envelopeTargetsRemove: number[] = [];\n    private _envelopeIndicesRemove: number[] = [];\n    constructor(doc: SongDocument, filterSettings: FilterSettings, point: FilterControlPoint, index: number, isNoteFilter: boolean, deletion: boolean = false) {\n        super(deletion);\n        this._doc = doc;\n        this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        this._instrumentNextPreset = deletion ? this._instrument.preset : this._instrument.type;\n        this._instrumentPrevPreset = deletion ? this._instrument.type : this._instrument.preset;\n        this._filterSettings = filterSettings;\n        this._point = point;\n        this._index = index;\n\n        for (let envelopeIndex: number = 0; envelopeIndex < this._instrument.envelopeCount; envelopeIndex++) {\n            let target: number = this._instrument.envelopes[envelopeIndex].target;\n            let targetIndex: number = this._instrument.envelopes[envelopeIndex].index;\n            this._envelopeTargetsAdd.push(target);\n            this._envelopeIndicesAdd.push(targetIndex);\n            if (deletion) {\n                // When deleting a filter control point, find all envelopes that targeted that\n                // point and clear them, and all envelopes that targeted later points and\n                // decrement those to keep them in sync with the new list of points.\n                const automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\n                if (automationTarget.isFilter && (automationTarget.effect == EffectType.noteFilter) == isNoteFilter) {\n                    if (automationTarget.maxCount == Config.filterMaxPoints) {\n                        if (targetIndex == index) {\n                            target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                            targetIndex = 0;\n                        } else if (targetIndex > index) {\n                            targetIndex--;\n                        }\n                    } else {\n                        if (filterSettings.controlPointCount <= 1) {\n                            target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                            targetIndex = 0;\n                        }\n                    }\n                }\n            }\n            this._envelopeTargetsRemove.push(target);\n            this._envelopeIndicesRemove.push(targetIndex);\n        }\n\n        this._didSomething();\n        this.redo();\n    }\n\n    protected _doForwards(): void {\n        this._filterSettings.controlPoints.splice(this._index, 0, this._point);\n        this._filterSettings.controlPointCount++;\n        this._filterSettings.controlPoints.length = this._filterSettings.controlPointCount;\n        this._instrument.preset = this._instrumentNextPreset;\n        for (let envelopeIndex: number = 0; envelopeIndex < this._instrument.envelopeCount; envelopeIndex++) {\n            this._instrument.envelopes[envelopeIndex].target = this._envelopeTargetsAdd[envelopeIndex];\n            this._instrument.envelopes[envelopeIndex].index = this._envelopeIndicesAdd[envelopeIndex];\n        }\n        this._instrument.tmpEqFilterStart = this._instrument.eqFilter;\n        this._instrument.tmpEqFilterEnd = null;\n        this._instrument.tmpNoteFilterStart = this._instrument.noteFilter;\n        this._instrument.tmpNoteFilterEnd = null;\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._filterSettings.controlPoints.splice(this._index, 1);\n        this._filterSettings.controlPointCount--;\n        this._filterSettings.controlPoints.length = this._filterSettings.controlPointCount;\n        this._instrument.preset = this._instrumentPrevPreset;\n        for (let envelopeIndex: number = 0; envelopeIndex < this._instrument.envelopeCount; envelopeIndex++) {\n            this._instrument.envelopes[envelopeIndex].target = this._envelopeTargetsRemove[envelopeIndex];\n            this._instrument.envelopes[envelopeIndex].index = this._envelopeIndicesRemove[envelopeIndex];\n        }\n        this._instrument.tmpEqFilterStart = this._instrument.eqFilter;\n        this._instrument.tmpEqFilterEnd = null;\n        this._instrument.tmpNoteFilterStart = this._instrument.noteFilter;\n        this._instrument.tmpNoteFilterEnd = null;\n        this._doc.notifier.changed();\n    }\n}\n\nexport class FilterMoveData {\n    public point: FilterControlPoint;\n    public freq: number;\n    public gain: number;\n\n    constructor(usePoint: FilterControlPoint, useFreq: number, useGain: number) {\n        this.point = usePoint;\n        this.freq = useFreq;\n        this.gain = useGain;\n    }\n}\n\nexport class ChangeFilterMovePoint extends UndoableChange {\n    private _doc: SongDocument;\n    private _instrument: Instrument;\n    private _instrumentPrevPreset: number;\n    private _instrumentNextPreset: number;\n    private _point: FilterControlPoint;\n    private _oldFreq: number;\n    private _newFreq: number;\n    private _oldGain: number;\n    private _newGain: number;\n    public useNoteFilter: boolean;\n    public pointIndex: number;\n    public pointType: FilterType;\n    constructor(doc: SongDocument, point: FilterControlPoint, oldFreq: number, newFreq: number, oldGain: number, newGain: number, useNoteFilter: boolean, pointIndex: number) {\n        super(false);\n        this._doc = doc;\n        this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        this._instrumentNextPreset = this._instrument.type;\n        this._instrumentPrevPreset = this._instrument.preset;\n        this._point = point;\n        this._oldFreq = oldFreq;\n        this._newFreq = newFreq;\n        this._oldGain = oldGain;\n        this._newGain = newGain;\n        this.useNoteFilter = useNoteFilter;\n        this.pointIndex = pointIndex;\n        this.pointType = point.type;\n        this._didSomething();\n        this.redo();\n    }\n\n    public getMoveData(beforeChange: boolean): FilterMoveData {\n        if (beforeChange) {\n            return new FilterMoveData(this._point, this._oldFreq, this._oldGain);\n        }\n        return new FilterMoveData(this._point, this._newFreq, this._newGain);\n    }\n\n    protected _doForwards(): void {\n        this._point.freq = this._newFreq;\n        this._point.gain = this._newGain;\n        this._instrument.preset = this._instrumentNextPreset;\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._point.freq = this._oldFreq;\n        this._point.gain = this._oldGain;\n        this._instrument.preset = this._instrumentPrevPreset;\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeFilterSettings extends UndoableChange {\n    private _doc: SongDocument;\n    private _instrument: Instrument;\n    private _instrumentPrevPreset: number;\n    private _instrumentNextPreset: number;\n    private _filterSettings: FilterSettings;\n    private _subFilters: (FilterSettings | null)[];\n    private _oldSubFilters: (FilterSettings | null)[];\n    private _oldSettings: FilterSettings;\n    private _useNoteFilter: boolean;\n    constructor(doc: SongDocument, settings: FilterSettings, oldSettings: FilterSettings, useNoteFilter: boolean, subFilters: (FilterSettings | null)[] | null = null, oldSubFilters: (FilterSettings | null)[] | null = null) {\n        super(false);\n        this._doc = doc;\n        this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        this._instrumentNextPreset = this._instrument.type;\n        this._instrumentPrevPreset = this._instrument.preset;\n        this._oldSettings = oldSettings;\n        this._useNoteFilter = useNoteFilter;\n        this._filterSettings = settings;\n        if (subFilters != null && oldSubFilters != null) {\n            this._subFilters = subFilters;\n            this._oldSubFilters = oldSubFilters;\n        }\n        this._instrument.clearInvalidEnvelopeTargets();\n        this._didSomething();\n        this.redo();\n    }\n\n    protected _doForwards(): void {\n\n        if (this._useNoteFilter) {\n            this._instrument.noteFilter = this._filterSettings;\n            if (this._subFilters != null)\n                this._instrument.noteSubFilters = this._subFilters;\n            this._instrument.tmpNoteFilterStart = this._instrument.noteFilter;\n            this._instrument.tmpNoteFilterEnd = null;\n        } else {\n            this._instrument.eqFilter = this._filterSettings;\n            if (this._subFilters != null)\n                this._instrument.eqSubFilters = this._subFilters;\n            this._instrument.tmpEqFilterStart = this._instrument.eqFilter;\n            this._instrument.tmpEqFilterEnd = null;\n        }\n\n        this._instrument.preset = this._instrumentNextPreset;\n        this._instrument.clearInvalidEnvelopeTargets();\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        if (this._useNoteFilter) {\n            this._instrument.noteFilter = this._oldSettings;\n            if (this._oldSubFilters != null)\n                this._instrument.noteSubFilters = this._oldSubFilters;\n            this._instrument.tmpNoteFilterStart = this._instrument.noteFilter;\n            this._instrument.tmpNoteFilterEnd = null;\n        } else {\n            this._instrument.eqFilter = this._oldSettings;\n            if (this._oldSubFilters != null)\n                this._instrument.eqSubFilters = this._oldSubFilters;\n            this._instrument.tmpEqFilterStart = this._instrument.eqFilter;\n            this._instrument.tmpEqFilterEnd = null;\n        }\n        this._instrument.preset = this._instrumentPrevPreset;\n        this._instrument.clearInvalidEnvelopeTargets();\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeFadeInOut extends UndoableChange {\n    private _doc: SongDocument;\n    private _instrument: Instrument;\n    private _instrumentPrevPreset: number;\n    private _instrumentNextPreset: number;\n    private _oldFadeIn: number;\n    private _oldFadeOut: number;\n    private _newFadeIn: number;\n    private _newFadeOut: number;\n    constructor(doc: SongDocument, fadeIn: number, fadeOut: number) {\n        super(false);\n        this._doc = doc;\n        this._instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        this._instrumentNextPreset = this._instrument.type;\n        this._instrumentPrevPreset = this._instrument.preset;\n        this._oldFadeIn = this._instrument.fadeIn;\n        this._oldFadeOut = this._instrument.fadeOut;\n        this._newFadeIn = fadeIn;\n        this._newFadeOut = fadeOut;\n        this._didSomething();\n        this.redo();\n    }\n\n    protected _doForwards(): void {\n        this._instrument.fadeIn = this._newFadeIn;\n        this._instrument.fadeOut = this._newFadeOut;\n        this._instrument.preset = this._instrumentNextPreset;\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._instrument.fadeIn = this._oldFadeIn;\n        this._instrument.fadeOut = this._oldFadeOut;\n        this._instrument.preset = this._instrumentPrevPreset;\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeAlgorithm extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.algorithm;\n        if (oldValue != newValue) {\n            instrument.algorithm = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeFeedbackType extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.feedbackType;\n        if (oldValue != newValue) {\n            instrument.feedbackType = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\n\n\nexport class ChangeOperatorWaveform extends Change {\n    constructor(doc: SongDocument, operatorIndex: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.operators[operatorIndex].waveform;\n        if (oldValue != newValue) {\n            instrument.operators[operatorIndex].waveform = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeOperatorPulseWidth extends Change {\n    constructor(doc: SongDocument, operatorIndex: number, oldValue: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        instrument.operators[operatorIndex].pulseWidth = newValue;\n        instrument.preset = instrument.type;\n        doc.notifier.changed();\n        if (oldValue != newValue) {\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeOperatorFrequency extends Change {\n    constructor(doc: SongDocument, operatorIndex: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.operators[operatorIndex].frequency;\n        if (oldValue != newValue) {\n            instrument.operators[operatorIndex].frequency = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeOperatorAmplitude extends ChangeInstrumentSlider {\n    public operatorIndex: number = 0;\n    constructor(doc: SongDocument, operatorIndex: number, oldValue: number, newValue: number) {\n        super(doc);\n        this.operatorIndex = operatorIndex;\n        this._instrument.operators[operatorIndex].amplitude = newValue;\n        // Not used currently as mod is implemented as multiplicative\n        //doc.synth.unsetMod(ModSetting.mstFMSlider1 + operatorIndex, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeFeedbackAmplitude extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.feedbackAmplitude = newValue;\n        // Not used currently as mod is implemented as multiplicative\n        //doc.synth.unsetMod(ModSetting.mstFMFeedback, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeAddChannelInstrument extends Change {\n    constructor(doc: SongDocument) {\n        super();\n        const channel: Channel = doc.song.channels[doc.channel];\n        const isNoise: boolean = doc.song.getChannelIsNoise(doc.channel);\n        const isMod: boolean = doc.song.getChannelIsMod(doc.channel);\n        const maxInstruments: number = doc.song.getMaxInstrumentsPerChannel();\n        if (channel.instruments.length >= maxInstruments) return;\n        const presetValue: number = pickRandomPresetValue(isNoise);\n        const preset: Preset = EditorConfig.valueToPreset(presetValue)!;\n        const instrument: Instrument = new Instrument(isNoise, isMod);\n        instrument.fromJsonObject(preset.settings, isNoise, isMod, false, false, 1);\n        instrument.effects |= (1 << EffectType.panning); // Panning is enabled by default in JB.\n        instrument.preset = presetValue;\n        instrument.volume = 0;\n        channel.instruments.push(instrument);\n        if (!isMod) { // Mod channels lose information when changing set instrument\n            doc.viewedInstrument[doc.channel] = channel.instruments.length - 1;\n        }\n\n        // Determine if any mod instruments were setting 'all' or 'active'. If so, bump indices since there is now a new instrument in the list.\n        for (let channelIndex: number = doc.song.pitchChannelCount + doc.song.noiseChannelCount; channelIndex < doc.song.getChannelCount(); channelIndex++) {\n            for (let instrumentIndex: number = 0; instrumentIndex < doc.song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n\n                    let instrument: Instrument = doc.song.channels[channelIndex].instruments[instrumentIndex];\n                    let modInstrument: number = instrument.modInstruments[mod];\n                    let modChannel: number = instrument.modChannels[mod];\n\n                    if (modChannel == doc.channel && modInstrument >= doc.song.channels[modChannel].instruments.length-1 ) {\n                        instrument.modInstruments[mod]++;\n                    }\n                }\n            }\n        }\n        // Also, make synth re-compute mod values, since 'all'/'active' mods now retroactively apply to this new instrument.\n        doc.synth.computeLatestModValues();\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeRemoveChannelInstrument extends Change {\n    constructor(doc: SongDocument) {\n        super();\n        const channel: Channel = doc.song.channels[doc.channel];\n        if (channel.instruments.length <= Config.instrumentCountMin) return;\n        const removedIndex: number = doc.viewedInstrument[doc.channel];\n        channel.instruments.splice(removedIndex, 1);\n        if (doc.song.patternInstruments) {\n            for (const pattern of channel.patterns) {\n                for (let i: number = 0; i < pattern.instruments.length; i++) {\n                    if (pattern.instruments[i] == removedIndex) {\n                        pattern.instruments.splice(i, 1);\n                        i--;\n                    } else if (pattern.instruments[i] > removedIndex) {\n                        pattern.instruments[i]--;\n                    }\n                }\n                if (pattern.instruments.length <= 0) {\n                    pattern.instruments[0] = 0;\n                }\n            }\n        }\n\n        // Determine if any mod instruments now refer to an invalid instrument number. Unset them if so\n        for (let channelIndex: number = doc.song.pitchChannelCount + doc.song.noiseChannelCount; channelIndex < doc.song.getChannelCount(); channelIndex++) {\n            for (let instrumentIdx: number = 0; instrumentIdx < doc.song.channels[channelIndex].instruments.length; instrumentIdx++) {\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n\n                    let instrument: Instrument = doc.song.channels[channelIndex].instruments[instrumentIdx];\n                    let modInstrument: number = instrument.modInstruments[mod];\n                    let modChannel: number = instrument.modChannels[mod];\n\n                    if (modChannel == doc.channel) {\n                        // Boundary checking - check if setting was previously higher index\n                        if (modInstrument > removedIndex) {\n                            instrument.modInstruments[mod]--;\n                        }\n                        // Boundary checking - check if setting was set to the last instrument before splice\n                        else if (modInstrument == removedIndex) {\n                            instrument.modInstruments[mod] = 0;\n                            instrument.modulators[mod] = 0;\n                        }\n                    }\n\n                }\n            }\n        }\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeViewInstrument extends Change {\n    constructor(doc: SongDocument, index: number) {\n        super();\n        if (doc.viewedInstrument[doc.channel] != index) {\n            doc.viewedInstrument[doc.channel] = index;\n            if ( doc.channel >= doc.song.pitchChannelCount + doc.song.noiseChannelCount )\n                doc.recentPatternInstruments[doc.channel] = [index];\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeEdo extends Change {\n\tconstructor(doc: SongDocument, newValue: number) {\n\t\tsuper();\n\t\tif (doc.song.edo != newValue) {\n\t\t\tdoc.song.edo = newValue;\n            doc.song.key = 0;\n            doc.song.scale = 0;\n\t\t\tdoc.notifier.changed();\n\t\t\tthis._didSomething();\n\t\t}\n\t}\n}\n\nexport class ChangeInstrumentsFlags extends Change {\n    constructor(doc: SongDocument, newLayeredInstruments: boolean, newPatternInstruments: boolean) {\n        super();\n        const oldLayeredInstruments: boolean = doc.song.layeredInstruments;\n        const oldPatternInstruments: boolean = doc.song.patternInstruments;\n        if (oldLayeredInstruments == newLayeredInstruments && oldPatternInstruments == newPatternInstruments) return;\n        doc.song.layeredInstruments = newLayeredInstruments;\n        doc.song.patternInstruments = newPatternInstruments;\n\n        for (let channelIndex: number = 0; channelIndex < doc.song.getChannelCount(); channelIndex++) {\n            const channel: Channel = doc.song.channels[channelIndex];\n            if (channel.instruments.length > doc.song.getMaxInstrumentsPerChannel()) {\n                channel.instruments.length = doc.song.getMaxInstrumentsPerChannel();\n            }\n            for (let j: number = 0; j < doc.song.patternsPerChannel; j++) {\n                const pattern: Pattern = channel.patterns[j];\n                if (!oldPatternInstruments && newPatternInstruments) {\n                    // patternInstruments was enabled, set up pattern instruments as appropriate.\n                    for (let i: number = 0; i < channel.instruments.length; i++) {\n                        pattern.instruments[i] = i;\n                    }\n                    pattern.instruments.length = channel.instruments.length;\n                }\n                discardInvalidPatternInstruments(pattern.instruments, doc.song, channelIndex);\n            }\n        }\n\n\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\n\nexport class ChangeKey extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        if (doc.song.key != newValue) {\n            doc.song.key = newValue;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeLoop extends Change {\n    constructor(private _doc: SongDocument, public oldStart: number, public oldLength: number, public newStart: number, public newLength: number) {\n        super();\n        this._doc.song.loopStart = this.newStart;\n        this._doc.song.loopLength = this.newLength;\n        this._doc.notifier.changed();\n        if (this.oldStart != this.newStart || this.oldLength != this.newLength) {\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangePitchAdded extends UndoableChange {\n    private _doc: SongDocument;\n    private _note: Note;\n    private _pitch: number;\n    private _index: number;\n    constructor(doc: SongDocument, note: Note, pitch: number, index: number, deletion: boolean = false) {\n        super(deletion);\n        this._doc = doc;\n        this._note = note;\n        this._pitch = pitch;\n        this._index = index;\n        this._didSomething();\n        this.redo();\n    }\n\n    protected _doForwards(): void {\n        this._note.pitches.splice(this._index, 0, this._pitch);\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._note.pitches.splice(this._index, 1);\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeOctave extends Change {\n    constructor(doc: SongDocument, public oldValue: number, newValue: number) {\n        super();\n        doc.song.channels[doc.channel].octave = newValue;\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeRhythm extends ChangeGroup {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n\n        if (doc.song.rhythm != newValue) {\n            doc.song.rhythm = newValue;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangePaste extends ChangeGroup {\n    constructor(doc: SongDocument, pattern: Pattern, notes: any[], selectionStart: number, selectionEnd: number, oldPartDuration: number) {\n        super();\n\n        // Erase the current contents of the selection:\n        this.append(new ChangeNoteTruncate(doc, pattern, selectionStart, selectionEnd, null, true));\n\n        // Mods don't follow this sequence, so skipping for now.\n        let noteInsertionIndex: number = 0;\n        if (!doc.song.getChannelIsMod(doc.channel)) {\n            for (let i: number = 0; i < pattern.notes.length; i++) {\n                if (pattern.notes[i].start < selectionStart) {\n                    if (pattern.notes[i].end > selectionStart) throw new Error();\n\n                    noteInsertionIndex = i + 1;\n                } else if (pattern.notes[i].start < selectionEnd) {\n                    throw new Error();\n                }\n            }\n        }\n        else {\n            noteInsertionIndex = pattern.notes.length;\n        }\n\n        while (selectionStart < selectionEnd) {\n            for (const noteObject of notes) {\n                const noteStart: number = noteObject[\"start\"] + selectionStart;\n                const noteEnd: number = noteObject[\"end\"] + selectionStart;\n                if (noteStart >= selectionEnd) break;\n                const note: Note = new Note(noteObject[\"pitches\"][0], noteStart, noteEnd, noteObject[\"pins\"][0][\"size\"], false);\n                note.pitches.length = 0;\n                for (const pitch of noteObject[\"pitches\"]) {\n                    note.pitches.push(pitch);\n                }\n                note.pins.length = 0;\n                for (const pin of noteObject[\"pins\"]) {\n                    note.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n                }\n                note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true) && (note.start == 0);\n                pattern.notes.splice(noteInsertionIndex++, 0, note);\n                if (note.end > selectionEnd) {\n                    this.append(new ChangeNoteLength(doc, note, note.start, selectionEnd));\n                }\n            }\n\n            selectionStart += oldPartDuration;\n        }\n\n        // Need to re-sort the notes by start time as they might change order because of paste.\n        if (pattern != null && doc.song.getChannelIsMod(doc.channel)) pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangePasteInstrument extends ChangeGroup {\n    constructor(doc: SongDocument, instrument: Instrument, instrumentCopy: any) {\n        super();\n        instrument.fromJsonObject(instrumentCopy, instrumentCopy[\"isDrum\"], instrumentCopy[\"isMod\"], false, false);\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeSetPatternInstruments extends Change {\n    constructor(doc: SongDocument, channelIndex: number, instruments: number[], pattern: Pattern) {\n        super();\n        if (!patternsContainSameInstruments(instruments, pattern.instruments)) {\n            pattern.instruments.length = 0;\n            pattern.instruments.push(...instruments);\n            discardInvalidPatternInstruments(pattern.instruments, doc.song, channelIndex);\n            this._didSomething();\n            doc.notifier.changed();\n        }\n    }\n}\n\nexport class ChangeModChannel extends Change {\n    constructor(doc: SongDocument, mod: number, index: number, useInstrument?: Instrument) {\n        super();\n        let instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        if (useInstrument != undefined)\n            instrument = useInstrument;\n\n        // None, or swapping from song to instrument/vice-versa\n        if (index == 0 || (Config.modulators[instrument.modulators[mod]].forSong && index >= 2) || (!Config.modulators[instrument.modulators[mod]].forSong && index < 2)) {\n            instrument.modulators[mod] = Config.modulators.dictionary[\"none\"].index;\n        }\n\n        instrument.modChannels[mod] = index - 2;\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeModInstrument extends Change {\n    constructor(doc: SongDocument, mod: number, tgtInstrument: number) {\n        super();\n\n        let instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n\n        if (instrument.modInstruments[mod] != tgtInstrument) {\n            instrument.modInstruments[mod] = tgtInstrument;\n\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeModSetting extends Change {\n    constructor(doc: SongDocument, mod: number, text: string) {\n        super();\n\n        let instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n\n        // Populate all instruments that could be targeted by this mod setting.\n        let tgtChannel: number = instrument.modChannels[mod];\n        let usedInstruments: Instrument[] = [];\n        if (tgtChannel >= 0) { // Ignore song/none.\n            if (instrument.modInstruments[mod] == doc.song.channels[tgtChannel].instruments.length) {\n                // All - Populate list of all instruments\n                usedInstruments = usedInstruments.concat(doc.song.channels[tgtChannel].instruments);\n            } else if (instrument.modInstruments[mod] > doc.song.channels[tgtChannel].instruments.length) {\n                // Active - Populate list of only used instruments\n                let tgtPattern: Pattern | null = doc.song.getPattern(tgtChannel, doc.bar);\n                if (tgtPattern != null) {\n                    for (let i: number = 0; i < tgtPattern.instruments.length; i++) {\n                        usedInstruments.push(doc.song.channels[tgtChannel].instruments[tgtPattern.instruments[i]]);\n                    }\n                }\n            }\n            else {\n                // Single instrument used.\n                usedInstruments.push(doc.song.channels[tgtChannel].instruments[instrument.modInstruments[mod]]);\n            }\n        }\n\n        // Check if a new effect is being added - if so add the proper associated effect to the instrument(s), and truncate \"+ \" from start of text.\n        if (text.startsWith(\"+ \")) {\n            text = text.substr(2);\n            for (let i: number = 0; i < usedInstruments.length; i++) {\n                const tgtInstrument: Instrument = usedInstruments[i];\n                if (!(tgtInstrument.effects & (1 << Config.modulators.dictionary[text].associatedEffect))) {\n                    doc.record(new ChangeToggleEffects(doc, Config.modulators.dictionary[text].associatedEffect, tgtInstrument));\n                }\n            }\n        }\n\n        let setting: number = Config.modulators.dictionary[text].index;\n\n        if (instrument.modulators[mod] != setting) {\n\n            instrument.modulators[mod] = setting;\n\n            // Go through each pattern where this instrument is set, and clean up any notes that are out of bounds\n            let cap: number = Config.modulators[setting].maxRawVol;\n\n            for (let i: number = 0; i < doc.song.patternsPerChannel; i++) {\n                const pattern: Pattern = doc.song.channels[doc.channel].patterns[i];\n                if (pattern.instruments[0] == doc.getCurrentInstrument()) {\n                    for (let j: number = 0; j < pattern.notes.length; j++) {\n                        const note: Note = pattern.notes[j];\n                        if (note.pitches[0] == Config.modCount - mod - 1) {\n                            for (let k: number = 0; k < note.pins.length; k++) {\n                                const pin: NotePin = note.pins[k];\n                                if (pin.size > cap)\n                                    pin.size = cap;\n                            }\n                        }\n                    }\n                }\n            }\n\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeModFilter extends Change {\n    constructor(doc: SongDocument, mod: number, type: number) {\n        super();\n\n        let instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n\n        if (instrument.modFilterTypes[mod] != type) {\n\n            instrument.modFilterTypes[mod] = type;\n\n            // Go through each pattern where this instrument is set, and clean up any notes that are out of bounds\n            let cap: number = doc.song.getVolumeCapForSetting(true, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n\n            for (let i: number = 0; i < doc.song.patternsPerChannel; i++) {\n                const pattern: Pattern = doc.song.channels[doc.channel].patterns[i];\n                if (pattern.instruments[0] == doc.getCurrentInstrument()) {\n                    for (let j: number = 0; j < pattern.notes.length; j++) {\n                        const note: Note = pattern.notes[j];\n                        if (note.pitches[0] == Config.modCount - mod - 1) {\n                            for (let k: number = 0; k < note.pins.length; k++) {\n                                const pin: NotePin = note.pins[k];\n                                if (pin.size > cap)\n                                    pin.size = cap;\n                            }\n                        }\n                    }\n                }\n            }\n\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangePatternsPerChannel extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        if (doc.song.patternsPerChannel != newValue) {\n            for (let i: number = 0; i < doc.song.getChannelCount(); i++) {\n                const channelBars: number[] = doc.song.channels[i].bars;\n                const channelPatterns: Pattern[] = doc.song.channels[i].patterns;\n                for (let j: number = 0; j < channelBars.length; j++) {\n                    if (channelBars[j] > newValue) channelBars[j] = 0;\n                }\n                for (let j: number = channelPatterns.length; j < newValue; j++) {\n                    channelPatterns[j] = new Pattern();\n                }\n                channelPatterns.length = newValue;\n            }\n            doc.song.patternsPerChannel = newValue;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeEnsurePatternExists extends UndoableChange {\n    private _doc: SongDocument;\n    private _bar: number;\n    private _channelIndex: number;\n    private _patternIndex: number;\n    private _patternOldNotes: Note[] | null = null;\n    private _oldPatternCount: number;\n    private _newPatternCount: number;\n    private _oldPatternInstruments: number[] | null = null;\n    private _newPatternInstruments: number[];\n\n    constructor(doc: SongDocument, channelIndex: number, bar: number) {\n        super(false);\n        const song: Song = doc.song;\n        if (song.channels[channelIndex].bars[bar] != 0) return;\n\n        this._doc = doc;\n        this._bar = bar;\n        this._channelIndex = channelIndex;\n        this._oldPatternCount = song.patternsPerChannel;\n        this._newPatternCount = song.patternsPerChannel;\n        if (channelIndex < doc.song.pitchChannelCount + doc.song.noiseChannelCount)\n            this._newPatternInstruments = doc.recentPatternInstruments[channelIndex].concat();\n        else\n            this._newPatternInstruments = [doc.viewedInstrument[channelIndex]];\n\n        let firstEmptyUnusedIndex: number | null = null;\n        let firstUnusedIndex: number | null = null;\n        for (let patternIndex: number = 1; patternIndex <= song.patternsPerChannel; patternIndex++) {\n            let used = false;\n            for (let barIndex: number = 0; barIndex < song.barCount; barIndex++) {\n                if (song.channels[channelIndex].bars[barIndex] == patternIndex) {\n                    used = true;\n                    break;\n                }\n            }\n            if (used) continue;\n            if (firstUnusedIndex == null) {\n                firstUnusedIndex = patternIndex;\n            }\n            const pattern: Pattern = song.channels[channelIndex].patterns[patternIndex - 1];\n            if (pattern.notes.length == 0) {\n                firstEmptyUnusedIndex = patternIndex;\n                break;\n            }\n        }\n\n        if (firstEmptyUnusedIndex != null) {\n            this._patternIndex = firstEmptyUnusedIndex;\n            this._oldPatternInstruments = song.channels[channelIndex].patterns[firstEmptyUnusedIndex - 1].instruments.concat();\n        } else if (song.patternsPerChannel < song.barCount) {\n            this._newPatternCount = song.patternsPerChannel + 1;\n            this._patternIndex = song.patternsPerChannel + 1;\n        } else if (firstUnusedIndex != null) {\n            this._patternIndex = firstUnusedIndex;\n            this._patternOldNotes = song.channels[channelIndex].patterns[firstUnusedIndex - 1].notes;\n            this._oldPatternInstruments = song.channels[channelIndex].patterns[firstUnusedIndex - 1].instruments.concat();\n        } else {\n            throw new Error();\n        }\n\n        this._didSomething();\n        this._doForwards();\n    }\n\n    protected _doForwards(): void {\n        const song: Song = this._doc.song;\n        for (let j: number = song.patternsPerChannel; j < this._newPatternCount; j++) {\n            for (let i: number = 0; i < song.getChannelCount(); i++) {\n                song.channels[i].patterns[j] = new Pattern();\n            }\n        }\n        song.patternsPerChannel = this._newPatternCount;\n        const pattern: Pattern = song.channels[this._channelIndex].patterns[this._patternIndex - 1];\n        pattern.notes = [];\n        pattern.instruments.length = 0;\n        pattern.instruments.push(...this._newPatternInstruments);\n        song.channels[this._channelIndex].bars[this._bar] = this._patternIndex;\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        const song: Song = this._doc.song;\n        const pattern: Pattern = song.channels[this._channelIndex].patterns[this._patternIndex - 1];\n        if (this._patternOldNotes != null) pattern.notes = this._patternOldNotes;\n        if (this._oldPatternInstruments != null) {\n            pattern.instruments.length = 0;\n            pattern.instruments.push(...this._oldPatternInstruments);\n        }\n        song.channels[this._channelIndex].bars[this._bar] = 0;\n        for (let i: number = 0; i < song.getChannelCount(); i++) {\n            song.channels[i].patterns.length = this._oldPatternCount;\n        }\n        song.patternsPerChannel = this._oldPatternCount;\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangePinTime extends ChangePins {\n    constructor(doc: SongDocument | null, note: Note, pinIndex: number, shiftedTime: number, continuesLastPattern: boolean) {\n        super(doc, note);\n\n        shiftedTime -= this._oldStart;\n        const originalTime: number = this._oldPins[pinIndex].time;\n        const skipStart: number = Math.min(originalTime, shiftedTime);\n        const skipEnd: number = Math.max(originalTime, shiftedTime);\n        let setPin: boolean = false;\n        for (let i: number = 0; i < this._oldPins.length; i++) {\n            const oldPin: NotePin = note.pins[i];\n            const time: number = oldPin.time;\n            if (time < skipStart) {\n                this._newPins.push(makeNotePin(oldPin.interval, time, oldPin.size));\n            } else if (time > skipEnd) {\n                if (!setPin) {\n                    if (this._newPins.length > 0) continuesLastPattern = note.continuesLastPattern;\n                    this._newPins.push(makeNotePin(this._oldPins[pinIndex].interval, shiftedTime, this._oldPins[pinIndex].size));\n                    setPin = true;\n                }\n                this._newPins.push(makeNotePin(oldPin.interval, time, oldPin.size));\n            }\n        }\n        if (!setPin) {\n            continuesLastPattern = note.continuesLastPattern;\n            this._newPins.push(makeNotePin(this._oldPins[pinIndex].interval, shiftedTime, this._oldPins[pinIndex].size));\n        }\n\n        this._finishSetup(continuesLastPattern);\n    }\n}\n\nexport class ChangePitchBend extends ChangePins {\n    constructor(doc: SongDocument | null, note: Note, bendStart: number, bendEnd: number, bendTo: number, pitchIndex: number) {\n        super(doc, note);\n\n        bendStart -= this._oldStart;\n        bendEnd -= this._oldStart;\n        bendTo -= note.pitches[pitchIndex];\n\n        let setStart: boolean = false;\n        let setEnd: boolean = false;\n        let prevInterval: number = 0;\n        let prevSize: number = Config.noteSizeMax;\n        let persist: boolean = true;\n        let i: number;\n        let direction: number;\n        let stop: number;\n        let push: (item: NotePin) => void;\n        if (bendEnd > bendStart) {\n            i = 0;\n            direction = 1;\n            stop = note.pins.length;\n            push = (item: NotePin) => { this._newPins.push(item); };\n        } else {\n            i = note.pins.length - 1;\n            direction = -1;\n            stop = -1;\n            push = (item: NotePin) => { this._newPins.unshift(item); };\n        }\n        for (; i != stop; i += direction) {\n            const oldPin: NotePin = note.pins[i];\n            const time: number = oldPin.time;\n            for (; ;) {\n                if (!setStart) {\n                    if (time * direction <= bendStart * direction) {\n                        prevInterval = oldPin.interval;\n                        prevSize = oldPin.size;\n                    }\n                    if (time * direction < bendStart * direction) {\n                        push(makeNotePin(oldPin.interval, time, oldPin.size));\n                        break;\n                    } else {\n                        push(makeNotePin(prevInterval, bendStart, prevSize));\n                        setStart = true;\n                    }\n                } else if (!setEnd) {\n                    if (time * direction <= bendEnd * direction) {\n                        prevInterval = oldPin.interval;\n                        prevSize = oldPin.size;\n                    }\n                    if (time * direction < bendEnd * direction) {\n                        break;\n                    } else {\n                        push(makeNotePin(bendTo, bendEnd, prevSize));\n                        setEnd = true;\n                    }\n                } else {\n                    if (time * direction == bendEnd * direction) {\n                        break;\n                    } else {\n                        if (oldPin.interval != prevInterval) persist = false;\n                        push(makeNotePin(persist ? bendTo : oldPin.interval, time, oldPin.size));\n                        break;\n                    }\n                }\n            }\n        }\n        if (!setEnd) {\n            push(makeNotePin(bendTo, bendEnd, prevSize));\n        }\n\n        this._finishSetup();\n    }\n}\n\nexport class ChangePatternRhythm extends ChangeSequence {\n    constructor(doc: SongDocument, pattern: Pattern) {\n        super();\n        const minDivision: number = Config.partsPerBeat / Config.rhythms[doc.song.rhythm].stepsPerBeat;\n\n        const changeRhythm: (oldTime: number) => number = function (oldTime: number): number {\n            let thresholds: number[] | null = Config.rhythms[doc.song.rhythm].roundUpThresholds;\n            if (thresholds != null) {\n                const beatStart: number = Math.floor(oldTime / Config.partsPerBeat) * Config.partsPerBeat;\n                const remainder: number = oldTime - beatStart;\n                let newTime: number = beatStart;\n                for (const threshold of thresholds) {\n                    if (remainder >= threshold) {\n                        newTime += minDivision;\n                    } else {\n                        break;\n                    }\n                }\n                return newTime;\n            } else {\n                return Math.round(oldTime / minDivision) * minDivision;\n            }\n        };\n\n        let i: number = 0;\n        while (i < pattern.notes.length) {\n            const note: Note = pattern.notes[i];\n            if (changeRhythm(note.start) >= changeRhythm(note.end)) {\n                this.append(new ChangeNoteAdded(doc, pattern, note, i, true));\n            } else {\n                this.append(new ChangeRhythmNote(doc, note, changeRhythm));\n                i++;\n            }\n        }\n    }\n}\n\nclass ChangeRhythmNote extends ChangePins {\n    constructor(doc: SongDocument | null, note: Note, changeRhythm: (oldTime: number) => number) {\n        super(doc, note);\n\n        for (const oldPin of this._oldPins) {\n            this._newPins.push(makeNotePin(oldPin.interval, changeRhythm(oldPin.time + this._oldStart) - this._oldStart, oldPin.size));\n        }\n\n        this._finishSetup();\n    }\n}\n\nexport class ChangeMoveNotesSideways extends ChangeGroup {\n    constructor(doc: SongDocument, beatsToMove: number, strategy: string) {\n        super();\n        let partsToMove: number = Math.round((beatsToMove % doc.song.beatsPerBar) * Config.partsPerBeat);\n        if (partsToMove < 0) partsToMove += doc.song.beatsPerBar * Config.partsPerBeat;\n        if (partsToMove == 0.0) return;\n\n        switch (strategy) {\n            case \"wrapAround\": {\n                const partsPerBar: number = Config.partsPerBeat * doc.song.beatsPerBar;\n                for (const channel of doc.song.channels) {\n                    for (const pattern of channel.patterns) {\n                        const newNotes: Note[] = [];\n\n                        for (let bar: number = 1; bar >= 0; bar--) {\n                            const barStartPart: number = bar * partsPerBar;\n\n                            for (const oldNote of pattern.notes) {\n                                const absoluteNoteStart: number = oldNote.start + partsToMove;\n                                const absoluteNoteEnd: number = oldNote.end + partsToMove;\n                                const noteStartPart: number = Math.max(0, absoluteNoteStart - barStartPart);\n                                const noteEndPart: number = Math.min(partsPerBar, absoluteNoteEnd - barStartPart);\n\n                                if (noteStartPart < noteEndPart) {\n                                    projectNoteIntoBar(oldNote, absoluteNoteStart - barStartPart - noteStartPart, noteStartPart, noteEndPart, newNotes);\n                                }\n                            }\n                        }\n\n                        pattern.notes = newNotes;\n                    }\n                }\n            } break;\n            case \"overflow\": {\n                let originalBarCount: number = doc.song.barCount;\n                let originalLoopStart: number = doc.song.loopStart;\n                let originalLoopLength: number = doc.song.loopLength;\n\n                this.append(new ChangeMoveAndOverflowNotes(doc, doc.song.beatsPerBar, partsToMove));\n\n                if (beatsToMove < 0) {\n                    let firstBarIsEmpty: boolean = true;\n                    for (const channel of doc.song.channels) {\n                        if (channel.bars[0] != 0) firstBarIsEmpty = false;\n                    }\n                    if (firstBarIsEmpty) {\n                        for (const channel of doc.song.channels) {\n                            channel.bars.shift();\n                        }\n                        doc.song.barCount--;\n                    } else {\n                        originalBarCount++;\n                        originalLoopStart++;\n                        doc.bar++;\n                    }\n                }\n                while (doc.song.barCount < originalBarCount) {\n                    for (const channel of doc.song.channels) {\n                        channel.bars.push(0);\n                    }\n                    doc.song.barCount++;\n                }\n                doc.song.loopStart = originalLoopStart;\n                doc.song.loopLength = originalLoopLength;\n            } break;\n            default: throw new Error(\"Unrecognized beats-per-bar conversion strategy.\");\n        }\n\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeBeatsPerBar extends ChangeGroup {\n    constructor(doc: SongDocument, newValue: number, strategy: string) {\n        super();\n        if (doc.song.beatsPerBar != newValue) {\n            switch (strategy) {\n                case \"splice\": {\n                    if (doc.song.beatsPerBar > newValue) {\n                        const sequence: ChangeSequence = new ChangeSequence();\n                        for (let i: number = 0; i < doc.song.getChannelCount(); i++) {\n                            for (let j: number = 0; j < doc.song.channels[i].patterns.length; j++) {\n                                sequence.append(new ChangeNoteTruncate(doc, doc.song.channels[i].patterns[j], newValue * Config.partsPerBeat, doc.song.beatsPerBar * Config.partsPerBeat, null, true));\n                            }\n                        }\n                    }\n                } break;\n                case \"stretch\": {\n                    const changeRhythm = function (oldTime: number): number {\n                        return Math.round(oldTime * newValue / doc.song.beatsPerBar);\n                    };\n                    for (let channelIndex: number = 0; channelIndex < doc.song.getChannelCount(); channelIndex++) {\n                        for (let patternIndex: number = 0; patternIndex < doc.song.channels[channelIndex].patterns.length; patternIndex++) {\n                            const pattern: Pattern = doc.song.channels[channelIndex].patterns[patternIndex];\n                            let noteIndex: number = 0;\n                            while (noteIndex < pattern.notes.length) {\n                                const note: Note = pattern.notes[noteIndex];\n                                if (changeRhythm(note.start) >= changeRhythm(note.end)) {\n                                    this.append(new ChangeNoteAdded(doc, pattern, note, noteIndex, true));\n                                } else {\n                                    this.append(new ChangeRhythmNote(doc, note, changeRhythm));\n                                    noteIndex++;\n                                }\n                            }\n                        }\n                    }\n                    this.append(new ChangeTempo(doc, doc.song.tempo, doc.song.tempo * newValue / doc.song.beatsPerBar));\n                } break;\n                case \"overflow\": {\n                    this.append(new ChangeMoveAndOverflowNotes(doc, newValue, 0));\n                    doc.song.loopStart = 0;\n                    doc.song.loopLength = doc.song.barCount;\n                } break;\n                default: throw new Error(\"Unrecognized beats-per-bar conversion strategy.\");\n            }\n\n            doc.song.beatsPerBar = newValue;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeScale extends ChangeGroup {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        if (doc.song.scale != newValue) {\n            doc.song.scale = newValue;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport function pickRandomPresetValue(isNoise: boolean): number {\n    const eligiblePresetValues: number[] = [];\n    for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n        const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n        if (category.name == \"Novelty Presets\") continue;\n        for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n            const preset: Preset = category.presets[presetIndex];\n            if (preset.settings != undefined && (preset.isNoise == true) == isNoise) {\n                eligiblePresetValues.push((categoryIndex << 6) + presetIndex);\n            }\n        }\n    }\n    return eligiblePresetValues[(Math.random() * eligiblePresetValues.length) | 0];\n}\n\nexport function setDefaultInstruments(song: Song): void {\n    for (let channelIndex: number = 0; channelIndex < song.channels.length; channelIndex++) {\n        for (const instrument of song.channels[channelIndex].instruments) {\n            const isNoise: boolean = song.getChannelIsNoise(channelIndex);\n            const isMod: boolean = song.getChannelIsMod(channelIndex);\n            const presetValue: number = (channelIndex == song.pitchChannelCount) ? EditorConfig.nameToPresetValue(Math.random() > 0.5 ? \"chip noise\" : \"standard drumset\")! : pickRandomPresetValue(isNoise);\n            const preset: Preset = EditorConfig.valueToPreset(presetValue)!;\n            instrument.fromJsonObject(preset.settings, isNoise, isMod, song.rhythm == 0 || song.rhythm == 2, song.rhythm >= 2, 1);\n            instrument.effects |= (1 << EffectType.panning); // Panning enabled by default in JB.\n            instrument.preset = presetValue;\n        }\n    }\n}\n\nexport class ChangeSong extends ChangeGroup {\n    constructor(doc: SongDocument, newHash: string) {\n        super();\n        let pitchChannelCount = doc.song.pitchChannelCount;\n        let noiseChannelCount = doc.song.noiseChannelCount;\n        let modChannelCount = doc.song.modChannelCount;\n        doc.song.fromBase64String(newHash);\n        if (pitchChannelCount != doc.song.pitchChannelCount || noiseChannelCount != doc.song.noiseChannelCount || modChannelCount != doc.song.modChannelCount) {\n            ColorConfig.resetColors();\n        }\n        if (newHash == \"\") {\n            this.append(new ChangePatternSelection(doc, 0, 0));\n            doc.selection.resetBoxSelection();\n            setDefaultInstruments(doc.song);\n            doc.song.scale = doc.prefs.defaultScale;\n\n            for (let i: number = 0; i <= doc.song.channels.length; i++) {\n                doc.viewedInstrument[i] = 0;\n                doc.recentPatternInstruments[i] = [0];\n            }\n            doc.viewedInstrument.length = doc.song.channels.length;\n        } else {\n            this.append(new ChangeValidateTrackSelection(doc));\n        }\n        doc.synth.computeLatestModValues();\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeValidateTrackSelection extends Change {\n    constructor(doc: SongDocument) {\n        super();\n        const channelIndex: number = Math.min(doc.channel, doc.song.getChannelCount() - 1);\n        const bar: number = Math.max(0, Math.min(doc.song.barCount - 1, doc.bar));\n        if (doc.channel != channelIndex || doc.bar != bar) {\n\t\t\tdoc.bar = bar;\n\t\t\tdoc.channel = channelIndex;\n\t\t\tthis._didSomething();\n\t\t}\n\t\tdoc.selection.scrollToSelectedPattern();\n\t\tdoc.notifier.changed();\n    }\n}\n\nexport class ChangeReplacePatterns extends ChangeGroup {\n    constructor(doc: SongDocument, pitchChannels: Channel[], noiseChannels: Channel[], modChannels: Channel[]) {\n        super();\n\n        const song: Song = doc.song;\n\n        function removeExtraSparseChannels(channels: Channel[], maxLength: number): void {\n            while (channels.length > maxLength) {\n                let sparsestIndex: number = channels.length - 1;\n                let mostZeroes: number = 0;\n                for (let channelIndex: number = 0; channelIndex < channels.length - 1; channelIndex++) {\n                    let zeroes: number = 0;\n                    for (const bar of channels[channelIndex].bars) {\n                        if (bar == 0) zeroes++;\n                    }\n                    if (zeroes >= mostZeroes) {\n                        sparsestIndex = channelIndex;\n                        mostZeroes = zeroes;\n                    }\n                }\n                channels.splice(sparsestIndex, 1);\n            }\n        }\n\n        removeExtraSparseChannels(pitchChannels, Config.pitchChannelCountMax);\n        removeExtraSparseChannels(noiseChannels, Config.noiseChannelCountMax);\n        removeExtraSparseChannels(modChannels, Config.modChannelCountMax);\n\n        while (pitchChannels.length < Config.pitchChannelCountMin) pitchChannels.push(new Channel());\n        while (noiseChannels.length < Config.noiseChannelCountMin) noiseChannels.push(new Channel());\n        while (modChannels.length < Config.modChannelCountMin) modChannels.push(new Channel());\n\n        // Set minimum counts.\n        song.barCount = 1;\n        song.patternsPerChannel = 8;\n        const combinedChannels: Channel[] = pitchChannels.concat(noiseChannels.concat(modChannels));\n        for (let channelIndex: number = 0; channelIndex < combinedChannels.length; channelIndex++) {\n            const channel: Channel = combinedChannels[channelIndex];\n            song.barCount = Math.max(song.barCount, channel.bars.length);\n            song.patternsPerChannel = Math.max(song.patternsPerChannel, channel.patterns.length);\n            song.channels[channelIndex] = channel;\n        }\n        song.channels.length = combinedChannels.length;\n        song.pitchChannelCount = pitchChannels.length;\n        song.noiseChannelCount = noiseChannels.length;\n        song.modChannelCount = modChannels.length;\n\n        song.barCount = Math.min(Config.barCountMax, song.barCount);\n        song.patternsPerChannel = Math.min(Config.barCountMax, song.patternsPerChannel);\n        for (let channelIndex: number = 0; channelIndex < song.channels.length; channelIndex++) {\n            const channel: Channel = song.channels[channelIndex];\n\n            for (let barIndex: number = 0; barIndex < channel.bars.length; barIndex++) {\n                if (channel.bars[barIndex] > song.patternsPerChannel || channel.bars[barIndex] < 0) {\n                    channel.bars[barIndex] = 0;\n                }\n            }\n            while (channel.bars.length < song.barCount) {\n                channel.bars.push(0);\n            }\n            channel.bars.length = song.barCount;\n\n            if (channel.instruments.length > song.getMaxInstrumentsPerChannel()) {\n                channel.instruments.length = song.getMaxInstrumentsPerChannel();\n            }\n\n            for (const pattern of channel.patterns) {\n                discardInvalidPatternInstruments(pattern.instruments, song, channelIndex);\n            }\n            while (channel.patterns.length < song.patternsPerChannel) {\n                channel.patterns.push(new Pattern());\n            }\n\n            channel.patterns.length = song.patternsPerChannel;\n        }\n\n        song.loopStart = Math.max(0, Math.min(song.barCount - 1, song.loopStart));\n        song.loopLength = Math.min(song.barCount - song.loopStart, song.loopLength);\n\n        this.append(new ChangeValidateTrackSelection(doc));\n        doc.notifier.changed();\n        this._didSomething();\n\n        ColorConfig.resetColors();\n    }\n}\n\nexport function comparePatternNotes(a: Note[], b: Note[]): boolean {\n    if (a.length != b.length) return false;\n\n    for (let noteIndex: number = 0; noteIndex < a.length; noteIndex++) {\n        const oldNote: Note = a[noteIndex];\n        const newNote: Note = b[noteIndex];\n        if (newNote.start != oldNote.start || newNote.end != oldNote.end || newNote.pitches.length != oldNote.pitches.length || newNote.pins.length != oldNote.pins.length) {\n            return false;\n        }\n\n        for (let pitchIndex: number = 0; pitchIndex < oldNote.pitches.length; pitchIndex++) {\n            if (newNote.pitches[pitchIndex] != oldNote.pitches[pitchIndex]) {\n                return false;\n            }\n        }\n\n        for (let pinIndex: number = 0; pinIndex < oldNote.pins.length; pinIndex++) {\n            if (newNote.pins[pinIndex].interval != oldNote.pins[pinIndex].interval || newNote.pins[pinIndex].time != oldNote.pins[pinIndex].time || newNote.pins[pinIndex].size != oldNote.pins[pinIndex].size) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nexport function removeDuplicatePatterns(channels: Channel[]): void {\n    for (const channel of channels) {\n        const newPatterns: Pattern[] = [];\n        for (let bar: number = 0; bar < channel.bars.length; bar++) {\n            if (channel.bars[bar] == 0) continue;\n\n            const oldPattern: Pattern = channel.patterns[channel.bars[bar] - 1];\n\n            let foundMatchingPattern: boolean = false;\n            for (let newPatternIndex: number = 0; newPatternIndex < newPatterns.length; newPatternIndex++) {\n                const newPattern: Pattern = newPatterns[newPatternIndex];\n\n                if (!patternsContainSameInstruments(oldPattern.instruments, newPattern.instruments) || newPattern.notes.length != oldPattern.notes.length) {\n                    continue;\n                }\n\n                if (comparePatternNotes(oldPattern.notes, newPattern.notes)) {\n                    foundMatchingPattern = true;\n                    channel.bars[bar] = newPatternIndex + 1;\n                    break;\n                }\n            }\n\n            if (!foundMatchingPattern) {\n                newPatterns.push(oldPattern);\n                channel.bars[bar] = newPatterns.length;\n            }\n        }\n\n        for (let patternIndex: number = 0; patternIndex < newPatterns.length; patternIndex++) {\n            channel.patterns[patternIndex] = newPatterns[patternIndex];\n        }\n        channel.patterns.length = newPatterns.length;\n    }\n}\n\nexport class ChangeTempo extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        doc.song.tempo = Math.max(Config.tempoMin, Math.min(Config.tempoMax, Math.round(newValue)));\n        doc.synth.unsetMod(Config.modulators.dictionary[\"tempo\"].index);\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeEchoDelay extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.echoDelay = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"echo delay\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeEchoSustain extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.echoSustain = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"echo\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeChorus extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.chorus = newValue;\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeReverb extends ChangeInstrumentSlider {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super(doc);\n        this._instrument.reverb = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"reverb\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeSongReverb extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        doc.song.reverb = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"song reverb\"].index);\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeNoteAdded extends UndoableChange {\n    private _doc: SongDocument;\n    private _pattern: Pattern;\n    private _note: Note;\n    private _index: number;\n    constructor(doc: SongDocument, pattern: Pattern, note: Note, index: number, deletion: boolean = false) {\n        super(deletion);\n        this._doc = doc;\n        this._pattern = pattern;\n        this._note = note;\n        this._index = index;\n        this._didSomething();\n        this.redo();\n    }\n\n    protected _doForwards(): void {\n        this._pattern.notes.splice(this._index, 0, this._note);\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._pattern.notes.splice(this._index, 1);\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeNoteLength extends ChangePins {\n    constructor(doc: SongDocument | null, note: Note, truncStart: number, truncEnd: number) {\n        super(doc, note);\n        const continuesLastPattern: boolean = ((this._oldStart < 0 || note.continuesLastPattern) && truncStart == 0);\n\n        truncStart -= this._oldStart;\n        truncEnd -= this._oldStart;\n        let setStart: boolean = false;\n        let prevSize: number = this._oldPins[0].size;\n        let prevInterval: number = this._oldPins[0].interval;\n        let pushLastPin: boolean = true;\n        let i: number;\n        for (i = 0; i < this._oldPins.length; i++) {\n            const oldPin: NotePin = this._oldPins[i];\n            if (oldPin.time < truncStart) {\n                prevSize = oldPin.size;\n                prevInterval = oldPin.interval;\n            } else {\n                if (oldPin.time > truncStart && !setStart) {\n                    this._newPins.push(makeNotePin(prevInterval, truncStart, prevSize));\n                    setStart = true;\n                }\n                if (oldPin.time <= truncEnd) {\n                    this._newPins.push(makeNotePin(oldPin.interval, oldPin.time, oldPin.size));\n                    if (oldPin.time == truncEnd) {\n                        pushLastPin = false;\n                        break;\n                    }\n                } else {\n                    break;\n                }\n\n            }\n\n        }\n\n        if (pushLastPin) this._newPins.push(makeNotePin(this._oldPins[i].interval, truncEnd, this._oldPins[i].size));\n\n        this._finishSetup(continuesLastPattern);\n    }\n}\n\nexport class ChangeNoteTruncate extends ChangeSequence {\n    constructor(doc: SongDocument, pattern: Pattern, start: number, end: number, skipNote: Note | null = null, force: boolean = false) {\n        super();\n        let i: number = 0;\n        while (i < pattern.notes.length) {\n            const note: Note = pattern.notes[i];\n            if (note == skipNote && skipNote != null) {\n                i++;\n            } else if (note.end <= start) {\n                i++;\n            } else if (note.start >= end) {\n                // Allow out-of-order notes for mods so that all get checked.\n                if (!doc.song.getChannelIsMod(doc.channel)) {\n                    break;\n                } else {\n                    i++;\n                }\n            } else if (note.start < start && note.end > end) {\n                if (!doc.song.getChannelIsMod(doc.channel) || force || (skipNote != null && note.pitches[0] == skipNote.pitches[0])) {\n                    const copy: Note = note.clone();\n                    this.append(new ChangeNoteLength(doc, note, note.start, start));\n                    i++;\n                    this.append(new ChangeNoteAdded(doc, pattern, copy, i, false));\n                    this.append(new ChangeNoteLength(doc, copy, end, copy.end));\n                }\n                i++;\n            } else if (note.start < start) {\n                if (!doc.song.getChannelIsMod(doc.channel) || force || (skipNote != null && note.pitches[0] == skipNote.pitches[0]))\n                    this.append(new ChangeNoteLength(doc, note, note.start, start));\n                i++;\n            } else if (note.end > end) {\n                if (!doc.song.getChannelIsMod(doc.channel) || force || (skipNote != null && note.pitches[0] == skipNote.pitches[0]))\n                    this.append(new ChangeNoteLength(doc, note, end, note.end));\n                i++;\n            } else {\n                if (!doc.song.getChannelIsMod(doc.channel) || force || (skipNote != null && note.pitches[0] == skipNote.pitches[0]))\n                    this.append(new ChangeNoteAdded(doc, pattern, note, i, true));\n                else\n                    i++;\n            }\n        }\n    }\n}\n\nclass ChangeSplitNotesAtSelection extends ChangeSequence {\n    constructor(doc: SongDocument, pattern: Pattern) {\n        super();\n        let i: number = 0;\n        while (i < pattern.notes.length) {\n            const note: Note = pattern.notes[i];\n            if (note.start < doc.selection.patternSelectionStart && doc.selection.patternSelectionStart < note.end) {\n                const copy: Note = note.clone();\n                this.append(new ChangeNoteLength(doc, note, note.start, doc.selection.patternSelectionStart));\n                i++;\n                this.append(new ChangeNoteAdded(doc, pattern, copy, i, false));\n                this.append(new ChangeNoteLength(doc, copy, doc.selection.patternSelectionStart, copy.end));\n                // i++; // The second note might be split again at the end of the selection. Check it again.\n            } else if (note.start < doc.selection.patternSelectionEnd && doc.selection.patternSelectionEnd < note.end) {\n                const copy: Note = note.clone();\n                this.append(new ChangeNoteLength(doc, note, note.start, doc.selection.patternSelectionEnd));\n                i++;\n                this.append(new ChangeNoteAdded(doc, pattern, copy, i, false));\n                this.append(new ChangeNoteLength(doc, copy, doc.selection.patternSelectionEnd, copy.end));\n                i++;\n            } else {\n                i++;\n            }\n        }\n    }\n}\n\nclass ChangeTransposeNote extends UndoableChange {\n    protected _doc: SongDocument;\n    protected _note: Note;\n    protected _oldStart: number;\n    protected _newStart: number;\n    protected _oldEnd: number;\n    protected _newEnd: number;\n    protected _oldPins: NotePin[];\n    protected _newPins: NotePin[];\n    protected _oldPitches: number[];\n    protected _newPitches: number[];\n    constructor(doc: SongDocument, channelIndex: number, note: Note, upward: boolean, ignoreScale: boolean = false, octave: boolean = false) {\n        super(false);\n        this._doc = doc;\n        this._note = note;\n        this._oldPins = note.pins;\n        this._newPins = [];\n        this._oldPitches = note.pitches;\n        this._newPitches = [];\n\n        // I'm disabling pitch transposing for noise channels to avoid\n        // accidentally messing up noise channels when pitch shifting all\n        // channels at once.\n        const isNoise: boolean = doc.song.getChannelIsNoise(channelIndex);\n        if (isNoise != doc.song.getChannelIsNoise(doc.channel)) return;\n\n        // Can't transpose mods\n        if (doc.song.getChannelIsMod(doc.channel)) return;\n\n        const maxPitch: number = (isNoise ? Config.drumCount - 1 : doc.song.edo * Config.pitchOctaves);\n\n        for (let i: number = 0; i < this._oldPitches.length; i++) {\n            let pitch: number = this._oldPitches[i];\n            if (octave && !isNoise) {\n                if (upward) {\n                    pitch = Math.min(maxPitch, pitch + doc.song.edo);\n                } else {\n                    pitch = Math.max(0, pitch - doc.song.edo);\n                }\n            } else {\n                if (upward) {\n                    for (let j: number = pitch + 1; j <= maxPitch; j++) {\n                        if (isNoise || ignoreScale || Config.scales[doc.song.scale].flags[j % doc.song.edo]) {\n                            pitch = j;\n                            break;\n                        }\n                    }\n                } else {\n                    for (let j: number = pitch - 1; j >= 0; j--) {\n                        if (isNoise || ignoreScale || Config.scales[doc.song.scale].flags[j % doc.song.edo]) {\n                            pitch = j;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            let foundMatch: boolean = false;\n            for (let j: number = 0; j < this._newPitches.length; j++) {\n                if (this._newPitches[j] == pitch) {\n                    foundMatch = true;\n                    break;\n                }\n            }\n            if (!foundMatch) this._newPitches.push(pitch);\n        }\n\n        let min: number = 0;\n        let max: number = maxPitch;\n\n        for (let i: number = 1; i < this._newPitches.length; i++) {\n            const diff: number = this._newPitches[0] - this._newPitches[i];\n            if (min < diff) min = diff;\n            if (max > diff + maxPitch) max = diff + maxPitch;\n        }\n\n        for (const oldPin of this._oldPins) {\n            let interval: number = oldPin.interval + this._oldPitches[0];\n\n            if (interval < min) interval = min;\n            if (interval > max) interval = max;\n            if (octave && !isNoise) {\n                if (upward) {\n                    interval = Math.min(max, interval + doc.song.edo);\n                } else {\n                    interval = Math.max(min, interval - doc.song.edo);\n                }\n            } else {\n                if (upward) {\n                    for (let i: number = interval + 1; i <= max; i++) {\n                        if (isNoise || ignoreScale || Config.scales[doc.song.scale].flags[i % doc.song.edo]) {\n                            interval = i;\n                            break;\n                        }\n                    }\n                } else {\n                    for (let i: number = interval - 1; i >= min; i--) {\n                        if (isNoise || ignoreScale || Config.scales[doc.song.scale].flags[i % doc.song.edo]) {\n                            interval = i;\n                            break;\n                        }\n                    }\n                }\n            }\n            interval -= this._newPitches[0];\n            this._newPins.push(makeNotePin(interval, oldPin.time, oldPin.size));\n        }\n\n        if (this._newPins[0].interval != 0) throw new Error(\"wrong pin start interval\");\n\n        for (let i: number = 1; i < this._newPins.length - 1;) {\n            if (this._newPins[i - 1].interval == this._newPins[i].interval &&\n                this._newPins[i].interval == this._newPins[i + 1].interval &&\n                this._newPins[i - 1].size == this._newPins[i].size &&\n                this._newPins[i].size == this._newPins[i + 1].size) {\n                this._newPins.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n\n        this._doForwards();\n        this._didSomething();\n    }\n\n    protected _doForwards(): void {\n        this._note.pins = this._newPins;\n        this._note.pitches = this._newPitches;\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._note.pins = this._oldPins;\n        this._note.pitches = this._oldPitches;\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeTranspose extends ChangeSequence {\n    constructor(doc: SongDocument, channelIndex: number, pattern: Pattern, upward: boolean, ignoreScale: boolean = false, octave: boolean = false) {\n        super();\n        if (doc.selection.patternSelectionActive) {\n            this.append(new ChangeSplitNotesAtSelection(doc, pattern));\n        }\n        for (const note of pattern.notes) {\n            if (doc.selection.patternSelectionActive && (note.end <= doc.selection.patternSelectionStart || note.start >= doc.selection.patternSelectionEnd)) {\n                continue;\n            }\n            this.append(new ChangeTransposeNote(doc, channelIndex, note, upward, ignoreScale, octave));\n        }\n    }\n}\n\nexport class ChangeTrackSelection extends Change {\n    constructor(doc: SongDocument, newX0: number, newX1: number, newY0: number, newY1: number) {\n        super();\n        doc.selection.boxSelectionX0 = newX0;\n        doc.selection.boxSelectionX1 = newX1;\n        doc.selection.boxSelectionY0 = newY0;\n        doc.selection.boxSelectionY1 = newY1;\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangePatternSelection extends UndoableChange {\n    private _doc: SongDocument;\n    private _oldStart: number;\n    private _oldEnd: number;\n    private _oldActive: boolean;\n    private _newStart: number;\n    private _newEnd: number;\n    private _newActive: boolean;\n\n    constructor(doc: SongDocument, newStart: number, newEnd: number) {\n        super(false);\n        this._doc = doc;\n        this._oldStart = doc.selection.patternSelectionStart;\n        this._oldEnd = doc.selection.patternSelectionEnd;\n        this._oldActive = doc.selection.patternSelectionActive;\n        this._newStart = newStart;\n        this._newEnd = newEnd;\n        this._newActive = newStart < newEnd;\n        this._doForwards();\n        this._didSomething();\n    }\n\n    protected _doForwards(): void {\n        this._doc.selection.patternSelectionStart = this._newStart;\n        this._doc.selection.patternSelectionEnd = this._newEnd;\n        this._doc.selection.patternSelectionActive = this._newActive;\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._doc.selection.patternSelectionStart = this._oldStart;\n        this._doc.selection.patternSelectionEnd = this._oldEnd;\n        this._doc.selection.patternSelectionActive = this._oldActive;\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeDragSelectedNotes extends ChangeSequence {\n    constructor(doc: SongDocument, channelIndex: number, pattern: Pattern, parts: number, transpose: number) {\n        super();\n\n        if (parts == 0 && transpose == 0) return;\n\n        if (doc.selection.patternSelectionActive) {\n            this.append(new ChangeSplitNotesAtSelection(doc, pattern));\n        }\n\n        const oldStart: number = doc.selection.patternSelectionStart;\n        const oldEnd: number = doc.selection.patternSelectionEnd;\n        const newStart: number = Math.max(0, Math.min(doc.song.beatsPerBar * Config.partsPerBeat, oldStart + parts));\n        const newEnd: number = Math.max(0, Math.min(doc.song.beatsPerBar * Config.partsPerBeat, oldEnd + parts));\n        if (newStart == newEnd) {\n            // Just erase the current contents of the selection:\n            this.append(new ChangeNoteTruncate(doc, pattern, oldStart, oldEnd, null, true));\n        } else if (parts < 0) {\n            // Clear space for the dragged notes:\n            this.append(new ChangeNoteTruncate(doc, pattern, newStart, Math.min(oldStart, newEnd), null, true));\n        } else {\n            // Clear space for the dragged notes:\n            this.append(new ChangeNoteTruncate(doc, pattern, Math.max(oldEnd, newStart), newEnd, null, true));\n        }\n\n        this.append(new ChangePatternSelection(doc, newStart, newEnd));\n        const draggedNotes = [];\n        let noteInsertionIndex: number = 0;\n        let i: number = 0;\n        while (i < pattern.notes.length) {\n            const note: Note = pattern.notes[i];\n            if (note.end <= oldStart || note.start >= oldEnd) {\n                i++;\n                if (note.end <= newStart) noteInsertionIndex = i;\n            } else {\n                draggedNotes.push(note.clone());\n                this.append(new ChangeNoteAdded(doc, pattern, note, i, true));\n            }\n        }\n\n        for (const note of draggedNotes) {\n            note.start += parts;\n            note.end += parts;\n            if (note.end <= newStart) continue;\n            if (note.start >= newEnd) continue;\n\n            this.append(new ChangeNoteAdded(doc, pattern, note, noteInsertionIndex++, false));\n\n            this.append(new ChangeNoteLength(doc, note, Math.max(note.start, newStart), Math.min(newEnd, note.end)));\n\n            for (let i: number = 0; i < Math.abs(transpose); i++) {\n                this.append(new ChangeTransposeNote(doc, channelIndex, note, transpose > 0, doc.prefs.notesOutsideScale));\n            }\n\n        }\n    }\n}\n\nexport class ChangeHoldingModRecording extends Change {\n    public storedChange: Change | null;\n    public storedValues: number[] | null;\n    public storedSlider: Slider | null;\n    constructor(doc: SongDocument, storedChange: Change | null, storedValues: number[] | null, slider: Slider | null) {\n        super();\n        this.storedChange = storedChange;\n        this.storedValues = storedValues;\n        this.storedSlider = slider;\n        this._didSomething();\n    }\n}\n\nexport class ChangeDuplicateSelectedReusedPatterns extends ChangeGroup {\n    constructor(doc: SongDocument, barStart: number, barWidth: number, channelStart: number, channelHeight: number) {\n        super();\n        for (let channelIndex: number = channelStart; channelIndex < channelStart + channelHeight; channelIndex++) {\n            const reusablePatterns: Dictionary<number> = {};\n\n            for (let bar: number = barStart; bar < barStart + barWidth; bar++) {\n                const currentPatternIndex: number = doc.song.channels[channelIndex].bars[bar];\n                if (currentPatternIndex == 0) continue;\n\n                if (reusablePatterns[String(currentPatternIndex)] == undefined) {\n                    let isUsedElsewhere = false;\n                    for (let bar2: number = 0; bar2 < doc.song.barCount; bar2++) {\n                        if (bar2 < barStart || bar2 >= barStart + barWidth) {\n                            if (doc.song.channels[channelIndex].bars[bar2] == currentPatternIndex) {\n                                isUsedElsewhere = true;\n                                break;\n                            }\n                        }\n                    }\n                    if (isUsedElsewhere) {\n                        // Need to duplicate the pattern.\n                        const copiedPattern: Pattern = doc.song.getPattern(channelIndex, bar)!;\n                        this.append(new ChangePatternNumbers(doc, 0, bar, channelIndex, 1, 1));\n                        this.append(new ChangeEnsurePatternExists(doc, channelIndex, bar));\n                        const newPattern: Pattern | null = doc.song.getPattern(channelIndex, bar);\n                        if (newPattern == null) throw new Error();\n                        this.append(new ChangePaste(doc, newPattern, copiedPattern.notes, 0, Config.partsPerBeat * doc.song.beatsPerBar, Config.partsPerBeat * doc.song.beatsPerBar));\n\n                        // Copy the instruments into the new pattern.\n                        newPattern.instruments.length = 0;\n                        newPattern.instruments.push(...copiedPattern.instruments);\n\n                        reusablePatterns[String(currentPatternIndex)] = doc.song.channels[channelIndex].bars[bar];\n                    } else {\n                        reusablePatterns[String(currentPatternIndex)] = currentPatternIndex;\n                    }\n                }\n\n                this.append(new ChangePatternNumbers(doc, reusablePatterns[String(currentPatternIndex)], bar, channelIndex, 1, 1));\n            }\n        }\n    }\n}\n\nexport class ChangePatternScale extends Change {\n    constructor(doc: SongDocument, pattern: Pattern, scaleMap: number[]) {\n        super();\n        if (doc.selection.patternSelectionActive) {\n            new ChangeSplitNotesAtSelection(doc, pattern);\n        }\n        const maxPitch: number = doc.song.edo * Config.pitchOctaves;\n        for (const note of pattern.notes) {\n            if (doc.selection.patternSelectionActive && (note.end <= doc.selection.patternSelectionStart || note.start >= doc.selection.patternSelectionEnd)) {\n                continue;\n            }\n\n            const newPitches: number[] = [];\n            const newPins: NotePin[] = [];\n            for (let i: number = 0; i < note.pitches.length; i++) {\n                const pitch: number = note.pitches[i];\n                const transformedPitch: number = scaleMap[pitch % doc.song.edo] + (pitch - (pitch % doc.song.edo));\n                if (newPitches.indexOf(transformedPitch) == -1) {\n                    newPitches.push(transformedPitch);\n                }\n            }\n\n            let min: number = 0;\n            let max: number = maxPitch;\n\n            for (let i: number = 1; i < newPitches.length; i++) {\n                const diff: number = newPitches[0] - newPitches[i];\n                if (min < diff) min = diff;\n                if (max > diff + maxPitch) max = diff + maxPitch;\n            }\n\n            for (const oldPin of note.pins) {\n                let interval: number = oldPin.interval + note.pitches[0];\n                if (interval < min) interval = min;\n                if (interval > max) interval = max;\n                const transformedInterval: number = scaleMap[interval % doc.song.edo] + (interval - (interval % doc.song.edo));\n                newPins.push(makeNotePin(transformedInterval - newPitches[0], oldPin.time, oldPin.size));\n            }\n\n            if (newPins[0].interval != 0) throw new Error(\"wrong pin start interval\");\n\n            for (let i: number = 1; i < newPins.length - 1;) {\n                if (newPins[i - 1].interval == newPins[i].interval &&\n                    newPins[i].interval == newPins[i + 1].interval &&\n                    newPins[i - 1].size == newPins[i].size &&\n                    newPins[i].size == newPins[i + 1].size) {\n                    newPins.splice(i, 1);\n                } else {\n                    i++;\n                }\n            }\n\n            note.pitches = newPitches;\n            note.pins = newPins;\n        }\n        this._didSomething();\n        doc.notifier.changed();\n    }\n}\n\nexport class ChangeVolume extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].volume = newValue;\n        // Not used currently as mod is implemented as multiplicative.\n        //doc.synth.unsetMod(ModSetting.mstInsVolume, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeSongTitle extends Change {\n    constructor(doc: SongDocument, oldValue: string, newValue: string) {\n        super();\n        if (newValue.length > 30) {\n            newValue = newValue.substring(0, 30);\n        }\n\n        doc.song.title = newValue;\n        document.title = newValue + \" - \" + EditorConfig.versionDisplayName;\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeChannelName extends Change {\n    constructor(doc: SongDocument, oldValue: string, newValue: string) {\n        super();\n        if (newValue.length > 15) {\n            newValue = newValue.substring(0, 15);\n        }\n\n        doc.song.channels[doc.muteEditorChannel].name = newValue;\n        doc.recalcChannelNames = true;\n\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangePan extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].pan = newValue;\n        doc.synth.unsetMod(Config.modulators.dictionary[\"pan\"].index, doc.channel, doc.getCurrentInstrument());\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangePanDelay extends Change {\n    constructor(doc: SongDocument, oldValue: number, newValue: number) {\n        super();\n        doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()].panDelay = newValue;\n        doc.notifier.changed();\n        if (oldValue != newValue) this._didSomething();\n    }\n}\n\nexport class ChangeSizeBend extends UndoableChange {\n    private _doc: SongDocument;\n    private _note: Note;\n    private _oldPins: NotePin[];\n    private _newPins: NotePin[];\n    constructor(doc: SongDocument, note: Note, bendPart: number, bendSize: number, bendInterval: number, uniformSize: boolean) {\n        super(false);\n        this._doc = doc;\n        this._note = note;\n        this._oldPins = note.pins;\n        this._newPins = [];\n\n        let inserted: boolean = false;\n\n        for (const pin of note.pins) {\n            if (pin.time < bendPart) {\n                if (uniformSize) {\n                    this._newPins.push(makeNotePin(pin.interval, pin.time, bendSize));\n                } else {\n                    this._newPins.push(pin);\n                }\n            } else if (pin.time == bendPart) {\n                this._newPins.push(makeNotePin(bendInterval, bendPart, bendSize));\n                inserted = true;\n            } else {\n                if (!uniformSize && !inserted) {\n                    this._newPins.push(makeNotePin(bendInterval, bendPart, bendSize));\n                    inserted = true;\n                }\n                if (uniformSize) {\n                    this._newPins.push(makeNotePin(pin.interval, pin.time, bendSize));\n                } else {\n                    this._newPins.push(pin);\n                }\n            }\n        }\n\n        removeRedundantPins(this._newPins);\n\n        this._doForwards();\n        this._didSomething();\n    }\n\n    protected _doForwards(): void {\n        this._note.pins = this._newPins;\n        this._doc.notifier.changed();\n    }\n\n    protected _doBackwards(): void {\n        this._note.pins = this._oldPins;\n        this._doc.notifier.changed();\n    }\n}\n\nexport class ChangeChipWave extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        if (instrument.chipWave != newValue) {\n            instrument.chipWave = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeNoiseWave extends Change {\n    constructor(doc: SongDocument, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        if (instrument.chipNoise != newValue) {\n            instrument.chipNoise = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeAddEnvelope extends Change {\n    constructor(doc: SongDocument) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        instrument.addEnvelope(0, 0, 0);\n        instrument.preset = instrument.type;\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeRemoveEnvelope extends Change {\n    constructor(doc: SongDocument, index: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        instrument.envelopeCount--;\n        for (let i: number = index; i < instrument.envelopeCount; i++) {\n            instrument.envelopes[i].target = instrument.envelopes[i + 1].target;\n            instrument.envelopes[i].index = instrument.envelopes[i + 1].index;\n            instrument.envelopes[i].envelope = instrument.envelopes[i + 1].envelope;\n        }\n        // TODO: Shift any envelopes that were targeting other envelope indices after the removed one.\n        instrument.preset = instrument.type;\n        doc.notifier.changed();\n        this._didSomething();\n    }\n}\n\nexport class ChangeSetEnvelopeTarget extends Change {\n    constructor(doc: SongDocument, envelopeIndex: number, target: number, targetIndex: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldTarget: number = instrument.envelopes[envelopeIndex].target;\n        const oldIndex: number = instrument.envelopes[envelopeIndex].index;\n        if (oldTarget != target || oldIndex != targetIndex) {\n            instrument.envelopes[envelopeIndex].target = target;\n            instrument.envelopes[envelopeIndex].index = targetIndex;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n\nexport class ChangeSetEnvelopeType extends Change {\n    constructor(doc: SongDocument, envelopeIndex: number, newValue: number) {\n        super();\n        const instrument: Instrument = doc.song.channels[doc.channel].instruments[doc.getCurrentInstrument()];\n        const oldValue: number = instrument.envelopes[envelopeIndex].envelope;\n        if (oldValue != newValue) {\n            instrument.envelopes[envelopeIndex].envelope = newValue;\n            instrument.preset = instrument.type;\n            doc.notifier.changed();\n            this._didSomething();\n        }\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"../synth/SynthConfig\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Prompt } from \"./Prompt\";\nimport { ChangeBeatsPerBar } from \"./changes\";\n\n\tconst {button, div, span, h2, input, br, select, option} = HTML;\n\nexport class BeatsPerBarPrompt implements Prompt {\n\tprivate readonly _beatsStepper: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"number\", step: \"1\"});\n\tprivate readonly _conversionStrategySelect: HTMLSelectElement = select({style: \"width: 100%;\"},\n\t\toption({value: \"splice\"}, \"Splice beats at end of bars.\"),\n\t\toption({value: \"stretch\"}, \"Stretch notes to fit in bars.\"),\n\t\toption({value: \"overflow\"}, \"Overflow notes across bars.\"),\n\t);\n\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\tprivate readonly _okayButton: HTMLButtonElement = button({class: \"okayButton\", style: \"width:45%;\"}, \"Okay\");\n\t\n\tpublic readonly container: HTMLDivElement = div({class: \"prompt noSelection\", style: \"width: 250px;\"},\n\t\th2(\"Beats Per Bar\"),\n\t\tdiv({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\tdiv({style: \"text-align: right;\"},\n\t\t\t\t\"Beats per bar:\",\n\t\t\t\tbr(),\n\t\t\t\tspan({ style: \"font-size: smaller; color: ${ColorConfig.secondaryText};\" }, \"(Multiples of 3 or 4 are recommended)\"),\n\t\t\t),\n\t\t\tthis._beatsStepper,\n\t\t),\n\t\tdiv({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\tdiv({class: \"selectContainer\", style: \"width: 100%;\"}, this._conversionStrategySelect),\n\t\t),\n\t\tdiv({style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\"},\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis._beatsStepper.value = this._doc.song.beatsPerBar + \"\";\n\t\tthis._beatsStepper.min = Config.beatsPerBarMin + \"\";\n\t\tthis._beatsStepper.max = Config.beatsPerBarMax + \"\";\n\t\t\t\n\t\tconst lastStrategy: string | null = window.localStorage.getItem(\"beatCountStrategy\");\n\t\tif (lastStrategy != null) {\n\t\t\tthis._conversionStrategySelect.value = lastStrategy;\n\t\t}\n\t\t\t\n\t\tthis._beatsStepper.select();\n\t\t\tsetTimeout(()=>this._beatsStepper.focus());\n\t\t\t\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis._beatsStepper.addEventListener(\"keypress\", BeatsPerBarPrompt._validateKey);\n\t\tthis._beatsStepper.addEventListener(\"blur\", BeatsPerBarPrompt._validateNumber);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\t\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\t\n\t\tpublic cleanUp = (): void => { \n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis._beatsStepper.removeEventListener(\"keypress\", BeatsPerBarPrompt._validateKey);\n\t\tthis._beatsStepper.removeEventListener(\"blur\", BeatsPerBarPrompt._validateNumber);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\t\tif ((<Element> event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\t\tthis._saveChanges();\n\t\t}\n\t}\n\t\t\n\tprivate static _validateKey(event: KeyboardEvent): boolean {\n\t\tconst charCode = (event.which) ? event.which : event.keyCode;\n\t\tif (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {\n\t\t\tevent.preventDefault();\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\t\n\tprivate static _validateNumber(event: Event): void {\n\t\tconst input: HTMLInputElement = <HTMLInputElement>event.target;\n\t\tinput.value = String(BeatsPerBarPrompt._validate(input));\n\t}\n\t\t\n\tprivate static _validate(input: HTMLInputElement): number {\n\t\treturn Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value))));\n\t}\n\t\t\n\tprivate _saveChanges = (): void => {\n\t\twindow.localStorage.setItem(\"beatCountStrategy\", this._conversionStrategySelect.value);\n\t\tthis._doc.prompt = null;\n\t\tthis._doc.record(new ChangeBeatsPerBar(this._doc, BeatsPerBarPrompt._validate(this._beatsStepper), this._conversionStrategySelect.value), true);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"../synth/SynthConfig\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Prompt } from \"./Prompt\";\nimport { ChangeGroup } from \"./Change\";\nimport {ChangePatternsPerChannel, ChangeInstrumentsFlags, ChangeChannelCount} from \"./changes\";\n\nconst {button, div, label, br, h2, input} = HTML;\n\nexport class ChannelSettingsPrompt implements Prompt {\n\t\tprivate readonly _patternsStepper: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"number\", step: \"1\"});\n\t\tprivate readonly _pitchChannelStepper: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"number\", step: \"1\"});\n\t\tprivate readonly _drumChannelStepper: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"number\", step: \"1\"});\n\t\tprivate readonly _modChannelStepper: HTMLInputElement = input({ style: \"width: 3em; margin-left: 1em;\", type: \"number\", step: \"1\" });\n\t\tprivate readonly _layeredInstrumentsBox: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"checkbox\"});\n\t\tprivate readonly _patternInstrumentsBox: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"checkbox\"});\n\n\t\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\t\tprivate readonly _okayButton: HTMLButtonElement = button({class: \"okayButton\", style: \"width:45%;\"}, \"Okay\");\n\t\t\n\tpublic readonly container: HTMLDivElement = div({class: \"prompt noSelection\", style: \"width: 250px; text-align: right;\"},\n\t\th2(\"Channel Settings\"),\n\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\"Pitch channels:\",\n\t\t\tthis._pitchChannelStepper,\n\t\t),\n\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\"Drum channels:\",\n\t\t\tthis._drumChannelStepper,\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\" },\n\t\t\t\"Mod channels:\",\n\t\t\tthis._modChannelStepper,\n\t\t),\n\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\"Available patterns per channel:\",\n\t\t\tthis._patternsStepper,\n\t\t),\n\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\"Simultaneous instruments\",\n\t\t\tbr(),\n\t\t\t\"per channel:\",\n\t\t\tthis._layeredInstrumentsBox,\n\t\t),\n\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\"Different instruments\",\n\t\t\tbr(),\n\t\t\t\"per pattern:\",\n\t\t\tthis._patternInstrumentsBox,\n\t\t),\n\t\tdiv({style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\"},\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis._patternsStepper.value = this._doc.song.patternsPerChannel + \"\";\n\t\tthis._patternsStepper.min = \"1\";\n\t\tthis._patternsStepper.max = Config.barCountMax + \"\";\n\t\t\t\n\t\t\t\n\t\tthis._pitchChannelStepper.value = this._doc.song.pitchChannelCount + \"\";\n\t\tthis._pitchChannelStepper.min = Config.pitchChannelCountMin + \"\";\n\t\tthis._pitchChannelStepper.max = Config.pitchChannelCountMax + \"\";\n\t\t\t\n\t\tthis._drumChannelStepper.value = this._doc.song.noiseChannelCount + \"\";\n\t\tthis._drumChannelStepper.min = Config.noiseChannelCountMin + \"\";\n\t\tthis._drumChannelStepper.max = Config.noiseChannelCountMax + \"\";\n\t\t\t\n\t\tthis._modChannelStepper.value = this._doc.song.modChannelCount + \"\";\n\t\tthis._modChannelStepper.min = Config.modChannelCountMin + \"\";\n\t\tthis._modChannelStepper.max = Config.modChannelCountMax + \"\";\n\t\t\n\t\tthis._layeredInstrumentsBox.checked = this._doc.song.layeredInstruments;\n\t\tthis._patternInstrumentsBox.checked = this._doc.song.patternInstruments;\n\t\tthis._pitchChannelStepper.select();\n\t\t\tsetTimeout(()=>this._pitchChannelStepper.focus());\n\t\t\t\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis._patternsStepper.addEventListener(\"keypress\", ChannelSettingsPrompt._validateKey);\n\t\tthis._pitchChannelStepper.addEventListener(\"keypress\", ChannelSettingsPrompt._validateKey);\n\t\tthis._drumChannelStepper.addEventListener(\"keypress\", ChannelSettingsPrompt._validateKey);\n\t\tthis._modChannelStepper.addEventListener(\"keypress\", ChannelSettingsPrompt._validateKey);\n\t\tthis._patternsStepper.addEventListener(\"blur\", this._validateNumber);\n\t\tthis._pitchChannelStepper.addEventListener(\"blur\", this._validateNumber);\n\t\tthis._drumChannelStepper.addEventListener(\"blur\", this._validateNumber);\n\t\tthis._modChannelStepper.addEventListener(\"blur\", this._validateNumber);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\t\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\t\n\t\tpublic cleanUp = (): void => { \n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis._patternsStepper.removeEventListener(\"keypress\", ChannelSettingsPrompt._validateKey);\n\t\tthis._pitchChannelStepper.removeEventListener(\"keypress\", ChannelSettingsPrompt._validateKey);\n\t\tthis._drumChannelStepper.removeEventListener(\"keypress\", ChannelSettingsPrompt._validateKey);\n\t\tthis._modChannelStepper.removeEventListener(\"keypress\", ChannelSettingsPrompt._validateKey);\n\t\tthis._patternsStepper.removeEventListener(\"blur\", this._validateNumber);\n\t\tthis._pitchChannelStepper.removeEventListener(\"blur\", this._validateNumber);\n\t\tthis._drumChannelStepper.removeEventListener(\"blur\", this._validateNumber);\n\t\tthis._modChannelStepper.removeEventListener(\"blur\", this._validateNumber);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\t\tif ((<Element> event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t}\n\t\t\n\tprivate static _validateKey(event: KeyboardEvent): boolean {\n\t\tconst charCode = (event.which) ? event.which : event.keyCode;\n\t\tif (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {\n\t\t\tevent.preventDefault();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\t\n\tprivate _validateNumber = (event: Event): void => {\n\t\tconst input: HTMLInputElement = <HTMLInputElement>event.target;\n\t\tinput.value = String(ChannelSettingsPrompt._validate(input));\n\t}\n\t\t\n\tprivate static _validate(input: HTMLInputElement): number {\n\t\treturn Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value))));\n\t}\n\t\t\n\tprivate _saveChanges = (): void => {\n\t\tconst group: ChangeGroup = new ChangeGroup();\n\t\tgroup.append(new ChangeInstrumentsFlags(this._doc, this._layeredInstrumentsBox.checked, this._patternInstrumentsBox.checked));\n\t\tgroup.append(new ChangePatternsPerChannel(this._doc, ChannelSettingsPrompt._validate(this._patternsStepper)));\n\t\tgroup.append(new ChangeChannelCount(this._doc, ChannelSettingsPrompt._validate(this._pitchChannelStepper), ChannelSettingsPrompt._validate(this._drumChannelStepper), ChannelSettingsPrompt._validate(this._modChannelStepper)));\n\t\tthis._doc.prompt = null;\n\t\tthis._doc.record(group, true);\n\t}\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { Prompt } from \"./Prompt\";\nimport { SongDocument } from \"./SongDocument\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { ChangeCustomWave } from \"./changes\";\nimport { SongEditor } from \"./SongEditor\";\n\n//namespace beepbox {\nconst { button, div, h2 } = HTML;\n\nexport class CustomChipPromptCanvas {\n\tprivate readonly _doc: SongDocument;\n\tprivate _mouseX: number = 0;\n\tprivate _mouseY: number = 0;\n\tprivate _lastIndex: number = 0;\n\tprivate _lastAmp: number = 0;\n\tprivate _mouseDown: boolean = false;\n\tpublic chipData: Float32Array = new Float32Array(64);\n\tpublic startingChipData: Float32Array = new Float32Array(64);\n\tprivate _undoHistoryState: number = 0;\n\tprivate _changeQueue: Float32Array[] = [];\n\tprivate readonly _editorWidth: number = 768; // 64*12\n\tprivate readonly _editorHeight: number = 294; // 49*6\n\tprivate readonly _fill: SVGPathElement = SVG.path({ fill: ColorConfig.uiWidgetBackground, \"pointer-events\": \"none\" });\n\tprivate readonly _ticks: SVGSVGElement = SVG.svg({ \"pointer-events\": \"none\" });\n\tprivate readonly _subticks: SVGSVGElement = SVG.svg({ \"pointer-events\": \"none\" });\n\tprivate readonly _blocks: SVGSVGElement = SVG.svg({ \"pointer-events\": \"none\" });\n\tprivate readonly _svg: SVGSVGElement = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; overflow: visible;`, width: \"100%\", height: \"100%\", viewBox: \"0 0 \" + this._editorWidth + \" \" + this._editorHeight, preserveAspectRatio: \"none\" },\n\t\tthis._fill,\n\t\tthis._ticks,\n\t\tthis._subticks,\n\t\tthis._blocks,\n\t);\n\n\tpublic readonly container: HTMLElement = HTML.div({ class: \"\", style: \"height: 294px; width: 768px; padding-bottom: 1.5em;\" }, this._svg);\n\n\tconstructor(doc: SongDocument) {\n\n\t\tthis._doc = doc;\n\n\t\tfor (let i: number = 0; i <= 4; i += 2) {\n\t\t\tthis._ticks.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: (i * this._editorWidth / 4) - 1, y: 0, width: 2, height: this._editorHeight }));\n\t\t}\n\t\tfor (let i: number = 1; i <= 8; i++) {\n\t\t\tthis._subticks.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: (i * this._editorWidth / 8) - 1, y: 0, width: 1, height: this._editorHeight }));\n\t\t}\n\n\t\t// Horiz. ticks\n\t\tthis._ticks.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: 0, y: (this._editorHeight / 2) - 1, width: this._editorWidth, height: 2 }));\n\t\tfor (let i: number = 0; i < 3; i++) {\n\t\t\tthis._subticks.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: 0, y: i * 8 * (this._editorHeight / 49), width: this._editorWidth, height: 1 }));\n\t\t\tthis._subticks.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: 0, y: this._editorHeight - 1 - i * 8 * (this._editorHeight / 49), width: this._editorWidth, height: 1 }));\n\t\t}\n\n\n\t\tlet col: string = ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote;\n\n\t\tfor (let i: number = 0; i <= 64; i++) {\n\t\t\tlet val: number = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].customChipWave[i];\n\t\t\tthis.chipData[i] = val;\n\t\t\tthis.startingChipData[i] = val;\n\t\t\tthis._blocks.appendChild(SVG.rect({ fill: col, x: (i * this._editorWidth / 64), y: (val + 24) * (this._editorHeight / 49), width: this._editorWidth / 64, height: this._editorHeight / 49 }));\n\t\t}\n\n\t\t// Record initial state of the chip data queue\n\t\tthis._storeChange();\n\n\t\tthis.container.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenCursorReleased);\n\n\t\tthis.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n\t\tthis.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n\t\tthis.container.addEventListener(\"touchend\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"touchcancel\", this._whenCursorReleased);\n\n\t\tthis._svg.addEventListener(\"keydown\", this._whenKeyPressed);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\n\t}\n\n\tprivate _storeChange = (): void => {\n\t\t// Check if change is unique compared to the current history state\n\t\tvar sameCheck = true;\n\t\tif (this._changeQueue.length > 0) {\n\t\t\tfor (var i = 0; i < 64; i++) {\n\t\t\t\tif (this._changeQueue[this._undoHistoryState][i] != this.chipData[i]) {\n\t\t\t\t\tsameCheck = false; i = 64;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (sameCheck == false || this._changeQueue.length == 0) {\n\n\t\t\t// Create new branch in history, removing all after this in time\n\t\t\tthis._changeQueue.splice(0, this._undoHistoryState);\n\n\t\t\tthis._undoHistoryState = 0;\n\n\t\t\tthis._changeQueue.unshift(this.chipData.slice());\n\n\t\t\t// 32 undo max\n\t\t\tif (this._changeQueue.length > 32) {\n\t\t\t\tthis._changeQueue.pop();\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tpublic undo = (): void => {\n\t\t// Go backward, if there is a change to go back to\n\t\tif (this._undoHistoryState < this._changeQueue.length - 1) {\n\t\t\tthis._undoHistoryState++;\n\t\t\tthis.chipData = this._changeQueue[this._undoHistoryState].slice();\n\t\t\tnew ChangeCustomWave(this._doc, this.chipData);\n\t\t\tthis.render();\n\t\t}\n\n\t}\n\n\tpublic redo = (): void => {\n\t\t// Go forward, if there is a change to go to\n\t\tif (this._undoHistoryState > 0) {\n\t\t\tthis._undoHistoryState--;\n\t\t\tthis.chipData = this._changeQueue[this._undoHistoryState].slice();\n\t\t\tnew ChangeCustomWave(this._doc, this.chipData);\n\t\t\tthis.render();\n\t\t}\n\n\t}\n\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif (event.keyCode == 90) { // z\n\t\t\tthis.undo();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\telse if (event.keyCode == 89) { // y\n\t\t\tthis.redo();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t}\n\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._lastIndex = -1;\n\n\t\tthis._whenCursorMoved();\n\t}\n\n\tprivate _whenTouchPressed = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._lastIndex = -1;\n\n\t\tthis._whenCursorMoved();\n\t}\n\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\n\tprivate _whenTouchMoved = (event: TouchEvent): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tif (!this._mouseDown) return;\n\t\tevent.preventDefault();\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\n\tprivate _whenCursorMoved(): void {\n\t\tif (this._mouseDown) {\n\t\t\tconst index: number = Math.min(63, Math.max(0, Math.floor(this._mouseX * 64 / this._editorWidth)));\n\t\t\tconst amp: number = Math.min(48, Math.max(0, Math.floor(this._mouseY * 49 / this._editorHeight)));\n\n\t\t\t// Paint between mouse drag indices unless a click just happened.\n\t\t\tif (this._lastIndex != -1 && this._lastIndex != index) {\n\t\t\t\tvar lowest = index;\n\t\t\t\tvar highest = this._lastIndex;\n\t\t\t\tvar startingAmp = amp;\n\t\t\t\tvar endingAmp = this._lastAmp;\n\t\t\t\tif (this._lastIndex < index) {\n\t\t\t\t\tlowest = this._lastIndex;\n\t\t\t\t\thighest = index;\n\t\t\t\t\tstartingAmp = this._lastAmp;\n\t\t\t\t\tendingAmp = amp;\n\t\t\t\t}\n\t\t\t\tfor (var i = lowest; i <= highest; i++) {\n\t\t\t\t\tconst medAmp: number = Math.round(startingAmp + (endingAmp - startingAmp) * ((i - lowest) / (highest - lowest)));\n\t\t\t\t\tthis.chipData[i] = medAmp - 24;\n\t\t\t\t\tthis._blocks.children[i].setAttribute(\"y\", \"\" + (medAmp * (this._editorHeight / 49)));\n\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.chipData[index] = amp - 24;\n\t\t\t\tthis._blocks.children[index].setAttribute(\"y\", \"\" + (amp * (this._editorHeight / 49)));\n\n\t\t\t}\n\n\n\t\t\t// Make a change to the data but don't record it, since this prompt uses its own undo/redo queue\n\t\t\tnew ChangeCustomWave(this._doc, this.chipData);\n\n\t\t\tthis._lastIndex = index;\n\t\t\tthis._lastAmp = amp;\n\n\t\t}\n\t}\n\n\tprivate _whenCursorReleased = (event: Event): void => {\n\t\t// Add current data into queue, if it is unique from last data\n\t\tthis._storeChange();\n\t\tthis._mouseDown = false;\n\t}\n\n\tpublic render(): void {\n\t\tfor (var i = 0; i < 64; i++) {\n\t\t\tthis._blocks.children[i].setAttribute(\"y\", \"\" + ((this.chipData[i] + 24) * (this._editorHeight / 49)));\n\t\t}\n\t}\n}\n\nexport class CustomChipPrompt implements Prompt {\n\n\tpublic customChipCanvas: CustomChipPromptCanvas = new CustomChipPromptCanvas(this._doc);\n\n\tpublic readonly _playButton: HTMLButtonElement = button({ style: \"width: 55%;\", type: \"button\" });\n\n\tprivate readonly _cancelButton: HTMLButtonElement = button({ class: \"cancelButton\" });\n\tprivate readonly _okayButton: HTMLButtonElement = button({ class: \"okayButton\", style: \"width:45%;\" }, \"Okay\");\n\n\tpublic readonly container: HTMLDivElement = div({ class: \"prompt noSelection\", style: \"width: 600px;\" },\n\t\th2(\"Edit Custom Chip Instrument\"),\n\t\tdiv({ style: \"display: flex; width: 55%; align-self: center; flex-direction: row; align-items: center; justify-content: center;\" },\n\t\t\tthis._playButton,\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; justify-content: center;\" },\n\t\t\tthis.customChipCanvas.container,\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\" },\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\n\tconstructor(private _doc: SongDocument, private _songEditor: SongEditor) {\n\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis.container.addEventListener(\"keydown\", this.whenKeyPressed);\n\t\tthis._playButton.addEventListener(\"click\", this._togglePlay);\n\t\tthis.updatePlayButton();\n\n\t\tsetTimeout(() => this._playButton.focus());\n\n\n\t\tthis.customChipCanvas.render();\n\t}\n\n\tprivate _togglePlay = (): void => {\n\t\tthis._songEditor.togglePlay();\n\t\tthis.updatePlayButton();\n\t}\n\n\tpublic updatePlayButton(): void {\n\t\tif (this._doc.synth.playing) {\n\t\t\tthis._playButton.classList.remove(\"playButton\");\n\t\t\tthis._playButton.classList.add(\"pauseButton\");\n\t\t\tthis._playButton.title = \"Pause (Space)\";\n\t\t\tthis._playButton.innerText = \"Pause\";\n\t\t} else {\n\t\t\tthis._playButton.classList.remove(\"pauseButton\");\n\t\t\tthis._playButton.classList.add(\"playButton\");\n\t\t\tthis._playButton.title = \"Play (Space)\";\n\t\t\tthis._playButton.innerText = \"Play\";\n\t\t}\n\t}\n\n\tprivate _close = (): void => {\n\t\tthis._doc.prompt = null;\n\t\tthis._doc.undo();\n\t}\n\n\tpublic cleanUp = (): void => {\n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis.container.removeEventListener(\"keydown\", this.whenKeyPressed);\n\n\t\tthis._playButton.removeEventListener(\"click\", this._togglePlay);\n\t}\n\n\tpublic whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif ((<Element>event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t\telse if (event.keyCode == 32) {\n\t\t\tthis._togglePlay();\n\t\t\tevent.preventDefault();\n\t\t}\n\t\telse if (event.keyCode == 90) { // z\n\t\t\tthis.customChipCanvas.undo();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\telse if (event.keyCode == 89) { // y\n\t\t\tthis.customChipCanvas.redo();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\telse if (event.keyCode == 219) { // [\n\t\t\tthis._doc.synth.goToPrevBar();\n\t\t}\n\t\telse if (event.keyCode == 221) { // ]\n\t\t\tthis._doc.synth.goToNextBar();\n\t\t}\n\t}\n\n\tprivate _saveChanges = (): void => {\n\t\tthis._doc.prompt = null;\n\t\t// Restore custom chip to starting values\n\t\tnew ChangeCustomWave(this._doc, this.customChipCanvas.startingChipData);\n\t\tthis._doc.record(new ChangeCustomWave(this._doc, this.customChipCanvas.chipData), true);\n\t}\n}\n//}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { FilterCoefficients, FrequencyResponse } from \"../synth/filtering\";\nimport { FilterType, Config } from \"../synth/SynthConfig\";\nimport { FilterSettings, FilterControlPoint, Instrument } from \"../synth/synth\";\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { ChangeSequence, UndoableChange } from \"./Change\";\nimport { ChangeFilterAddPoint, ChangeFilterMovePoint, ChangeFilterSettings, FilterMoveData } from \"./changes\";\nimport { prettyNumber } from \"./EditorConfig\";\n\nexport class FilterEditor {\n    private _editorWidth: number = 120;\n    private _editorHeight: number = 26;\n    private readonly _responsePath: SVGPathElement = SVG.path({ fill: ColorConfig.uiWidgetBackground, \"pointer-events\": \"none\" });\n    //private readonly _octaves: SVGSVGElement = SVG.svg({\"pointer-events\": \"none\", overflow: \"visible\"});\n    private _indicators: SVGTextElement[] = [];\n    private _subFilters: FilterSettings[] = [];\n    private _writingMods: boolean = false;\n    private readonly _controlPointPath: SVGPathElement = SVG.path({ fill: \"currentColor\", \"pointer-events\": \"none\" });\n    private readonly _dottedLinePath: SVGPathElement = SVG.path({ fill: \"none\", stroke: \"currentColor\", \"stroke-width\": 1, \"stroke-dasharray\": \"3, 2\", \"pointer-events\": \"none\" });\n    private readonly _highlight: SVGCircleElement = SVG.circle({ fill: \"white\", stroke: \"none\", \"pointer-events\": \"none\", r: 4 });\n    private readonly _svg: SVGSVGElement = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none;`, width: \"100%\", height: \"100%\", viewBox: \"0 0 \" + this._editorWidth + \" \" + this._editorHeight, preserveAspectRatio: \"none\" },\n        this._responsePath,\n        //this._octaves,\n        this._dottedLinePath,\n        this._highlight,\n        this._controlPointPath,\n    );\n    private selfUndoSettings: String[] = [];\n    private selfUndoHistoryPos: number = 0;\n    private readonly _label: HTMLDivElement = HTML.div({ style: \"position: absolute; bottom: 0; left: 2px; font-size: 8px; line-height: 1; pointer-events: none;\" });\n\n    public coordText: HTMLElement | null = null;\n    public readonly container: HTMLElement = HTML.div({ class: \"filterEditor\", style: \"height: 100%; position: relative;\" },\n        this._svg,\n        this._label,\n    );\n    private _pointRadius: number = 2;\n\n    private _useNoteFilter: boolean = false;\n    private _larger: boolean = false;\n    private _touchMode: boolean = false;\n    private _mouseX: number = 0;\n    private _mouseY: number = 0;\n    private _mouseOver: boolean = false;\n    private _mouseDown: boolean = false;\n    private _mouseDragging: boolean = false;\n    private _addingPoint: boolean = false;\n    private _deletingPoint: boolean = false;\n    private _addedType: FilterType = FilterType.peak;\n    private _selectedIndex: number = 0;\n    private _freqStart: number = 0;\n    private _gainStart: number = 0;\n    private _dragChange: UndoableChange | null = null;\n    private _subfilterIndex: number = 0;\n\n    private _filterSettings: FilterSettings;\n    private _useFilterSettings: FilterSettings;\n    private _renderedSelectedIndex: number = -1;\n    private _renderedPointCount: number = -1;\n    private _renderedPointTypes: number = -1;\n    private _renderedPointFreqs: number = -1;\n    private _renderedPointGains: number = -1;\n    //private _renderedKey: number = -1;\n\n    constructor(private _doc: SongDocument, useNoteFilter: boolean = false, larger: boolean = false) {\n        this._useNoteFilter = useNoteFilter;\n        this._larger = larger;\n\n        if (this._larger) {\n            this.container.addEventListener(\"keydown\", this._whenKeyPressed)\n            this._editorWidth = 1200;\n            this._editorHeight = 260;\n            this._pointRadius = 14;\n            // A bit of vertical spacing on viewBox so that numbers will show.\n            this._svg.setAttribute(\"viewBox\", \"0 -20 \" + this._editorWidth + \" \" + (this._editorHeight + 30));\n            this._label.style.setProperty(\"font-size\", \"16px\");\n            this._label.style.setProperty(\"position\", \"\");\n            this._label.style.setProperty(\"bottom\", \"-16px\");\n            this._label.style.setProperty(\"min-height\", \"1em\");\n            this._dottedLinePath.style.setProperty(\"stroke-width\", \"3\");\n            this._dottedLinePath.style.setProperty(\"stroke-dasharray\", \"6, 4\");\n            this._dottedLinePath.setAttribute(\"color\", ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote);\n            this.container.style.setProperty(\"width\", \"85%\");\n            this._highlight.setAttribute(\"r\", \"20\");\n            this._controlPointPath.setAttribute(\"fill\", ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote);\n\n            for (let i: number = 0; i < Config.filterMaxPoints; i++) {\n                this._indicators[i] = SVG.text();\n                this._indicators[i].setAttribute(\"fill\", ColorConfig.invertedText);\n                this._indicators[i].setAttribute(\"text-anchor\", \"start\");\n                this._indicators[i].setAttribute(\"dominant-baseline\", \"central\");\n                this._indicators[i].setAttribute(\"pointer-events\", \"none\");\n                this._indicators[i].setAttribute(\"font-weight\", \"bolder\");\n                this._indicators[i].textContent = \"\" + (i + 1);\n                this._indicators[i].style.setProperty(\"display\", \"none\");\n                this._indicators[i].style.setProperty(\"font-size\", \"24px\");\n                this._svg.appendChild(this._indicators[i]);\n            }\n\n            // Push initial state\n            const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n            const filterSettings: FilterSettings = this._useNoteFilter ? instrument.noteFilter : instrument.eqFilter;\n            this.selfUndoSettings.push(JSON.stringify(filterSettings.toJsonObject()));\n\n            this._subFilters[0] = filterSettings;\n            for (let i: number = 1; i < Config.filterMorphCount; i++) {\n                const subFilter: FilterSettings | null = this._useNoteFilter ? instrument.noteSubFilters[i] : instrument.eqSubFilters[i];\n                if (subFilter != null) {\n                    let parsedFilter: FilterSettings = new FilterSettings();\n                    parsedFilter.fromJsonObject(subFilter.toJsonObject());\n                    this._subFilters[i] = parsedFilter;\n                }\n            }\n        }\n\n        this.container.addEventListener(\"mousedown\", this._whenMousePressed);\n        this.container.addEventListener(\"mouseover\", this._whenMouseOver);\n        this.container.addEventListener(\"mouseout\", this._whenMouseOut);\n        document.addEventListener(\"mousemove\", this._whenMouseMoved);\n        document.addEventListener(\"mouseup\", this._whenCursorReleased);\n\n        this.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n        this.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n        this.container.addEventListener(\"touchend\", this._whenCursorReleased);\n        this.container.addEventListener(\"touchcancel\", this._whenCursorReleased);\n    }\n\n    private _whenKeyPressed = (event: KeyboardEvent): void => {\n        if (event.keyCode == 90) { // z\n            this.undo();\n            event.stopPropagation();\n        }\n        if (event.keyCode == 89) { // y\n            this.redo();\n            event.stopPropagation();\n        }\n    }\n\n    private _xToFreq(x: number): number {\n        return Config.filterFreqRange * x / this._editorWidth - 0.5;\n    }\n    private _freqToX(freq: number): number {\n        return this._editorWidth * (freq + 0.5) / Config.filterFreqRange;\n    }\n    private _yToGain(y: number): number {\n        return (Config.filterGainRange - 1) * (1 - (y - .5) / (this._editorHeight - 1));\n    }\n    private _gainToY(gain: number): number {\n        return (this._editorHeight - 1) * (1 - gain / (Config.filterGainRange - 1)) + .5;\n    }\n\n    private _whenMouseOver = (event: MouseEvent): void => {\n        this._mouseOver = true;\n\n        if (!this._larger)\n            this._controlPointPath.style.setProperty(\"fill\", \"currentColor\");\n    }\n\n    private _whenMouseOut = (event: MouseEvent): void => {\n        this._mouseOver = false;\n        this._updatePath();\n\n        if (this.coordText != null) {\n            this.coordText.innerText = \"\";\n        }\n    }\n\n    private _whenMousePressed = (event: MouseEvent): void => {\n        event.preventDefault();\n        this._touchMode = false;\n        const boundingRect: ClientRect = this._svg.getBoundingClientRect();\n        this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n        this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n        if (isNaN(this._mouseX)) this._mouseX = 0;\n        if (isNaN(this._mouseY)) this._mouseY = 0;\n        this._whenCursorPressed();\n    }\n\n    private _whenTouchPressed = (event: TouchEvent): void => {\n        event.preventDefault();\n        this._touchMode = true;\n        const boundingRect: ClientRect = this._svg.getBoundingClientRect();\n        this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n        this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n        if (isNaN(this._mouseX)) this._mouseX = 0;\n        if (isNaN(this._mouseY)) this._mouseY = 0;\n        this._whenCursorPressed();\n    }\n\n    private _whenMouseMoved = (event: MouseEvent): void => {\n        if (this.container.offsetParent == null) return;\n        const boundingRect: ClientRect = this._svg.getBoundingClientRect();\n        this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n        this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n        if (isNaN(this._mouseX)) this._mouseX = 0;\n        if (isNaN(this._mouseY)) this._mouseY = 0;\n        if (!this._mouseDown) this._updateCursor();\n\n        this._whenCursorMoved();\n    }\n\n    private _whenTouchMoved = (event: TouchEvent): void => {\n        if (this.container.offsetParent == null) return;\n        if (this._mouseDown) event.preventDefault();\n        const boundingRect: ClientRect = this._svg.getBoundingClientRect();\n        this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n        this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n        if (isNaN(this._mouseX)) this._mouseX = 0;\n        if (isNaN(this._mouseY)) this._mouseY = 0;\n        if (!this._mouseDown) this._updateCursor();\n        this._whenCursorMoved();\n    }\n\n    private _whenCursorPressed(): void {\n        this._mouseDown = true;\n        const sequence: ChangeSequence = new ChangeSequence();\n        this._dragChange = sequence;\n        this._doc.setProspectiveChange(this._dragChange);\n        this._updateCursor();\n        this._whenCursorMoved();\n    }\n\n    private _updateCursor(): void {\n        this._freqStart = this._xToFreq(this._mouseX);\n        this._gainStart = this._yToGain(this._mouseY);\n\n        this._addingPoint = true;\n        this._selectedIndex = -1;\n        let nearestDistance: number = Number.POSITIVE_INFINITY;\n        for (let i: number = 0; i < this._useFilterSettings.controlPointCount; i++) {\n            const point: FilterControlPoint = this._useFilterSettings.controlPoints[i];\n            const distance: number = Math.sqrt(Math.pow(this._freqToX(point.freq) - this._mouseX, 2) + Math.pow(this._gainToY(point.gain) - this._mouseY, 2));\n            if ((distance <= 13 * (1 + +this._larger) || this._useFilterSettings.controlPointCount >= Config.filterMaxPoints) && distance < nearestDistance) {\n                nearestDistance = distance;\n                this._selectedIndex = i;\n                this._addingPoint = false;\n            }\n        }\n        if (this._addingPoint) {\n            const ratio: number = this._mouseX / this._editorWidth;\n            if (ratio < 0.2) {\n                this._addedType = FilterType.highPass;\n            } else if (ratio < 0.8) {\n                this._addedType = FilterType.peak;\n            } else {\n                this._addedType = FilterType.lowPass;\n            }\n        }\n    }\n\n    private _whenCursorMoved(): void {\n        if (this._writingMods) {\n            const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n            this._useFilterSettings = this._getTargetFilterSettings(instrument);\n            if (this._dragChange != null) {\n                if (this._dragChange instanceof ChangeSequence && this._dragChange.checkFirst() instanceof ChangeFilterMovePoint) {\n                    const data: FilterMoveData = ((this._dragChange as ChangeSequence).checkFirst() as ChangeFilterMovePoint).getMoveData(true);\n                    const newPoint: FilterControlPoint | null = this._useFilterSettings.controlPoints[this._selectedIndex];\n\n                    if (newPoint == null || newPoint.type != data.point.type) {\n                        this._dragChange = null;\n                        this._writingMods = false;\n                        this._mouseDown = false;\n                    }\n                    else {\n                        newPoint.freq = data.freq;\n                        newPoint.gain = data.gain;\n                    }\n                } else {\n                    this._dragChange = null;\n                    this._writingMods = false;\n                    this._mouseDown = false;\n                }\n            }\n        }\n\n        if (this._dragChange != null && (this._doc.lastChangeWas(this._dragChange) || this._writingMods )) {\n            this._dragChange.undo();\n        } else {\n            this._mouseDown = false;\n        }\n        this._dragChange = null;\n        this._deletingPoint = false;\n\n        if (this.coordText != null && !this._mouseDown) {\n            let gain: number = Math.round(this._yToGain(this._mouseY));\n            let freq: number = Math.round(this._xToFreq(this._mouseX));\n            if (freq >= 0 && freq < Config.filterFreqRange && gain >= 0 && gain < Config.filterGainRange)\n                this.coordText.innerText = \"(\" + freq + \", \" + gain + \")\";\n            else\n                this.coordText.innerText = \"\";\n        }\n\n        if (this._mouseDown) {\n            const sequence: ChangeSequence = new ChangeSequence();\n            this._dragChange = sequence;\n            this._doc.setProspectiveChange(this._dragChange);\n\n            if (this._addingPoint) {\n                const gain: number = Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(this._yToGain(this._mouseY))));\n                const freq: number = this._findNearestFreqSlot(this._useFilterSettings, this._xToFreq(this._mouseX), -1);\n                if (freq >= 0 && freq < Config.filterFreqRange) {\n                    const point: FilterControlPoint = new FilterControlPoint();\n                    point.type = this._addedType;\n                    point.freq = freq;\n                    point.gain = gain;\n                    sequence.append(new ChangeFilterAddPoint(this._doc, this._useFilterSettings, point, this._useFilterSettings.controlPointCount, this._useNoteFilter));\n\n                    if (this.coordText != null) {\n                        this.coordText.innerText = \"(\" + freq + \", \" + gain + \")\";\n                    }\n                } else {\n                    this._deletingPoint = true;\n                }\n            } else if (this._selectedIndex >= this._useFilterSettings.controlPointCount || this._selectedIndex == -1) {\n                this._dragChange = null;\n                this._mouseDown = false;\n            } else {\n                const freqDelta: number = this._xToFreq(this._mouseX) - this._freqStart;\n                const gainDelta: number = this._yToGain(this._mouseY) - this._gainStart;\n                let point: FilterControlPoint = this._useFilterSettings.controlPoints[this._selectedIndex];\n                const gain: number = Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(point.gain + gainDelta)));\n                const freq: number = this._findNearestFreqSlot(this._useFilterSettings, point.freq + freqDelta, this._selectedIndex);\n\n                if (Math.round(freqDelta) != 0.0 || Math.round(gainDelta) != 0.0 || freq != point.freq || gain != point.gain) {\n                    this._mouseDragging = true;\n                }\n\n                if (freq >= 0 && freq < Config.filterFreqRange) {\n                    sequence.append(new ChangeFilterMovePoint(this._doc, point, point.freq, freq, point.gain, gain, this._useNoteFilter, this._selectedIndex));\n                    if (this.coordText != null) {\n                        this.coordText.innerText = \"(\" + freq + \", \" + gain + \")\";\n                        if (!this._writingMods) {\n                            const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\n                            instrument.tmpEqFilterEnd = null;\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                            instrument.tmpNoteFilterEnd = null;\n                        }\n                    }\n                } else {\n                    sequence.append(new ChangeFilterAddPoint(this._doc, this._useFilterSettings, point, this._selectedIndex, this._useNoteFilter, true));\n                    this._deletingPoint = true;\n                }\n            }\n        }\n        if (this._mouseDown || this._mouseOver) {\n            this._updatePath();\n        }\n    }\n\n    private _whenCursorReleased = (event: Event): void => {\n        if (this._writingMods) {\n            const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n            this._useFilterSettings = this._getTargetFilterSettings(instrument);\n        }\n\n        if (this.container.offsetParent == null) return;\n        if (this._mouseDown && (this._doc.lastChangeWas(this._dragChange) || this._writingMods ) && this._dragChange != null) {\n            if (!this._addingPoint && !this._mouseDragging && !this._touchMode) {\n                if (this._selectedIndex < this._useFilterSettings.controlPointCount && this._selectedIndex != -1) {\n                    const point: FilterControlPoint = this._useFilterSettings.controlPoints[this._selectedIndex];\n                    let change: ChangeFilterAddPoint = new ChangeFilterAddPoint(this._doc, this._useFilterSettings, point, this._selectedIndex, this._useNoteFilter, true);\n                    if (!this._larger) {\n                        this._doc.record(change);\n                    }\n                }\n            } else if (!this._larger) {\n                this._doc.record(this._dragChange);\n            }\n            this._updatePath();\n            if (this._larger) {\n                this.selfUndoSettings.length = this.selfUndoHistoryPos+1;\n                this.selfUndoSettings.push(JSON.stringify(this._filterSettings.toJsonObject()));\n                this.selfUndoHistoryPos++;\n            }\n        }\n        this._dragChange = null;\n        this._mouseDragging = false;\n        this._deletingPoint = false;\n        this._mouseDown = false;\n        this._writingMods = false;\n        this._updateCursor();\n    }\n\n    private _findNearestFreqSlot(filterSettings: FilterSettings, targetFreq: number, ignoreIndex: number): number {\n        const roundedFreq: number = Math.round(targetFreq);\n        let lowerFreq: number = roundedFreq;\n        let upperFreq: number = roundedFreq;\n        let tryingLower: boolean = (roundedFreq <= targetFreq);\n        while (true) {\n            let foundConflict: boolean = false;\n            const currentFreq: number = tryingLower ? lowerFreq : upperFreq;\n            for (let i: number = 0; i < filterSettings.controlPointCount; i++) {\n                if (i == ignoreIndex) continue;\n                if (filterSettings.controlPoints[i].freq == currentFreq) {\n                    foundConflict = true;\n                    break;\n                }\n            }\n            if (!foundConflict) return currentFreq;\n            tryingLower = !tryingLower;\n            if (tryingLower) lowerFreq--;\n            if (!tryingLower) upperFreq++;\n        }\n    }\n\n    private static _circlePath(cx: number, cy: number, radius: number, reverse: boolean = false): string {\n        return `M ${cx - radius} ${cy} ` +\n            `a ${radius} ${radius} 0 1 ${reverse ? 1 : 0} ${radius * 2} 0 ` +\n            `a ${radius} ${radius} 0 1 ${reverse ? 1 : 0} ${-radius * 2} 0 `;\n    }\n\n    private _updatePath(): void {\n        this._highlight.style.display = \"none\";\n        this._label.textContent = \"\";\n\n        let controlPointPath: string = \"\";\n        let dottedLinePath: string = \"\";\n        for (let i: number = 0; i < this._useFilterSettings.controlPointCount; i++) {\n            const point: FilterControlPoint = this._useFilterSettings.controlPoints[i];\n            const pointX: number = this._freqToX(point.freq);\n            const pointY: number = this._gainToY(point.gain);\n\n            controlPointPath += FilterEditor._circlePath(pointX, pointY, this._pointRadius);\n\n            if (point.type == FilterType.highPass) {\n                dottedLinePath += \"M \" + 0 + \" \" + pointY + \" L \" + pointX + \" \" + pointY + \" \";\n            } else if (point.type == FilterType.lowPass) {\n                dottedLinePath += \"M \" + this._editorWidth + \" \" + pointY + \" L \" + pointX + \" \" + pointY + \" \";\n            }\n\n            if (this._selectedIndex == i && this._mouseOver && !this._mouseDown) {\n                this._highlight.setAttribute(\"cx\", String(pointX));\n                this._highlight.setAttribute(\"cy\", String(pointY));\n                this._highlight.style.display = \"\";\n\n                if (this.coordText != null) {\n                    this.coordText.innerText = \"(\" + point.freq + \", \" + point.gain + \")\";\n                }\n            }\n            if ((this._selectedIndex == i || (this._addingPoint && this._mouseDown && i == this._useFilterSettings.controlPointCount - 1)) && (this._mouseOver || this._mouseDown) && !this._deletingPoint) {\n                this._label.textContent = (i + 1) + \": \" + Config.filterTypeNames[point.type] + (this._larger ? \" @\" + prettyNumber(point.getHz()) + \"Hz\" : \"\");\n            }\n\n            if (this._larger) {\n                this._indicators[i].style.setProperty(\"display\", \"\");\n                this._indicators[i].setAttribute(\"x\", \"\" + (pointX - 7));\n                this._indicators[i].setAttribute(\"y\", \"\" + (pointY + 2));\n            }\n        }\n        this._controlPointPath.setAttribute(\"d\", controlPointPath);\n        this._dottedLinePath.setAttribute(\"d\", dottedLinePath);\n        if (this._addingPoint && !this._mouseDown && this._mouseOver) {\n            this._label.textContent = \"+ \" + Config.filterTypeNames[this._addedType];\n        }\n\n        // Hide unused control point labels\n        if (this._larger) {\n            for (let i: number = this._useFilterSettings.controlPointCount; i < Config.filterMaxPoints; i++) {\n                this._indicators[i].style.setProperty(\"display\", \"none\");\n            }\n        }\n\n        //let volumeCompensation: number = 1.0;\n        const standardSampleRate: number = 44800;\n        const filters: FilterCoefficients[] = [];\n        for (let i: number = 0; i < this._useFilterSettings.controlPointCount; i++) {\n            const point: FilterControlPoint = this._useFilterSettings.controlPoints[i];\n            const filter: FilterCoefficients = new FilterCoefficients();\n            point.toCoefficients(filter, standardSampleRate);\n            filters.push(filter);\n            //volumeCompensation *= point.getVolumeCompensationMult();\n        }\n\n        const response: FrequencyResponse = new FrequencyResponse();\n        let responsePath: string = \"M 0 \" + this._editorHeight + \" \";\n        for (let i: number = -1; i <= Config.filterFreqRange; i++) {\n            const hz: number = FilterControlPoint.getHzFromSettingValue(i);\n            const cornerRadiansPerSample: number = 2.0 * Math.PI * hz / standardSampleRate;\n            const real: number = Math.cos(cornerRadiansPerSample);\n            const imag: number = Math.sin(cornerRadiansPerSample);\n\n            let linearGain: number = 1.0; //volumeCompensation;\n            for (const filter of filters) {\n                response.analyzeComplex(filter, real, imag);\n                linearGain *= response.magnitude();\n            }\n\n            const gainSetting: number = Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter;\n            const y: number = this._gainToY(gainSetting);\n            const x: number = this._freqToX(i);\n            responsePath += \"L \" + prettyNumber(x) + \" \" + prettyNumber(y) + \" \";\n        }\n\n        responsePath += \"L \" + this._editorWidth + \" \" + this._editorHeight + \" L 0 \" + this._editorHeight + \" z \";\n        this._responsePath.setAttribute(\"d\", responsePath);\n    }\n\n    // Swap to new filter settings all at once.\n    public swapToSettings(settings: FilterSettings, useHistory: boolean = false) {\n        const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        new ChangeFilterSettings(this._doc, settings, this._filterSettings, this._useNoteFilter, this._subFilters, this._useNoteFilter ? instrument.noteSubFilters : instrument.eqSubFilters);\n        this._filterSettings = settings;\n        this._subFilters[this._subfilterIndex] = settings;\n        if (useHistory && this._larger) {\n            this.selfUndoSettings.length = this.selfUndoHistoryPos + 1;\n            this.selfUndoSettings.push(JSON.stringify((this._filterSettings.toJsonObject())));\n            this.selfUndoHistoryPos++;\n        }\n        this._useFilterSettings = this._filterSettings;\n        this._updatePath();\n    }\n\n    // Save settings on prompt close (record a change from first settings to newest)\n    public saveSettings() {\n        let firstFilter: FilterSettings = new FilterSettings;\n        const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        firstFilter.fromJsonObject(JSON.parse(String(this.selfUndoSettings[0])));\n        this._doc.record(new ChangeFilterSettings(this._doc, this._subFilters[0], firstFilter, this._useNoteFilter, this._subFilters, this._useNoteFilter ? instrument.noteSubFilters : instrument.eqSubFilters), true);\n    }\n\n    // Self-undo history management\n    // Returns the subfilter index to swap to, if any\n    public undo(): number {\n        if (this.selfUndoHistoryPos > 0) {\n            this.selfUndoHistoryPos--;\n            // Jump back and load latest state of this subfilter. Also save subfilter settings for current index\n            if (this.selfUndoSettings[this.selfUndoHistoryPos + 1] != null && this.selfUndoSettings[this.selfUndoHistoryPos + 1].startsWith(\"jmp\")) {\n                let str: String = this.selfUndoSettings[this.selfUndoHistoryPos + 1];\n                let jumpIndex = +str.substring(3, str.indexOf(\"|\"));\n                this.swapToSubfilter(this._subfilterIndex, jumpIndex);\n                return jumpIndex;\n            // Jumping to FIRST state of this subfilter\n            } else if (this.selfUndoSettings[this.selfUndoHistoryPos].startsWith(\"jmp\")) {\n                let savedFilter: FilterSettings = new FilterSettings();\n                let str: String = this.selfUndoSettings[this.selfUndoHistoryPos];\n                savedFilter.fromJsonObject(JSON.parse(str.substring(str.indexOf(\":\") + 1)));\n                this.swapToSettings(savedFilter, false);\n            } else {\n                let savedFilter: FilterSettings = new FilterSettings();\n                savedFilter.fromJsonObject(JSON.parse(String(this.selfUndoSettings[this.selfUndoHistoryPos])));\n                this.swapToSettings(savedFilter, false);\n            }\n        }\n        return -1;\n    }\n\n    // Returns the subfilter index to swap to, if any\n    public redo(): number {\n        if (this.selfUndoHistoryPos < this.selfUndoSettings.length-1) {\n            this.selfUndoHistoryPos++;\n            // Check if next index in undo queue is a command to jump to a new filter index\n            if (this.selfUndoSettings[this.selfUndoHistoryPos].startsWith(\"jmp\")) {\n                let str: String = this.selfUndoSettings[this.selfUndoHistoryPos];\n                let jumpIndex = +str.substring(str.indexOf(\"|\") + 1, str.indexOf(\":\"));\n                this.swapToSubfilter(this._subfilterIndex, jumpIndex, false);\n                return jumpIndex;\n            } else {\n                let savedFilter: FilterSettings = new FilterSettings();\n                savedFilter.fromJsonObject(JSON.parse(String(this.selfUndoSettings[this.selfUndoHistoryPos])));\n                this.swapToSettings(savedFilter, false);\n            }\n        }\n        return -1;\n\n    }\n\n    public resetToInitial() {\n        this.selfUndoHistoryPos = 1;\n        this.undo();\n    }\n\n    public swapSubfilterIndices(newIndex: number) {\n        if (this._selectedIndex == -1)\n            return;\n\n        if (newIndex >= this._useFilterSettings.controlPointCount)\n            return;\n\n        let tmp: FilterControlPoint = this._useFilterSettings.controlPoints[this._selectedIndex];\n        this._useFilterSettings.controlPoints[this._selectedIndex] = this._useFilterSettings.controlPoints[newIndex];\n        this._useFilterSettings.controlPoints[newIndex] = tmp;\n\n        this.render();\n    }\n\n    public swapToSubfilter(oldIndex: number, newIndex: number, useHistory: boolean = false) {\n        if (oldIndex != newIndex) {\n            // Save current subfilter\n            let currFilter: FilterSettings = new FilterSettings();\n            currFilter.fromJsonObject(this._filterSettings.toJsonObject());\n            this._subFilters[oldIndex] = currFilter;\n\n            // Copy main filter at this time\n            if (this._subFilters[newIndex] == undefined) {\n                let parsedFilter: FilterSettings = new FilterSettings();\n                parsedFilter.fromJsonObject(this._subFilters[0].toJsonObject());\n                this._subFilters[newIndex] = parsedFilter;\n            }\n\n            // Record the swap in undo history\n            if (useHistory) {\n                this.selfUndoSettings.length = this.selfUndoHistoryPos + 1;\n                // Swap from|to:filterInitSettings\n                this.selfUndoSettings.push(\"jmp\" + oldIndex + \"|\" + newIndex + \":\" + JSON.stringify(this._subFilters[newIndex].toJsonObject()));\n                this.selfUndoHistoryPos++;\n            }\n\n            this._subfilterIndex = newIndex;\n            // Never use history here since the swap action is itself history-generating\n            this.swapToSettings(this._subFilters[newIndex], false);\n        }\n\n    }\n\n    private _getTargetFilterSettings(instrument: Instrument): FilterSettings {\n        // TODO: Re-compute default point freqs/gains only when needed\n        let targetSettings: FilterSettings = (this._useNoteFilter) ? instrument.tmpNoteFilterStart! : instrument.tmpEqFilterStart!;\n        if (targetSettings == null) targetSettings = (this._useNoteFilter) ? instrument.noteFilter : instrument.eqFilter;\n\n        return targetSettings;\n    }\n\n    public render(activeMods: boolean = false, forceModRender: boolean = false): void {\n        this._writingMods = forceModRender && this._mouseDown;\n        const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        const filterSettings: FilterSettings = this._useNoteFilter ? instrument.noteFilter : instrument.eqFilter;\n        let displayMods: boolean = (activeMods && !this._larger && (forceModRender || (!this._mouseOver && !this._mouseDragging && !this._mouseDown) ) && this._doc.synth.playing)\n        if (displayMods)\n            this._controlPointPath.style.setProperty(\"fill\", `${ColorConfig.overwritingModSlider}`);\n        else if (!this._larger)\n            this._controlPointPath.style.setProperty(\"fill\", \"currentColor\");\n\n        if (this._useFilterSettings != filterSettings && !this._writingMods) {\n            this._dragChange = null;\n            this._mouseDown = false;\n        }\n        this._filterSettings = filterSettings;\n\n        // If modulators are active, show synth's current filter point settings instead of real points.\n        // Will auto update, but if the user is writing directly to mod values then the writing point will be\n        // forcibly maintained at the cursor position.\n        if ( displayMods ) {\n            this._useFilterSettings = this._getTargetFilterSettings(instrument);\n\n            if (this._writingMods)\n                this._whenCursorMoved();\n        }\n        else {\n            this._useFilterSettings = filterSettings;\n        }\n\n        if (!this._mouseDown) this._updateCursor();\n\n        let pointTypes: number = 0;\n        let pointFreqs: number = 0;\n        let pointGains: number = 0;\n        for (let i: number = 0; i < this._useFilterSettings.controlPointCount; i++) {\n            const point: FilterControlPoint = this._useFilterSettings.controlPoints[i];\n            pointTypes = pointTypes * FilterType.length + point.type;\n            pointFreqs = pointFreqs * Config.filterFreqRange + point.freq;\n            pointGains = pointGains * Config.filterGainRange + point.gain;\n        }\n        if (this._renderedSelectedIndex != this._selectedIndex ||\n            this._renderedPointCount != this._useFilterSettings.controlPointCount ||\n            this._renderedPointTypes != pointTypes ||\n            this._renderedPointFreqs != pointFreqs ||\n            this._renderedPointGains != pointGains) {\n            this._renderedSelectedIndex = this._selectedIndex;\n            this._renderedPointCount = this._useFilterSettings.controlPointCount;\n            this._renderedPointTypes = pointTypes;\n            this._renderedPointFreqs = pointFreqs;\n            this._renderedPointGains = pointGains;\n            this._updatePath();\n        }\n\n        /*\n        if (this._renderedKey != this._doc.song.key) {\n            this._renderedKey = this._doc.song.key;\n            const tonicHz: number = Instrument.frequencyFromPitch(Config.keys[this._doc.song.key].basePitch);\n            const x: number = this._freqToX(FilterControlPoint.getSettingValueFromHz(tonicHz));\n            this._octaves.setAttribute(\"x\", String(x));\n        }\n        */\n    }\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { Prompt } from \"./Prompt\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Config } from \"../synth/SynthConfig\";\nimport { FilterEditor } from \"./FilterEditor\";\nimport { SongEditor } from \"./SongEditor\";\nimport { FilterSettings } from \"../synth/synth\";\nimport { ColorConfig } from \"./ColorConfig\";\n\n//namespace beepbox {\nconst { button, div, h2, p } = HTML;\n\nexport class CustomFilterPrompt implements Prompt {\n\n\tpublic filterEditor: FilterEditor;\n\n\tpublic filterData: FilterSettings = new FilterSettings;\n\tpublic startingFilterData: FilterSettings = new FilterSettings;\n\n\tprivate _subfilterIndex = 0;\n\n\tpublic readonly _playButton: HTMLButtonElement = button({ style: \"width: 55%;\", type: \"button\" });\n\n\tpublic readonly _filterButtons: HTMLButtonElement[] = [];\n\n\tpublic readonly _filterButtonContainer: HTMLDivElement = div({class: \"instrument-bar\", style: \"justify-content: center;\"});\n\n\tprivate readonly _cancelButton: HTMLButtonElement = button({ class: \"cancelButton\" });\n\tprivate readonly _okayButton: HTMLButtonElement = button({ class: \"okayButton\", style: \"width:45%;\" }, \"Okay\");\n\n\tprivate readonly _filterContainer: HTMLDivElement = div({ style: \"width: 100%; display: flex; flex-direction: row; align-items: center; justify-content: center;\" });\n\n\tprivate readonly _editorTitle: HTMLDivElement = div({}, h2(\"Edit Filter\"));\n\n\tprivate readonly _filterCopyButton: HTMLButtonElement = button({ style: \"width:86px; margin-right: 5px;\", class: \"copyButton\" }, [\n\t\t\"Copy\",\n\t\t// Copy icon:\n\t\tSVG.svg({ style: \"flex-shrink: 0; position: absolute; left: 0; top: 50%; margin-top: -1em; pointer-events: none;\", width: \"2em\", height: \"2em\", viewBox: \"-5 -21 26 26\" }, [\n\t\t\tSVG.path({ d: \"M 0 -15 L 1 -15 L 1 0 L 13 0 L 13 1 L 0 1 L 0 -15 z M 2 -1 L 2 -17 L 10 -17 L 14 -13 L 14 -1 z M 3 -2 L 13 -2 L 13 -12 L 9 -12 L 9 -16 L 3 -16 z\", fill: \"currentColor\" }),\n\t\t]),\n\t]);\n\tprivate readonly _filterPasteButton: HTMLButtonElement = button({ style: \"width:86px;\", class: \"pasteButton\" }, [\n\t\t\"Paste\",\n\t\t// Paste icon:\n\t\tSVG.svg({ style: \"flex-shrink: 0; position: absolute; left: 0; top: 50%; margin-top: -1em; pointer-events: none;\", width: \"2em\", height: \"2em\", viewBox: \"0 0 26 26\" }, [\n\t\t\tSVG.path({ d: \"M 8 18 L 6 18 L 6 5 L 17 5 L 17 7 M 9 8 L 16 8 L 20 12 L 20 22 L 9 22 z\", stroke: \"currentColor\", fill: \"none\" }),\n\t\t\tSVG.path({ d: \"M 9 3 L 14 3 L 14 6 L 9 6 L 9 3 z M 16 8 L 20 12 L 16 12 L 16 8 z\", fill: \"currentColor\", }),\n\t\t]),\n\t]);\n\tprivate readonly _filterCopyPasteContainer: HTMLDivElement = div({ style: \"width: 185px;\" }, this._filterCopyButton, this._filterPasteButton);\n\n\tprivate readonly _filterCoordinateText: HTMLDivElement = div({ style: \"text-align: left; margin-bottom: 0px; font-size: x-small; height: 1.3em; color: \" + ColorConfig.secondaryText + \";\"}, p(\"\"));\n\n\tpublic readonly container: HTMLDivElement = div({ class: \"prompt noSelection\", style: \"width: 600px;\" },\n\t\tthis._editorTitle,\n\t\tdiv({ style: \"display: flex; width: 55%; align-self: center; flex-direction: row; align-items: center; justify-content: center;\" },\n\t\t\tthis._playButton\n\t\t),\n\t\tthis._filterButtonContainer,\n\t\tthis._filterContainer,\n\t\tdiv({ style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\" },\n\t\t\tthis._okayButton,\n\t\t\tthis._filterCopyPasteContainer,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\n\tconstructor(private _doc: SongDocument, private _songEditor: SongEditor, private _useNoteFilter: boolean) {\n\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis._playButton.addEventListener(\"click\", this._togglePlay);\n\t\tthis._filterCopyButton.addEventListener(\"click\", this._copyFilterSettings);\n\t\tthis._filterPasteButton.addEventListener(\"click\", this._pasteFilterSettings);\n\t\tthis.updatePlayButton();\n\t\tlet colors = ColorConfig.getChannelColor(this._doc.song, this._doc.channel);\n\n\t\tthis.filterEditor = new FilterEditor(_doc, _useNoteFilter, true);\n\t\tthis._filterContainer.appendChild(this.filterEditor.container);\n\n\t\t// Add coordinates to editor\n\t\tthis.filterEditor.container.insertBefore(this._filterCoordinateText, this.filterEditor.container.firstChild);\n\t\tthis.filterEditor.coordText = this._filterCoordinateText;\n\n\t\tthis._editorTitle.children[0].innerHTML = (_useNoteFilter) ? \"Edit Note Filter\" : \"Edit EQ Filter\";\n\n\t\tlet newButton: HTMLButtonElement = button({ class: \"no-underline\", style: \"max-width: 5em;\"}, \"Main\");\n\t\tthis._filterButtonContainer.appendChild(newButton);\n\t\tthis._filterButtons.push(newButton);\n\t\tnewButton.addEventListener(\"click\", () => { this._setSubfilter(0); });\n\t\tfor (let i: number = 1; i < Config.filterMorphCount; i++) {\n\t\t\tlet newSubButton: HTMLButtonElement = button({ class: \"no-underline\", style: \"max-width: 2em;\"}, \"\" + i);\n\t\t\tthis._filterButtons.push(newSubButton);\n\t\t\tthis._filterButtonContainer.appendChild(newSubButton);\n\t\t\tnewSubButton.addEventListener(\"click\", () => { this._setSubfilter(i); });\n\t\t}\n\t\tthis._filterButtons[Config.filterMorphCount - 1].classList.add(\"last-button\");\n\t\tthis._filterButtons[0].classList.add(\"selected-instrument\");\n\n\t\tthis._filterButtonContainer.style.setProperty(\"--text-color-lit\", colors.primaryNote);\n\t\tthis._filterButtonContainer.style.setProperty(\"--text-color-dim\", colors.secondaryNote);\n\t\tthis._filterButtonContainer.style.setProperty(\"--background-color-lit\", colors.primaryChannel);\n\t\tthis._filterButtonContainer.style.setProperty(\"--background-color-dim\", colors.secondaryChannel);\n\n\t\tthis._filterContainer.addEventListener(\"keydown\", this._whenKeyPressed);\n\t\tthis.filterEditor.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\n\t\tsetTimeout(() => this._playButton.focus());\n\n\t\tthis.filterEditor.render();\n\t}\n\n\tprivate _setSubfilter = (index: number, useHistory: boolean = true, doSwap: boolean = true): void => {\n\t\tthis._filterButtons[this._subfilterIndex].classList.remove(\"selected-instrument\");\n\t\tif ( doSwap ) this.filterEditor.swapToSubfilter(this._subfilterIndex, index, useHistory);\n\t\tthis._subfilterIndex = index;\n\t\tthis._filterButtons[index].classList.add(\"selected-instrument\");\n    }\n\n\tprivate _copyFilterSettings = (): void => {\n\t\tconst filterCopy: any = this._useNoteFilter\n\t\t\t? this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].noteFilter.toJsonObject()\n\t\t\t: this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].eqFilter.toJsonObject();\n\t\twindow.localStorage.setItem(\"filterCopy\", JSON.stringify(filterCopy));\n\t}\n\n\tprivate _pasteFilterSettings = (): void => {\n\n\t\tlet filterCopy: FilterSettings = new FilterSettings();\n\t\tfilterCopy.fromJsonObject(JSON.parse(String(window.localStorage.getItem(\"filterCopy\"))));\n\t\tif (filterCopy != null) {\n\t\t\tthis.filterEditor.swapToSettings(filterCopy, true);\n\t\t}\n    }\n\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif (event.keyCode == 90) { // z\n\t\t\tlet newIdx = this.filterEditor.undo();\n\t\t\tif (newIdx >= 0) {\n\t\t\t\tthis._setSubfilter(newIdx, false, false);\n            }\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\tif (event.keyCode == 89) { // y\n\t\t\tlet newIdx = this.filterEditor.redo();\n\t\t\tif (newIdx >= 0) {\n\t\t\t\tthis._setSubfilter(newIdx, false, false);\n\t\t\t}\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\t// Number 1-9\n\t\tif (event.keyCode >= 49 && event.keyCode <= 57) {\n\t\t\tif (!event.shiftKey) {\n\t\t\t\tthis.filterEditor.swapSubfilterIndices(event.keyCode - 49);\n\t\t\t\tevent.stopPropagation();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _togglePlay = (): void => {\n\t\tthis._songEditor.togglePlay();\n\t\tthis.updatePlayButton();\n\t}\n\n\tpublic updatePlayButton(): void {\n\t\tif (this._doc.synth.playing) {\n\t\t\tthis._playButton.classList.remove(\"playButton\");\n\t\t\tthis._playButton.classList.add(\"pauseButton\");\n\t\t\tthis._playButton.title = \"Pause (Space)\";\n\t\t\tthis._playButton.innerText = \"Pause\";\n\t\t} else {\n\t\t\tthis._playButton.classList.remove(\"pauseButton\");\n\t\t\tthis._playButton.classList.add(\"playButton\");\n\t\t\tthis._playButton.title = \"Play (Space)\";\n\t\t\tthis._playButton.innerText = \"Play\";\n\t\t}\n\t}\n\n\tprivate _close = (): void => {\n\t\tthis._doc.prompt = null;\n\t\t// Restore filter settings to default\n\t\tthis.filterEditor.resetToInitial();\n\t\tthis._doc.undo();\n\t}\n\n\tpublic cleanUp = (): void => {\n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis.container.removeEventListener(\"keydown\", this.whenKeyPressed);\n\n\t\tthis._playButton.removeEventListener(\"click\", this._togglePlay);\n\t}\n\n\tpublic whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif ((<Element>event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t\telse if (event.keyCode == 32) { // space\n\t\t\tthis._togglePlay();\n\t\t\tevent.preventDefault();\n\t\t}\n\t\telse if (event.keyCode == 90) { // z\n\t\t\tthis.filterEditor.undo();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\telse if (event.keyCode == 89) { // y\n\t\t\tthis.filterEditor.redo();\n\t\t\tevent.stopPropagation();\n\t\t}\n\t\telse if (event.keyCode == 219) { // [\n\t\t\tthis._doc.synth.goToPrevBar();\n\t\t}\n\t\telse if (event.keyCode == 221) { // ]\n\t\t\tthis._doc.synth.goToNextBar();\n\t\t}\n\t\telse if (event.keyCode >= 48 && event.keyCode <= 57) { // 0-9\n\t\t\tif (event.shiftKey) {\n\t\t\t\tthis._setSubfilter(event.keyCode - 48);\n\t\t\t}\n\t\t}\n\n\t}\n\n\tprivate _saveChanges = (): void => {\n\t\tthis._doc.prompt = null;\n\t\tthis.filterEditor.saveSettings();\n\t}\n}\n//}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Prompt } from \"./Prompt\";\nimport { ChangeEdo } from \"./changes\";\n\n\tconst {button, div, h2, input} = HTML;\n\nexport class EdoPrompt implements Prompt {\n\t\tprivate readonly _edo: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"number\", step: \"1\"});\n\t\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\t\tprivate readonly _okayButton: HTMLButtonElement = button({class: \"okayButton\", style: \"width:45%;\"}, \"Okay\");\n\t\t\n\t\tpublic readonly container: HTMLDivElement = div({class: \"prompt noSelection\", style: \"width: 250px;\"},\n\t\th2(\"EDO\"),\n\t\t\tdiv({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\tdiv({style: \"display: inline-block; text-align: left;\"},\n\t\t\t\t\"EDO:\",\n\t\t\t),\n\t\t\tthis._edo,\n\t\t),\n\t\t\tdiv({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t),\n\t\t\tdiv({style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\"},\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\t\n\tconstructor(private _doc: SongDocument) {\n\n\t\tthis._edo.value = this._doc.song.edo + \"\";\n\t\tthis._edo.min = \"5\";\n\t\tthis._edo.max = \"53\";\n\t\t\t\n\t\tthis._edo.select();\n\t\t\tsetTimeout(()=>this._edo.focus());\n\t\t\t\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis._edo.addEventListener(\"keypress\", EdoPrompt._validateKey);\n\t\tthis._edo.addEventListener(\"blur\", EdoPrompt._validateNumber);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\t\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\t\n\tpublic cleanUp = (): void => {\n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis._edo.removeEventListener(\"keypress\", EdoPrompt._validateKey);\n\t\tthis._edo.removeEventListener(\"blur\", EdoPrompt._validateNumber);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\t\tif ((<Element> event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t}\n\t\t\n\tprivate static _validateKey(event: KeyboardEvent): boolean {\n\t\tconst charCode = (event.which) ? event.which : event.keyCode;\n\t\tif (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {\n\t\t\tevent.preventDefault();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\t\n\tprivate static _validateNumber(event: Event): void {\n\t\tconst input: HTMLInputElement = <HTMLInputElement>event.target;\n\t\tinput.value = String(EdoPrompt._validate(input));\n\t}\n\t\t\n\tprivate static _validate(input: HTMLInputElement): number {\n\t\treturn Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value))));\n\t}\n\t\t\n\tprivate _saveChanges = (): void => {\n\t\tthis._doc.prompt = null;\n\t\tthis._doc.record(new ChangeEdo(this._doc, EdoPrompt._validate(this._edo)), true);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Synth } from \"../synth/synth\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Prompt } from \"./Prompt\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\n\nconst { button, div, h2, input, select, option } = HTML;\n\nfunction save(blob: Blob, name: string): void {\n    if ((<any>navigator).msSaveOrOpenBlob) {\n        (<any>navigator).msSaveOrOpenBlob(blob, name);\n        return;\n    }\n\n    const anchor: HTMLAnchorElement = document.createElement(\"a\");\n    if (anchor.download != undefined) {\n        const url: string = URL.createObjectURL(blob);\n        setTimeout(function () { URL.revokeObjectURL(url); }, 60000);\n        anchor.href = url;\n        anchor.download = name;\n        // Chrome bug regression: We need to delay dispatching the click\n        // event. Seems to be related to going back in the browser history.\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=825100\n        setTimeout(function () { anchor.dispatchEvent(new MouseEvent(\"click\")); }, 0);\n    } else {\n        const url: string = URL.createObjectURL(blob);\n        setTimeout(function () { URL.revokeObjectURL(url); }, 60000);\n        if (!window.open(url, \"_blank\")) window.location.href = url;\n    }\n}\n\nexport class ExportPrompt implements Prompt {\n    private synth: Synth;\n    private thenExportTo: string;\n    private recordedSamplesL: Float32Array;\n    private recordedSamplesR: Float32Array;\n    private sampleFrames: number;\n    private totalChunks: number;\n    private currentChunk: number;\n    private outputStarted: boolean = false;\n    private readonly _fileName: HTMLInputElement = input({ type: \"text\", style: \"width: 10em;\", value: \"BeepBox-Song\", maxlength: 250, \"autofocus\": \"autofocus\" });\n    private readonly _computedSamplesLabel: HTMLDivElement = div({ style: \"width: 10em;\" }, new Text(\"0:00\"));\n    private readonly _enableIntro: HTMLInputElement = input({ type: \"checkbox\" });\n    private readonly _loopDropDown: HTMLInputElement = input({ style: \"width: 2em;\", type: \"number\", min: \"1\", max: \"4\", step: \"1\" });\n    private readonly _enableOutro: HTMLInputElement = input({ type: \"checkbox\" });\n    private readonly _formatSelect: HTMLSelectElement = select({ style: \"width: 100%;\" },\n        option({ value: \"wav\" }, \"Export to .wav file.\"),\n        option({ value: \"mp3\" }, \"Export to .mp3 file.\"),\n        option({ value: \"midi\" }, \"Export to .mid file.\"),\n        option({ value: \"json\" }, \"Export to .json file.\"),\n        option({ value: \"html\" }, \"Export to .html file.\"),\n    );\n    private readonly _cancelButton: HTMLButtonElement = button({ class: \"cancelButton\" });\n    private readonly _exportButton: HTMLButtonElement = button({ class: \"exportButton\", style: \"width:45%;\" }, \"Export\");\n    private readonly _outputProgressBar: HTMLDivElement = div({ style: `width: 0%; background: ${ColorConfig.loopAccent}; height: 100%; position: absolute; z-index: 2;` });\n    private readonly _outputProgressLabel: HTMLDivElement = div({ style: `position: relative; top: -1px; z-index: 3;` }, \"0%\");\n    private readonly _outputProgressContainer: HTMLDivElement = div({ style: `height: 12px; background: ${ColorConfig.uiWidgetBackground}; display: block; position: relative; z-index: 1;` },\n        this._outputProgressBar,\n        this._outputProgressLabel,\n    );\n\n    public readonly container: HTMLDivElement = div({ class: \"prompt noSelection\", style: \"width: 200px;\" },\n        h2(\"Export Options\"),\n        div({ style: \"display: flex; flex-direction: row; align-items: center; justify-content: space-between;\" },\n            \"File name:\",\n            this._fileName,\n        ),\n        div({ style: \"display: flex; flex-direction: row; align-items: center; justify-content: space-between;\" },\n            \"Length:\",\n            this._computedSamplesLabel,\n        ),\n        div({ style: \"display: table; width: 100%;\" },\n            div({ style: \"display: table-row;\" },\n                div({ style: \"display: table-cell;\" }, \"Intro:\"),\n                div({ style: \"display: table-cell;\" }, \"Loop Count:\"),\n                div({ style: \"display: table-cell;\" }, \"Outro:\"),\n            ),\n            div({ style: \"display: table-row;\" },\n                div({ style: \"display: table-cell; vertical-align: middle;\" }, this._enableIntro),\n                div({ style: \"display: table-cell; vertical-align: middle;\" }, this._loopDropDown),\n                div({ style: \"display: table-cell; vertical-align: middle;\" }, this._enableOutro),\n            ),\n        ),\n        div({ class: \"selectContainer\", style: \"width: 100%;\" }, this._formatSelect),\n        div({ style: \"text-align: left;\" }, \"Exporting can be slow. Reloading the page or clicking the X will cancel it. Please be patient.\"),\n        this._outputProgressContainer,\n        div({ style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\" },\n            this._exportButton,\n        ),\n        this._cancelButton,\n    );\n\n    constructor(private _doc: SongDocument) {\n        this._loopDropDown.value = \"1\";\n\n        if (this._doc.song.loopStart == 0) {\n            this._enableIntro.checked = false;\n            this._enableIntro.disabled = true;\n        } else {\n            this._enableIntro.checked = true;\n            this._enableIntro.disabled = false;\n        }\n        if (this._doc.song.loopStart + this._doc.song.loopLength == this._doc.song.barCount) {\n            this._enableOutro.checked = false;\n            this._enableOutro.disabled = true;\n        } else {\n            this._enableOutro.checked = true;\n            this._enableOutro.disabled = false;\n        }\n\n        const lastExportFormat: string | null = window.localStorage.getItem(\"exportFormat\");\n        if (lastExportFormat != null) {\n            this._formatSelect.value = lastExportFormat;\n        }\n\n        this._fileName.select();\n        setTimeout(() => this._fileName.focus());\n\n        this._fileName.addEventListener(\"input\", ExportPrompt._validateFileName);\n        this._loopDropDown.addEventListener(\"blur\", ExportPrompt._validateNumber);\n        this._exportButton.addEventListener(\"click\", this._export);\n        this._cancelButton.addEventListener(\"click\", this._close);\n        this._enableOutro.addEventListener(\"click\", () => { (this._computedSamplesLabel.firstChild as Text).textContent = this.samplesToTime(this._doc.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, +this._loopDropDown.value - 1)); });\n        this._enableIntro.addEventListener(\"click\", () => { (this._computedSamplesLabel.firstChild as Text).textContent = this.samplesToTime(this._doc.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, +this._loopDropDown.value - 1)); });\n        this._loopDropDown.addEventListener(\"change\", () => { (this._computedSamplesLabel.firstChild as Text).textContent = this.samplesToTime(this._doc.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, +this._loopDropDown.value - 1)); });\n        this.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\n        this._fileName.value = _doc.song.title;\n        ExportPrompt._validateFileName(null, this._fileName);\n\n        (this._computedSamplesLabel.firstChild as Text).textContent = this.samplesToTime(this._doc.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, +this._loopDropDown.value - 1));\n    }\n\n    // Could probably be moved to doc or synth. Fine here for now until needed by something else.\n    private samplesToTime(samples: number): string {\n        const rawSeconds: number = Math.round(samples / this._doc.synth.samplesPerSecond);\n        const seconds: number = rawSeconds % 60;\n        const minutes: number = Math.floor(rawSeconds / 60);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    }\n\n    private _close = (): void => {\n        if (this.synth != null)\n            this.synth.renderingSong = false;\n        this.outputStarted = false;\n        this._doc.undo();\n    }\n\n    public changeFileName(newValue: string) {\n        this._fileName.value = newValue;\n    }\n\n    public cleanUp = (): void => {\n        this._fileName.removeEventListener(\"input\", ExportPrompt._validateFileName);\n        this._loopDropDown.removeEventListener(\"blur\", ExportPrompt._validateNumber);\n        this._exportButton.removeEventListener(\"click\", this._export);\n        this._cancelButton.removeEventListener(\"click\", this._close);\n        this.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n    }\n\n    private _whenKeyPressed = (event: KeyboardEvent): void => {\n        if ((<Element>event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n            this._export();\n        }\n    }\n\n    private static _validateFileName(event: Event | null, use?: HTMLInputElement): void {\n\n        let input: HTMLInputElement;\n        if (event != null) {\n            input = <HTMLInputElement>event.target;\n        } else if (use != undefined) {\n            input = use;\n        }\n        else {\n            return;\n        }\n        const deleteChars = /[\\+\\*\\$\\?\\|\\{\\}\\\\\\/<>#%!`&'\"=:@]/gi;\n        if (deleteChars.test(input.value)) {\n            let cursorPos: number = <number>input.selectionStart;\n            input.value = input.value.replace(deleteChars, \"\");\n            cursorPos--;\n            input.setSelectionRange(cursorPos, cursorPos);\n        }\n    }\n\n    private static _validateNumber(event: Event): void {\n        const input: HTMLInputElement = <HTMLInputElement>event.target;\n        input.value = Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value)))) + \"\";\n    }\n\n    private _export = (): void => {\n        if (this.outputStarted == true)\n            return;\n        window.localStorage.setItem(\"exportFormat\", this._formatSelect.value);\n        switch (this._formatSelect.value) {\n            case \"wav\":\n                this.outputStarted = true;\n                this._exportTo(\"wav\");\n                break;\n            case \"mp3\":\n                this.outputStarted = true;\n                this._exportTo(\"mp3\");\n                break;\n            case \"json\":\n                this.outputStarted = true;\n                this._exportToJson();\n                break;\n            case \"html\":\n                this._exportToHtml();\n                break;\n            default:\n                throw new Error(\"Unhandled file export type.\");\n        }\n    }\n\n    private _synthesize(): void {\n        //const timer: number = performance.now();\n\n        // If output was stopped e.g. user clicked the close button, abort.\n        if (this.outputStarted == false) {\n            return;\n        }\n\n        // Update progress bar UI once per 5 sec of exported data\n        const samplesPerChunk: number = this.synth.samplesPerSecond * 5; //e.g. 44100 * 5\n        const currentFrame: number = this.currentChunk * samplesPerChunk;\n\n        const samplesInChunk: number = Math.min(samplesPerChunk, this.sampleFrames - currentFrame);\n        const tempSamplesL = new Float32Array(samplesInChunk);\n        const tempSamplesR = new Float32Array(samplesInChunk);\n\n        this.synth.renderingSong = true;\n        this.synth.synthesize(tempSamplesL, tempSamplesR, samplesInChunk);\n\n        // Concatenate chunk data into final array\n        this.recordedSamplesL.set(tempSamplesL, currentFrame);\n        this.recordedSamplesR.set(tempSamplesR, currentFrame);\n\n        // Update UI\n        this._outputProgressBar.style.setProperty(\"width\", Math.round((this.currentChunk + 1) / this.totalChunks * 100.0) + \"%\");\n        this._outputProgressLabel.innerText = Math.round((this.currentChunk + 1) / this.totalChunks * 100.0) + \"%\";\n\n        // Next call, synthesize the next chunk.\n        this.currentChunk++;\n\n        if (this.currentChunk >= this.totalChunks) {\n            // Done, call final function\n            this.synth.renderingSong = false;\n            this._outputProgressLabel.innerText = \"Encoding...\";\n            if (this.thenExportTo == \"wav\") {\n                this._exportToWavFinish();\n            }\n            else if (this.thenExportTo == \"mp3\") {\n                this._exportToMp3Finish();\n            }\n            else {\n                throw new Error(\"Unrecognized file export type chosen!\");\n            }\n        }\n        else {\n            // Continue batch export\n            setTimeout(() => { this._synthesize(); });\n        }\n\n        //console.log(\"export timer\", (performance.now() - timer) / 1000.0);\n    }\n\n    private _exportTo(type: string): void {\n        // Batch the export operation\n        this.thenExportTo = type;\n        this.currentChunk = 0;\n        this.synth = new Synth(this._doc.song);\n        if (type == \"wav\") {\n            this.synth.samplesPerSecond = 48000; // Use professional video editing standard sample rate for .wav file export.\n        }\n        else if (type == \"mp3\") {\n            this.synth.samplesPerSecond = 44100; // Use consumer CD standard sample rate for .mp3 export.\n        }\n        else {\n            throw new Error(\"Unrecognized file export type chosen!\");\n        }\n\n        this._outputProgressBar.style.setProperty(\"width\", \"0%\");\n        this._outputProgressLabel.innerText = \"0%\";\n\n        this.synth.loopRepeatCount = Number(this._loopDropDown.value) - 1;\n        if (!this._enableIntro.checked) {\n            for (let introIter: number = 0; introIter < this._doc.song.loopStart; introIter++) {\n                this.synth.goToNextBar();\n            }\n        }\n\n        this.synth.initModFilters(this._doc.song);\n        this.synth.computeLatestModValues();\n        this.synth.warmUpSynthesizer(this._doc.song);\n\n        this.sampleFrames = this.synth.getTotalSamples(this._enableIntro.checked, this._enableOutro.checked, this.synth.loopRepeatCount);\n        // Compute how many UI updates will need to run to determine how many \n        this.totalChunks = Math.ceil(this.sampleFrames / (this.synth.samplesPerSecond * 5));\n        this.recordedSamplesL = new Float32Array(this.sampleFrames);\n        this.recordedSamplesR = new Float32Array(this.sampleFrames);\n\n        // Batch the actual export\n        setTimeout(() => { this._synthesize(); });\n    }\n\n    private _exportToWavFinish(): void {\n        const sampleFrames: number = this.recordedSamplesL.length;\n        const sampleRate: number = this.synth.samplesPerSecond;\n\n        const wavChannelCount: number = 2;\n        const bytesPerSample: number = 2;\n        const bitsPerSample: number = 8 * bytesPerSample;\n        const sampleCount: number = wavChannelCount * sampleFrames;\n\n        const totalFileSize: number = 44 + sampleCount * bytesPerSample;\n\n        let index: number = 0;\n        const arrayBuffer: ArrayBuffer = new ArrayBuffer(totalFileSize);\n        const data: DataView = new DataView(arrayBuffer);\n        data.setUint32(index, 0x52494646, false); index += 4;\n        data.setUint32(index, 36 + sampleCount * bytesPerSample, true); index += 4; // size of remaining file\n        data.setUint32(index, 0x57415645, false); index += 4;\n        data.setUint32(index, 0x666D7420, false); index += 4;\n        data.setUint32(index, 0x00000010, true); index += 4; // size of following header\n        data.setUint16(index, 0x0001, true); index += 2; // not compressed\n        data.setUint16(index, wavChannelCount, true); index += 2; // channel count\n        data.setUint32(index, sampleRate, true); index += 4; // sample rate\n        data.setUint32(index, sampleRate * bytesPerSample * wavChannelCount, true); index += 4; // bytes per second\n        data.setUint16(index, bytesPerSample * wavChannelCount, true); index += 2; // block align\n        data.setUint16(index, bitsPerSample, true); index += 2; // bits per sample\n        data.setUint32(index, 0x64617461, false); index += 4;\n        data.setUint32(index, sampleCount * bytesPerSample, true); index += 4;\n\n        if (bytesPerSample > 1) {\n            // usually samples are signed. \n            const range: number = (1 << (bitsPerSample - 1)) - 1;\n            for (let i: number = 0; i < sampleFrames; i++) {\n                let valL: number = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesL[i])) * range);\n                let valR: number = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesR[i])) * range);\n                if (bytesPerSample == 2) {\n                    data.setInt16(index, valL, true); index += 2;\n                    data.setInt16(index, valR, true); index += 2;\n                } else if (bytesPerSample == 4) {\n                    data.setInt32(index, valL, true); index += 4;\n                    data.setInt32(index, valR, true); index += 4;\n                } else {\n                    throw new Error(\"unsupported sample size\");\n                }\n            }\n        } else {\n            // 8 bit samples are a special case: they are unsigned.\n            for (let i: number = 0; i < sampleFrames; i++) {\n                let valL: number = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesL[i])) * 127 + 128);\n                let valR: number = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesR[i])) * 127 + 128);\n                data.setUint8(index, valL > 255 ? 255 : (valL < 0 ? 0 : valL)); index++;\n                data.setUint8(index, valR > 255 ? 255 : (valR < 0 ? 0 : valR)); index++;\n            }\n        }\n\n        const blob: Blob = new Blob([arrayBuffer], { type: \"audio/wav\" });\n        save(blob, this._fileName.value.trim() + \".wav\");\n\n        this._close();\n    }\n\n    private _exportToMp3Finish(): void {\n        const whenEncoderIsAvailable = (): void => {\n\n            const lamejs: any = (<any>window)[\"lamejs\"];\n            const channelCount: number = 2;\n            const kbps: number = 192;\n            const sampleBlockSize: number = 1152;\n            const mp3encoder: any = new lamejs.Mp3Encoder(channelCount, this.synth.samplesPerSecond, kbps);\n            const mp3Data: any[] = [];\n\n            const left: Int16Array = new Int16Array(this.recordedSamplesL.length);\n            const right: Int16Array = new Int16Array(this.recordedSamplesR.length);\n            const range: number = (1 << 15) - 1;\n            for (let i: number = 0; i < this.recordedSamplesL.length; i++) {\n                left[i] = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesL[i])) * range);\n                right[i] = Math.floor(Math.max(-1, Math.min(1, this.recordedSamplesR[i])) * range);\n            }\n\n            for (let i: number = 0; i < left.length; i += sampleBlockSize) {\n                const leftChunk: Int16Array = left.subarray(i, i + sampleBlockSize);\n                const rightChunk: Int16Array = right.subarray(i, i + sampleBlockSize);\n                const mp3buf: any = mp3encoder.encodeBuffer(leftChunk, rightChunk);\n                if (mp3buf.length > 0) mp3Data.push(mp3buf);\n            }\n\n            const mp3buf: any = mp3encoder.flush();\n            if (mp3buf.length > 0) mp3Data.push(mp3buf);\n\n            const blob: Blob = new Blob(mp3Data, { type: \"audio/mp3\" });\n            save(blob, this._fileName.value.trim() + \".mp3\");\n            this._close();\n        }\n\n        if (\"lamejs\" in window) {\n            whenEncoderIsAvailable();\n        } else {\n            var script = document.createElement(\"script\");\n            script.src = \"https://cdn.jsdelivr.net/npm/lamejs@1.2.0/lame.min.js\";\n            script.onload = whenEncoderIsAvailable;\n            document.head.appendChild(script);\n        }\n    }\n\t\n\tprivate _exportToJson(): void {\n\t\tconst jsonObject: Object = this._doc.song.toJsonObject(this._enableIntro.checked, Number(this._loopDropDown.value), this._enableOutro.checked);\n\t\tconst jsonString: string = JSON.stringify(jsonObject, null, '\\t');\n\t\tconst blob: Blob = new Blob([jsonString], {type: \"application/json\"});\n\t\tsave(blob, this._fileName.value.trim() + \".json\");\n\t\tthis._close();\n    }\n\n    private _exportToHtml(): void {\n        const fileContents = `\\\n<!DOCTYPE html><meta charset=\"utf-8\">\n\nYou should be redirected to the song at:<br /><br />\n\n<a id=\"destination\" href=\"${new URL(\"#\" + this._doc.song.toBase64String(), location.href).href}\"></a>\n\n<style>\n\t:root {\n\t\tcolor: white;\n\t\tbackground: black;\n\t\tfont-family:\n\t\tsans-serif;\n\t}\n\ta {\n\t\tcolor: #98f;\n\t}\n\ta[href]::before {\n\t\tcontent: attr(href);\n\t}\n</style>\n\n<script>\n\tlocation.assign(document.querySelector(\"a#destination\").href);\n</script>\n`;\n        const blob: Blob = new Blob([fileContents], { type: \"text/html\" });\n        save(blob, this._fileName.value.trim() + \".html\");\n        this._close();\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { ColorConfig } from \"./ColorConfig\";\n\nexport class Layout {\n\tprivate static readonly _layoutMap: {[K: string]: string} = {\n\t\t\"small\": \"\",\n\t\t\"long\": `\\\n\n\t\t\t/* long layout */\n\t\t\t@media (min-width: 711px) {\n\t\t\t\t#beepboxEditorContainer {\n\t\t\t\t\tmax-width: initial;\n\t\t\t\t\theight: 100vh;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100vh;\n\t\t\t\t\tgrid-template-columns: minmax(0, 1fr) 390px; /* minmax(0, 1fr) min-content; Chrome 80 grid layout regression. https://bugs.chromium.org/p/chromium/issues/detail?id=1050307 */\n\t\t\t\t\tgrid-template-rows: minmax(481px, 1fr) minmax(0, min-content);\n\t\t\t\t\tgrid-template-areas: \"pattern-area settings-area\" \"track-area track-area\";\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .pattern-area {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .track-area {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: column;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmin-height: 0;\n\t\t\t\t\tflex: 1;\n\t\t\t\t\toverflow: auto;\n\t\t\t\t\tmax-height: 97.5vh;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .instrument-settings-area {\n\t\t\t\t\toverflow-y: auto;\n\t\t\t\t\tposition: relative;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .instrument-settings-area > .editor-controls {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .song-settings-area {\n\t\t\t\t\toverflow-y: auto;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.beepboxEditor .settings-area {\n\t\t\t\t\twidth: 390px;\n\t\t\t\t\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr);\n\t\t\t\t\tgrid-template-rows: auto auto auto minmax(0, 1fr);\n\t\t\t\t\tgrid-template-areas:\n\t\t\t\t\t\t\"instrument-settings-area version-area\"\n\t\t\t\t\t\t\"instrument-settings-area play-pause-area\"\n\t\t\t\t\t\t\"instrument-settings-area menu-area\"\n\t\t\t\t\t\t\"instrument-settings-area song-settings-area\";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.beepboxEditor .barScrollBar {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor.selectRow {\n\t\t\t\t\theight: 2em;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer {\n\t\t\t\t\tmax-height: 446px;\n\t\t\t\t}\n\n\t\t\t\t.beepboxEditor .trackContainer {\n\t\t\t\t\toverflow: visible;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer {\n\t\t\t\t\tscrollbar-width: auto;\n\t\t\t\t\tscrollbar-color: ${ColorConfig.uiWidgetBackground} ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {\n\t\t\t\t\twidth: 20px;\n\t\t\t\t\theight: 20px;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {\n\t\t\t\t\tbackground: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {\n\t\t\t\t\tbackground-color: ${ColorConfig.uiWidgetBackground};\n\t\t\t\t\tborder: 3px solid ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {\n\t\t\t\t\tbackground-color: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t}\n\t\t`,\n\t\t\"tall\": `\\\n\t\t\t/* tall layout */\n\t\t\t@media (min-width: 711px) {\n\t\t\t\t#beepboxEditorContainer {\n\t\t\t\t\tmax-width: initial;\n\t\t\t\t\theight: 100vh;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100vh;\n\t\t\t\t\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr) 192px;\n\t\t\t\t\tgrid-template-rows: 1fr;\n\t\t\t\t\tgrid-template-areas: \"track-area pattern-area settings-area\";\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .pattern-area {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .track-area {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: column;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmin-height: 0;\n\t\t\t\t\tflex: 0;\n\t\t\t\t\toverflow: auto;\n\t\t\t\t\tflex-basis: initial;\n\t\t\t\t\tflex-grow: 0;\n\t\t\t\t\tmax-height: 97.5vh;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .instrument-settings-area > .editor-controls {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.beepboxEditor .settings-area {\n\t\t\t\t\twidth: 192px;\n\t\t\t\t\tposition: relative;\n\t\t\t\t\toverflow-y: auto;\n\t\t\t\t\tgrid-template-columns: minmax(0, 1fr);\n\t\t\t\t\tgrid-template-rows: auto auto auto auto minmax(0, 1fr);\n\t\t\t\t\tgrid-template-areas:\n\t\t\t\t\t\t\"version-area\"\n\t\t\t\t\t\t\"play-pause-area\"\n\t\t\t\t\t\t\"menu-area\"\n\t\t\t\t\t\t\"song-settings-area\"\n\t\t\t\t\t\t\"instrument-settings-area\";\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .version-area {\n\t\t\t\t\tposition: sticky;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tz-index: 1;\n\t\t\t\t\tbackground: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .play-pause-area {\n\t\t\t\t\tposition: sticky;\n\t\t\t\t\ttop: 22px;\n\t\t\t\t\tz-index: 1;\n\t\t\t\t\tbackground: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .menu-area {\n\t\t\t\t\tposition: sticky;\n\t\t\t\t\ttop: 82px;\n\t\t\t\t\tz-index: 1;\n\t\t\t\t\tbackground: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.beepboxEditor .barScrollBar {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackContainer {\n\t\t\t\t\toverflow: visible;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer {\n\t\t\t\t\tscrollbar-width: auto;\n\t\t\t\t\tscrollbar-color: ${ColorConfig.uiWidgetBackground} ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar {\n\t\t\t\t\twidth: 20px;\n\t\t\t\t\theight: 20px;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-track {\n\t\t\t\t\tbackground: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-thumb {\n\t\t\t\t\tbackground-color: ${ColorConfig.uiWidgetBackground};\n\t\t\t\t\tborder: 3px solid ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer::-webkit-scrollbar-corner {\n\t\t\t\t\tbackground-color: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t}\n\t\t`,\n\t\t\"wide\": `\\\n\t\t\t/* wide (JB) layout */\n\t\t\t@media (min-width: 1001px) {\n\t\t\t\t#beepboxEditorContainer {\n\t\t\t\t\tmax-width: initial;\n\t\t\t\t\theight: 100vh;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100vh;\n\t\t\t\t\tgrid-template-columns: 512px minmax(0, 1fr) 30em;\n\t\t\t\t\tgrid-template-rows: minmax(481px, 1fr) min-content;\n\t\t\t\t\tgrid-template-areas: \"track-area pattern-area settings-area\";\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .pattern-area {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .track-area {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tmax-height: 100%\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .editor-widget-column {\n\t\t\t\t\tflex: 0;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .trackAndMuteContainer {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tflex: 0;\n\t\t\t\t\tflex-basis: initial;\n\t\t\t\t\tflex-grow: 0;\n\t\t\t\t\toverflow-y: auto;\n\t\t\t\t\tmax-height: 97.5vh;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .instrument-settings-area {\n\t\t\t\t\toverflow-y: auto;\n\t\t\t\t\tposition: relative;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .instrument-settings-area > .editor-controls {\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.beepboxEditor .song-settings-area {\n\t\t\t\t\toverflow-y: auto;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.beepboxEditor .settings-area {\n\t\t\t\t\twidth: 30em;\n\t\t\t\t\tgrid-template-columns: minmax(0, 1fr) minmax(0, 1fr);\n\t\t\t\t\tgrid-template-rows: auto auto auto minmax(0, 1fr);\n\t\t\t\t\tgrid-template-areas:\n\t\t\t\t\t\t\"instrument-settings-area version-area\"\n\t\t\t\t\t\t\"instrument-settings-area play-pause-area\"\n\t\t\t\t\t\t\"instrument-settings-area menu-area\"\n\t\t\t\t\t\t\"instrument-settings-area song-settings-area\";\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .version-area {\n\t\t\t\t\tposition: sticky;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tz-index: 1;\n\t\t\t\t\tbackground: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .play-pause-area {\n\t\t\t\t\tposition: sticky;\n\t\t\t\t\ttop: 22px;\n\t\t\t\t\tz-index: 1;\n\t\t\t\t\tbackground: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t.beepboxEditor .menu-area {\n\t\t\t\t\tposition: sticky;\n\t\t\t\t\ttop: 82px;\n\t\t\t\t\tz-index: 1;\n\t\t\t\t\tbackground: ${ColorConfig.editorBackground};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.beepboxEditor .trackContainer {\n\t\t\t\t\toverflow: visible;\n\t\t\t\t}\n\t\t\t}\n\t\t`,\n\t}\n\t\t\n\t\tprivate static readonly _styleElement: HTMLStyleElement = document.head.appendChild(HTML.style({type: \"text/css\"}));\n\t\t\n\tpublic static setLayout(layout: string): void {\n\t\tthis._styleElement.textContent = this._layoutMap[layout];\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"../synth/SynthConfig\";\nimport { HarmonicsWave, Instrument } from \"../synth/synth\";\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { ChangeHarmonics } from \"./changes\";\nimport { prettyNumber } from \"./EditorConfig\";\n\nexport class HarmonicsEditor {\n\tprivate readonly _editorWidth: number = 120;\n\tprivate readonly _editorHeight: number = 26;\n\t\tprivate readonly _octaves: SVGSVGElement = SVG.svg({\"pointer-events\": \"none\"});\n\t\tprivate readonly _fifths: SVGSVGElement = SVG.svg({\"pointer-events\": \"none\"});\n\t\tprivate readonly _curve: SVGPathElement = SVG.path({fill: \"none\", stroke: \"currentColor\", \"stroke-width\": 2, \"pointer-events\": \"none\"});\n\tprivate readonly _lastControlPoints: SVGRectElement[] = [];\n\t\tprivate readonly _lastControlPointContainer: SVGSVGElement = SVG.svg({\"pointer-events\": \"none\"});\n\tprivate readonly _svg: SVGSVGElement = SVG.svg({ style: \"background-color: ${ColorConfig.editorBackground}; touch-action: none; cursor: crosshair;\", width: \"100%\", height: \"100%\", viewBox: \"0 0 \" + this._editorWidth + \" \" + this._editorHeight, preserveAspectRatio: \"none\" },\n\t\tthis._octaves,\n\t\tthis._fifths,\n\t\tthis._curve,\n\t\tthis._lastControlPointContainer,\n\t);\n\t\t\n\tpublic readonly container: HTMLElement = HTML.div({class: \"harmonics\", style: \"height: 100%;\"}, this._svg);\n\t\t\n\tprivate _mouseX: number = 0;\n\tprivate _mouseY: number = 0;\n\tprivate _freqPrev: number = 0;\n\tprivate _ampPrev: number = 0;\n\tprivate _mouseDown: boolean = false;\n\tprivate _change: ChangeHarmonics | null = null;\n\tprivate _renderedPath: String = \"\";\n\tprivate _renderedFifths: boolean = true;\n\t\t\n\tconstructor(private _doc: SongDocument) {\n\t\tfor (let i: number = 1; i <= Config.harmonicsControlPoints; i = i * 2) {\n\t\t\t\tthis._octaves.appendChild(SVG.rect({fill: ColorConfig.tonic, x: (i-0.5) * (this._editorWidth - 8) / (Config.harmonicsControlPoints - 1) - 1, y: 0, width: 2, height: this._editorHeight}));\n\t\t}\n\t\tfor (let i: number = 3; i <= Config.harmonicsControlPoints; i = i * 2) {\n\t\t\t\tthis._fifths.appendChild(SVG.rect({fill: ColorConfig.fifthNote, x: (i-0.5) * (this._editorWidth - 8) / (Config.harmonicsControlPoints - 1) - 1, y: 0, width: 2, height: this._editorHeight}));\n\t\t}\n\t\tfor (let i: number = 0; i < 4; i++) {\n\t\t\t\tconst rect: SVGRectElement = SVG.rect({fill: \"currentColor\", x: (this._editorWidth - i * 2 - 1), y: 0, width: 1, height: this._editorHeight});\n\t\t\tthis._lastControlPoints.push(rect);\n\t\t\tthis._lastControlPointContainer.appendChild(rect);\n\t\t}\n\t\t\t\n\t\tthis.container.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenCursorReleased);\n\t\t\t\n\t\tthis.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n\t\tthis.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n\t\tthis.container.addEventListener(\"touchend\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"touchcancel\", this._whenCursorReleased);\n\t}\n\t\t\n\tprivate _xToFreq(x: number): number {\n\t\treturn (Config.harmonicsControlPoints - 1) * x / (this._editorWidth - 8) - 0.5;\n\t}\n\t\t\n\tprivate _yToAmp(y: number): number {\n\t\treturn Config.harmonicsMax * (1 - y / this._editorHeight);\n\t}\n\t\t\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\t    \n\t\tthis._freqPrev = this._xToFreq(this._mouseX);\n\t\tthis._ampPrev = this._yToAmp(this._mouseY);\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenTouchPressed = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\t    \n\t\tthis._freqPrev = this._xToFreq(this._mouseX);\n\t\tthis._ampPrev = this._yToAmp(this._mouseY);\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenTouchMoved = (event: TouchEvent): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tif (!this._mouseDown) return;\n\t\tevent.preventDefault();\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenCursorMoved(): void {\n\t\tif (this._mouseDown) {\n\t\t\tconst freq: number = this._xToFreq(this._mouseX);\n\t\t\tconst amp: number = this._yToAmp(this._mouseY);\n\t\t\t\t\n\t\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\t\tconst harmonicsWave: HarmonicsWave = instrument.harmonicsWave; //(this._harmonicsIndex == null) ? instrument.harmonicsWave : instrument.drumsetSpectrumWaves[this._harmonicsIndex];\n\t\t\t\t\n\t\t\tif (freq != this._freqPrev) {\n\t\t\t\tconst slope: number = (amp - this._ampPrev) / (freq - this._freqPrev);\n\t\t\t\tconst offset: number = this._ampPrev - this._freqPrev * slope;\n\t\t\t\tconst lowerFreq: number = Math.ceil(Math.min(this._freqPrev, freq));\n\t\t\t\tconst upperFreq: number = Math.floor(Math.max(this._freqPrev, freq));\n\t\t\t\tfor (let i: number = lowerFreq; i <= upperFreq; i++) {\n\t\t\t\t\tif (i < 0 || i >= Config.harmonicsControlPoints) continue;\n\t\t\t\t\tharmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(i * slope + offset)));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\tharmonicsWave.harmonics[Math.max(0, Math.min(Config.harmonicsControlPoints - 1, Math.round(freq)))] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(amp)));\n\t\t\t\t\n\t\t\tthis._freqPrev = freq;\n\t\t\tthis._ampPrev = amp;\n\t\t\t\t\n\t\t\tthis._change = new ChangeHarmonics(this._doc, instrument, harmonicsWave);\n\t\t\tthis._doc.setProspectiveChange(this._change);\n\t\t}\n\t}\n\t\t\n\tprivate _whenCursorReleased = (event: Event): void => {\n\t\tif (this._mouseDown) {\n\t\t\tthis._doc.record(this._change!);\n\t\t\tthis._change = null;\n\t\t}\n\t\tthis._mouseDown = false;\n\t}\n\t\t\n\tpublic render(): void {\n\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\tconst harmonicsWave: HarmonicsWave = instrument.harmonicsWave; //(this._harmonicsIndex == null) ? instrument.harmonicsWave : instrument.drumsetSpectrumWaves[this._harmonicsIndex];\n\t\tconst controlPointToHeight = (point: number): number => {\n\t\t\treturn (1 - (point / Config.harmonicsMax)) * this._editorHeight;\n\t\t}\n\t\t\t\n\t\tlet bottom: string = prettyNumber(this._editorHeight);\n\t\tlet path: string = \"\";\n\t\tfor (let i: number = 0; i < Config.harmonicsControlPoints - 1; i++) {\n\t\t\tif (harmonicsWave.harmonics[i] == 0) continue;\n\t\t\tlet xPos: string = prettyNumber((i + 0.5) * (this._editorWidth - 8) / (Config.harmonicsControlPoints - 1));\n\t\t\tpath += \"M \" + xPos + \" \" + bottom + \" \";\n\t\t\tpath += \"L \" + xPos + \" \" + prettyNumber(controlPointToHeight(harmonicsWave.harmonics[i])) + \" \";\n\t\t}\n\t\t\t\n\t\tconst lastHeight: number = controlPointToHeight(harmonicsWave.harmonics[Config.harmonicsControlPoints - 1]);\n\t\tfor (let i: number = 0; i < 4; i++) {\n\t\t\tconst rect: SVGRectElement = this._lastControlPoints[i];\n\t\t\trect.setAttribute(\"y\", prettyNumber(lastHeight));\n\t\t\trect.setAttribute(\"height\", prettyNumber(this._editorHeight - lastHeight));\n\t\t}\n\t\t\t\n\t\tif (this._renderedPath != path) {\n\t\t\tthis._renderedPath = path;\n\t\t\tthis._curve.setAttribute(\"d\", path);\n\t\t}\n\t\tif (this._renderedFifths != this._doc.prefs.showFifth) {\n\t\t\tthis._renderedFifths = this._doc.prefs.showFifth;\n\t\t\tthis._fifths.style.display = this._doc.prefs.showFifth ? \"\" : \"none\";\n\t\t}\n\t}\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n// A few wrapper classes that add functionality onto existing HTML elements, namely binding some events to an implementation-specified change class\n\nimport { Change } from \"./Change\";\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\n\nconst { span } = HTML;\n\nexport class InputBox {\n\tprivate _change: Change | null = null;\n\tprivate _value: string = \"\";\n\tprivate _oldValue: string = \"\";\n\n\tconstructor(public readonly input: HTMLInputElement, private readonly _doc: SongDocument, private readonly _getChange: (oldValue: string, newValue: string) => Change) {\n\t\tinput.addEventListener(\"input\", this._whenInput);\n\t\tinput.addEventListener(\"change\", this._whenChange);\n\t}\n\n\tpublic updateValue(value: string): void {\n\t\tthis._value = value;\n\t\tthis.input.value = String(value);\n\t}\n\n\tprivate _whenInput = (): void => {\n\t\tconst continuingProspectiveChange: boolean = this._doc.lastChangeWas(this._change);\n\t\tif (!continuingProspectiveChange) this._oldValue = this._value;\n\t\tthis._change = this._getChange(this._oldValue, this.input.value);\n\t\tthis._doc.setProspectiveChange(this._change);\n\t};\n\n\tprivate _whenChange = (): void => {\n\t\tthis._doc.record(this._change!);\n\t\tthis._change = null;\n\t};\n}\n\nexport class Slider {\n\tprivate _change: Change | null = null;\n\tprivate _value: number = 0;\n\tprivate _oldValue: number = 0;\n\tpublic container: HTMLSpanElement;\n\n\tconstructor(public readonly input: HTMLInputElement, private readonly _doc: SongDocument, private readonly _getChange: ((oldValue: number, newValue: number) => Change) | null, midTick: boolean) {\n\t\t// A container is created around the input to allow for spec-compliant pseudo css classes (e.g ::before and ::after, which must be added to containers, not the input itself)\n\t\tthis.container = (midTick) ? span({ class: \"midTick\", style: \"position: sticky; width: 61.5%;\" }, input) : span({ style: \"position: sticky;\" }, input);\n\t\tinput.addEventListener(\"input\", this._whenInput);\n\t\tinput.addEventListener(\"change\", this._whenChange);\n\t}\n\n\tpublic updateValue(value: number): void {\n\t\tthis._value = value;\n\t\tthis.input.value = String(value);\n\t}\n\n\tprivate _whenInput = (): void => {\n\t\tconst continuingProspectiveChange: boolean = this._doc.lastChangeWas(this._change);\n\t\tif (!continuingProspectiveChange) this._oldValue = this._value;\n\t\tif (this._getChange != null) {\n\t\t\tthis._change = this._getChange(this._oldValue, parseInt(this.input.value));\n\t\t\tthis._doc.setProspectiveChange(this._change);\n\t\t}\n\t};\n\n\tpublic getValueBeforeProspectiveChange(): number {\n\t\treturn this._oldValue;\n\t}\n\n\tprivate _whenChange = (): void => {\n\t\tif (this._getChange != null) {\n\t\t\tthis._doc.record(this._change!);\n\t\t\tthis._change = null;\n\t\t}\n\t};\n}","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { SongDocument } from \"./SongDocument\";\nimport { Prompt } from \"./Prompt\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { ChangeSong } from \"./changes\";\n\n\tconst {button, p, div, h2, input} = HTML;\n\nexport class ImportPrompt implements Prompt {\n\t\tprivate readonly _fileInput: HTMLInputElement = input({type: \"file\", accept: \".json,application/json,.mid,.midi,audio/midi,audio/x-midi\"});\n\t\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\t\t\n\t\tpublic readonly container: HTMLDivElement = div({class: \"prompt noSelection\", style: \"width: 300px;\"},\n\t\th2(\"Import\"),\n\t\t\tp({style: \"text-align: left; margin: 0.5em 0;\"},\n\t\t\t\"BeepBox songs can be exported and re-imported as .json files. You could also use other means to make .json files for BeepBox as long as they follow the same structure.\",\n\t\t),\n\t\t\tp({style: \"text-align: left; margin: 0.5em 0;\"},\n\t\t\t\"BeepBox can also (crudely) import .mid files. There are many tools available for creating .mid files. Shorter and simpler songs are more likely to work well.\",\n\t\t),\n\t\tthis._fileInput,\n\t\tthis._cancelButton,\n\t);\n\t\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis._fileInput.select();\n\t\t\tsetTimeout(()=>this._fileInput.focus());\n\t\t\t\n\t\tthis._fileInput.addEventListener(\"change\", this._whenFileSelected);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t}\n\t\t\n\t\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\t\n\t\tpublic cleanUp = (): void => { \n\t\tthis._fileInput.removeEventListener(\"change\", this._whenFileSelected);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t}\n\t\t\n\tprivate _whenFileSelected = (): void => {\n\t\tconst file: File = this._fileInput.files![0];\n\t\tif (!file) return;\n\t\t\t\n\t\tconst extension: string = file.name.slice((file.name.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n\t\tif (extension == \"json\") {\n\t\t\tconst reader: FileReader = new FileReader();\n\t\t\treader.addEventListener(\"load\", (event: Event): void => {\n\t\t\t\tthis._doc.prompt = null;\n\t\t\t\tthis._doc.goBackToStart();\n\t\t\t\tthis._doc.record(new ChangeSong(this._doc, <string>reader.result), true, true);\n\t\t\t});\n\t\t\treader.readAsText(file);\n\t\t} else {\n\t\t\tconsole.error(\"Unrecognized file extension.\");\n\t\t\tthis._close();\n\t\t}\n\t}\n}\n\n","// Copyright (C) 2021 John Nesky, distributed under the MIT license.\n\nimport {Pattern} from \"../synth/synth\";\nimport {ColorConfig, ChannelColors} from \"./ColorConfig\";\nimport {SongDocument} from \"./SongDocument\";\nimport {HTML} from \"imperative-html/dist/esm/elements-strict\";\n\nexport class Box {\n\tprivate readonly _text: Text = document.createTextNode(\"\");\n\tprivate readonly _label: HTMLElement = HTML.div({class: \"channelBoxLabel\"}, this._text);\n\tpublic readonly container: HTMLElement = HTML.div({class: \"channelBox\", style: `margin: 1px; height: ${ChannelRow.patternHeight - 2}px;`}, this._label);\n\tprivate _renderedIndex: number = -1;\n    private _renderedLabelColor: string = \"?\";\n    private _renderedBackgroundColor: string = \"?\";\n\tconstructor(channel: number, color: string) {\n\t\tthis.container.style.background = ColorConfig.uiWidgetBackground;\n\t\tthis._label.style.color = color;\n\t}\n\t\n\tpublic setWidth(width: number): void {\n\t\tthis.container.style.width = (width - 2) + \"px\"; // there's a 1 pixel margin on either side.\n\t}\n\n\tpublic setHeight(height: number): void {\n\t\tthis.container.style.height = (height - 2) + \"px\"; // there's a 1 pixel margin on either side.\n\t}\n\t\n\tpublic setIndex(index: number, selected: boolean, dim: boolean, color: string, isNoise: boolean, isMod: boolean): void {\n\t\tif (this._renderedIndex != index) {\t\t\t\n\t\t\tif (index >= 100) {\n\t\t\t\tthis._label.setAttribute(\"font-size\", \"16\");\n\t\t\t\tthis._label.style.setProperty(\"transform\", \"translate(0px, -1.5px)\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._label.setAttribute(\"font-size\", \"20\");\n\t\t\t\tthis._label.style.setProperty(\"transform\", \"translate(0px, 0px)\");\n\t\t\t}\n\n\t\t\tthis._renderedIndex = index;\n\t\t\tthis._text.data = String(index);\n\t\t}\n\t\tlet useColor: string = selected ? ColorConfig.c_invertedText : color;\n\t\tif (this._renderedLabelColor != useColor) {\n\t\t\tthis._label.style.color = useColor;\n\t\t\tthis._renderedLabelColor = useColor;\n\t\t}\n\t\tif (!selected) {\n\t\t\tif (isNoise)\n\t\t\t\tcolor = dim ? ColorConfig.c_trackEditorBgNoiseDim : ColorConfig.c_trackEditorBgNoise;\n\t\t\telse if (isMod)\n\t\t\t\tcolor = dim ? ColorConfig.c_trackEditorBgModDim : ColorConfig.c_trackEditorBgMod;\n\t\t\telse\n\t\t\t\tcolor = dim ? ColorConfig.c_trackEditorBgPitchDim : ColorConfig.c_trackEditorBgPitch;\n\t\t}\n\t\tcolor = selected ? color : (index == 0) ? \"none\" : color;\n\t\tif (this._renderedBackgroundColor != color) {\n\t\t\tthis.container.style.background = color;\n\t\t\tthis._renderedBackgroundColor = color;\n\t\t}\n\t}\n}\n\nexport class ChannelRow {\n\tpublic static patternHeight: number = 28;\n\t\n\tprivate _renderedBarWidth: number = -1;\n\tprivate _renderedBarHeight: number = -1;\n\tprivate _boxes: Box[] = [];\n\t\n\tpublic readonly container: HTMLElement = HTML.div({class: \"channelRow\"});\n\t\n\tconstructor(private readonly _doc: SongDocument, public readonly index: number) {}\n\t\n\tpublic render(): void {\n\t\tChannelRow.patternHeight = this._doc.getChannelHeight();\n\n\t\tconst barWidth: number = this._doc.getBarWidth();\n\t\tif (this._boxes.length != this._doc.song.barCount) {\n\t\t\tfor (let x: number = this._boxes.length; x < this._doc.song.barCount; x++) {\n\t\t\t\tconst box: Box = new Box(this.index, ColorConfig.getChannelColor(this._doc.song, this.index).secondaryChannel);\n\t\t\t\tbox.setWidth(barWidth);\n\t\t\t\tthis.container.appendChild(box.container);\n\t\t\t\tthis._boxes[x] = box;\n\t\t\t}\n\t\t\tfor (let x: number = this._doc.song.barCount; x < this._boxes.length; x++) {\n\t\t\t\tthis.container.removeChild(this._boxes[x].container);\n\t\t\t}\n\t\t\tthis._boxes.length = this._doc.song.barCount;\n\t\t}\n\t\t\n\t\tif (this._renderedBarWidth != barWidth) {\n\t\t\tthis._renderedBarWidth = barWidth;\n\t\t\tfor (let x: number = 0; x < this._boxes.length; x++) {\n\t\t\t\tthis._boxes[x].setWidth(barWidth);\n\t\t\t}\n\t\t}\n\n\t\tif (this._renderedBarHeight != ChannelRow.patternHeight) {\n\t\t\tthis._renderedBarHeight = ChannelRow.patternHeight;\n\t\t\tfor (let x: number = 0; x < this._boxes.length; x++) {\n\t\t\t\tthis._boxes[x].setHeight(ChannelRow.patternHeight);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (let i: number = 0; i < this._boxes.length; i++) {\n\t\t\tconst pattern: Pattern | null = this._doc.song.getPattern(this.index, i);\n\t\t\tconst selected: boolean = (i == this._doc.bar && this.index == this._doc.channel);\n\t\t\tconst dim: boolean = (pattern == null || pattern.notes.length == 0);\n\t\t\t\n\t\t\tconst box: Box = this._boxes[i];\n\t\t\tif (i < this._doc.song.barCount) {\n\t\t\t\tconst colors: ChannelColors = ColorConfig.getChannelColor(this._doc.song, this.index);\n\t\t\t\tbox.setIndex(this._doc.song.channels[this.index].bars[i], selected, dim, dim && !selected ? colors.secondaryChannel : colors.primaryChannel,\n\t\t\t\t\tthis.index >= this._doc.song.pitchChannelCount && this.index < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount, this.index >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount);\n\t\t\t\tbox.container.style.visibility = \"visible\";\n\t\t\t} else {\n\t\t\t\tbox.container.style.visibility = \"hidden\";\n\t\t\t}\n\t\t\tif (i == this._doc.synth.loopBarStart) {\n\t\t\t\tbox.container.style.setProperty(\"border-left\", `1px dashed ${ColorConfig.uiWidgetFocus}`);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbox.container.style.setProperty(\"border-left\", \"none\");\n            }\n\t\t\tif (i == this._doc.synth.loopBarEnd) {\n\t\t\t\tbox.container.style.setProperty(\"border-right\", `1px dashed ${ColorConfig.uiWidgetFocus}`);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbox.container.style.setProperty(\"border-right\", \"none\");\n            }\n\t\t}\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {SongDocument} from \"./SongDocument\";\nimport {Layout} from \"./Layout\";\nimport {Prompt} from \"./Prompt\";\nimport {HTML, SVG} from \"imperative-html/dist/esm/elements-strict\";\n\nconst {button, label, div, form, h2, input} = HTML;\n\nexport class LayoutPrompt implements Prompt {\n\tprivate readonly _fileInput: HTMLInputElement = input({type: \"file\", accept: \".json,application/json,.mid,.midi,audio/midi,audio/x-midi\"});\n\tprivate readonly _okayButton: HTMLButtonElement = button({class: \"okayButton\", style: \"width:45%;\"}, \"Okay\");\n\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\tprivate readonly _form: HTMLFormElement = form({style: \"display: flex; gap: 10px;\"},\n\t\t\tlabel({class: \"layout-option\"},\n\t\t\t\tinput({type: \"radio\", name: \"layout\", value: \"small\"}),\n\t\t\t\tSVG(`\\\n\t\t\t\t\t<svg viewBox=\"-4 -1 28 22\">\n\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\"/>\n\t\t\t\t\t\t<rect x=\"2\" y=\"2\" width=\"11\" height=\"10\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"14\" y=\"2\" width=\"4\" height=\"16\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"2\" y=\"13\" width=\"11\" height=\"5\" fill=\"currentColor\"/>\n\t\t\t\t\t</svg>\n\t\t\t\t`),\n\t\t\t\tdiv(\"Small\"),\n\t\t\t),\n\t\t\tlabel({class: \"layout-option\"},\n\t\t\t\tinput({type: \"radio\", name: \"layout\", value: \"long\"}),\n\t\t\t\tSVG(`\\\n\t\t\t\t\t<svg viewBox=\"-1 -1 28 22\">\n\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width=\"26\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\"/>\n\t\t\t\t\t\t<rect x=\"2\" y=\"2\" width=\"12\" height=\"10\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"15\" y=\"2\" width=\"4\" height=\"10\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"20\" y=\"2\" width=\"4\" height=\"10\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"2\" y=\"13\" width=\"22\" height=\"5\" fill=\"currentColor\"/>\n\t\t\t\t\t</svg>\n\t\t\t\t`),\n\t\t\t\tdiv(\"Long\"),\n\t\t\t),\n\t\t\tlabel({class: \"layout-option\"},\n\t\t\t\tinput({type: \"radio\", name: \"layout\", value: \"tall\"}),\n\t\t\t\tSVG(`\\\n\t\t\t\t\t<svg viewBox=\"-1 -1 28 22\">\n\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width=\"26\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\"/>\n\t\t\t\t\t\t<rect x=\"11\" y=\"2\" width=\"8\" height=\"16\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"20\" y=\"2\" width=\"4\" height=\"16\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"2\" y=\"2\" width=\"8\" height=\"16\" fill=\"currentColor\"/>\n\t\t\t\t\t</svg>\n\t\t\t\t`),\n\t\t\t\tdiv(\"Tall\"),\n\t\t\t),\n\t\t\tlabel({class: \"layout-option\"},\n\t\t\t\tinput({type: \"radio\", name: \"layout\", value: \"wide\"}),\n\t\t\t\tSVG(`\\\n\t\t\t\t\t<svg viewBox=\"-1 -1 28 22\">\n\t\t\t\t\t\t<rect x=\"0\" y=\"0\" width=\"26\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\"/>\n\t\t\t\t\t\t<rect x=\"2\" y=\"2\" width=\"4\" height=\"16\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"18\" y=\"2\" width=\"2.5\" height=\"16\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"21.5\" y=\"2\" width=\"2.5\" height=\"16\" fill=\"currentColor\"/>\n\t\t\t\t\t\t<rect x=\"7\" y=\"2\" width=\"10\" height=\"16\" fill=\"currentColor\"/>\n\t\t\t\t\t</svg>\n\t\t\t\t`),\n\t\t\t\tdiv(\"Wide (JB)\"),\n\t\t\t),\n\t\t);\n\t\n\tpublic readonly container: HTMLDivElement = div({class: \"prompt noSelection\", style: \"width: 300px;\"},\n\t\th2(\"Layout\"),\n\t\tthis._form,\n\t\tdiv({style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\"},\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis._fileInput.select();\n\t\tsetTimeout(()=>this._fileInput.focus());\n\t\t\n\t\tthis._okayButton.addEventListener(\"click\", this._confirm);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t\t\n\t\t(<any> this._form.elements)[\"layout\"].value = this._doc.prefs.layout;\n\t}\n\t\n\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\n\tpublic cleanUp = (): void => { \n\t\tthis._okayButton.removeEventListener(\"click\", this._confirm);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif ((<Element> event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._confirm();\n\t\t}\n\t}\n\t\n\tprivate _confirm = (): void => { \n\t\tthis._doc.prefs.layout = (<any> this._form.elements)[\"layout\"].value;\n\t\tthis._doc.prefs.save();\n\t\tLayout.setLayout(this._doc.prefs.layout);\n\t\tthis._close();\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {InstrumentType, Config} from \"../synth/SynthConfig\";\nimport {Instrument} from \"../synth/synth\";\nimport {SongDocument} from \"./SongDocument\";\nimport {ChangeSetEnvelopeTarget, ChangeSetEnvelopeType, ChangeRemoveEnvelope} from \"./changes\";\nimport {HTML} from \"imperative-html/dist/esm/elements-strict\";\n\nexport class EnvelopeEditor {\n\tpublic readonly container: HTMLElement = HTML.div({class: \"envelopeEditor\"});\n\t\n\tprivate readonly _rows: HTMLDivElement[] = [];\n\tprivate readonly _targetSelects: HTMLSelectElement[] = [];\n\tprivate readonly _envelopeSelects: HTMLSelectElement[] = [];\n\tprivate readonly _deleteButtons: HTMLButtonElement[] = [];\n\tprivate _renderedEnvelopeCount: number = 0;\n\tprivate _renderedEqFilterCount: number = -1;\n\tprivate _renderedNoteFilterCount: number = -1;\n\tprivate _renderedInstrumentType: InstrumentType;\n\tprivate _renderedEffects: number = 0;\n\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis.container.addEventListener(\"change\", this._onChange);\n\t\tthis.container.addEventListener(\"click\", this._onClick);\n\t}\n\t\n\tprivate _onChange = (event: Event): void => {\n\t\tconst targetSelectIndex: number = this._targetSelects.indexOf(<any> event.target);\n\t\tconst envelopeSelectIndex: number = this._envelopeSelects.indexOf(<any> event.target);\n\t\tif (targetSelectIndex != -1) {\n\t\t\tconst combinedValue: number = parseInt(this._targetSelects[targetSelectIndex].value);\n\t\t\tconst target: number = combinedValue % Config.instrumentAutomationTargets.length;\n\t\t\tconst index: number = (combinedValue / Config.instrumentAutomationTargets.length) >>> 0;\n\t\t\tthis._doc.record(new ChangeSetEnvelopeTarget(this._doc, targetSelectIndex, target, index));\n\t\t} else if (envelopeSelectIndex != -1) {\n\t\t\tthis._doc.record(new ChangeSetEnvelopeType(this._doc, envelopeSelectIndex, this._envelopeSelects[envelopeSelectIndex].selectedIndex));\n\t\t}\n\t}\n\t\n\tprivate _onClick = (event: MouseEvent): void => {\n\t\tconst index: number = this._deleteButtons.indexOf(<any> event.target);\n\t\tif (index != -1) {\n\t\t\tthis._doc.record(new ChangeRemoveEnvelope(this._doc, index));\n\t\t}\n\t}\n\t\n\tprivate _makeOption(target: number, index: number): HTMLOptionElement {\n\t\tlet displayName = Config.instrumentAutomationTargets[target].displayName;\n\t\tif (Config.instrumentAutomationTargets[target].maxCount > 1) {\n\t\t\tif (displayName.indexOf(\"#\") != -1) {\n\t\t\t\tdisplayName = displayName.replace(\"#\", String(index+1));\n\t\t\t} else {\n\t\t\t\tdisplayName += \" \" + (index+1);\n\t\t\t}\n\t\t}\n\t\treturn HTML.option({value: target + index * Config.instrumentAutomationTargets.length}, displayName);\n\t}\n\t\n\tprivate _updateTargetOptionVisibility(menu: HTMLSelectElement, instrument: Instrument): void {\n\t\tfor (let optionIndex: number = 0; optionIndex < menu.childElementCount; optionIndex++) {\n\t\t\tconst option: HTMLOptionElement = <HTMLOptionElement> menu.children[optionIndex];\n\t\t\tconst combinedValue: number = parseInt(option.value);\n\t\t\tconst target: number = combinedValue % Config.instrumentAutomationTargets.length;\n\t\t\tconst index: number = (combinedValue / Config.instrumentAutomationTargets.length) >>> 0;\n\t\t\toption.hidden = !instrument.supportsEnvelopeTarget(target, index);\n\t\t}\n\t}\n\t\n\tpublic render(): void {\n\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\t\n\t\tfor (let envelopeIndex: number = this._rows.length; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n\t\t\tconst targetSelect: HTMLSelectElement = HTML.select();\n\t\t\tfor (let target: number = 0; target < Config.instrumentAutomationTargets.length; target++) {\n\t\t\t\tconst interleaved: boolean = (Config.instrumentAutomationTargets[target].interleave);\n\t\t\t\tfor (let index: number = 0; index < Config.instrumentAutomationTargets[target].maxCount; index++) {\n\t\t\t\t\ttargetSelect.appendChild(this._makeOption(target, index));\n\t\t\t\t\tif (interleaved) {\n\t\t\t\t\t\ttargetSelect.appendChild(this._makeOption(target + 1, index));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (interleaved) target++;\n\t\t\t}\n\t\t\t\n\t\t\tconst envelopeSelect: HTMLSelectElement = HTML.select();\n\t\t\tfor (let envelope: number = 0; envelope < Config.envelopes.length; envelope++) {\n\t\t\t\tenvelopeSelect.appendChild(HTML.option({value: envelope}, Config.envelopes[envelope].name));\n\t\t\t} \n\t\t\t\n\t\t\tconst deleteButton: HTMLButtonElement = HTML.button({type: \"button\", class: \"delete-envelope\"});\n\t\t\t\n\t\t\tconst row: HTMLDivElement = HTML.div({class: \"envelope-row\"},\n\t\t\t\tHTML.div({class: \"selectContainer\", style: \"width: 0; flex: 1;\"}, targetSelect),\n\t\t\t\tHTML.div({class: \"selectContainer\", style: \"width: 0; flex: 0.7;\"}, envelopeSelect),\n\t\t\t\tdeleteButton,\n\t\t\t);\n\t\t\t\n\t\t\tthis.container.appendChild(row);\n\t\t\tthis._rows[envelopeIndex] = row;\n\t\t\tthis._targetSelects[envelopeIndex] = targetSelect;\n\t\t\tthis._envelopeSelects[envelopeIndex] = envelopeSelect;\n\t\t\tthis._deleteButtons[envelopeIndex] = deleteButton;\n\t\t}\n\t\t\n\t\tfor (let envelopeIndex: number = this._renderedEnvelopeCount; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n\t\t\tthis._rows[envelopeIndex].style.display = \"\";\n\t\t\t// For newly visible rows, update target option visibiliy.\n\t\t\tthis._updateTargetOptionVisibility(this._targetSelects[envelopeIndex], instrument);\n\t\t}\n\t\t\n\t\tfor (let envelopeIndex: number = instrument.envelopeCount; envelopeIndex < this._renderedEnvelopeCount; envelopeIndex++) {\n\t\t\tthis._rows[envelopeIndex].style.display = \"none\";\n\t\t}\n\n\t\tlet useControlPointCount: number = instrument.noteFilter.controlPointCount;\n\t\tif (instrument.noteFilterType)\n\t\t\tuseControlPointCount = 1;\n\t\t\n\t\tif (this._renderedEqFilterCount != instrument.eqFilter.controlPointCount ||\n\t\t\tthis._renderedNoteFilterCount != useControlPointCount ||\n\t\t\tthis._renderedInstrumentType != instrument.type ||\n\t\t\tthis._renderedEffects != instrument.effects)\n\t\t{\n\t\t\t// Update target option visibility for previously visible rows.\n\t\t\tfor (let envelopeIndex: number = 0; envelopeIndex < this._renderedEnvelopeCount; envelopeIndex++) {\n\t\t\t\tthis._updateTargetOptionVisibility(this._targetSelects[envelopeIndex], instrument);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n\t\t\tthis._targetSelects[envelopeIndex].value = String(instrument.envelopes[envelopeIndex].target + instrument.envelopes[envelopeIndex].index * Config.instrumentAutomationTargets.length);\n\t\t\tthis._envelopeSelects[envelopeIndex].selectedIndex = instrument.envelopes[envelopeIndex].envelope;\n\t\t}\n\t\t\n\t\tthis._renderedEnvelopeCount = instrument.envelopeCount;\n\t\tthis._renderedEqFilterCount = instrument.eqFilter.controlPointCount;\n\t\tthis._renderedNoteFilterCount = useControlPointCount;\n\t\tthis._renderedInstrumentType = instrument.type;\n\t\tthis._renderedEffects = instrument.effects;\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {Config} from \"../synth/SynthConfig\";\nimport {clamp, Instrument, Synth} from \"../synth/synth\";\nimport {SongDocument} from \"./SongDocument\";\nimport {HTML, SVG} from \"imperative-html/dist/esm/elements-strict\";\nimport {ColorConfig} from \"./ColorConfig\";\nimport {ChangeSequence, UndoableChange} from \"./Change\";\nimport {ChangeFadeInOut} from \"./changes\";\n\nexport class FadeInOutEditor {\n\tprivate readonly _editorWidth: number = 120;\n\tprivate readonly _editorHeight: number = 26;\n\tprivate readonly _fadeCurve: SVGPathElement = SVG.path({fill: ColorConfig.uiWidgetBackground, \"pointer-events\": \"none\"});\n\tprivate readonly _dottedLinePath: SVGPathElement = SVG.path({fill: \"none\", stroke: \"currentColor\", \"stroke-width\": 1, \"stroke-dasharray\": \"3, 2\", \"pointer-events\": \"none\"});\n\tprivate readonly _controlCurve: SVGPathElement = SVG.path({fill: \"none\", stroke: \"currentColor\", \"stroke-width\": 2, \"pointer-events\": \"none\"});\n\tprivate readonly _svg: SVGSVGElement = SVG.svg({style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; cursor: crosshair;`, width: \"100%\", height: \"100%\", viewBox: \"0 0 \"+this._editorWidth+\" \"+this._editorHeight, preserveAspectRatio: \"none\"},\n\t\tthis._fadeCurve,\n\t\tthis._dottedLinePath,\n\t\tthis._controlCurve,\n\t);\n\tpublic readonly container: HTMLElement = HTML.div({class: \"fadeInOut\", style: \"height: 100%;\"}, this._svg);\n\t\n\tprivate _mouseX: number = 0;\n\tprivate _mouseXStart: number = 0;\n\tprivate _mouseDown: boolean = false;\n\tprivate _mouseDragging: boolean = false;\n\tprivate _draggingFadeIn: boolean = false;\n\tprivate _dragChange: UndoableChange | null = null;\n\tprivate _renderedFadeIn: number = -1;\n\tprivate _renderedFadeOut: number = -1;\n\t\n\tconstructor(private _doc: SongDocument) {\n\t\tconst dottedLineX: number = this._fadeOutToX(Config.fadeOutNeutral);\n\t\tthis._dottedLinePath.setAttribute(\"d\", `M ${dottedLineX} 0 L ${dottedLineX} ${this._editorHeight}`);\n\t\t\n\t\tthis.container.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n\t\tthis.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n\t\tthis.container.addEventListener(\"touchend\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"touchcancel\", this._whenCursorReleased);\n\t}\n\t\n\tprivate _fadeInToX(fadeIn: number) {\n\t\treturn 1.0 + (this._editorWidth - 2.0) * 0.4 * fadeIn / (Config.fadeInRange - 1);\n\t}\n\tprivate _xToFadeIn(x: number) {\n\t\treturn clamp(0, Config.fadeInRange, Math.round((x - 1.0) * (Config.fadeInRange - 1) / (0.4 * this._editorWidth - 2.0)));\n\t}\n\tprivate _fadeOutToX(fadeOut: number) {\n\t\treturn 1.0 + (this._editorWidth - 2.0) * (0.5 + 0.5 * fadeOut / (Config.fadeOutTicks.length - 1));\n\t}\n\tprivate _xToFadeOut(x: number) {\n\t\treturn clamp(0, Config.fadeOutTicks.length, Math.round((Config.fadeOutTicks.length - 1) * ((x - 1.0) / (this._editorWidth - 2.0) - 0.5) / 0.5));\n\t}\n\t\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = ((event.clientX || event.pageX) - boundingRect.left);\n\t\tthis._whenCursorPressed();\n\t}\n\t\n\tprivate _whenTouchPressed = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.touches[0].clientX - boundingRect.left);\n\t\tthis._whenCursorPressed();\n\t}\n\t\n\tprivate _whenCursorPressed(): void {\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tthis._mouseXStart = this._mouseX;\n\t\tthis._mouseDown = true;\n\t\tthis._mouseDragging = false;\n\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\tconst fadeInX: number = this._fadeInToX(instrument.fadeIn);\n\t\tconst fadeOutX: number = this._fadeOutToX(instrument.fadeOut);\n\t\tthis._draggingFadeIn = this._mouseXStart < (fadeInX + fadeOutX) / 2.0;\n\t\tthis._dragChange = new ChangeSequence();\n\t\tthis._doc.setProspectiveChange(this._dragChange);\n\t}\n\t\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = ((event.clientX || event.pageX) - boundingRect.left);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\t\n\tprivate _whenTouchMoved = (event: TouchEvent): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tif (!this._mouseDown) return;\n\t\tevent.preventDefault();\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.touches[0].clientX - boundingRect.left);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\t\n\tprivate _whenCursorMoved(): void {\n\t\tif (this._dragChange != null && this._doc.lastChangeWas(this._dragChange)) {\n\t\t\tthis._dragChange.undo();\n\t\t} else {\n\t\t\tthis._mouseDown = false;\n\t\t}\n\t\tthis._dragChange = null;\n\t\t\n\t\tif (this._mouseDown) {\n\t\t\tconst sequence: ChangeSequence = new ChangeSequence();\n\t\t\tthis._dragChange = sequence;\n\t\t\tthis._doc.setProspectiveChange(this._dragChange);\n\t\t\t\n\t\t\tif (Math.abs(this._mouseX - this._mouseXStart) > 4.0) {\n\t\t\t\tthis._mouseDragging = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (this._mouseDragging) {\n\t\t\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\t\t\tif (this._draggingFadeIn) {\n\t\t\t\t\tsequence.append(new ChangeFadeInOut(this._doc, this._xToFadeIn(this._fadeInToX(instrument.fadeIn) + this._mouseX - this._mouseXStart), instrument.fadeOut));\n\t\t\t\t} else {\n\t\t\t\t\tsequence.append(new ChangeFadeInOut(this._doc, instrument.fadeIn, this._xToFadeOut(this._fadeOutToX(instrument.fadeOut) + this._mouseX - this._mouseXStart)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate _whenCursorReleased = (event: Event): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tif (this._mouseDown && this._doc.lastChangeWas(this._dragChange) && this._dragChange != null) {\n\t\t\tif (!this._mouseDragging) {\n\t\t\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\t\t\tif (this._draggingFadeIn) {\n\t\t\t\t\tthis._doc.record(new ChangeFadeInOut(this._doc, this._xToFadeIn(this._mouseX), instrument.fadeOut));\n\t\t\t\t} else {\n\t\t\t\t\tthis._doc.record(new ChangeFadeInOut(this._doc, instrument.fadeIn, this._xToFadeOut(this._mouseX)));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._doc.record(this._dragChange);\n\t\t\t}\n\t\t}\n\t\tthis._dragChange = null;\n\t\tthis._mouseDragging = false;\n\t\tthis._mouseDown = false;\n\t}\n\t\n\tpublic render(): void {\n\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\t\n\t\tif (this._renderedFadeIn == instrument.fadeIn && this._renderedFadeOut == instrument.fadeOut) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconst fadeInX: number = this._fadeInToX(instrument.fadeIn);\n\t\tconst fadeOutX: number = this._fadeOutToX(instrument.fadeOut);\n\t\tthis._controlCurve.setAttribute(\"d\", `M ${fadeInX} 0 L ${fadeInX} ${this._editorHeight} M ${fadeOutX} 0 L ${fadeOutX} ${this._editorHeight}`);\n\t\t\n\t\tconst dottedLineX: number = this._fadeOutToX(Config.fadeOutNeutral);\n\t\tlet fadePath: string = \"\";\n\t\tfadePath += `M 0 ${this._editorHeight} `;\n\t\tfadePath += `L ${fadeInX} 0 `;\n\t\tif (Synth.fadeOutSettingToTicks(instrument.fadeOut) > 0) {\n\t\t\tfadePath += `L ${dottedLineX} 0 `;\n\t\t\tfadePath += `L ${fadeOutX} ${this._editorHeight} `;\n\t\t} else {\n\t\t\tfadePath += `L ${fadeOutX} 0 `;\n\t\t\tfadePath += `L ${dottedLineX} ${this._editorHeight} `;\n\t\t}\n\t\tfadePath += \"z\";\n\t\tthis._fadeCurve.setAttribute(\"d\", fadePath);\n\t}\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { Prompt } from \"./Prompt\";\nimport { SongDocument } from \"./SongDocument\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { ChangeLimiterSettings } from \"./changes\";\nimport { SongEditor } from \"./SongEditor\";\nimport { prettyNumber } from \"./EditorConfig\";\n\n//namespace beepbox {\nconst { button, div, h2, input } = HTML;\n\nexport class LimiterCanvas {\n\tprivate readonly _editorWidth: number = 200; // 112\n\tprivate readonly _editorHeight: number = 52; // 26\n\tprivate readonly _fill: SVGPathElement = SVG.path({ fill: ColorConfig.uiWidgetBackground, \"pointer-events\": \"none\" });\n\tprivate readonly _ticks: SVGSVGElement = SVG.svg({ \"pointer-events\": \"none\" });\n\tprivate readonly _subticks: SVGSVGElement = SVG.svg({ \"pointer-events\": \"none\" });\n\tprivate readonly _boostCurve: SVGPathElement = SVG.path({ fill: \"none\", stroke: ColorConfig.textSelection, \"stroke-width\": 2, \"pointer-events\": \"none\" });\n\tprivate readonly _boostDot: SVGCircleElement = SVG.circle({ fill: ColorConfig.textSelection, stroke: \"none\", r: \"3\" });\n\tprivate readonly _midCurve: SVGPathElement = SVG.path({ fill: \"none\", stroke: ColorConfig.primaryText, \"stroke-width\": 2, \"pointer-events\": \"none\" });\n\tprivate readonly _limitCurve: SVGPathElement = SVG.path({ fill: \"none\", stroke: ColorConfig.linkAccent, \"stroke-width\": 2, \"pointer-events\": \"none\" });\n\tprivate readonly _limitDot: SVGCircleElement = SVG.circle({ fill: ColorConfig.linkAccent, stroke: \"none\", r: \"3\" });\n\tprivate readonly _label0: SVGTextElement = SVG.text({ x: \"-1.5%\", y: \"148.5%\", \"pointer-events\": \"none\", \"font-size\": \"7pt\", fill: \"var(--secondary-text)\" }, \"0\");\n\tprivate readonly _label1: SVGTextElement = SVG.text({ x: \"48.2%\", y: \"148.5%\", \"pointer-events\": \"none\", \"font-size\": \"7pt\", fill: \"var(--secondary-text)\" }, \"1\");\n\tprivate readonly _label2: SVGTextElement = SVG.text({ x: \"98.2%\", y: \"148.5%\", \"pointer-events\": \"none\", \"font-size\": \"7pt\", fill: \"var(--secondary-text)\" }, \"2\");\n\tprivate readonly _inLabel: SVGTextElement = SVG.text({ x: \"-5%\", y: \"113.5%\", \"pointer-events\": \"none\", \"font-size\": \"6pt\", fill: \"var(--secondary-text)\" }, \"In\");\n\tprivate readonly _outLabel: SVGTextElement = SVG.text({ x: \"-9%\", y: \"131%\", \"pointer-events\": \"none\", \"font-size\": \"6pt\", fill: \"var(--secondary-text)\" }, \"Out\");\n\tprivate readonly _xAxisLabel: SVGTextElement = SVG.text({ x: \"42%\", y: \"172%\", \"pointer-events\": \"none\", \"font-size\": \"7pt\", fill: \"var(--primary-text)\" }, \"Volume\");\n\tprivate readonly _yAxisLabel: SVGTextElement = SVG.text({ x: \"55.2%\", y: \"160%\", \"pointer-events\": \"none\", \"font-size\": \"7pt\", transform: \"rotate(-90 30,120)\", fill: \"var(--primary-text)\" }, \"Gain\");\n\tprivate readonly _inVolumeBg: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"100%\", height: \"6px\", x: \"0%\", y: \"105%\", fill: ColorConfig.uiWidgetBackground });\n\tprivate readonly _outVolumeBg: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"100%\", height: \"6px\", x: \"0%\", y: \"120%\", fill: ColorConfig.uiWidgetBackground });\n\tprivate readonly _inVolumeBar: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", height: \"6px\", x: \"0%\", y: \"105%\", fill: \"url('#volumeGrad')\" });\n\tprivate readonly _inVolumeCap: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"6px\", y: \"105%\", fill: ColorConfig.uiWidgetFocus });\n\tprivate readonly _outVolumeBar: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", height: \"6px\", x: \"0%\", y: \"120%\", fill: \"url('#volumeGrad')\" });\n\tprivate readonly _outVolumeCap: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"6px\", y: \"120%\", fill: ColorConfig.uiWidgetFocus });\n\tprivate readonly _stop1: SVGStopElement = SVG.stop({ \"stop-color\": \"lime\", offset: \"30%\" });\n\tprivate readonly _stop2: SVGStopElement = SVG.stop({ \"stop-color\": \"orange\", offset: \"45%\" });\n\tprivate readonly _stop3: SVGStopElement = SVG.stop({ \"stop-color\": \"red\", offset: \"50%\" });\n\tprivate readonly _gradient: SVGGradientElement = SVG.linearGradient({ id: \"volumeGrad\", gradientUnits: \"userSpaceOnUse\" }, this._stop1, this._stop2, this._stop3);\n\tprivate readonly _defs: SVGDefsElement = SVG.defs({}, this._gradient);\n\tprivate readonly _svg: SVGSVGElement = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; overflow: visible;`, width: \"100%\", height: \"100%\", viewBox: \"0 0 \" + this._editorWidth + \" \" + this._editorHeight, preserveAspectRatio: \"none\" },\n\t\tthis._defs,\n\t\tthis._fill,\n\t\tthis._ticks,\n\t\tthis._subticks,\n\t\tthis._boostCurve,\n\t\tthis._midCurve,\n\t\tthis._limitCurve,\n\t\tthis._boostDot,\n\t\tthis._limitDot,\n\t\tthis._label0,\n\t\tthis._label1,\n\t\tthis._label2,\n\t\tthis._inLabel,\n\t\tthis._outLabel,\n\t\tthis._xAxisLabel,\n\t\tthis._yAxisLabel,\n\t\tthis._inVolumeBg,\n\t\tthis._outVolumeBg,\n\t\tthis._inVolumeBar,\n\t\tthis._outVolumeBar,\n\t\tthis._inVolumeCap,\n\t\tthis._outVolumeCap,\n\t);\n\n\tpublic readonly container: HTMLElement = HTML.div({ class: \"\", style: \"height: 4em; width: 80%; padding-bottom: 1.5em;\" }, this._svg);\n\n\tprivate _limiterPrompt: LimiterPrompt;\n\n\tconstructor(lim: LimiterPrompt) {\n\t\tfor (let i: number = 0; i <= 2; i++) {\n\t\t\tthis._ticks.appendChild(SVG.rect({ fill: ColorConfig.tonic, x: (i * this._editorWidth / 2) - 1, y: 0, width: 2, height: this._editorHeight }));\n\t\t}\n\t\tfor (let i: number = 1; i <= 3; i += 2) {\n\t\t\tthis._subticks.appendChild(SVG.rect({ fill: ColorConfig.fifthNote, x: (i * this._editorWidth / 4) - 1, y: 0, width: 1, height: this._editorHeight }));\n\t\t}\n\n\t\tthis._limiterPrompt = lim;\n\n\t}\n\n\tpublic animateVolume(inVolumeCap: number, historicInCap: number, outVolumeCap: number, historicOutCap: number): void {\n\t\tthis._inVolumeBar.setAttribute(\"width\", \"\" + Math.min(this._editorWidth, inVolumeCap * (this._editorWidth / 2.0)));\n\t\tthis._inVolumeCap.setAttribute(\"x\", \"\" + Math.min(this._editorWidth, historicInCap * (this._editorWidth / 2.0)));\n\t\tthis._outVolumeBar.setAttribute(\"width\", \"\" + Math.min(this._editorWidth, outVolumeCap * (this._editorWidth / 2.0)));\n\t\tthis._outVolumeCap.setAttribute(\"x\", \"\" + Math.min(this._editorWidth, historicOutCap * (this._editorWidth / 2.0)));\n\t}\n\n\tpublic render(): void {\n\t\tconst controlPointToHeight = (point: number): number => {\n\t\t\treturn Math.max(0, (1 - (point / 5)) * (this._editorHeight - 1) + 1);\n\t\t}\n\n\t\tlet lastValue: number = 0;\n\t\tlet currentSubpathIdx: number = 0;\n\t\tlet lastSubpathIdx: number = -1;\n\t\tlet path: string = \"\";\n\t\tlet subPaths: string[] = [\"\", \"\", \"\"];\n\t\tfor (let i: number = 0; i < 64; i++) {\n\t\t\t// Calculate next value based on limiter settings\n\t\t\tlet limiterRatio: number = +this._limiterPrompt.limitRatioSlider.value;\n\t\t\tlimiterRatio = (limiterRatio < 10 ? limiterRatio / 10 : (limiterRatio - 9));\n\t\t\tlet compressorRatio: number = +this._limiterPrompt.compressionRatioSlider.value;\n\t\t\tcompressorRatio = (compressorRatio < 10 ? compressorRatio / 10 : (1 + (compressorRatio - 10) / 60));\n\t\t\tlet limiterThreshold: number = +this._limiterPrompt.limitThresholdSlider.value;\n\t\t\tlet compressorThreshold: number = +this._limiterPrompt.compressionThresholdSlider.value;\n\t\t\tlet useVol: number = i * 2.0 / 64.0; // Scale from 0~2\n\t\t\tlet nextValue: number = 1 / 1.05;\n\t\t\tif (useVol >= limiterThreshold) {\n\t\t\t\t// Limiter falloff\n\t\t\t\tnextValue = 1 / (1.05 * (useVol + 1 - limiterThreshold) * limiterRatio + (1 - limiterRatio));\n\t\t\t}\n\t\t\telse if (useVol < compressorThreshold) {\n\t\t\t\t// Compressor boost\n\t\t\t\tnextValue = 1 / (((useVol + 1 - compressorThreshold) * 0.8 + 0.25) * compressorRatio + 1.05 * (1 - compressorRatio));\n\t\t\t}\n\n\t\t\t// first point in entire path\n\t\t\tif (i == 0) {\n\t\t\t\tpath += \"M 0 \" + prettyNumber(controlPointToHeight(nextValue)) + \" \";\n\t\t\t}\n\n\t\t\t// first point in a specific subpath\n\t\t\tif (currentSubpathIdx > lastSubpathIdx) {\n\t\t\t\tif (lastSubpathIdx >= 0) {\n\t\t\t\t\tsubPaths[lastSubpathIdx] += \"L \" + prettyNumber(i * this._editorWidth / 64) + \" \" + prettyNumber(controlPointToHeight(nextValue)) + \" \";\n\t\t\t\t}\n\t\t\t\tsubPaths[currentSubpathIdx] += \"M \" + prettyNumber(i * this._editorWidth / 64) + \" \" + prettyNumber(controlPointToHeight(nextValue)) + \" \";\n\n\t\t\t\tif (currentSubpathIdx == 1 || (lastSubpathIdx == 0 && currentSubpathIdx == 2)) {\n\t\t\t\t\tthis._boostDot.setAttribute(\"cx\", prettyNumber(i * this._editorWidth / 64));\n\t\t\t\t\tthis._boostDot.setAttribute(\"cy\", prettyNumber(controlPointToHeight(nextValue)));\n\t\t\t\t}\n\t\t\t\tif (currentSubpathIdx == 2) {\n\t\t\t\t\tthis._limitDot.setAttribute(\"cx\", prettyNumber(i * this._editorWidth / 64));\n\t\t\t\t\tthis._limitDot.setAttribute(\"cy\", prettyNumber(controlPointToHeight(nextValue)));\n\t\t\t\t}\n\n\t\t\t\tlastSubpathIdx = currentSubpathIdx;\n\t\t\t}\n\n\t\t\tif (lastValue != 0 || nextValue != 0) {\n\t\t\t\tpath += \"L \";\n\t\t\t\tsubPaths[currentSubpathIdx] += \"L \";\n\t\t\t} else {\n\t\t\t\tpath += \"M \";\n\t\t\t\tsubPaths[currentSubpathIdx] += \"M \";\n\t\t\t}\n\t\t\tpath += prettyNumber(i * this._editorWidth / 64) + \" \" + prettyNumber(controlPointToHeight(nextValue)) + \" \";\n\t\t\tsubPaths[currentSubpathIdx] += prettyNumber(i * this._editorWidth / 64) + \" \" + prettyNumber(controlPointToHeight(nextValue)) + \" \";\n\t\t\tlastValue = nextValue;\n\n\t\t\t// Move to next subpath\n\t\t\tif (currentSubpathIdx == 0 && (i >= compressorThreshold * 32 - 2)) {\n\t\t\t\tcurrentSubpathIdx++;\n\t\t\t}\n\t\t\tif (currentSubpathIdx == 1 && (i >= limiterThreshold * 32 - 2)) {\n\t\t\t\tcurrentSubpathIdx++;\n\t\t\t}\n\t\t}\n\n\t\tconst lastHeight: number = controlPointToHeight(lastValue);\n\t\tif (lastValue > 0) {\n\t\t\tpath += \"L \" + (this._editorWidth - 1) + \" \" + prettyNumber(lastHeight) + \" \";\n\t\t\tsubPaths[currentSubpathIdx] += \"L \" + (this._editorWidth - 1) + \" \" + prettyNumber(lastHeight) + \" \";\n\t\t}\n\n\t\tthis._boostCurve.setAttribute(\"d\", subPaths[0]);\n\t\tthis._midCurve.setAttribute(\"d\", subPaths[1]);\n\t\tthis._limitCurve.setAttribute(\"d\", subPaths[2]);\n\t\tthis._fill.setAttribute(\"d\", path + \"L \" + this._editorWidth + \" \" + prettyNumber(lastHeight) + \" L \" + this._editorWidth + \" \" + prettyNumber(this._editorHeight) + \" L 0 \" + prettyNumber(this._editorHeight) + \" z \");\n\t}\n}\n\nexport class LimiterPrompt implements Prompt {\n\n\tprivate limiterCanvas: LimiterCanvas = new LimiterCanvas(this);\n\n\tpublic readonly _playButton: HTMLButtonElement = button({ style: \"width: 55%;\", type: \"button\" });\n\n\tpublic readonly limitDecaySlider: HTMLInputElement = input({ title: \"limit decay\", style: `width: 5em; flex-grow: 1; margin: 0;`, type: \"range\", min: \"1\", max: \"30\", value: \"4\", step: \"1\" });\n\tpublic readonly limitRiseSlider: HTMLInputElement = input({ title: \"limit rise\", style: `width: 5em; flex-grow: 1; margin: 0;`, type: \"range\", min: \"2000\", max: \"10000\", value: \"4000\", step: \"250\" });\n\tpublic readonly compressionThresholdSlider: HTMLInputElement = input({ title: \"compressor threshold\", style: `width: 100%; flex-grow: 1; margin: 0;`, type: \"range\", min: \"0\", max: \"1.1\", value: \"1\", step: \"0.05\" });\n\tpublic readonly limitThresholdSlider: HTMLInputElement = input({ title: \"limiter threshold\", style: `width: 100%; flex-grow: 1; margin: 0;`, type: \"range\", min: \"0\", max: \"2\", value: \"1\", step: \"0.05\" });\n\tpublic readonly compressionRatioSlider: HTMLInputElement = input({ title: \"compressor ratio\", style: `width: 100%; flex-grow: 1; margin: 0;`, type: \"range\", min: \"0\", max: \"20\", value: \"10\", step: \"1\" });\n\tpublic readonly limitRatioSlider: HTMLInputElement = input({ title: \"limiter ratio\", style: `width: 100%; flex-grow: 1; margin: 0;`, type: \"range\", min: \"0\", max: \"20\", value: \"10\", step: \"1\" });\n\tpublic readonly masterGainSlider: HTMLInputElement = input({ title: \"master gain\", style: `width: 5em; flex-grow: 1; margin: 0;`, type: \"range\", min: \"0\", max: \"5\", value: \"1\", step: \"0.02\" });\n\n\tprivate startingLimitDecay: number;\n\tprivate startingLimitRise: number;\n\tprivate startingCompressionThreshold: number;\n\tprivate startingLimitThreshold: number;\n\tprivate startingCompressionRatio: number;\n\tprivate startingLimitRatio: number;\n\tprivate startingMasterGain: number;\n\n\tprivate inVolumeHistoricTimer: number = 0.0;\n\tprivate inVolumeHistoricCap: number = 0.0;\n\tprivate outVolumeHistoricTimer: number = 0.0;\n\tprivate outVolumeHistoricCap: number = 0.0;\n\n\tprivate readonly _cancelButton: HTMLButtonElement = button({ class: \"cancelButton\" });\n\tprivate readonly _okayButton: HTMLButtonElement = button({ class: \"okayButton\", style: \"width:45%;\" }, \"Okay\");\n\tprivate readonly _resetButton: HTMLButtonElement = button({ style: \"width:45%;\" }, \"Reset\");\n\n\tpublic readonly container: HTMLDivElement = div({ class: \"prompt noSelection\", style: \"width: 250px;\" },\n\t\th2(\"Limiter Options\"),\n\t\tdiv({ style: \"display: flex; width: 55%; align-self: center; flex-direction: row; align-items: center; justify-content: center;\" },\n\t\t\tthis._playButton,\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; justify-content: center;\" },\n\t\t\tthis.limiterCanvas.container,\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; height: 2em; margin-top: 1.5em; justify-content: flex-end;\" },\n\t\t\tdiv({ style: `text-align: right; width: 25%; margin-right: 4.5%; color: ${ColorConfig.primaryText};` },\n\t\t\t\t\"\"\n\t\t\t),\n\t\t\tdiv({ style: `text-align: center; width: 33%; margin-right: 4.5%; color: ${ColorConfig.textSelection};` },\n\t\t\t\t\"Boost\"\n\t\t\t),\n\t\t\tdiv({ style: `text-align: center; width: 33%; margin-right: 0%; color: ${ColorConfig.linkAccent};` },\n\t\t\t\t\"Cutoff\"\n\t\t\t),\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; height: 2em; margin-top: 0.5em; justify-content: flex-end;\" },\n\t\t\tdiv({ style: `text-align: right; width: 25%; margin-right: 4.5%; color: ${ColorConfig.primaryText};` },\n\t\t\t\t\"Threshold:\"\n\t\t\t),\n\t\t\tdiv({ style: `width: 33%; margin-right: 4.5%;` },\n\t\t\t\tthis.compressionThresholdSlider,\n\t\t\t),\n\t\t\tdiv({ style: `width: 33%; margin-right: 0%;` },\n\t\t\t\tthis.limitThresholdSlider,\n\t\t\t),\n\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\" },\n\t\t\tdiv({ style: `text-align: right; width: 25%; margin-right: 4.5%; color: ${ColorConfig.primaryText};` },\n\t\t\t\t\"Ratio:\"\n\t\t\t),\n\t\t\tdiv({ style: `width: 33%; margin-right: 4.5%;` },\n\t\t\t\tthis.compressionRatioSlider,\n\t\t\t),\n\t\t\tdiv({ style: `width: 33%; margin-right: 0%;` },\n\t\t\t\tthis.limitRatioSlider,\n\t\t\t),\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\" },\n\t\t\tdiv({ style: `text-align: right; width: 8.5em; margin-right: 1em; color: ${ColorConfig.primaryText};` },\n\t\t\t\t\"Limit Decay:\"\n\t\t\t),\n\t\t\tthis.limitDecaySlider,\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\" },\n\t\t\tdiv({ style: `text-align: right; width: 8.5em; margin-right: 1em; color: ${ColorConfig.primaryText};` },\n\t\t\t\t\"Limit Rise:\"\n\t\t\t),\n\t\t\tthis.limitRiseSlider,\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\" },\n\t\t\tdiv({ style: `text-align: right; width: 8.5em; margin-right: 1em; color: ${ColorConfig.primaryText};` },\n\t\t\t\t\"Master Gain:\"\n\t\t\t),\n\t\t\tthis.masterGainSlider,\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\" },\n\t\t\tthis._okayButton,\n\t\t\tthis._resetButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\n\tconstructor(private _doc: SongDocument, private _songEditor: SongEditor) {\n\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._resetButton.addEventListener(\"click\", this._resetDefaults);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis.container.addEventListener(\"keydown\", this.whenKeyPressed);\n\n\t\tthis.limitRatioSlider.value = \"\" + (this._doc.song.limitRatio < 1 ? this._doc.song.limitRatio * 10 : 9 + this._doc.song.limitRatio);\n\t\tthis.compressionRatioSlider.value = \"\" + (this._doc.song.compressionRatio < 1 ? this._doc.song.compressionRatio * 10 : 10 + (this._doc.song.compressionRatio - 1) * 60);\n\t\tthis.limitThresholdSlider.value = \"\" + this._doc.song.limitThreshold;\n\t\tthis.compressionThresholdSlider.value = \"\" + this._doc.song.compressionThreshold;\n\t\tthis.limitDecaySlider.value = \"\" + this._doc.song.limitDecay;\n\t\tthis.limitRiseSlider.value = \"\" + this._doc.song.limitRise;\n\t\tthis.masterGainSlider.value = \"\" + this._doc.song.masterGain;\n\n\t\tthis.startingLimitRatio = +this.limitRatioSlider.value;\n\t\tthis.startingCompressionRatio = +this.compressionRatioSlider.value;\n\t\tthis.startingLimitThreshold = +this.limitThresholdSlider.value;\n\t\tthis.startingCompressionThreshold = +this.compressionThresholdSlider.value;\n\t\tthis.startingLimitDecay = +this.limitDecaySlider.value;\n\t\tthis.startingLimitRise = +this.limitRiseSlider.value;\n\t\tthis.startingMasterGain = +this.masterGainSlider.value;\n\n\t\tthis.limitDecaySlider.addEventListener(\"input\", this._whenInput);\n\t\tthis.limitRiseSlider.addEventListener(\"input\", this._whenInput);\n\t\tthis.limitRatioSlider.addEventListener(\"input\", this._whenInput);\n\t\tthis.limitThresholdSlider.addEventListener(\"input\", this._whenInputFavorLimitThreshold);\n\t\tthis.compressionRatioSlider.addEventListener(\"input\", this._whenInput);\n\t\tthis.compressionThresholdSlider.addEventListener(\"input\", this._whenInput);\n\t\tthis.masterGainSlider.addEventListener(\"input\", this._whenInput);\n\n\t\tthis._playButton.addEventListener(\"click\", this._togglePlay);\n\n\t\twindow.requestAnimationFrame(this._volumeUpdate);\n\n\t\tthis.updatePlayButton();\n\n\t\tsetTimeout(() => this._playButton.focus());\n\n\t\tthis.limiterCanvas.render();\n\t}\n\n\tprivate _volumeUpdate = (): void => {\n\t\tthis.inVolumeHistoricTimer--;\n\t\tif (this.inVolumeHistoricTimer <= 0) {\n\t\t\tthis.inVolumeHistoricCap -= 0.03;\n\t\t}\n\t\tif (this._doc.song.inVolumeCap > this.inVolumeHistoricCap) {\n\t\t\tthis.inVolumeHistoricCap = this._doc.song.inVolumeCap;\n\t\t\tthis.inVolumeHistoricTimer = 50;\n\t\t}\n\n\t\tthis.outVolumeHistoricTimer--;\n\t\tif (this.outVolumeHistoricTimer <= 0) {\n\t\t\tthis.outVolumeHistoricCap -= 0.03;\n\t\t}\n\t\tif (this._doc.song.outVolumeCap > this.outVolumeHistoricCap) {\n\t\t\tthis.outVolumeHistoricCap = this._doc.song.outVolumeCap;\n\t\t\tthis.outVolumeHistoricTimer = 50;\n\t\t}\n\n\t\tthis.limiterCanvas.animateVolume(this._doc.song.inVolumeCap, this.inVolumeHistoricCap, this._doc.song.outVolumeCap, this.outVolumeHistoricCap);\n\t\t//console.log(this._doc.song.volumeCap);\n\t\twindow.requestAnimationFrame(this._volumeUpdate);\n\t}\n\n\tprivate _togglePlay = (): void => {\n\t\tthis._songEditor.togglePlay();\n\t\tthis.updatePlayButton();\n\t}\n\n\tpublic updatePlayButton(): void {\n\t\tif (this._doc.synth.playing) {\n\t\t\tthis._playButton.classList.remove(\"playButton\");\n\t\t\tthis._playButton.classList.add(\"pauseButton\");\n\t\t\tthis._playButton.title = \"Pause (Space)\";\n\t\t\tthis._playButton.innerText = \"Pause\";\n\t\t} else {\n\t\t\tthis._playButton.classList.remove(\"pauseButton\");\n\t\t\tthis._playButton.classList.add(\"playButton\");\n\t\t\tthis._playButton.title = \"Play (Space)\";\n\t\t\tthis._playButton.innerText = \"Play\";\n\t\t}\n\t}\n\n\tprivate _whenInput = (): void => {\n\t\tif (+this.limitThresholdSlider.value < +this.compressionThresholdSlider.value) {\n\t\t\tthis.limitThresholdSlider.removeEventListener(\"input\", this._whenInputFavorLimitThreshold);\n\t\t\tthis.limitThresholdSlider.value = this.compressionThresholdSlider.value;\n\t\t\tthis.limitThresholdSlider.addEventListener(\"input\", this._whenInputFavorLimitThreshold);\n\t\t}\n\t\tthis.limiterCanvas.render();\n\t\tthis._updateLimiter();\n\t}\n\n\t// Same as above, but for conflicts between limiter threshold and compressor threshold, favor the limiter\n\tprivate _whenInputFavorLimitThreshold = (): void => {\n\t\tif (+this.limitThresholdSlider.value < +this.compressionThresholdSlider.value) {\n\t\t\tthis.compressionThresholdSlider.removeEventListener(\"input\", this._whenInput);\n\t\t\tthis.compressionThresholdSlider.value = this.limitThresholdSlider.value;\n\t\t\tthis.compressionThresholdSlider.addEventListener(\"input\", this._whenInput);\n\t\t}\n\t\tthis.limiterCanvas.render();\n\t\tthis._updateLimiter();\n\t}\n\n\tprivate _close = (): void => {\n\t\t// Reset all sliders to starting values\n\t\tthis.limitRatioSlider.value = \"\" + this.startingLimitRatio;\n\t\tthis.compressionRatioSlider.value = \"\" + this.startingCompressionRatio;\n\t\tthis.limitThresholdSlider.value = \"\" + this.startingLimitThreshold;\n\t\tthis.compressionThresholdSlider.value = \"\" + this.startingCompressionThreshold;\n\t\tthis.limitDecaySlider.value = \"\" + this.startingLimitDecay;\n\t\tthis.limitRiseSlider.value = \"\" + this.startingLimitRise;\n\t\tthis.masterGainSlider.value = \"\" + this.startingMasterGain;\n\n\t\tthis._updateLimiter();\n\t\tthis._doc.prompt = null;\n\t}\n\n\tpublic cleanUp = (): void => {\n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._resetButton.removeEventListener(\"click\", this._resetDefaults);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis.container.removeEventListener(\"keydown\", this.whenKeyPressed);\n\t\tthis.limitDecaySlider.removeEventListener(\"input\", this._whenInput);\n\t\tthis.limitRiseSlider.removeEventListener(\"input\", this._whenInput);\n\t\tthis.limitThresholdSlider.removeEventListener(\"input\", this._whenInputFavorLimitThreshold);\n\t\tthis.limitRatioSlider.removeEventListener(\"input\", this._whenInput);\n\t\tthis.compressionRatioSlider.removeEventListener(\"input\", this._whenInput);\n\t\tthis.compressionThresholdSlider.removeEventListener(\"input\", this._whenInput);\n\t\tthis.masterGainSlider.removeEventListener(\"input\", this._whenInput);\n\n\t\tthis._playButton.removeEventListener(\"click\", this._togglePlay);\n\t}\n\n\tpublic whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif ((<Element>event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t\tif (event.keyCode == 32) {\n\t\t\tthis._togglePlay();\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\tprivate _resetDefaults = (): void => {\n\t\t// Set song limiter settings to their default\n\t\tif (this.limitRatioSlider.value != \"10\" || this.limitRiseSlider.value != \"4000\" || this.limitDecaySlider.value != \"4\" || this.limitThresholdSlider.value != \"1\" || this.compressionRatioSlider.value != \"10\" || this.compressionThresholdSlider.value != \"1\" || this.masterGainSlider.value != \"1\") {\n\n\t\t\tthis.limitRatioSlider.value = \"10\";\n\t\t\tthis.limitRiseSlider.value = \"4000\";\n\t\t\tthis.limitDecaySlider.value = \"4\";\n\t\t\tthis.limitThresholdSlider.value = \"1\";\n\t\t\tthis.compressionRatioSlider.value = \"10\";\n\t\t\tthis.compressionThresholdSlider.value = \"1\";\n\t\t\tthis.masterGainSlider.value = \"1\";\n\n\t\t\tthis._whenInput();\n\t\t}\n\t}\n\n\tprivate _updateLimiter = (): void => {\n\t\t// Save slider values to song\n\t\tthis._doc.record(new ChangeLimiterSettings(this._doc,\n\t\t\t(+this.limitRatioSlider.value < 10 ? +this.limitRatioSlider.value / 10 : (+this.limitRatioSlider.value - 9)),\n\t\t\t(+this.compressionRatioSlider.value < 10 ? +this.compressionRatioSlider.value / 10 : (1 + (+this.compressionRatioSlider.value - 10) / 60)),\n\t\t\t+this.limitThresholdSlider.value,\n\t\t\t+this.compressionThresholdSlider.value,\n\t\t\t+this.limitRiseSlider.value,\n\t\t\t+this.limitDecaySlider.value,\n\t\t\t+this.masterGainSlider.value,\n\t\t), true);\n\t}\n\n\tprivate _saveChanges = (): void => {\n\t\tthis._updateLimiter();\n\t\tthis._doc.prompt = null;\n\n\t}\n}\n//}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ChangeLoop, ChangeChannelBar } from \"./changes\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { TrackEditor } from \"./TrackEditor\";\n\ninterface Cursor {\n\tstartBar: number;\n\tmode: number;\n}\n\ninterface Endpoints {\n\tstart: number;\n\tlength: number;\n}\n\nexport class LoopEditor {\n\tprivate readonly _editorHeight: number = 20;\n\t\tprivate readonly _startMode:   number = 0;\n\t\tprivate readonly _endMode:     number = 1;\n\t\tprivate readonly _bothMode:    number = 2;\n\t\tprivate readonly _loopMode:    number = 3;\n\t\tprivate _loopAtPointStart: number = -1;\n\t\tprivate _loopAtPointEnd: number = -1;\n\t\t\n\t\tprivate readonly _loop: SVGPathElement = SVG.path({fill: \"none\", stroke: ColorConfig.loopAccent, \"stroke-width\": 4});\n\t\tprivate readonly _barLoop: SVGPathElement = SVG.path({fill: \"none\", stroke: ColorConfig.uiWidgetFocus, \"stroke-width\": 2});\n\t\tprivate readonly _highlight: SVGPathElement = SVG.path({fill: ColorConfig.hoverPreview, \"pointer-events\": \"none\"});\n\t\t\n\tprivate readonly _svg: SVGSVGElement = SVG.svg({style: `touch-action: pan-y; position: absolute;`, height: this._editorHeight},\n\t\tthis._loop,\n\t\tthis._highlight,\n\t\tthis._barLoop\n\t);\n\t\t\n\tpublic readonly container: HTMLElement = HTML.div({class: \"loopEditor\"}, this._svg);\n\t\t\n\tprivate _barWidth: number = 32;\n\tprivate _change: ChangeLoop | null = null;\n\t\tprivate _cursor: Cursor = {startBar: -1, mode: -1};\n\tprivate _mouseX: number = 0;\n\t//private _mouseY: number = 0;\n\tprivate _clientStartX: number = 0;\n\tprivate _clientStartY: number = 0;\n\tprivate _startedScrolling: boolean = false;\n\tprivate _draggingHorizontally: boolean = false;\n\tprivate _mouseDown: boolean = false;\n\tprivate _mouseOver: boolean = false;\n\tprivate _renderedLoopStart: number = -1;\n\tprivate _renderedLoopStop: number = -1;\n\tprivate _renderedBarCount: number = 0;\n\tprivate _renderedBarWidth: number = -1;\n\tprivate _renderedBarLoopStart: number = -1;\n\tprivate _renderedBarLoopEnd: number = -1;\n\t\t\n\tconstructor(private _doc: SongDocument, private _trackEditor: TrackEditor) {\n\t\tthis._updateCursorStatus();\n\t\tthis._render();\n\t\tthis._doc.notifier.watch(this._documentChanged);\n\t\t\t\n\t\tthis.container.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"mouseover\", this._whenMouseOver);\n\t\tthis.container.addEventListener(\"mouseout\", this._whenMouseOut);\n\t\t\t\n\t\tthis.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n\t\tthis.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n\t\tthis.container.addEventListener(\"touchend\", this._whenTouchReleased);\n\t\tthis.container.addEventListener(\"touchcancel\", this._whenTouchReleased);\n\t}\n\t\t\n\tprivate _updateCursorStatus(): void {\n\t\tconst bar: number = this._mouseX / this._barWidth;\n\t\tthis._cursor.startBar = bar;\n\n\t\tif (bar >= this._loopAtPointStart && bar <= this._loopAtPointEnd + 1) {\n\t\t\tthis._cursor.mode = this._loopMode;\n        }\n\t\telse if (bar > this._doc.song.loopStart - 0.25 && bar < this._doc.song.loopStart + this._doc.song.loopLength + 0.25) {\n\t\t\tif (bar - this._doc.song.loopStart < this._doc.song.loopLength * 0.5) {\n\t\t\t\tthis._cursor.mode = this._startMode;\n\t\t\t} else {\n\t\t\t\tthis._cursor.mode = this._endMode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._cursor.mode = this._bothMode;\n\t\t}\n\t}\n\t\t\n\tprivate _findEndPoints(middle: number): Endpoints {\n\t\tlet start: number = Math.round(middle - this._doc.song.loopLength / 2);\n\t\tlet end: number = start + this._doc.song.loopLength;\n\t\tif (start < 0) {\n\t\t\tend -= start;\n\t\t\tstart = 0;\n\t\t}\n\t\tif (end > this._doc.song.barCount) {\n\t\t\tstart -= end - this._doc.song.barCount;\n\t\t\tend = this._doc.song.barCount;\n\t\t}\n\t\t\treturn {start: start, length: end - start};\n\t}\n\t\t\n\tprivate _whenMouseOver = (event: MouseEvent): void => {\n\t\tif (this._mouseOver) return;\n\t\tthis._mouseOver = true;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMouseOut = (event: MouseEvent): void => {\n\t\tif (!this._mouseOver) return;\n\t\tthis._mouseOver = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\t//this._mouseY = (event.clientY || event.pageY) - boundingRect.top;\n\t\tthis._updateCursorStatus();\n\t\tthis._updatePreview();\n\t\tthis._whenMouseMoved(event);\n\t}\n\t\t\n\tprivate _whenTouchPressed = (event: TouchEvent): void => {\n\t\t//event.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\t//this._mouseY = event.touches[0].clientY - boundingRect.top;\n\t\tthis._updateCursorStatus();\n\t\tthis._updatePreview();\n\t\t//this._whenTouchMoved(event);\n\t\tthis._clientStartX = event.touches[0].clientX;\n\t\tthis._clientStartY = event.touches[0].clientY;\n\t\tthis._draggingHorizontally = false;\n\t\tthis._startedScrolling = false;\n\t}\n\t\t\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\t//this._mouseY = (event.clientY || event.pageY) - boundingRect.top;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenTouchMoved = (event: TouchEvent): void => {\n\t\tif (!this._mouseDown) return;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\t//this._mouseY = event.touches[0].clientY - boundingRect.top;\n\t\t\t\n\t\tif (!this._draggingHorizontally && !this._startedScrolling) {\n\t\t\tif (Math.abs(event.touches[0].clientY - this._clientStartY) > 10) {\n\t\t\t\tthis._startedScrolling = true;\n\t\t\t} else if (Math.abs(event.touches[0].clientX - this._clientStartX) > 10) {\n\t\t\t\tthis._draggingHorizontally = true;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif (this._draggingHorizontally) {\n\t\t\tthis._whenCursorMoved();\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\t\t\n\tprivate _whenCursorMoved(): void {\n\t\tif (this._mouseDown) {\n\t\t\tlet oldStart: number = this._doc.song.loopStart;\n\t\t\tlet oldEnd: number = this._doc.song.loopStart + this._doc.song.loopLength;\n\t\t\tif (this._change != null && this._doc.lastChangeWas(this._change)) {\n\t\t\t\toldStart = this._change.oldStart;\n\t\t\t\toldEnd = oldStart + this._change.oldLength;\n\t\t\t}\n\t\t\t\t\n\t\t\tconst bar: number = this._mouseX / this._barWidth;\n\t\t\tlet start: number;\n\t\t\tlet end: number;\n\t\t\tlet temp: number;\n\t\t\tif (this._cursor.mode == this._startMode) {\n\t\t\t\tstart = oldStart + Math.round(bar - this._cursor.startBar);\n\t\t\t\tend = oldEnd;\n\t\t\t\tif (start < 0) start = 0;\n\t\t\t\tif (start >= this._doc.song.barCount) start = this._doc.song.barCount;\n\t\t\t\tif (start == end) {\n\t\t\t\t\tstart = end - 1;\n\t\t\t\t} else if (start > end) {\n\t\t\t\t\ttemp = start;\n\t\t\t\t\tstart = end;\n\t\t\t\t\tend = temp;\n\t\t\t\t}\n\t\t\t\tthis._change = new ChangeLoop(this._doc, oldStart, oldEnd - oldStart, start, end - start);\n\t\t\t} else if (this._cursor.mode == this._endMode) {\n\t\t\t\tstart = oldStart;\n\t\t\t\tend = oldEnd + Math.round(bar - this._cursor.startBar);\n\t\t\t\tif (end < 0) end = 0;\n\t\t\t\tif (end >= this._doc.song.barCount) end = this._doc.song.barCount;\n\t\t\t\tif (end == start) {\n\t\t\t\t\tend = start + 1;\n\t\t\t\t} else if (end < start) {\n\t\t\t\t\ttemp = start;\n\t\t\t\t\tstart = end;\n\t\t\t\t\tend = temp;\n\t\t\t\t}\n\t\t\t\tthis._change = new ChangeLoop(this._doc, oldStart, oldEnd - oldStart, start, end - start);\n\t\t\t} else if (this._cursor.mode == this._bothMode) {\n\t\t\t\tconst endPoints: Endpoints = this._findEndPoints(bar);\n\t\t\t\tthis._change = new ChangeLoop(this._doc, oldStart, oldEnd - oldStart, endPoints.start, endPoints.length);\n\t\t\t}\n\t\t\telse if (this._cursor.mode == this._loopMode) {\n\t\t\t\tthis._doc.synth.loopBarStart = -1;\n\t\t\t\tthis._doc.synth.loopBarEnd = -1;\n\t\t\t\tthis.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n            }\n\t\t\tthis._doc.synth.jumpIntoLoop();\n\t\t\tif (this._doc.prefs.autoFollow) {\n\t\t\t\tnew ChangeChannelBar(this._doc, this._doc.channel, Math.floor(this._doc.synth.playhead), true);\n\t\t\t}\n\t\t\tthis._doc.setProspectiveChange(this._change);\n\t\t} else {\n\t\t\tthis._updateCursorStatus();\n\t\t\tthis._updatePreview();\n\t\t}\n\t}\n\t\t\n\tprivate _whenTouchReleased = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tif (!this._startedScrolling) {\n\t\t\tthis._whenCursorMoved();\n\t\t\tthis._mouseOver = false;\n\t\t\tthis._whenCursorReleased(event);\n\t\t\tthis._updatePreview();\n\t\t}\n\n\t\tthis._mouseDown = false;\n\t}\n\t\t\n\tprivate _whenCursorReleased = (event: Event): void => {\n\t\tif (this._change != null) this._doc.record(this._change);\n\t\tthis._change = null;\n\t\tthis._mouseDown = false;\n\t\tthis._updateCursorStatus();\n\t\tthis._render();\n\t}\n\t\t\n\tprivate _updatePreview(): void {\n\t\tconst showHighlight: boolean = this._mouseOver && !this._mouseDown;\n\t\tthis._highlight.style.visibility = showHighlight ? \"visible\" : \"hidden\";\n\t\t\t\n\t\tif (showHighlight) {\n\t\t\tconst radius: number = this._editorHeight / 2;\n\n\t\t\tlet highlightStart: number = (this._doc.song.loopStart) * this._barWidth;\n\t\t\tlet highlightStop: number = (this._doc.song.loopStart + this._doc.song.loopLength) * this._barWidth;\n\t\t\tif (this._cursor.mode == this._startMode) {\n\t\t\t\thighlightStop = (this._doc.song.loopStart) * this._barWidth + radius * 2;\n\t\t\t} else if (this._cursor.mode == this._endMode) {\n\t\t\t\thighlightStart = (this._doc.song.loopStart + this._doc.song.loopLength) * this._barWidth - radius * 2;\n\t\t\t} else if (this._cursor.mode == this._bothMode) {\n\t\t\t\tconst endPoints: Endpoints = this._findEndPoints(this._cursor.startBar);\n\t\t\t\thighlightStart = (endPoints.start) * this._barWidth;\n\t\t\t\thighlightStop = (endPoints.start + endPoints.length) * this._barWidth;\n\t\t\t}\n\n\t\t\tif (this._cursor.mode == this._loopMode) {\n\t\t\t\tconst barLoopStart = (this._loopAtPointStart + 0.5) * this._barWidth;\n\t\t\t\tconst barLoopEnd = (this._loopAtPointEnd + 0.5) * this._barWidth;\n\t\t\t\tthis._highlight.setAttribute(\"d\",\n\t\t\t\t\t`M ${barLoopStart} ${radius * 1.7} ` +\n\t\t\t\t\t`L ${barLoopStart - radius * 1.5} ${radius}` +\n\t\t\t\t\t`L ${barLoopStart} ${radius * 0.3}` +\n\t\t\t\t\t`L ${barLoopEnd} ${radius * 0.3}` +\n\t\t\t\t\t`L ${barLoopEnd + radius * 1.5} ${radius}` +\n\t\t\t\t\t`L ${barLoopEnd} ${radius * 1.7}` +\n\t\t\t\t\t`z`\n\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\tthis._highlight.setAttribute(\"d\",\n\t\t\t\t\t`M ${highlightStart + radius} ${4} ` +\n\t\t\t\t\t`L ${highlightStop - radius} ${4} ` +\n\t\t\t\t\t`A ${radius - 4} ${radius - 4} ${0} ${0} ${1} ${highlightStop - radius} ${this._editorHeight - 4} ` +\n\t\t\t\t\t`L ${highlightStart + radius} ${this._editorHeight - 4} ` +\n\t\t\t\t\t`A ${radius - 4} ${radius - 4} ${0} ${0} ${1} ${highlightStart + radius} ${4} ` +\n\t\t\t\t\t`z`\n\t\t\t\t);\n\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tprivate _documentChanged = (): void => {\n\t\tthis._render();\n\t}\n\n\tpublic setLoopAt(startBar: number, endBar: number): void {\n\t\tthis._loopAtPointStart = startBar;\n\t\tthis._loopAtPointEnd = endBar;\n\t\tthis._trackEditor.render();\n\t\tthis._render();\n    }\n\t\t\n\tprivate _render(): void {\n\t\tthis._barWidth = this._doc.getBarWidth();\n\t\t\t\n\t\tconst radius: number = this._editorHeight / 2;\n\t\tconst loopStart: number = (this._doc.song.loopStart) * this._barWidth;\n\t\tconst loopStop: number = (this._doc.song.loopStart + this._doc.song.loopLength) * this._barWidth;\n\t\t\t\n\t\tif (this._renderedBarCount != this._doc.song.barCount || this._renderedBarWidth != this._barWidth) {\n\t\t\tthis._renderedBarCount = this._doc.song.barCount;\n\t\t\tthis._renderedBarWidth = this._barWidth;\n\t\t\tconst editorWidth = this._barWidth * this._doc.song.barCount;\n\t\t\tthis.container.style.width = editorWidth + \"px\";\n\t\t\tthis._svg.setAttribute(\"width\", editorWidth + \"\");\n\t\t}\n\n\t\tif (this._renderedLoopStart != loopStart || this._renderedLoopStop != loopStop) {\n\t\t\tthis._renderedLoopStart = loopStart;\n\t\t\tthis._renderedLoopStop = loopStop;\n\t\t\tthis._loop.setAttribute(\"d\",\n\t\t\t\t`M ${loopStart + radius} ${2} ` +\n\t\t\t\t`L ${loopStop - radius} ${2} ` +\n\t\t\t\t`A ${radius - 2} ${radius - 2} ${0} ${0} ${1} ${loopStop - radius} ${this._editorHeight - 2} ` +\n\t\t\t\t`L ${loopStart + radius} ${this._editorHeight - 2} ` +\n\t\t\t\t`A ${radius - 2} ${radius - 2} ${0} ${0} ${1} ${loopStart + radius} ${2} ` +\n\t\t\t\t`z`\n\t\t\t);\n\t\t}\n\n\t\tconst barLoopStart = (this._loopAtPointStart + 0.5) * this._barWidth;\n\t\tconst barLoopEnd = (this._loopAtPointEnd + 0.5) * this._barWidth;\n\t\tif (this._renderedBarLoopStart != barLoopStart || this._renderedBarLoopEnd != barLoopEnd) {\n\t\t\tif (barLoopStart < 0 || barLoopEnd < 0) {\n\t\t\t\tthis._barLoop.setAttribute(\"d\", \"\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._barLoop.setAttribute(\"d\",\n\t\t\t\t\t`M ${barLoopStart} ${radius * 1.5} ` +\n\t\t\t\t\t`L ${barLoopStart - radius} ${radius}` +\n\t\t\t\t\t`L ${barLoopStart} ${radius * 0.5}` +\n\t\t\t\t\t`L ${barLoopEnd} ${radius * 0.5}` +\n\t\t\t\t\t`L ${barLoopEnd + radius} ${radius}` +\n\t\t\t\t\t`L ${barLoopEnd} ${radius * 1.5}` +\n\t\t\t\t\t`z`\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis._renderedBarLoopStart = barLoopStart;\n\t\t\tthis._renderedBarLoopEnd = barLoopEnd;\n\t\t}\n\t\t\t\n\t\tthis._updatePreview();\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"../synth/SynthConfig\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Prompt } from \"./Prompt\";\nimport { ChangeMoveNotesSideways } from \"./changes\";\nimport { ColorConfig } from \"./ColorConfig\";\n\n\tconst {button, div, span, h2, input, br, select, option} = HTML;\n\nexport class MoveNotesSidewaysPrompt implements Prompt {\n\t\tprivate readonly _beatsStepper: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"number\", step: \"0.01\", value: \"0\"});\n\t\tprivate readonly _conversionStrategySelect: HTMLSelectElement = select({style: \"width: 100%;\"},\n\t\t\toption({value: \"overflow\"}, \"Overflow notes across bars.\"),\n\t\t\toption({value: \"wrapAround\"}, \"Wrap notes around within bars.\"),\n\t);\n\t\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\t\tprivate readonly _okayButton: HTMLButtonElement = button({class: \"okayButton\", style: \"width:45%;\"}, \"Okay\");\n\t\t\n\t\tpublic readonly container: HTMLDivElement = div({class: \"prompt noSelection\", style: \"width: 250px;\"},\n\t\th2(\"Move Notes Sideways\"),\n\t\t\tdiv({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\tdiv({style: \"text-align: right;\"},\n\t\t\t\t\"Beats to move:\",\n\t\t\t\tbr(),\n\t\t\t\t\tspan({style: `font-size: smaller; color: ${ColorConfig.secondaryText};`}, \"(Negative is left, positive is right)\"),\n\t\t\t),\n\t\t\tthis._beatsStepper,\n\t\t),\n\t\t\tdiv({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\tdiv({class: \"selectContainer\", style: \"width: 100%;\"}, this._conversionStrategySelect),\n\t\t),\n\t\t\tdiv({style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\"},\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis._beatsStepper.min = (-this._doc.song.beatsPerBar) + \"\";\n\t\tthis._beatsStepper.max = this._doc.song.beatsPerBar + \"\";\n\t\t\t\n\t\tconst lastStrategy: string | null = window.localStorage.getItem(\"moveNotesSidewaysStrategy\");\n\t\tif (lastStrategy != null) {\n\t\t\tthis._conversionStrategySelect.value = lastStrategy;\n\t\t}\n\t\t\t\n\t\tthis._beatsStepper.select();\n\t\tsetTimeout(() => this._beatsStepper.focus(), 100); // Add 100ms because the key macro (W) gets captured by the stepper...\n\t\t\t\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis._beatsStepper.addEventListener(\"blur\", MoveNotesSidewaysPrompt._validateNumber);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\t\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\t\n\t\tpublic cleanUp = (): void => { \n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis._beatsStepper.removeEventListener(\"blur\", MoveNotesSidewaysPrompt._validateNumber);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\t\tif ((<Element> event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t}\n\t\t\n\tprivate static _validateNumber(event: Event): void {\n\t\tconst input: HTMLInputElement = <HTMLInputElement>event.target;\n\t\tlet value: number = +input.value;\n\t\tvalue = Math.round(value * Config.partsPerBeat) / Config.partsPerBeat;\n\t\tvalue = Math.round(value * 100) / 100;\n\t\tinput.value = Math.max(+input.min, Math.min(+input.max, value)) + \"\";\n\t}\n\t\t\n\tprivate _saveChanges = (): void => {\n\t\twindow.localStorage.setItem(\"moveNotesSidewaysStrategy\", this._conversionStrategySelect.value);\n\t\tthis._doc.prompt = null;\n\t\tthis._doc.record(new ChangeMoveNotesSideways(this._doc, +this._beatsStepper.value, this._conversionStrategySelect.value), true);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { ChannelRow } from \"./ChannelRow\";\nimport { InputBox } from \"./HTMLWrapper\";\nimport { ChangeChannelOrder, ChangeChannelName, ChangeRemoveChannel } from \"./changes\";\nimport { Config } from \"../synth/SynthConfig\";\nimport { SongEditor } from \"./SongEditor\";\n\n//namespace beepbox {\nexport class MuteEditor {\n\t\n\tprivate _cornerFiller: HTMLDivElement = HTML.div({style: `background: ${ColorConfig.editorBackground}; position: sticky; bottom: 0; left: 0; width: 32px; height: 30px;`});\n\t\n\tprivate readonly _buttons: HTMLDivElement[] = [];\n\tprivate readonly _channelCounts: HTMLDivElement[] = [];\n\tprivate readonly _channelNameDisplay: HTMLDivElement = HTML.div({ style: `background-color: ${ColorConfig.uiWidgetFocus}; white-space:nowrap; display: none; transform:translate(20px); width: auto; pointer-events: none; position: absolute; border-radius: 0.2em; z-index: 2;`, \"color\": ColorConfig.primaryText }, \"\");\n\tpublic readonly _channelNameInput: InputBox = new InputBox(HTML.input({ style: `color: ${ColorConfig.primaryText}; background-color: ${ColorConfig.uiWidgetFocus}; margin-top: -2px; display: none; width: 6em; position: absolute; border-radius: 0.2em; z-index: 2;`, \"color\": ColorConfig.primaryText }, \"\"), this._doc, (oldValue: string, newValue: string) => new ChangeChannelName(this._doc, oldValue, newValue));\n\n\tprivate readonly _channelDropDown: HTMLSelectElement = HTML.select({ style: \"width: 0px; left: 19px; height: 19px; position:absolute; opacity:0\" },\n\n\t\tHTML.option({ value: \"rename\" }, \"Rename...\"),\n\t\tHTML.option({ value: \"chnUp\" }, \"Move Channel Up\"),\n\t\tHTML.option({ value: \"chnDown\" }, \"Move Channel Down\"),\n\t\tHTML.option({ value: \"chnMute\" }, \"Mute Channel\"),\n\t\tHTML.option({ value: \"chnSolo\" }, \"Solo Channel\"),\n\t\tHTML.option({ value: \"chnInsert\" }, \"Insert Channel Below\"),\n\t\tHTML.option({ value: \"chnDelete\" }, \"Delete This Channel\"),\n\t);\n\n\tpublic readonly container: HTMLElement = HTML.div({ class: \"muteEditor\", style: \"position: sticky; padding-top: \" + Config.barEditorHeight + \"px;\" }, this._channelNameDisplay, this._channelNameInput.input, this._channelDropDown);\n\n\tprivate _editorHeight: number = 128;\n\tprivate _renderedPitchChannels: number = 0;\n\tprivate _renderedNoiseChannels: number = 0;\n\tprivate _renderedChannelHeight: number = -1;\n\tprivate _renderedModChannels: number = 0;\n\tprivate _channelDropDownChannel: number = 0;\n\tprivate _channelDropDownOpen: boolean = false;\n\tprivate _channelDropDownLastState: boolean = false;\n\n\tconstructor(private _doc: SongDocument, private _editor: SongEditor) {\n\t\tthis.container.addEventListener(\"click\", this._onClick);\n\t\tthis.container.addEventListener(\"mousemove\", this._onMouseMove);\n\t\tthis.container.addEventListener(\"mouseleave\", this._onMouseLeave);\n\n\t\tthis._channelDropDown.selectedIndex = -1;\n\t\tthis._channelDropDown.addEventListener(\"change\", this._channelDropDownHandler);\n\t\tthis._channelDropDown.addEventListener(\"mousedown\", this._channelDropDownGetOpenedPosition);\n\t\tthis._channelDropDown.addEventListener(\"blur\", this._channelDropDownBlur);\n\t\tthis._channelDropDown.addEventListener(\"click\", this._channelDropDownClick);\n\n\t\tthis._channelNameInput.input.addEventListener(\"change\", this._channelNameInputHide);\n\t\tthis._channelNameInput.input.addEventListener(\"blur\", this._channelNameInputHide);\n\t\tthis._channelNameInput.input.addEventListener(\"mousedown\", this._channelNameInputClicked);\n\t\tthis._channelNameInput.input.addEventListener(\"input\", this._channelNameInputWhenInput);\n\t}\n\n\tprivate _channelNameInputWhenInput = (): void => {\n\t\tlet newValue = this._channelNameInput.input.value;\n\t\tif (newValue.length > 15) {\n\t\t\tthis._channelNameInput.input.value = newValue.substring(0, 15);\n\t\t}\n\t}\n\n\tprivate _channelNameInputClicked = (event: MouseEvent): void => {\n\t\tevent.stopPropagation();\n\t}\n\n\tprivate _channelNameInputHide = (): void => {\n\t\tthis._channelNameInput.input.style.setProperty(\"display\", \"none\");\n\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t}\n\n\tprivate _channelDropDownClick = (event: MouseEvent): void => {\n\t\tthis._channelDropDownOpen = !this._channelDropDownLastState;\n\t\tthis._channelDropDownGetOpenedPosition(event);\n\t\t//console.log(\"click \" + this._channelDropDownOpen);\n\t}\n\n\tprivate _channelDropDownBlur = (): void => {\n\t\tthis._channelDropDownOpen = false;\n\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\t//console.log(\"blur \" + this._channelDropDownOpen);\n\t}\n\n\tprivate _channelDropDownGetOpenedPosition = (event: MouseEvent): void => {\n\n\t\tthis._channelDropDownLastState = this._channelDropDownOpen;\n\n\t\tthis._channelDropDownChannel = Math.floor(Math.min(this._buttons.length, Math.max(0, parseInt(this._channelDropDown.style.getPropertyValue(\"top\")) / ChannelRow.patternHeight)));\n\t\tthis._doc.muteEditorChannel = this._channelDropDownChannel;\n\n\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"\");\n\n\t\t// Check if channel is at limit, in which case another can't be inserted\n\t\tif ((this._channelDropDownChannel < this._doc.song.pitchChannelCount && this._doc.song.pitchChannelCount == Config.pitchChannelCountMax)\n\t\t\t|| (this._channelDropDownChannel >= this._doc.song.pitchChannelCount && this._channelDropDownChannel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount && this._doc.song.noiseChannelCount == Config.noiseChannelCountMax)\n\t\t\t|| (this._channelDropDownChannel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount && this._doc.song.modChannelCount == Config.modChannelCountMax)) {\n\t\t\tthis._channelDropDown.options[5].disabled = true;\n\t\t}\n\t\telse {\n\t\t\tthis._channelDropDown.options[5].disabled = false;\n\t\t}\n\n\t\t// Also check if a channel is eligible to move up or down based on the song's channel settings.\n\t\tif (this._channelDropDownChannel == 0 || this._channelDropDownChannel == this._doc.song.pitchChannelCount || this._channelDropDownChannel == this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n\t\t\tthis._channelDropDown.options[1].disabled = true;\n\t\t}\n\t\telse {\n\t\t\tthis._channelDropDown.options[1].disabled = false;\n\t\t}\n\t\tif (this._channelDropDownChannel == this._doc.song.pitchChannelCount - 1 || this._channelDropDownChannel == this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount - 1 || this._channelDropDownChannel == this._doc.song.getChannelCount() - 1) {\n\t\t\tthis._channelDropDown.options[2].disabled = true;\n\t\t}\n\t\telse {\n\t\t\tthis._channelDropDown.options[2].disabled = false;\n\t\t}\n\n\t\t// Also, can't delete the last pitch channel.\n\t\tif (this._doc.song.pitchChannelCount == 1 && this._channelDropDownChannel == 0) {\n\t\t\tthis._channelDropDown.options[6].disabled = true;\n\t\t}\n\t\telse {\n\t\t\tthis._channelDropDown.options[6].disabled = false;\n\t\t}\n\t}\n\n\tprivate _channelDropDownHandler = (event: Event): void => {\n\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\tthis._channelDropDown.style.setProperty(\"display\", \"none\");\n\t\tthis._channelDropDownOpen = false;\n\t\tevent.stopPropagation();\n\t\t//console.log(\"handler \" + this._channelDropDownOpen);\n\n\t\tswitch (this._channelDropDown.value) {\n\t\t\tcase \"rename\":\n\t\t\t\tthis._channelNameInput.input.style.setProperty(\"display\", \"\");\n\t\t\t\tthis._channelNameInput.input.style.setProperty(\"transform\", this._channelNameDisplay.style.getPropertyValue(\"transform\"));\n\t\t\t\tif (this._channelNameDisplay.textContent != null) {\n\t\t\t\t\tthis._channelNameInput.input.value = this._channelNameDisplay.textContent;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._channelNameInput.input.value = \"\";\n\t\t\t\t}\n\t\t\t\tthis._channelNameInput.input.select();\n\t\t\t\tbreak;\n\t\t\tcase \"chnUp\":\n\t\t\t\tthis._doc.record(new ChangeChannelOrder(this._doc, this._channelDropDownChannel, this._channelDropDownChannel, -1));\n\t\t\t\tbreak;\n\t\t\tcase \"chnDown\":\n\t\t\t\tthis._doc.record(new ChangeChannelOrder(this._doc, this._channelDropDownChannel, this._channelDropDownChannel, 1));\n\t\t\t\tbreak;\n\t\t\tcase \"chnMute\":\n\t\t\t\tthis._doc.song.channels[this._channelDropDownChannel].muted = !this._doc.song.channels[this._channelDropDownChannel].muted;\n\t\t\t\tthis.render();\n\t\t\t\tbreak;\n\t\t\tcase \"chnSolo\": {\n\t\t\t\t// Check for any channel not matching solo pattern\n\t\t\t\tlet shouldSolo: boolean = false;\n\t\t\t\tfor (let channel: number = 0; channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channel++) {\n\t\t\t\t\tif (this._doc.song.channels[channel].muted == (channel == this._channelDropDownChannel)) {\n\t\t\t\t\t\tshouldSolo = true;\n\t\t\t\t\t\tchannel = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (shouldSolo) {\n\t\t\t\t\tfor (let channel: number = 0; channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channel++) {\n\t\t\t\t\t\tthis._doc.song.channels[channel].muted = (channel != this._channelDropDownChannel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor (let channel: number = 0; channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channel++) {\n\t\t\t\t\t\tthis._doc.song.channels[channel].muted = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.render();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"chnInsert\": {\n\t\t\t\tthis._doc.channel = this._channelDropDownChannel;\n\t\t\t\tthis._doc.selection.resetBoxSelection();\n\t\t\t\tthis._doc.selection.insertChannel();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"chnDelete\": {\n\t\t\t\tthis._doc.record(new ChangeRemoveChannel(this._doc, this._channelDropDownChannel, this._channelDropDownChannel));\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (this._channelDropDown.value != \"rename\")\n\t\t\tthis._editor.refocusStage();\n\n\t\tthis._channelDropDown.selectedIndex = -1;\n\t}\n\n\tprivate _onClick = (event: MouseEvent): void => {\n\n\t\tconst index = this._buttons.indexOf(<HTMLDivElement>event.target);\n\t\tif (index == -1) return;\n\t\tlet xPos: number = event.clientX - this._buttons[0].getBoundingClientRect().left;\n\t\tif (xPos < 21.0) {\n\t\t\tthis._doc.song.channels[index].muted = !this._doc.song.channels[index].muted;\n\t\t}\n\t\tthis._doc.notifier.changed();\n\t}\n\n\tprivate _onMouseMove = (event: MouseEvent): void => {\n\t\tconst index = this._buttons.indexOf(<HTMLDivElement>event.target);\n\t\tif (index == -1) {\n\t\t\tif (!this._channelDropDownOpen && event.target != this._channelNameDisplay && event.target != this._channelDropDown) {\n\t\t\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\t\t\tthis._channelDropDown.style.setProperty(\"display\", \"none\");\n\t\t\t\tthis._channelDropDown.style.setProperty(\"width\", \"0px\");\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (this._channelDropDownOpen && this._channelNameDisplay.style.getPropertyValue(\"display\") == \"none\" && this._channelNameInput.input.style.getPropertyValue(\"display\") == \"none\") {\n\t\t\tthis._channelDropDownOpen = false;\n        }\n\t\tlet xPos: number = event.clientX - this._buttons[0].getBoundingClientRect().left;\n\t\tif (xPos >= 21.0) {\n\t\t\tif (!this._channelDropDownOpen) {\n\t\t\t\t// Mouse over chn. number\n\t\t\t\tthis._channelDropDown.style.setProperty(\"display\", \"\");\n\t\t\t\tvar height = ChannelRow.patternHeight;\n\t\t\t\tthis._channelNameDisplay.style.setProperty(\"transform\", \"translate(20px, \" + (height / 4 + height * index) + \"px)\");\n\n\t\t\t\tif (this._doc.song.channels[index].name != \"\") {\n\t\t\t\t\tthis._channelNameDisplay.textContent = this._doc.song.channels[index].name;\n\t\t\t\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (index < this._doc.song.pitchChannelCount) {\n\t\t\t\t\t\tthis._channelNameDisplay.textContent = \"Pitch \" + (index + 1);\n\t\t\t\t\t} else if (index < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n\t\t\t\t\t\tthis._channelNameDisplay.textContent = \"Noise \" + (index - this._doc.song.pitchChannelCount + 1);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._channelNameDisplay.textContent = \"Mod \" + (index - this._doc.song.pitchChannelCount - this._doc.song.noiseChannelCount + 1);\n\t\t\t\t\t}\n\t\t\t\t\t// The name set will only show up when this becomes visible, e.g. when the dropdown is opened.\n\t\t\t\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\t\t\t}\n\n\t\t\t\tthis._channelDropDown.style.top = (Config.barEditorHeight + 2 + index * ChannelRow.patternHeight) + \"px\";\n\t\t\t\tthis._channelDropDown.style.setProperty(\"width\", \"15px\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (!this._channelDropDownOpen) {\n\t\t\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\t\t\tthis._channelDropDown.style.setProperty(\"display\", \"none\");\n\t\t\t\tthis._channelDropDown.style.setProperty(\"width\", \"0px\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _onMouseLeave = (event: MouseEvent): void => {\n\t\tif (!this._channelDropDownOpen) {\n\t\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\t\tthis._channelDropDown.style.setProperty(\"width\", \"0px\");\n\t\t}\n\t}\n\n\tpublic onKeyUp(event: KeyboardEvent): void {\n\t\tswitch (event.keyCode) {\n\t\t\tcase 27: // esc\n\t\t\t\tthis._channelDropDownOpen = false;\n\t\t\t\t//console.log(\"close\");\n\t\t\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\t\t\tbreak;\n\t\t\tcase 13: // enter\n\t\t\t\tthis._channelDropDownOpen = false;\n\t\t\t\t//console.log(\"close\");\n\t\t\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic render(): void {\n\t\tif (!this._doc.prefs.enableChannelMuting) return;\n\t\tlet startingChannelCount: number = this._buttons.length;\n\n\t\tif (this._buttons.length != this._doc.song.getChannelCount()) {\n\t\t\tfor (let y: number = this._buttons.length; y < this._doc.song.getChannelCount(); y++) {\n\n\t\t\t\tconst channelCountText: HTMLDivElement = HTML.div({ class: \"noSelection muteButtonText\", style: \"display: table-cell; -webkit-text-stroke: 1.5px; vertical-align: middle; text-align: center; -webkit-user-select: none; -webkit-touch-callout: none; -moz-user-select: none; -ms-user-select: none; user-select: none; pointer-events: none; width: 12px; height: 20px; transform: translate(0px, 1px);\" });\n\t\t\t\tconst muteButton: HTMLDivElement = HTML.div({ class: \"mute-button\", title: \"Mute (M), Mute All (⇧M), Solo (S), Exclude (⇧S)\", style: `display: block; pointer-events: none; width: 16px; height: 20px; transform: translate(2px, 1px);` });\n\n\t\t\t\tconst muteContainer: HTMLDivElement = HTML.div({ style: `align-items: center; height: 20px; margin: 0px; display: table; flex-direction: row; justify-content: space-between;` }, [\n\t\t\t\t\tmuteButton,\n\t\t\t\t\tchannelCountText,\n\t\t\t\t]);\n\t\t\t\tthis.container.appendChild(muteContainer);\n\t\t\t\tthis._buttons[y] = muteContainer;\n\t\t\t\tthis._channelCounts[y] = channelCountText;\n\t\t\t}\n\n\t\t\tfor (let y: number = this._doc.song.getChannelCount(); y < this._buttons.length; y++) {\n\t\t\t\tthis.container.removeChild(this._buttons[y]);\n\t\t\t}\n\n\t\t\tthis._buttons.length = this._doc.song.getChannelCount();\n\n\t\t\tthis.container.appendChild(this._cornerFiller);\n\t\t}\n\n\t\tfor (let y: number = 0; y < this._doc.song.getChannelCount(); y++) {\n\t\t\tif (this._doc.song.channels[y].muted) {\n\t\t\t\tthis._buttons[y].children[0].classList.add(\"muted\");\n\n\t\t\t\tif (y < this._doc.song.pitchChannelCount)\n\t\t\t\t\tthis._channelCounts[y].style.color = ColorConfig.trackEditorBgPitchDim;\n\t\t\t\telse if (y < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)\n\t\t\t\t\tthis._channelCounts[y].style.color = ColorConfig.trackEditorBgNoiseDim;\n\t\t\t\telse\n\t\t\t\t\tthis._channelCounts[y].style.color = ColorConfig.trackEditorBgModDim;\n\n\t\t\t} else {\n\t\t\t\tthis._buttons[y].children[0].classList.remove(\"muted\");\n\n\t\t\t\tif (y < this._doc.song.pitchChannelCount)\n\t\t\t\t\tthis._channelCounts[y].style.color = ColorConfig.trackEditorBgPitch;\n\t\t\t\telse if (y < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)\n\t\t\t\t\tthis._channelCounts[y].style.color = ColorConfig.trackEditorBgNoise;\n\t\t\t\telse\n\t\t\t\t\tthis._channelCounts[y].style.color = ColorConfig.trackEditorBgMod;\n\t\t\t}\n\t\t}\n\n\t\tif (this._renderedChannelHeight != ChannelRow.patternHeight || startingChannelCount != this._buttons.length) {\n\t\t\tfor (let y: number = 0; y < this._doc.song.getChannelCount(); y++) {\n\t\t\t\tthis._buttons[y].style.marginTop = ((ChannelRow.patternHeight - 20) / 2) + \"px\";\n\t\t\t\tthis._buttons[y].style.marginBottom = ((ChannelRow.patternHeight - 20) / 2) + \"px\";\n\t\t\t}\n\t\t}\n\n\t\tif (this._renderedModChannels != this._doc.song.modChannelCount || startingChannelCount != this._buttons.length) {\n\t\t\tfor (let y: number = 0; y < this._doc.song.getChannelCount(); y++) {\n\t\t\t\tif (y < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n\t\t\t\t\tthis._buttons[y].children[0].classList.remove(\"modMute\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._buttons[y].children[0].classList.add(\"modMute\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._renderedModChannels != this._doc.song.modChannelCount || this._renderedPitchChannels != this._doc.song.pitchChannelCount || this._renderedNoiseChannels != this._doc.song.noiseChannelCount) {\n\t\t\tfor (let y: number = 0; y < this._doc.song.getChannelCount(); y++) {\n\t\t\t\tif (y < this._doc.song.pitchChannelCount) {\n\t\t\t\t\tlet val: number = (y + 1);\n\t\t\t\t\tthis._channelCounts[y].textContent = val + \"\";\n\t\t\t\t\tthis._channelCounts[y].style.fontSize = (val >= 10) ? \"xx-small\" : \"inherit\";\n\t\t\t\t}\n\t\t\t\telse if (y < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n\t\t\t\t\tlet val: number = (y - this._doc.song.pitchChannelCount + 1);\n\t\t\t\t\tthis._channelCounts[y].textContent = val + \"\";\n\t\t\t\t\tthis._channelCounts[y].style.fontSize = (val >= 10) ? \"xx-small\" : \"inherit\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet val: number = (y - this._doc.song.pitchChannelCount - this._doc.song.noiseChannelCount + 1);\n\t\t\t\t\tthis._channelCounts[y].textContent = val + \"\";\n\t\t\t\t\tthis._channelCounts[y].style.fontSize = (val >= 10) ? \"xx-small\" : \"inherit\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._renderedPitchChannels = this._doc.song.pitchChannelCount;\n\t\t\tthis._renderedNoiseChannels = this._doc.song.noiseChannelCount;\n\t\t\tthis._renderedModChannels = this._doc.song.modChannelCount;\n\t\t}\n\n\t\tif (startingChannelCount != this._buttons.length || this._renderedChannelHeight != ChannelRow.patternHeight) {\n\t\t\tthis._renderedChannelHeight = ChannelRow.patternHeight;\n\t\t\tthis._editorHeight = Config.barEditorHeight + this._doc.song.getChannelCount() * ChannelRow.patternHeight;\n\t\t\tthis._channelNameDisplay.style.setProperty(\"display\", \"none\");\n\t\t\tthis.container.style.height = (this._editorHeight + 16) + \"px\";\n\n\t\t\tif (ChannelRow.patternHeight < 27) {\n\t\t\t\tthis._channelNameDisplay.style.setProperty(\"margin-top\", \"-2px\");\n\t\t\t\tthis._channelDropDown.style.setProperty(\"margin-top\", \"-4px\");\n\t\t\t\tthis._channelNameInput.input.style.setProperty(\"margin-top\", \"-4px\");\n\n\t\t\t}\n\t\t\telse if (ChannelRow.patternHeight < 30) {\n\t\t\t\tthis._channelNameDisplay.style.setProperty(\"margin-top\", \"-1px\");\n\t\t\t\tthis._channelDropDown.style.setProperty(\"margin-top\", \"-3px\");\n\t\t\t\tthis._channelNameInput.input.style.setProperty(\"margin-top\", \"-3px\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._channelNameDisplay.style.setProperty(\"margin-top\", \"0px\");\n\t\t\t\tthis._channelDropDown.style.setProperty(\"margin-top\", \"0px\");\n\t\t\t\tthis._channelNameInput.input.style.setProperty(\"margin-top\", \"-2px\");\n\t\t\t}\n\t\t}\n\t}\n}\n//}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"../synth/SynthConfig\";\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ChangeOctave } from \"./changes\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { Piano } from \"./Piano\";\n\nexport class OctaveScrollBar {\n\tprivate readonly _editorWidth: number = 20;\n\tprivate readonly _editorHeight: number = 481;\n\tprivate readonly _notchHeight: number = 4.0;\n\tprivate readonly _octaveCount: number = Config.pitchOctaves;\n\tprivate readonly _octaveHeight: number = (this._editorHeight - this._notchHeight) / this._octaveCount;\n\t\n\tprivate readonly _handle: SVGRectElement = SVG.rect({fill: ColorConfig.uiWidgetBackground, x: 2, y: 0, width: this._editorWidth - 4});\n\tprivate readonly _handleHighlight: SVGRectElement = SVG.rect({fill: \"none\", stroke: ColorConfig.hoverPreview, \"stroke-width\": 2, \"pointer-events\": \"none\", x: 1, y: 0, width: this._editorWidth - 2});\n\t\tprivate readonly _upHighlight: SVGPathElement = SVG.path({fill: ColorConfig.hoverPreview, \"pointer-events\": \"none\"});\n\t\tprivate readonly _downHighlight: SVGPathElement = SVG.path({fill: ColorConfig.hoverPreview, \"pointer-events\": \"none\"});\n\t\t\n\tprivate readonly _svg: SVGSVGElement = SVG.svg({ style: \"background-color: ${ColorConfig.editorBackground}; touch-action: pan-x; position: absolute;\", width: this._editorWidth, height: \"100%\", viewBox: \"0 0 20 \" + this._editorHeight, preserveAspectRatio: \"none\" });\n\t\tpublic readonly container: HTMLDivElement = HTML.div({id: \"octaveScrollBarContainer\", style: \"width: 20px; height: 100%; overflow: hidden; position: relative; flex-shrink: 0;\"}, this._svg);\n\t\t\n\t//private _mouseX: number = 0;\n\tprivate _mouseY: number = 0;\n\tprivate _mouseDown: boolean = false;\n\tprivate _mouseOver: boolean = false;\n\tprivate _dragging: boolean = false;\n\tprivate _dragStart: number;\n\tprivate _barBottom: number;\n\tprivate _barHeight: number;\n\tprivate _renderedBarBottom: number = -1;\n\tprivate _renderedVisibleOctaveCount: number = -1;\n\tprivate _change: ChangeOctave | null = null;\n\t\t\n\tconstructor(private _doc: SongDocument, private _piano: Piano) {\n\t\tthis._doc.notifier.watch(this._documentChanged);\n\t\tthis._documentChanged();\n\t\t\t\n\t\tthis._svg.appendChild(this._handle);\n\t\t\t\n\t\t// notches:\n\t\tfor (let i: number = 0; i <= this._octaveCount; i++) {\n\t\t\t\tthis._svg.appendChild(SVG.rect({fill: ColorConfig.tonic, x: 0, y: i * this._octaveHeight, width: this._editorWidth, height: this._notchHeight}));\n\t\t}\n\t\t\t\n\t\tthis._svg.appendChild(this._handleHighlight);\n\t\tthis._svg.appendChild(this._upHighlight);\n\t\tthis._svg.appendChild(this._downHighlight);\n\t\t\t\n\t\tconst center: number = this._editorWidth * 0.5;\n\t\tconst base: number = 20;\n\t\tconst tip: number = 9;\n\t\tconst arrowWidth: number = 6;\n\t\tthis._upHighlight.setAttribute(\"d\", `M ${center} ${tip} L ${center + arrowWidth} ${base} L ${center - arrowWidth} ${base} z`);\n\t\tthis._downHighlight.setAttribute(\"d\", `M ${center} ${this._editorHeight - tip} L ${center + arrowWidth} ${this._editorHeight - base} L ${center - arrowWidth} ${this._editorHeight - base} z`);\n\t\t\t\n\t\tthis.container.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"mouseover\", this._whenMouseOver);\n\t\tthis.container.addEventListener(\"mouseout\", this._whenMouseOut);\n\t\t\t\n\t\tthis.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n\t\tthis.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n\t\tthis.container.addEventListener(\"touchend\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"touchcancel\", this._whenCursorReleased);\n\t}\n\t\t\n\tprivate _whenMouseOver = (event: MouseEvent): void => {\n\t\tif (this._mouseOver) return;\n\t\tthis._mouseOver = true;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMouseOut = (event: MouseEvent): void => {\n\t\tif (!this._mouseOver) return;\n\t\tthis._mouseOver = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\t//this._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tif (this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel)) return;\n\t\tthis._updatePreview();\n\t\t\t\n\t\tif (this._mouseY >= this._barBottom - this._barHeight && this._mouseY <= this._barBottom) {\n\t\t\tthis._dragging = true;\n\t\t\tthis._change = null;\n\t\t\tthis._dragStart = this._mouseY;\n\t\t}\n\t}\n\t\t\n\tprivate _whenTouchPressed = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\t//this._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tif (this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel)) return;\n\t\tthis._updatePreview();\n\t\t\t\n\t\tif (this._mouseY >= this._barBottom - this._barHeight && this._mouseY <= this._barBottom) {\n\t\t\tthis._dragging = true;\n\t\t\tthis._change = null;\n\t\t\tthis._dragStart = this._mouseY;\n\t\t}\n\t}\n\t\t\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\t//this._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenTouchMoved = (event: TouchEvent): void => {\n\t\tif (!this._mouseDown) return;\n\t\tevent.preventDefault();\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\t//this._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenCursorMoved(): void {\n\t\tif (this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel)) return;\n\t\tif (this._dragging) {\n\t\t\tconst visibleOctaveCount: number = this._doc.getVisibleOctaveCount();\n\t\t\tconst scrollableOctaves: number = Config.pitchOctaves - visibleOctaveCount;\n\t\t\tconst continuingProspectiveChange: boolean = this._doc.lastChangeWas(this._change);\n\t\t\tconst oldValue: number = continuingProspectiveChange ? this._change!.oldValue : this._doc.song.channels[this._doc.channel].octave;\n\t\t\t\n\t\t\tconst currentOctave: number = this._doc.getBaseVisibleOctave(this._doc.channel);\n\t\t\tlet octave: number = currentOctave;\n\t\t\twhile (this._mouseY - this._dragStart < -this._octaveHeight * 0.5) {\n\t\t\t\t\tif (octave < scrollableOctaves) {\n\t\t\t\t\toctave++;\n\t\t\t\t\tthis._dragStart -= this._octaveHeight;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (this._mouseY - this._dragStart > this._octaveHeight * 0.5) {\n\t\t\t\tif (octave > 0) {\n\t\t\t\t\toctave--;\n\t\t\t\t\tthis._dragStart += this._octaveHeight;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\tthis._change = new ChangeOctave(this._doc, oldValue, Math.floor(octave + visibleOctaveCount * 0.5));\n\t\t\tthis._doc.setProspectiveChange(this._change);\n\t\t}\n\t\t\t\n\t\tif (this._mouseOver) this._updatePreview();\n\t}\n\t\t\n\tprivate _whenCursorReleased = (event: Event): void => {\n\t\tif (!this._doc.song.getChannelIsNoise(this._doc.channel) && !this._doc.song.getChannelIsMod(this._doc.channel) && this._mouseDown) {\n\t\t\tif (this._dragging) {\n\t\t\t\tif (this._change != null) this._doc.record(this._change);\n\t\t\t} else {\n\t\t\t\tconst visibleOctaveCount: number = this._doc.getVisibleOctaveCount();\n\t\t\t\tconst scrollableOctaves: number = Config.pitchOctaves - visibleOctaveCount;\n\t\t\t\tconst canReplaceLastChange: boolean = this._doc.lastChangeWas(this._change);\n\t\t\t\tconst oldValue: number = canReplaceLastChange ? this._change!.oldValue : this._doc.song.channels[this._doc.channel].octave;\n\t\t\t\n\t\t\t\tconst currentOctave: number = this._doc.getBaseVisibleOctave(this._doc.channel);\n\t\t\t\tif (this._mouseY < this._barBottom - this._barHeight * 0.5) {\n\t\t\t\t\tif (currentOctave < scrollableOctaves) {\n\t\t\t\t\t\tthis._change = new ChangeOctave(this._doc, oldValue, Math.floor(currentOctave + 1 + visibleOctaveCount * 0.5));\n\t\t\t\t\t\tthis._doc.record(this._change, canReplaceLastChange);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (currentOctave > 0) {\n\t\t\t\t\t\tthis._change = new ChangeOctave(this._doc, oldValue, Math.floor(currentOctave - 1 + visibleOctaveCount * 0.5));\n\t\t\t\t\t\tthis._doc.record(this._change, canReplaceLastChange);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._mouseDown = false;\n\t\tthis._dragging = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _updatePreview(): void {\n\t\tconst showHighlight: boolean = this._mouseOver && !this._mouseDown;\n\t\tlet showUpHighlight: boolean = false;\n\t\tlet showDownHighlight: boolean = false;\n\t\tlet showHandleHighlight: boolean = false;\n\t\t\t\n\t\tif (showHighlight) {\n\t\t\tif (this._mouseY < this._barBottom - this._barHeight) {\n\t\t\t\tshowUpHighlight = true;\n\t\t\t} else if (this._mouseY > this._barBottom) {\n\t\t\t\tshowDownHighlight = true;\n\t\t\t} else {\n\t\t\t\tshowHandleHighlight = true;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tthis._upHighlight.style.visibility = showUpHighlight ? \"inherit\" : \"hidden\";\n\t\tthis._downHighlight.style.visibility = showDownHighlight ? \"inherit\" : \"hidden\";\n\t\tthis._handleHighlight.style.visibility = showHandleHighlight ? \"inherit\" : \"hidden\";\n\t}\n\t\t\n\tprivate _documentChanged = (): void => {\n\t\tthis._barBottom = this._editorHeight - (this._octaveHeight * this._doc.getBaseVisibleOctave(this._doc.channel));\n\t\tthis._svg.style.visibility = (this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel)) ? \"hidden\" : \"visible\";\n\t\tconst visibleOctaveCount: number = this._doc.getVisibleOctaveCount();\n\t\tif (this._renderedBarBottom != this._barBottom || this._renderedVisibleOctaveCount != visibleOctaveCount) {\n\t\t\tthis._renderedBarBottom = this._barBottom;\n\t\t\tthis._renderedVisibleOctaveCount = visibleOctaveCount;\n\t\t\tthis._barHeight = (this._octaveHeight * visibleOctaveCount + this._notchHeight);\n\t\t\tthis._handle.setAttribute(\"height\", String(this._barHeight));\n\t\t\tthis._handleHighlight.setAttribute(\"height\", String(this._barHeight));\n\t\t\tthis._handle.setAttribute(\"y\", String(this._barBottom - this._barHeight));\n\t\t\tthis._handleHighlight.setAttribute(\"y\", String(this._barBottom - this._barHeight));\n\n\t\t\tthis._piano.forceRender();\n\t\t}\n\t\tthis._updatePreview();\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nexport const defaultMidiExpression: number = 0x7F;\nexport const defaultMidiPitchBend: number = 0x2000;\n\nexport const enum MidiChunkType {\n\theader = 0x4D546864, // \"MThd\" as bytes, big endian\n\ttrack = 0x4D54726B, // \"MTrk\" as bytes, big endian\n}\n\nexport const enum MidiFileFormat {\n\tsingleTrack = 0x0000,\n\tsimultaneousTracks = 0x0001,\n\tindependentTracks = 0x0002,\n}\n\n// Lower 4 bits indicate channel, except for meta and sysex events.\nexport const enum MidiEventType {\n\t//channelMode = 0x70,\n\tnoteOff = 0x80,\n\tnoteOn = 0x90,\n\tkeyPressure = 0xA0,\n\tcontrolChange = 0xB0,\n\tprogramChange = 0xC0,\n\tchannelPressure = 0xD0,\n\tpitchBend = 0xE0,\n\tmetaAndSysex = 0xF0,\n\t\t\n\t// These events are identified by all 8 bits.\n\tmeta = 0xFF,\n\t// sysexStart = 0xF0,\n\t// sysexEscape = 0xF7,\n}\n\nexport const enum MidiControlEventMessage {\n\t\t\n\tsetParameterMSB = 0x06,\n\tvolumeMSB = 0x07,\n\tpanMSB = 0x0A,\n\texpressionMSB = 0x0B,\n\t\t\n\tsetParameterLSB = 0x26,\n\t//volumeLSB = 0x27,\n\t//expressionLSB = 0x2B,\n\t\t\n\t//nonRegisteredParameterNumberLSB = 0x62,\n\t//nonRegisteredParameterNumberMSB = 0x63,\n\tregisteredParameterNumberLSB = 0x64,\n\tregisteredParameterNumberMSB = 0x65,\n\t\t\n\t// Channel mode messages:\n\t/*\n\tallSoundOff = 0x78,\n\tresetControllers = 0x79,\n\tlocalControl = 0x7A,\n\tallNotesOff = 0x7B,\n\tomniModeOff = 0x7C,\n\tomniModeOn = 0x7D,\n\tmonoMode = 0x7E,\n\tpolyphonicMode = 0x7F,\n\t*/\n}\n\nexport const enum MidiRegisteredParameterNumberMSB {\n\tpitchBendRange = 0x00, // semitones\n\tfineTuning = 0x00,\n\tcoarseTuning = 0x00,\n\ttuningProgramSelect = 0x00,\n\ttuningBankSelect = 0x00,\n\treset = 0x7f,\n}\n\nexport const enum MidiRegisteredParameterNumberLSB {\n\tpitchBendRange = 0x00, // cents\n\tfineTuning = 0x01,\n\tcoarseTuning = 0x02,\n\ttuningProgramSelect = 0x03,\n\ttuningBankSelect = 0x04,\n\treset = 0x7f,\n}\n\nexport const enum MidiMetaEventMessage {\n\tsequenceNumber = 0x00,\n\ttext = 0x01,\n\tcopyrightNotice = 0x02,\n\ttrackName = 0x03,\n\tinstrumentName = 0x04,\n\tlyricText = 0x05,\n\tmarker = 0x06,\n\tcuePoint = 0x07,\n\tchannelPrefix = 0x20,\n\tendOfTrack = 0x2F,\n\ttempo = 0x51,\n\tsmpteOffset = 0x54,\n\ttimeSignature = 0x58,\n\tkeySignature = 0x59,\n\tsequencerSpecificEvent = 0x7F,\n}\n\n// BeepBox noise channels are very different from Midi drumsets, but here's my attempt at a conversion from Midi to BeepBox.\nexport interface AnalogousDrum {\n\tfrequency: number;\n\tduration: number;\n\tvolume: number;\n}\nexport const analogousDrumMap: { [K: number]: AnalogousDrum } = {\n\t\t35: { frequency:  0, duration: 2, volume: 3 }, // Acoustic Bass Drum\n\t\t36: { frequency:  0, duration: 2, volume: 3 }, // Bass Drum 1\n\t\t37: { frequency:  5, duration: 1, volume: 3 }, // Side Stick\n\t\t38: { frequency:  4, duration: 2, volume: 3 }, // Acoustic Snare\n\t\t39: { frequency:  5, duration: 2, volume: 3 }, // Hand Clap\n\t\t40: { frequency:  4, duration: 2, volume: 3 }, // Electric Snare\n\t\t41: { frequency:  1, duration: 2, volume: 3 }, // Low Floor Tom\n\t\t42: { frequency:  8, duration: 1, volume: 3 }, // Closed Hi Hat\n\t\t43: { frequency:  1, duration: 2, volume: 3 }, // High Floor Tom\n\t\t44: { frequency:  8, duration: 1, volume: 2 }, // Pedal Hi-Hat\n\t\t45: { frequency:  2, duration: 2, volume: 3 }, // Low Tom\n\t\t46: { frequency:  8, duration: 4, volume: 3 }, // Open Hi-Hat\n\t\t47: { frequency:  2, duration: 2, volume: 3 }, // Low-Mid Tom\n\t\t48: { frequency:  3, duration: 2, volume: 3 }, // Hi-Mid Tom\n\t\t49: { frequency:  7, duration: 4, volume: 3 }, // Crash Cymbal 1\n\t\t50: { frequency:  3, duration: 2, volume: 3 }, // High Tom\n\t\t51: { frequency:  6, duration: 4, volume: 2 }, // Ride Cymbal 1\n\t\t52: { frequency:  7, duration: 4, volume: 3 }, // Chinese Cymbal\n\t\t53: { frequency:  6, duration: 2, volume: 3 }, // Ride Bell\n\t54: { frequency: 11, duration: 2, volume: 3 }, // Tambourine\n\t\t55: { frequency:  9, duration: 4, volume: 3 }, // Splash Cymbal\n\t\t56: { frequency:  7, duration: 1, volume: 2 }, // Cowbell\n\t\t57: { frequency:  7, duration: 4, volume: 3 }, // Crash Cymbal 2\n\t58: { frequency: 10, duration: 2, volume: 2 }, // Vibraslap\n\t\t59: { frequency:  6, duration: 4, volume: 3 }, // Ride Cymbal 2\n\t//60: { frequency:  7, duration: 1, volume: 3 }, // Hi Bongo\n\t//61: { frequency:  5, duration: 1, volume: 3 }, // Low Bongo\n\t//62: { frequency:  6, duration: 1, volume: 3 }, // Mute Hi Conga\n\t//63: { frequency:  5, duration: 1, volume: 3 }, // Open Hi Conga\n\t//64: { frequency:  4, duration: 1, volume: 3 }, // Low Conga\n\t//65: { frequency:  6, duration: 2, volume: 3 }, // High Timbale\n\t//66: { frequency:  4, duration: 2, volume: 3 }, // Low Timbale\n\t//67: { frequency: 10, duration: 1, volume: 2 }, // High Agogo\n\t//68: { frequency:  9, duration: 1, volume: 2 }, // Low Agogo\n\t69: { frequency: 10, duration: 2, volume: 3 }, // Cabasa\n\t70: { frequency: 10, duration: 2, volume: 3 }, // Maracas\n\t//71: { frequency: 10, duration: 2, volume: 3 }, // Short Whistle\n\t//72: { frequency:  9, duration: 2, volume: 3 }, // Long Whistle\n\t73: { frequency: 10, duration: 1, volume: 2 }, // Short Guiro\n\t74: { frequency: 10, duration: 2, volume: 2 }, // Long Guiro\n\t//75: { frequency: 10, duration: 1, volume: 2 }, // Claves\n\t//76: { frequency:  6, duration: 1, volume: 2 }, // Hi Wood Block\n\t//77: { frequency:  5, duration: 1, volume: 2 }, // Low Wood Block\n\t//78: { frequency:  6, duration: 2, volume: 3 }, // Mute Cuica\n\t//79: { frequency:  4, duration: 2, volume: 3 }, // Open Cuica\n\t//80: { frequency:  7, duration: 1, volume: 2 }, // Mute Triangle\n\t//81: { frequency:  7, duration: 4, volume: 2 }, // Open Triangle\n};\n\nexport function midiVolumeToVolumeMult(volume: number): number {\n\t// default midi volume is 100, pow(100/127,4)≈0.384 so I'm considering that the baseline volume.\n\treturn Math.pow(volume / 127, 4.0) / 0.3844015376046128;\n}\nexport function volumeMultToMidiVolume(volumeMult: number): number {\n\treturn Math.pow(volumeMult * 0.3844015376046128, 0.25) * 127;\n}\nexport function midiExpressionToVolumeMult(expression: number): number {\n\treturn Math.pow(expression / 127, 4.0);\n}\nexport function volumeMultToMidiExpression(volumeMult: number): number {\n\treturn Math.pow(volumeMult, 0.25) * 127;\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {SongDocument} from \"./SongDocument\";\nimport {createKeys} from \"../synth/CreateScalesAndKeys\";\nimport {Config} from \"../synth/SynthConfig\";\nimport {AnalogousDrum, analogousDrumMap, MidiEventType} from \"./Midi\";\n\ndeclare global {\n\tinterface Navigator {\n\t\trequestMIDIAccess?(): Promise<any>;\n\t}\n}\n\ninterface MIDIInput extends EventTarget {\n\tid: string;\n\ttype: \"input\" | \"output\";\n\tstate: \"disconnected\" | \"connected\";\n}\n\ninterface MIDIConnectionEvent {\n\tport: MIDIInput;\n}\n\ninterface MIDIMessageEvent {\n\tdata: [type: number, key: number, velocity: number];\n\ttarget: MIDIInput;\n}\n\n// A unique id for this tab.\nconst id: string = ((Math.random() * 0xffffffff) >>> 0).toString(16);\n\nexport class MidiInputHandler {\n\tconstructor(private _doc: SongDocument) {\n\t\tthis.registerMidiAccessHandler();\n\t}\n\t\n\tprivate async registerMidiAccessHandler() {\n\t\tif (navigator.requestMIDIAccess == null) return;\n\t\t\n\t\ttry {\n\t\t\tconst midiAccess = await navigator.requestMIDIAccess();\n\t\t\t\n\t\t\tmidiAccess.inputs.forEach(this._registerMidiInput);\n\t\t\tmidiAccess.addEventListener(\"statechange\", this._handleStateChange);\n\t\t\t\n\t\t\tthis._takeMidiHandlerFocus();\n\t\t\twindow.addEventListener(\"focus\", this._takeMidiHandlerFocus);\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to get MIDI access\", e);\n\t\t}\n\t}\n\t\n\tprivate _takeMidiHandlerFocus = (event?: Event) => {\n\t\t// Record that this browser tab is the one that should handle midi\n\t\t// events and any other open tabs should ignore midi events for now.\n\t\tlocalStorage.setItem(\"midiHandlerId\", id);\n\t}\n\t\n\tprivate _handleStateChange = (event: MIDIConnectionEvent) => {\n\t\tif (event.port.type !== \"input\") return;\n\t\t\n\t\tswitch (event.port.state) {\n\t\t\tcase \"connected\":\n\t\t\t\tthis._registerMidiInput(event.port);\n\t\t\t\tbreak;\n\t\t\tcase \"disconnected\":\n\t\t\t\tthis._unregisterMidiInput(event.port);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tprivate _registerMidiInput = (midiInput: MIDIInput) => {\n\t\tmidiInput.addEventListener(\"midimessage\", this._onMidiMessage as any);\n\t}\n\t\n\tprivate _unregisterMidiInput = (midiInput: MIDIInput) => {\n\t\tmidiInput.removeEventListener(\"midimessage\", this._onMidiMessage as any);\n\t\tthis._doc.performance.clearAllPitches();\n\t}\n\t\n\tprivate _onMidiMessage = (event: MIDIMessageEvent) => {\n\t\t// Ignore midi events if disabled or a different tab is handling them.\n\t\tif (!this._doc.prefs.enableMidi || localStorage.getItem(\"midiHandlerId\") != id) return;\n\t\t\n\t\tconst isDrum: boolean = this._doc.song.getChannelIsNoise(this._doc.channel);\n\t\tlet [eventType, key, velocity] = event.data;\n\t\teventType &= 0xF0;\n\t\t\n\t\tif (isDrum) {\n\t\t\tconst drum: AnalogousDrum | undefined = analogousDrumMap[key];\n\t\t\tif (drum != undefined) {\n\t\t\t\tkey = drum.frequency;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tkey -= createKeys(this._doc.song.edo)[this._doc.song.key].basePitch; // The basePitch of the song key is implicit so don't include it.\n\t\t\tif (key < 0 || key > this._doc.song.edo * Config.pitchOctaves) return;\n\t\t}\n\t\t\n\t\tif (eventType == MidiEventType.noteOn && velocity == 0) {\n\t\t\teventType = MidiEventType.noteOff;\n\t\t}\n\t\t\n\t\tswitch (eventType) {\n\t\t\tcase MidiEventType.noteOn:\n\t\t\t\tthis._doc.synth.preferLowerLatency = true;\n\t\t\t\tthis._doc.performance.addPerformedPitch(key);\n\t\t\t\tbreak;\n\t\t\tcase MidiEventType.noteOff:\n\t\t\t\tthis._doc.performance.removePerformedPitch(key);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {Config} from \"../synth/SynthConfig\";\nimport {createKeys} from \"../synth/CreateScalesAndKeys\";\nimport {SongDocument} from \"./SongDocument\";\n\nexport class KeyboardLayout {\n\tprivate static _pianoAtC: ReadonlyArray<ReadonlyArray<number | null>> = [\n\t\t[   0,   2,   4,   5,   7,   9,  11,  12,  14,  16,  17],\n\t\t[null,   1,   3,null,   6,   8,  10,null,  13,  15,null,  18],\n\t\t[  12,  14,  16,  17,  19,  21,  23,  24,  26,  28,  29,  31,  33],\n\t\t[null,  13,  15,null,  18,  20,  22,null,  25,  27,null,  30,  32],\n\t];\n\tprivate static _pianoAtA: ReadonlyArray<ReadonlyArray<number | null>> = [\n\t\t[   0,   2,   3,   5,   7,   8,  10,  12,  14,  15,  17],\n\t\t[  -1,   1,null,   4,   6,null,   9,  11,  13,null,  16,  18],\n\t\t[  12,  14,  15,  17,  19,  20,  22,  24,  26,  27,  29,  31,  32],\n\t\t[  11,  13,null,  16,  18,null,  21,  23,  25,null,  28,  30,null],\n\t];\n\t\n\tpublic static keyPosToPitch(doc: SongDocument, x: number, y: number, keyboardLayout: string): number | null {\n\t\tlet pitchOffset: number | null = null;\n\t\tlet forcedKey: number | null = null;\n\t\tswitch (keyboardLayout) {\n\t\t\tcase \"wickiHayden\":\n\t\t\t\tpitchOffset = y * 5 + x * 2 - 2;\n\t\t\t\tbreak;\n\t\t\tcase \"songScale\":\n\t\t\t\tconst scaleFlags: ReadonlyArray<boolean> = Config.scales[doc.song.scale].flags;\n\t\t\t\tconst scaleIndices: number[] = <number[]> scaleFlags.map((flag, index) => flag ? index : null).filter((index) => index != null);\n\t\t\t\tpitchOffset = (y - 1 + Math.floor(x / scaleIndices.length)) * doc.song.edo + scaleIndices[(x + scaleIndices.length) % scaleIndices.length];\n\t\t\t\tbreak;\n\t\t\tcase \"pianoAtC\":\n\t\t\t\tpitchOffset = KeyboardLayout._pianoAtC[y][x];\n\t\t\t\tforcedKey = createKeys(doc.song.edo).dictionary[\"C\"].basePitch;\n\t\t\t\tbreak;\n\t\t\tcase \"pianoAtA\":\n\t\t\t\tpitchOffset = KeyboardLayout._pianoAtA[y][x];\n\t\t\t\tforcedKey = createKeys(doc.song.edo).dictionary[\"A\"].basePitch;\n\t\t\t\tbreak;\n\t\t\tcase \"pianoTransposingC\":\n\t\t\t\tpitchOffset = KeyboardLayout._pianoAtC[y][x];\n\t\t\t\tbreak;\n\t\t\tcase \"pianoTransposingA\":\n\t\t\t\tpitchOffset = KeyboardLayout._pianoAtA[y][x];\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif (pitchOffset == null) return null;\n\t\t\n\t\tconst octaveOffset: number = Math.max(0, doc.song.channels[doc.channel].octave - 1) * doc.song.edo;\n\t\tlet keyOffset: number = 0; // The basePitch of the song key is implicit.\n\t\t\n\t\tif (forcedKey != null) {\n\t\t\tconst keyBasePitch: number = createKeys(doc.song.edo)[doc.song.key].basePitch;\n\t\t\tkeyOffset = (forcedKey - keyBasePitch + 144) % doc.song.edo;\n\t\t}\n\t\t\n\t\tconst pitch = octaveOffset + keyOffset + pitchOffset;\n\t\tif (pitch < 0 || pitch > doc.song.edo * Config.pitchOctaves) return null;\n\t\t\t\n\t\treturn pitch;\n\t}\n\t\n\tprivate _possiblyPlayingPitchesFromKeyboard: boolean = false;\n\t\n\tconstructor(private _doc: SongDocument) {\n\t\twindow.addEventListener(\"blur\", this._onWindowBlur);\n\t}\n\t\n\tprivate _onWindowBlur = (event: Event) => {\n\t\t// Browsers don't explicitly release keys when the page isn't in focus so let's just assume they're all released.\n\t\tif (this._possiblyPlayingPitchesFromKeyboard) {\n\t\t\tthis._doc.performance.clearAllPitches();\n\t\t\tthis._possiblyPlayingPitchesFromKeyboard = false;\n\t\t}\n\t}\n\t\n\tpublic handleKeyEvent(event: KeyboardEvent, pressed: boolean): void {\n\t\t// See: https://www.w3.org/TR/uievents-code/#key-alphanumeric-writing-system\n\t\tswitch (event.code) {\n\t\t\tcase \"Backquote\": this.handleKey(-1, 3, pressed); break;\n\t\t\tcase \"Digit1\": this.handleKey(0, 3, pressed); break;\n\t\t\tcase \"Digit2\": this.handleKey(1, 3, pressed); break;\n\t\t\tcase \"Digit3\": this.handleKey(2, 3, pressed); break;\n\t\t\tcase \"Digit4\": this.handleKey(3, 3, pressed); break;\n\t\t\tcase \"Digit5\": this.handleKey(4, 3, pressed); break;\n\t\t\tcase \"Digit6\": this.handleKey(5, 3, pressed); break;\n\t\t\tcase \"Digit7\": this.handleKey(6, 3, pressed); break;\n\t\t\tcase \"Digit8\": this.handleKey(7, 3, pressed); break;\n\t\t\tcase \"Digit9\": this.handleKey(8, 3, pressed); break;\n\t\t\tcase \"Digit0\": this.handleKey(9, 3, pressed); break;\n\t\t\tcase \"Minus\": this.handleKey(10, 3, pressed); break;\n\t\t\tcase \"Equal\": this.handleKey(11, 3, pressed); break;\n\t\t\tcase \"IntlYen\": this.handleKey(12, 3, pressed); break; // Present on Russian and Japanese keyboards.\n\t\t\t\n\t\t\tcase \"KeyQ\": this.handleKey(0, 2, pressed); break;\n\t\t\tcase \"KeyW\": this.handleKey(1, 2, pressed); break;\n\t\t\tcase \"KeyE\": this.handleKey(2, 2, pressed); break;\n\t\t\tcase \"KeyR\": this.handleKey(3, 2, pressed); break;\n\t\t\tcase \"KeyT\": this.handleKey(4, 2, pressed); break;\n\t\t\tcase \"KeyY\": this.handleKey(5, 2, pressed); break;\n\t\t\tcase \"KeyU\": this.handleKey(6, 2, pressed); break;\n\t\t\tcase \"KeyI\": this.handleKey(7, 2, pressed); break;\n\t\t\tcase \"KeyO\": this.handleKey(8, 2, pressed); break;\n\t\t\tcase \"KeyP\": this.handleKey(9, 2, pressed); break;\n\t\t\tcase \"BracketLeft\": this.handleKey(10, 2, pressed); break;\n\t\t\tcase \"BracketRight\": this.handleKey(11, 2, pressed); break;\n\t\t\tcase \"Backslash\":\n\t\t\t\t// Present on US keyboards... but on non-US keyboards it's also used at a different location, see \"IntlHash\" below. :/\n\t\t\t\tif (event.key == \"\\\\\" || event.key == \"|\") {\n\t\t\t\t\tthis.handleKey(12, 2, pressed);\n\t\t\t\t} else {\n\t\t\t\t\tthis.handleKey(11, 1, pressed);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"KeyA\": this.handleKey(0, 1, pressed); break;\n\t\t\tcase \"KeyS\": this.handleKey(1, 1, pressed); break;\n\t\t\tcase \"KeyD\": this.handleKey(2, 1, pressed); break;\n\t\t\tcase \"KeyF\": this.handleKey(3, 1, pressed); break;\n\t\t\tcase \"KeyG\": this.handleKey(4, 1, pressed); break;\n\t\t\tcase \"KeyH\": this.handleKey(5, 1, pressed); break;\n\t\t\tcase \"KeyJ\": this.handleKey(6, 1, pressed); break;\n\t\t\tcase \"KeyK\": this.handleKey(7, 1, pressed); break;\n\t\t\tcase \"KeyL\": this.handleKey(8, 1, pressed); break;\n\t\t\tcase \"Semicolon\": this.handleKey(9, 1, pressed); break;\n\t\t\tcase \"Quote\": this.handleKey(10, 1, pressed); break;\n\t\t\tcase \"IntlHash\": this.handleKey(11, 1, pressed); break; // Present on non-US keyboards... but in practice it is actually represented as \"Backslash\" so this is obsolete. Oh well. :/\n\t\t\t\n\t\t\tcase \"IntlBackslash\": this.handleKey(-1, 0, pressed); break; // Present on Brazillian and many European keyboards.\n\t\t\tcase \"KeyZ\": this.handleKey(0, 0, pressed); break;\n\t\t\tcase \"KeyX\": this.handleKey(1, 0, pressed); break;\n\t\t\tcase \"KeyC\": this.handleKey(2, 0, pressed); break;\n\t\t\tcase \"KeyV\": this.handleKey(3, 0, pressed); break;\n\t\t\tcase \"KeyB\": this.handleKey(4, 0, pressed); break;\n\t\t\tcase \"KeyN\": this.handleKey(5, 0, pressed); break;\n\t\t\tcase \"KeyM\": this.handleKey(6, 0, pressed); break;\n\t\t\tcase \"Comma\": this.handleKey(7, 0, pressed); break;\n\t\t\tcase \"Period\": this.handleKey(8, 0, pressed); break;\n\t\t\tcase \"Slash\": this.handleKey(9, 0, pressed); break;\n\t\t\tcase \"IntlRo\": this.handleKey(10, 0, pressed); break; // Present on Brazillian and Japanese keyboards.\n\t\t\t\n\t\t\tdefault: return; //unhandled, don't prevent default.\n\t\t}\n\t\t\n\t\t// If the key event was handled as a note, prevent default behavior.\n\t\tevent.preventDefault();\n\t}\n\t\n\tpublic handleKey(x: number, y: number, pressed: boolean): void {\n\t\t\n\t\tconst isDrum: boolean = this._doc.song.getChannelIsNoise(this._doc.channel);\n\t\tif (isDrum) {\n\t\t\tif (x >= 0 && x < Config.drumCount) {\n\t\t\t\tif (pressed) {\n\t\t\t\t\tthis._doc.synth.preferLowerLatency = true;\n\t\t\t\t\tthis._doc.performance.addPerformedPitch(x);\n\t\t\t\t\tthis._possiblyPlayingPitchesFromKeyboard = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis._doc.performance.removePerformedPitch(x);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconst pitch: number | null = KeyboardLayout.keyPosToPitch(this._doc, x, y, this._doc.prefs.keyboardLayout);\n\t\t\n\t\tif (pitch != null) {\n\t\t\tif (pressed) {\n\t\t\t\tthis._doc.synth.preferLowerLatency = true;\n\t\t\t\tthis._doc.performance.addPerformedPitch(pitch);\n\t\t\t\tthis._possiblyPlayingPitchesFromKeyboard = true;\n\t\t\t} else {\n\t\t\t\tthis._doc.performance.removePerformedPitch(pitch);\n\t\t\t}\n\t\t}\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Chord, Transition, Config } from \"../synth/SynthConfig\";\nimport { NotePin, Note, makeNotePin, FilterSettings, Channel, Pattern, Instrument, FilterControlPoint } from \"../synth/synth\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Slider } from \"./HTMLWrapper\";\nimport { SongEditor } from \"./SongEditor\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ChangeSequence, UndoableChange } from \"./Change\";\nimport { ChangeVolume, FilterMoveData, ChangeTempo, ChangePan, ChangeReverb, ChangeDistortion, ChangeOperatorAmplitude, ChangeFeedbackAmplitude, ChangePulseWidth, ChangeDetune, ChangeVibratoDepth, ChangeVibratoSpeed, ChangeVibratoDelay, ChangePanDelay, ChangeChorus, ChangeEQFilterSimplePeak, ChangeNoteFilterSimplePeak, ChangeStringSustain, ChangeEnvelopeSpeed, ChangeSupersawDynamism, ChangeSupersawShape, ChangeSupersawSpread, ChangePitchShift, ChangeChannelBar, ChangeDragSelectedNotes, ChangeEnsurePatternExists, ChangeNoteTruncate, ChangeNoteAdded, ChangePatternSelection, ChangePinTime, ChangeSizeBend, ChangePitchBend, ChangePitchAdded, ChangeArpeggioSpeed, ChangeBitcrusherQuantization, ChangeBitcrusherFreq, ChangeEchoSustain, ChangeEQFilterSimpleCut, ChangeNoteFilterSimpleCut, ChangeFilterMovePoint, ChangeDuplicateSelectedReusedPatterns, ChangeHoldingModRecording } from \"./changes\";\nimport { prettyNumber } from \"./EditorConfig\";\n\nfunction makeEmptyReplacementElement<T extends Node>(node: T): T {\n    const clone: T = <T>node.cloneNode(false);\n    node.parentNode!.replaceChild(clone, node);\n    return clone;\n}\n\nclass PatternCursor {\n    public valid: boolean = false;\n    public prevNote: Note | null = null;\n    public curNote: Note | null = null;\n    public nextNote: Note | null = null;\n    public pitch: number = 0;\n    public pitchIndex: number = -1;\n    public curIndex: number = 0;\n    public start: number = 0;\n    public end: number = 0;\n    public part: number = 0;\n    public exactPart: number = 0;\n    public nearPinIndex: number = 0;\n    public pins: NotePin[] = [];\n}\n\nexport class PatternEditor {\n    public controlMode: boolean = false;\n    public shiftMode: boolean = false;\n    private readonly _svgNoteBackground: SVGPatternElement = SVG.pattern({ id: \"patternEditorNoteBackground\" + this._barOffset, x: \"0\", y: \"0\", patternUnits: \"userSpaceOnUse\" });\n    private readonly _svgDrumBackground: SVGPatternElement = SVG.pattern({ id: \"patternEditorDrumBackground\" + this._barOffset, x: \"0\", y: \"0\", patternUnits: \"userSpaceOnUse\" });\n    private readonly _svgModBackground: SVGPatternElement = SVG.pattern({ id: \"patternEditorModBackground\" + this._barOffset, x: \"0\", y: \"0\", patternUnits: \"userSpaceOnUse\" });\n    private readonly _svgBackground: SVGRectElement = SVG.rect({ x: \"0\", y: \"0\", \"pointer-events\": \"none\", fill: \"url(#patternEditorNoteBackground\" + this._barOffset + \")\" });\n    private _svgNoteContainer: SVGSVGElement = SVG.svg();\n    private readonly _svgPlayhead: SVGRectElement = SVG.rect({ x: \"0\", y: \"0\", width: \"4\", fill: ColorConfig.playhead, \"pointer-events\": \"none\" });\n    private readonly _selectionRect: SVGRectElement = SVG.rect({ class: \"dashed-line dash-move\", fill: ColorConfig.boxSelectionFill, stroke: ColorConfig.hoverPreview, \"stroke-width\": 2, \"stroke-dasharray\": \"5, 3\", \"fill-opacity\": \"0.4\", \"pointer-events\": \"none\", visibility: \"hidden\" });\n    private readonly _svgPreview: SVGPathElement = SVG.path({ fill: \"none\", stroke: ColorConfig.hoverPreview, \"stroke-width\": \"2\", \"pointer-events\": \"none\" });\n    public modDragValueLabel: HTMLDivElement = HTML.div({ width: \"90\", \"text-anchor\": \"start\", contenteditable: \"true\", style: \"display: flex, justify-content: center; align-items:center; position:absolute; pointer-events: none;\", \"dominant-baseline\": \"central\", });\n    private readonly _svg: SVGSVGElement = SVG.svg({ style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; position: absolute;`, width: \"100%\", height: \"100%\" },\n        SVG.defs(\n            this._svgNoteBackground,\n            this._svgDrumBackground,\n            this._svgModBackground,\n        ),\n        this._svgBackground,\n        this._selectionRect,\n        this._svgNoteContainer,\n        this._svgPreview,\n        this._svgPlayhead,\n    );\n    public readonly container: HTMLDivElement = HTML.div({ style: \"height: 100%; overflow:hidden; position: relative; flex-grow: 1;\" }, this._svg, this.modDragValueLabel);\n\n    private readonly _defaultModBorder: number = 34;\n    private readonly _backgroundPitchRows: SVGRectElement[] = [];\n    private readonly _backgroundDrumRow: SVGRectElement = SVG.rect();\n    private readonly _backgroundModRow: SVGRectElement = SVG.rect();\n\n    private _editorWidth: number;\n\n    private _modDragValueLabelLeft: number = 0;\n    private _modDragValueLabelTop: number = 0;\n    private _modDragValueLabelWidth: number = 0;\n    public editingModLabel: boolean = false;\n    private _modDragStartValue: number = 0;\n    private _modDragPin: NotePin;\n    private _modDragNote: Note;\n    private _modDragSetting: number;\n    private _modDragLowerBound: number = 0;\n    private _modDragUpperBound: number = 6;\n\n    private _editorHeight: number;\n    private _partWidth: number;\n    private _pitchHeight: number = -1;\n    private _pitchBorder: number;\n    private _pitchCount: number;\n    private _mouseX: number = 0;\n    private _mouseY: number = 0;\n    private _mouseDown: boolean = false;\n    private _mouseOver: boolean = false;\n    private _mouseDragging: boolean = false;\n    private _mouseHorizontal: boolean = false;\n    private _usingTouch: boolean = false;\n    private _copiedPinChannels: NotePin[][] = [];\n    private _copiedPins: NotePin[];\n    private _mouseXStart: number = 0;\n    private _mouseYStart: number = 0;\n    private _touchTime: number = 0;\n    private _shiftHeld: boolean = false;\n    private _dragConfirmed: boolean = false;\n    private _draggingStartOfSelection: boolean = false;\n    private _draggingEndOfSelection: boolean = false;\n    private _draggingSelectionContents: boolean = false;\n    private _dragTime: number = 0;\n    private _dragPitch: number = 0;\n    private _dragSize: number = 0;\n    private _dragVisible: boolean = false;\n    private _dragChange: UndoableChange | null = null;\n    private _changePatternSelection: UndoableChange | null = null;\n    private _lastChangeWasPatternSelection: boolean = false;\n    private _cursor: PatternCursor = new PatternCursor();\n    private _stashCursorPinVols: number[][] = [];\n    private _pattern: Pattern | null = null;\n    private _playheadX: number = 0.0;\n    private _octaveOffset: number = 0;\n    private _renderedWidth: number = -1;\n    private _renderedHeight: number = -1;\n    private _renderedBeatWidth: number = -1;\n    private _renderedPitchHeight: number = -1;\n    private _renderedFifths: boolean = false;\n    private _renderedDrums: boolean = false;\n    private _renderedMod: boolean = false;\n    private _renderedRhythm: number = -1;\n    private _renderedPitchChannelCount: number = -1;\n    private _renderedNoiseChannelCount: number = -1;\n    private _renderedModChannelCount: number = -1;\n    private _followPlayheadBar: number = -1;\n\n    constructor(private _doc: SongDocument, private _interactive: boolean, private _barOffset: number) {\n        for (let i: number = 0; i < _doc.song.edo; i++) {\n            const rectangle: SVGRectElement = SVG.rect();\n            rectangle.setAttribute(\"x\", \"1\");\n            rectangle.setAttribute(\"fill\", (i == 0) ? ColorConfig.tonic : ColorConfig.pitchBackground);\n            this._svgNoteBackground.appendChild(rectangle);\n            this._backgroundPitchRows[i] = rectangle;\n        }\n\n        this._backgroundDrumRow.setAttribute(\"x\", \"1\");\n        this._backgroundDrumRow.setAttribute(\"y\", \"1\");\n        this._backgroundDrumRow.setAttribute(\"fill\", ColorConfig.pitchBackground);\n        this._svgDrumBackground.appendChild(this._backgroundDrumRow);\n        this._backgroundModRow.setAttribute(\"fill\", ColorConfig.pitchBackground);\n        this._svgModBackground.appendChild(this._backgroundModRow);\n\n        if (this._interactive) {\n            this._updateCursorStatus();\n            this._updatePreview();\n            window.requestAnimationFrame(this._animatePlayhead);\n            this._svg.addEventListener(\"mousedown\", this._whenMousePressed);\n            document.addEventListener(\"mousemove\", this._whenMouseMoved);\n            document.addEventListener(\"mouseup\", this._whenCursorReleased);\n            this._svg.addEventListener(\"mouseover\", this._whenMouseOver);\n            this._svg.addEventListener(\"mouseout\", this._whenMouseOut);\n\n            this._svg.addEventListener(\"touchstart\", this._whenTouchPressed);\n            this._svg.addEventListener(\"touchmove\", this._whenTouchMoved);\n            this._svg.addEventListener(\"touchend\", this._whenCursorReleased);\n            this._svg.addEventListener(\"touchcancel\", this._whenCursorReleased);\n\n            this.modDragValueLabel.addEventListener(\"input\", this._validateModDragLabelInput);\n        } else {\n            this._svgPlayhead.style.display = \"none\";\n            this._svg.appendChild(SVG.rect({ x: 0, y: 0, width: 10000, height: 10000, fill: ColorConfig.editorBackground, style: \"opacity: 0.5;\" }));\n        }\n\n        this.resetCopiedPins();\n    }\n\n    private _getMaxPitch(): number {\n\t\treturn this._doc.song.getChannelIsMod(this._doc.channel) ? Config.modCount - 1 : ( this._doc.song.getChannelIsNoise(this._doc.channel) ? Config.drumCount - 1 : this._doc.song.edo * Config.pitchOctaves );\n\t}\n\n    private _validateModDragLabelInput = (event: Event): void => {\n        const label: HTMLDivElement = <HTMLDivElement>event.target;\n\n        // Special case - when user is typing a number between zero and min, allow it (the alternative is quite annoying, when min is nonzero)\n        let converted: number = Number(label.innerText);\n        if (!isNaN(converted) && converted >= 0 && converted < this._modDragLowerBound)\n            return;\n\n        // Another special case - allow \"\" e.g. the empty string and a single negative sign, but don't do anything about it.\n        if (label.innerText != \"\" && label.innerText != \"-\") {\n            // Force NaN results to be 0\n            if (isNaN(converted)) {\n                converted = this._modDragLowerBound;\n                label.innerText = \"\" + this._modDragLowerBound;\n            }\n\n            let presValue: number = Math.floor(Math.max(Number(this._modDragLowerBound), Math.min(Number(this._modDragUpperBound), converted)));\n            if (label.innerText != presValue + \"\")\n                label.innerText = presValue + \"\";\n\n            // This is me being too lazy to fiddle with the css to get it to align center.\n            let xOffset: number = (+(presValue >= 10.0)) + (+(presValue >= 100.0)) + (+(presValue < 0.0)) + (+(presValue <= -10.0));\n            this._modDragValueLabelLeft = +prettyNumber(Math.max(Math.min(this._editorWidth - 10 - xOffset * 8, this._partWidth * (this._modDragNote.start + this._modDragPin.time) - 4 - xOffset * 4), 2));\n            this.modDragValueLabel.style.setProperty(\"left\", \"\" + this._modDragValueLabelLeft + \"px\");\n\n            const sequence: ChangeSequence = new ChangeSequence();\n            this._dragChange = sequence;\n            this._doc.setProspectiveChange(this._dragChange);\n\n            sequence.append(new ChangeSizeBend(this._doc, this._modDragNote, this._modDragPin.time, presValue- Config.modulators[this._modDragSetting].convertRealFactor, this._modDragPin.interval, this.shiftMode));\n\n        }\n    }\n\n    private _getMaxDivision(): number {\n        if (this.controlMode && this._mouseHorizontal)\n            return Config.partsPerBeat;\n        const rhythmStepsPerBeat: number = Config.rhythms[this._doc.song.rhythm].stepsPerBeat;\n        if (rhythmStepsPerBeat % 4 == 0) {\n            // Beat is divisible by 2 (and 4).\n            return Config.partsPerBeat / 2;\n        } else if (rhythmStepsPerBeat % 3 == 0) {\n            // Beat is divisible by 3.\n            return Config.partsPerBeat / 3;\n        } else if (rhythmStepsPerBeat % 2 == 0) {\n            // Beat is divisible by 2.\n            return Config.partsPerBeat / 2;\n        }\n        return Config.partsPerBeat;\n    }\n\n    private _getMinDivision(): number {\n        if (this.controlMode && this._mouseHorizontal)\n            return 1;\n        return Config.partsPerBeat / Config.rhythms[this._doc.song.rhythm].stepsPerBeat;\n    }\n\n    private _snapToMinDivision(input: number): number {\n        const minDivision: number = this._getMinDivision();\n        return Math.floor(input / minDivision) * minDivision;\n    }\n\n    private _updateCursorStatus(): void {\n        this._cursor = new PatternCursor();\n\n        if (this._mouseX < 0 || this._mouseX > this._editorWidth || this._mouseY < 0 || this._mouseY > this._editorHeight || this._pitchHeight <= 0) return;\n\n        const minDivision: number = this._getMinDivision();\n        this._cursor.exactPart = this._mouseX / this._partWidth;\n        this._cursor.part =\n            Math.floor(\n                Math.max(0,\n                    Math.min(this._doc.song.beatsPerBar * Config.partsPerBeat - minDivision, this._cursor.exactPart)\n                )\n                / minDivision) * minDivision;\n\n        let foundNote: boolean = false;\n\n        if (this._pattern != null) {\n            for (const note of this._pattern.notes) {\n                if (note.end <= this._cursor.exactPart) {\n                    if (this._doc.song.getChannelIsMod(this._doc.channel)) {\n                        if (note.pitches[0] == Math.floor(this._findMousePitch(this._mouseY))) {\n                            this._cursor.prevNote = note;\n                        }\n                        if (!foundNote)\n                            this._cursor.curIndex++;\n\n                    } else {\n                        this._cursor.prevNote = note;\n                        this._cursor.curIndex++;\n                    }\n                } else if (note.start <= this._cursor.exactPart && note.end > this._cursor.exactPart) {\n                    if (this._doc.song.getChannelIsMod(this._doc.channel)) {\n                        if (note.pitches[0] == Math.floor(this._findMousePitch(this._mouseY))) {\n                            this._cursor.curNote = note;\n                            foundNote = true;\n                        }\n                        // Only increment index if the sought note has been found... or if this note truly starts before the other\n                        else if (!foundNote || (this._cursor.curNote != null && note.start < this._cursor.curNote.start))\n                            this._cursor.curIndex++;\n                    }\n                    else {\n                        this._cursor.curNote = note;\n                    }\n                } else if (note.start > this._cursor.exactPart) {\n                    if (this._doc.song.getChannelIsMod(this._doc.channel)) {\n                        if (note.pitches[0] == Math.floor(this._findMousePitch(this._mouseY))) {\n                            this._cursor.nextNote = note;\n                            break;\n                        }\n                    } else {\n                        this._cursor.nextNote = note;\n                        break;\n                    }\n                }\n            }\n\n            if (this._doc.song.getChannelIsMod(this._doc.channel) && !this.editingModLabel) {\n\n                if (this._pattern.notes[this._cursor.curIndex] != null && this._cursor.curNote != null) {\n\n                    let pinIdx: number = 0;\n\n                    while (this._cursor.curNote.start + this._cursor.curNote.pins[pinIdx].time < this._cursor.exactPart && pinIdx < this._cursor.curNote.pins.length) {\n                        pinIdx++;\n                    }\n                    // Decide if the previous pin is closer\n                    if (pinIdx > 0) {\n                        if (this._cursor.curNote.start + this._cursor.curNote.pins[pinIdx].time - this._cursor.exactPart > this._cursor.exactPart - (this._cursor.curNote.start + this._cursor.curNote.pins[pinIdx - 1].time)) {\n                            pinIdx--;\n                        }\n                    }\n\n                    this.modDragValueLabel.style.setProperty(\"color\", \"#666688\");\n                    this.modDragValueLabel.style.setProperty(\"display\", \"\");\n                    const mod: number = Math.max( 0, Config.modCount - 1 - this._cursor.curNote.pitches[0]);\n\n                    let setting: number = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument(this._barOffset)].modulators[mod];\n\n                    let presValue: number = this._cursor.curNote.pins[pinIdx].size + Config.modulators[setting].convertRealFactor;\n\n                    // This is me being too lazy to fiddle with the css to get it to align center.\n                    let xOffset: number = (+(presValue >= 10.0)) + (+(presValue >= 100.0)) + (+(presValue < 0.0)) + (+(presValue <= -10.0));\n\n                    this._modDragValueLabelWidth = 8 + xOffset * 8;\n                    this._modDragValueLabelLeft = +prettyNumber(Math.max(Math.min(this._editorWidth - 10 - xOffset * 8, this._partWidth * (this._cursor.curNote.start + this._cursor.curNote.pins[pinIdx].time) - 4 - xOffset * 4), 2));\n                    this._modDragValueLabelTop = +prettyNumber(this._pitchToPixelHeight(this._cursor.curNote.pitches[0] - this._octaveOffset) - 17 - (this._pitchHeight - this._pitchBorder) / 2);\n\n                    this._modDragStartValue = this._cursor.curNote.pins[pinIdx].size;\n                    this._modDragNote = this._cursor.curNote;\n                    this._modDragPin = this._cursor.curNote.pins[pinIdx];\n                    this._modDragLowerBound = Config.modulators[setting].convertRealFactor;\n                    this._modDragUpperBound = Config.modulators[setting].convertRealFactor + Config.modulators[setting].maxRawVol;\n                    this._modDragSetting = setting;\n\n                    this.modDragValueLabel.style.setProperty(\"left\", \"\" + this._modDragValueLabelLeft + \"px\");\n                    this.modDragValueLabel.style.setProperty(\"top\", \"\" + this._modDragValueLabelTop + \"px\");\n                    this.modDragValueLabel.textContent = \"\" + presValue;\n\n                }\n                else {\n                    this.modDragValueLabel.style.setProperty(\"display\", \"none\");\n                    this.modDragValueLabel.style.setProperty(\"pointer-events\", \"none\");\n                    this.modDragValueLabel.setAttribute(\"contenteditable\", \"false\");\n                }\n            }\n            else if (!this.editingModLabel) {\n                this.modDragValueLabel.style.setProperty(\"display\", \"none\");\n                this.modDragValueLabel.style.setProperty(\"pointer-events\", \"none\");\n                this.modDragValueLabel.setAttribute(\"contenteditable\", \"false\");\n            }\n        }\n        else {\n            this.modDragValueLabel.style.setProperty(\"display\", \"none\");\n            this.modDragValueLabel.style.setProperty(\"pointer-events\", \"none\");\n            this.modDragValueLabel.setAttribute(\"contenteditable\", \"false\");\n        }\n\n        let mousePitch: number = this._findMousePitch(this._mouseY);\n\n        if (this._cursor.curNote != null) {\n\n            this._cursor.start = this._cursor.curNote.start;\n            this._cursor.end = this._cursor.curNote.end;\n            this._cursor.pins = this._cursor.curNote.pins;\n\n            let interval: number = 0;\n            let error: number = 0;\n            let prevPin: NotePin;\n            let nextPin: NotePin = this._cursor.curNote.pins[0];\n            for (let j: number = 1; j < this._cursor.curNote.pins.length; j++) {\n                prevPin = nextPin;\n                nextPin = this._cursor.curNote.pins[j];\n                const leftSide: number = this._partWidth * (this._cursor.curNote.start + prevPin.time);\n                const rightSide: number = this._partWidth * (this._cursor.curNote.start + nextPin.time);\n                if (this._mouseX > rightSide) continue;\n                if (this._mouseX < leftSide) throw new Error();\n                const intervalRatio: number = (this._mouseX - leftSide) / (rightSide - leftSide);\n                const arc: number = Math.sqrt(1.0 / Math.sqrt(4.0) - Math.pow(intervalRatio - 0.5, 2.0)) - 0.5;\n                const bendHeight: number = Math.abs(nextPin.interval - prevPin.interval);\n                interval = prevPin.interval * (1.0 - intervalRatio) + nextPin.interval * intervalRatio;\n                error = arc * bendHeight + 0.95;\n                break;\n            }\n\n            let minInterval: number = Number.MAX_VALUE;\n            let maxInterval: number = -Number.MAX_VALUE;\n            let bestDistance: number = Number.MAX_VALUE;\n            for (const pin of this._cursor.curNote.pins) {\n                if (minInterval > pin.interval) minInterval = pin.interval;\n                if (maxInterval < pin.interval) maxInterval = pin.interval;\n                const pinDistance: number = Math.abs(this._cursor.curNote.start + pin.time - this._mouseX / this._partWidth);\n                if (bestDistance > pinDistance) {\n                    bestDistance = pinDistance;\n                    this._cursor.nearPinIndex = this._cursor.curNote.pins.indexOf(pin);\n                }\n            }\n\n            mousePitch -= interval;\n            this._cursor.pitch = this._snapToPitch(mousePitch, -minInterval, this._getMaxPitch() - maxInterval);\n\n            // Snap to nearby existing note if present.\n            if (!this._doc.song.getChannelIsNoise(this._doc.channel) && !this._doc.song.getChannelIsMod(this._doc.channel)) {\n                let nearest: number = error;\n                for (let i: number = 0; i < this._cursor.curNote.pitches.length; i++) {\n                    const distance: number = Math.abs(this._cursor.curNote.pitches[i] - mousePitch + 0.5);\n                    if (distance > nearest) continue;\n                    nearest = distance;\n                    this._cursor.pitch = this._cursor.curNote.pitches[i];\n                }\n            }\n\n            for (let i: number = 0; i < this._cursor.curNote.pitches.length; i++) {\n                if (this._cursor.curNote.pitches[i] == this._cursor.pitch) {\n                    this._cursor.pitchIndex = i;\n                    break;\n                }\n            }\n        } else {\n            this._cursor.pitch = this._snapToPitch(mousePitch, 0, this._getMaxPitch());\n            const defaultLength: number = this._copiedPins[this._copiedPins.length - 1].time;\n            const fullBeats: number = Math.floor(this._cursor.part / Config.partsPerBeat);\n            const maxDivision: number = this._getMaxDivision();\n            const modMouse: number = this._cursor.part % Config.partsPerBeat;\n            if (defaultLength == 1) {\n                this._cursor.start = this._cursor.part;\n            } else if (defaultLength > Config.partsPerBeat) {\n                this._cursor.start = fullBeats * Config.partsPerBeat;\n            } else if (defaultLength == Config.partsPerBeat) {\n                this._cursor.start = fullBeats * Config.partsPerBeat;\n                if (maxDivision < Config.partsPerBeat && modMouse > maxDivision) {\n                    this._cursor.start += Math.floor(modMouse / maxDivision) * maxDivision;\n                }\n            } else {\n                this._cursor.start = fullBeats * Config.partsPerBeat;\n                let division = Config.partsPerBeat % defaultLength == 0 ? defaultLength : Math.min(defaultLength, maxDivision);\n                while (division < maxDivision && Config.partsPerBeat % division != 0) {\n                    division++;\n                }\n                this._cursor.start += Math.floor(modMouse / division) * division;\n            }\n            this._cursor.end = this._cursor.start + defaultLength;\n            let forceStart: number = 0;\n            let forceEnd: number = this._doc.song.beatsPerBar * Config.partsPerBeat;\n            if (this._cursor.prevNote != null) {\n                forceStart = this._cursor.prevNote.end;\n            }\n            if (this._cursor.nextNote != null) {\n                forceEnd = this._cursor.nextNote.start;\n            }\n            if (this._cursor.start < forceStart) {\n                this._cursor.start = forceStart;\n                this._cursor.end = this._cursor.start + defaultLength;\n                if (this._cursor.end > forceEnd) {\n                    this._cursor.end = forceEnd;\n                }\n            } else if (this._cursor.end > forceEnd) {\n                this._cursor.end = forceEnd;\n                this._cursor.start = this._cursor.end - defaultLength;\n                if (this._cursor.start < forceStart) {\n                    this._cursor.start = forceStart;\n                }\n            }\n\n            if (this._cursor.end - this._cursor.start == defaultLength) {\n                if (this._copiedPinChannels.length > this._doc.channel) {\n                    this._copiedPins = this._copiedPinChannels[this._doc.channel];\n                    this._cursor.pins = this._copiedPins;\n                } else {\n                    const cap: number = this._doc.song.getVolumeCap(false);\n                    this._cursor.pins = [makeNotePin(0, 0, cap), makeNotePin(0, maxDivision, cap)];\n                }\n            } else {\n                this._cursor.pins = [];\n                for (const oldPin of this._copiedPins) {\n                    if (oldPin.time <= this._cursor.end - this._cursor.start) {\n                        this._cursor.pins.push(makeNotePin(0, oldPin.time, oldPin.size));\n                        if (oldPin.time == this._cursor.end - this._cursor.start) break;\n                    } else {\n                        this._cursor.pins.push(makeNotePin(0, this._cursor.end - this._cursor.start, oldPin.size));\n                        break;\n                    }\n                }\n            }\n\n            if (this._doc.song.getChannelIsMod(this._doc.channel)) {\n\n                this._cursor.pitch = Math.max(0, Math.min(Config.modCount - 1, this._cursor.pitch));\n\n                // Return cursor to stashed cursor volumes (so pins aren't destroyed by moving the preview around several volume scales.)\n                if (this._stashCursorPinVols != null && this._stashCursorPinVols[this._doc.channel] != null) {\n                    for (let pin: number = 0; pin < this._cursor.pins.length; pin++) {\n                        this._cursor.pins[pin].size = this._stashCursorPinVols[this._doc.channel][pin];\n                    }\n                }\n\n                // Scale volume of copied pin to cap for this row\n                let maxHeight: number = this._doc.song.getVolumeCap(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), this._cursor.pitch);\n                let maxFoundHeight: number = 0;\n                for (const pin of this._cursor.pins) {\n                    if (pin.size > maxFoundHeight) {\n                        maxFoundHeight = pin.size;\n                    }\n                }\n                // Apply scaling if the max height is below any pin setting.\n                if (maxFoundHeight > maxHeight) {\n                    for (const pin of this._cursor.pins) {\n                        pin.size = Math.round(pin.size * (maxHeight / maxFoundHeight));\n                    }\n                }\n            }\n\n        }\n\n        this._cursor.valid = true;\n\n    }\n\n    private _cursorIsInSelection(): boolean {\n        return this._cursor.valid && this._doc.selection.patternSelectionActive && this._doc.selection.patternSelectionStart <= this._cursor.exactPart && this._cursor.exactPart <= this._doc.selection.patternSelectionEnd;\n    }\n\n    private _cursorAtStartOfSelection(): boolean {\n        return this._cursor.valid && this._doc.selection.patternSelectionActive && this._cursor.pitchIndex == -1 && this._doc.selection.patternSelectionStart - 3 <= this._cursor.exactPart && this._cursor.exactPart <= this._doc.selection.patternSelectionStart + 1.25;\n    }\n\n    private _cursorAtEndOfSelection(): boolean {\n        return this._cursor.valid && this._doc.selection.patternSelectionActive && this._cursor.pitchIndex == -1 && this._doc.selection.patternSelectionEnd - 1.25 <= this._cursor.exactPart && this._cursor.exactPart <= this._doc.selection.patternSelectionEnd + 3;\n    }\n\n    private _findMousePitch(pixelY: number): number {\n        return Math.max(0, Math.min(this._pitchCount - 1, this._pitchCount - (pixelY / this._pitchHeight))) + this._octaveOffset;\n    }\n\n    private _snapToPitch(guess: number, min: number, max: number): number {\n        if (guess < min) guess = min;\n        if (guess > max) guess = max;\n        const scale: ReadonlyArray<boolean> = this._doc.prefs.notesOutsideScale ? Config.scales.dictionary[\"Free\"].flags : Config.scales[this._doc.song.scale].flags;\n        if (scale[Math.floor(guess) % this._doc.song.edo] || this._doc.song.getChannelIsNoise(this._doc.channel) || this._doc.song.getChannelIsMod(this._doc.channel)) {\n\n            return Math.floor(guess);\n        } else {\n            let topPitch: number = Math.floor(guess) + 1;\n            let bottomPitch: number = Math.floor(guess) - 1;\n            while (!scale[topPitch % this._doc.song.edo]) {\n                topPitch++;\n            }\n            while (!scale[(bottomPitch) % this._doc.song.edo]) {\n                bottomPitch--;\n            }\n            if (topPitch > max) {\n                if (bottomPitch < min) {\n                    return min;\n                } else {\n                    return bottomPitch;\n                }\n            } else if (bottomPitch < min) {\n                return topPitch;\n            }\n            let topRange: number = topPitch;\n            let bottomRange: number = bottomPitch + 1;\n            if (topPitch % this._doc.song.edo == 0 || topPitch % this._doc.song.edo == 7) {\n                topRange -= 0.5;\n            }\n            if (bottomPitch % this._doc.song.edo == 0 || bottomPitch % this._doc.song.edo == 7) {\n                bottomRange += 0.5;\n            }\n            return guess - bottomRange > topRange - guess ? topPitch : bottomPitch;\n        }\n    }\n\n    private _copyPins(note: Note): void {\n        this._copiedPins = [];\n        for (const oldPin of note.pins) {\n            this._copiedPins.push(makeNotePin(0, oldPin.time, oldPin.size));\n        }\n        for (let i: number = 1; i < this._copiedPins.length - 1;) {\n            if (this._copiedPins[i - 1].size == this._copiedPins[i].size &&\n                this._copiedPins[i].size == this._copiedPins[i + 1].size) {\n                this._copiedPins.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n        this._copiedPinChannels[this._doc.channel] = this._copiedPins;\n\n        this._stashCursorPinVols[this._doc.channel] = [];\n        for (let pin: number = 0; pin < this._copiedPins.length; pin++) {\n            this._stashCursorPinVols[this._doc.channel].push(this._copiedPins[pin].size);\n        }\n    }\n\n    public movePlayheadToMouse(): boolean {\n\t\tif (this._mouseOver) {\n\t\t\tthis._doc.synth.playhead = this._doc.bar + this._barOffset + (this._mouseX / this._editorWidth);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n    public resetCopiedPins = (): void => {\n        const maxDivision: number = this._getMaxDivision();\n        let cap: number = this._doc.song.getVolumeCap(false);\n        this._copiedPinChannels.length = this._doc.song.getChannelCount();\n        this._stashCursorPinVols.length = this._doc.song.getChannelCount();\n        for (let i: number = 0; i < this._doc.song.pitchChannelCount; i++) {\n            this._copiedPinChannels[i] = [makeNotePin(0, 0, cap), makeNotePin(0, maxDivision, cap)];\n            this._stashCursorPinVols[i] = [cap, cap];\n        }\n        for (let i: number = this._doc.song.pitchChannelCount; i < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; i++) {\n            this._copiedPinChannels[i] = [makeNotePin(0, 0, cap), makeNotePin(0, maxDivision, 0)];\n            this._stashCursorPinVols[i] = [cap, 0];\n        }\n        for (let i: number = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; i < this._doc.song.getChannelCount(); i++) {\n            this._copiedPinChannels[i] = [makeNotePin(0, 0, cap), makeNotePin(0, maxDivision, 0)];\n            this._stashCursorPinVols[i] = [cap, 0];\n        }\n    }\n\n    private _animatePlayhead = (timestamp: number): void => {\n\n        if (this._usingTouch && !this.shiftMode && !this._mouseDragging && this._mouseDown && performance.now() > this._touchTime + 1000 && this._cursor.valid && this._doc.lastChangeWas(this._dragChange)) {\n            // On a mobile device, the pattern editor supports using a long stationary touch to activate selection.\n            this._dragChange!.undo();\n            this._shiftHeld = true;\n            this._dragConfirmed = false;\n            this._whenCursorPressed();\n            // The full interface is usually only rerendered in response to user input events, not animation events, but in this case go ahead and rerender everything.\n            this._doc.notifier.notifyWatchers();\n        }\n\n        const playheadBar: number = Math.floor(this._doc.synth.playhead);\n\n        if (this._doc.synth.playing && ((this._pattern != null && this._doc.song.getPattern(this._doc.channel, Math.floor(this._doc.synth.playhead)) == this._pattern) || Math.floor(this._doc.synth.playhead) == this._doc.bar + this._barOffset)) {\n            this._svgPlayhead.setAttribute(\"visibility\", \"visible\");\n            const modPlayhead: number = this._doc.synth.playhead - playheadBar;\n            if (Math.abs(modPlayhead - this._playheadX) > 0.1) {\n                this._playheadX = modPlayhead;\n            } else {\n                this._playheadX += (modPlayhead - this._playheadX) * 0.2;\n            }\n            this._svgPlayhead.setAttribute(\"x\", \"\" + prettyNumber(this._playheadX * this._editorWidth - 2));\n        } else {\n            this._svgPlayhead.setAttribute(\"visibility\", \"hidden\");\n        }\n\n        if (this._doc.synth.playing && (this._doc.synth.recording || this._doc.prefs.autoFollow) && this._followPlayheadBar != playheadBar) {\n            // When autofollow is enabled, select the current bar (but don't record it in undo history).\n            new ChangeChannelBar(this._doc, this._doc.channel, playheadBar);\n            // The full interface is usually only rerendered in response to user input events, not animation events, but in this case go ahead and rerender everything.\n            this._doc.notifier.notifyWatchers();\n        }\n        this._followPlayheadBar = playheadBar;\n\n        if (this._doc.currentPatternIsDirty) {\n            this._redrawNotePatterns();\n        }\n\n        window.requestAnimationFrame(this._animatePlayhead);\n    }\n\n    private _whenMouseOver = (event: MouseEvent): void => {\n        if (this._mouseOver) return;\n        this._mouseOver = true;\n        this._usingTouch = false;\n    }\n\n    private _whenMouseOut = (event: MouseEvent): void => {\n        if (!this._mouseOver) return;\n        this._mouseOver = false;\n    }\n\n    private _whenMousePressed = (event: MouseEvent): void => {\n        event.preventDefault();\n        const boundingRect: ClientRect = this._svg.getBoundingClientRect();\n        this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n        this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n        if (isNaN(this._mouseX)) this._mouseX = 0;\n        if (isNaN(this._mouseY)) this._mouseY = 0;\n        this._usingTouch = false;\n        this._shiftHeld = event.shiftKey;\n        this._dragConfirmed = false;\n        this._whenCursorPressed();\n    }\n\n    private _whenTouchPressed = (event: TouchEvent): void => {\n        event.preventDefault();\n        const boundingRect: ClientRect = this._svg.getBoundingClientRect();\n        this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n        this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n        if (isNaN(this._mouseX)) this._mouseX = 0;\n        if (isNaN(this._mouseY)) this._mouseY = 0;\n        this._usingTouch = true;\n        this._shiftHeld = event.shiftKey;\n        this._dragConfirmed = false;\n        this._touchTime = performance.now();\n        this._whenCursorPressed();\n    }\n\n    \n    // For a given change type, check the modulator channels for a matching mod to the changed parameter. If it exists, add a pin onto the latest note, or make a new note if enough time elapsed since the last pin. \n    public setModSettingsForChange(change: any, songEditor: SongEditor): boolean {\n        const thisRef: PatternEditor = this;\n        const timeQuantum = Math.max(4, (Config.partsPerBeat / Config.rhythms[this._doc.song.rhythm].stepsPerBeat));\n        const currentBar: number = Math.floor(this._doc.synth.playhead);\n        const realPart: number = this._doc.synth.getCurrentPart();\n        let changedPatterns: boolean = false;\n\n        // Ceiling is applied usually to give the synth time to catch the mod updates, but rounds to 0 to avoid skipping the first part.\n        const currentPart: number = (realPart < timeQuantum / 2 ) ? 0 : Math.ceil(realPart / timeQuantum) * timeQuantum;\n\n        // For a given setting and a given channel, find the instrument and mod number that influences the setting.\n        function getMatchingInstrumentAndMod(applyToMod: number, modChannel: Channel, modInsIndex?: number | undefined, modFilterIndex?: number | undefined): number[] {\n            let startIndex: number = (modInsIndex == undefined) ? 0 : modInsIndex;\n            let endIndex: number = (modInsIndex == undefined) ? modChannel.instruments.length - 1 : modInsIndex;\n            for (let instrumentIndex: number = startIndex; instrumentIndex <= endIndex; instrumentIndex++ ) {\n                let instrument: Instrument = modChannel.instruments[instrumentIndex];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    // Non-song application\n                    if ( instrument.modulators[mod] == applyToMod && !Config.modulators[instrument.modulators[mod]].forSong && (instrument.modChannels[mod] == thisRef._doc.channel) ) {\n                        // This is a check if the instrument targeted is relevant. Is it the exact one being edited? An \"all\" or \"active\" target?\n                        // For \"active\" target it doesn't check if the instrument is active, allowing write to other active instruments from an inactive one. Should be fine since audibly while writing you'll hear what you'd expect -\n                        // the current channel's active instruments being modulated, which is what most people would expect even if editing an inactive instrument.\n                        if (  thisRef._doc.getCurrentInstrument() == instrument.modInstruments[mod]\n                            || instrument.modInstruments[mod] >= thisRef._doc.song.channels[thisRef._doc.channel].instruments.length )\n                        {\n                            // If it's an eq/note filter target, one additional step is performed to see if it matches the right modFilterType.\n                            if (modFilterIndex != undefined && (applyToMod == Config.modulators.dictionary[\"eq filter\"].index || applyToMod == Config.modulators.dictionary[\"note filter\"].index)) {\n                                if (instrument.modFilterTypes[mod] == modFilterIndex)\n                                    return [instrumentIndex, mod];\n                            }\n                            else\n                                return [instrumentIndex, mod];\n                        }\n                    }\n                    // Song wide application\n                    else if ( instrument.modulators[mod] == applyToMod && Config.modulators[instrument.modulators[mod]].forSong && (instrument.modChannels[mod] == -1) ) {\n                        return [instrumentIndex, mod];\n                    }\n                }\n            }\n            return [-1, -1];\n        }\n\n        // For the given duration, scans through and removes pins and notes that are within. If two pins of a note cross the interval boundary, the interior pin is moved to the boundary.\n        function sanitizeInterval(doc: SongDocument, startPart: number, endPart: number, pattern: Pattern, forMod: number, sequence: ChangeSequence) {\n            if (startPart >= endPart) return;\n            for (let noteIndex: number = 0; noteIndex < pattern.notes.length; noteIndex++) {\n                const note: Note = pattern.notes[noteIndex];\n                if (note.pitches[0] != forMod)\n                    continue;\n                if (note.start < endPart && note.end > startPart) {\n                    let couldIntersectStart: boolean = false;\n                    let intersectsEnd: boolean = false;\n                    let firstInteriorPin: number = -1;\n                    let interiorPinCount: number = 0;\n\n                    // The interval is spanned by the entire note. Just process internal pins, then done.\n                    if (note.start <= startPart && note.end >= endPart) {\n                        for (let pinIndex: number = 0; pinIndex < note.pins.length; pinIndex++) {\n                            const pin: NotePin = note.pins[pinIndex];\n                            if (note.start + pin.time > startPart && note.start + pin.time < endPart) {\n                                if (firstInteriorPin < 0)\n                                    firstInteriorPin = pinIndex;\n                                interiorPinCount++;\n                            }\n                        }\n                        // Splice pins inside the interval.\n                        if (interiorPinCount > 0)\n                            note.pins.splice(firstInteriorPin, interiorPinCount);\n                        return;\n                    }\n\n                    for (let pinIndex: number = 0; pinIndex < note.pins.length; pinIndex++) {\n                        const pin: NotePin = note.pins[pinIndex];\n                        if (note.start + pin.time >= startPart && note.start + pin.time <= endPart) {\n                            if (firstInteriorPin < 0)\n                                firstInteriorPin = pinIndex;\n                            interiorPinCount++;\n                        }\n                        else {\n                            if (interiorPinCount == 0)\n                                couldIntersectStart = true;\n                            if (interiorPinCount > 0)\n                                intersectsEnd = true;\n                        }\n                    }\n                    if (couldIntersectStart && interiorPinCount > 0) {\n                        note.pins[firstInteriorPin].time = startPart - note.start;\n                        firstInteriorPin++; interiorPinCount--;\n                    }\n                    if (intersectsEnd && interiorPinCount > 0) {\n                        note.pins[firstInteriorPin + interiorPinCount - 1].time = endPart - note.start;\n                        interiorPinCount--;\n                    }\n\n                    // Splice pins inside the interval.\n                    note.pins.splice(firstInteriorPin, interiorPinCount);\n\n                    if (note.pins.length < 2) {\n                        sequence.append(new ChangeNoteAdded(doc, pattern, note, noteIndex, true));\n                        noteIndex--;\n                        continue;\n                    }\n\n                    // Clean up properties.\n                    let timeAdjust: number = 0;\n                    timeAdjust = note.pins[0].time;\n                    note.start += timeAdjust;\n                    for (let i: number = 0; i < note.pins.length; i++) {\n                        note.pins[i].time -= timeAdjust;\n                    }\n                    note.end = note.start + note.pins[note.pins.length - 1].time;\n\n                    if (note.end <= note.start) {\n                        sequence.append(new ChangeNoteAdded(doc, pattern, note, noteIndex, true));\n                        noteIndex--;\n                    }\n                }\n            }\n        }\n\n        const sequence: ChangeSequence = new ChangeSequence();\n\n        const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        let applyToMods: number[] = [];\n        let applyToFilterTargets: number[] = [];\n        let applyValues: number[] = [];\n        let toApply: boolean = true;\n        let slider: Slider | null = null;\n\n        // Special case, treat null change as Song volume.\n        if (change == null) {\n            var modulator = Config.modulators.dictionary[\"song volume\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(this._doc.prefs.volume - modulator.convertRealFactor);\n        }\n        // Also for song volume, when holding the slider at a single value.\n        else if (this._doc.continuingModRecordingChange != null && this._doc.continuingModRecordingChange.storedChange == null && this._doc.continuingModRecordingChange.storedSlider == null) {\n            var modulator = Config.modulators.dictionary[\"song volume\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(this._doc.continuingModRecordingChange.storedValues![0]);\n        }\n        else if (change instanceof ChangeTempo) {\n            var modulator = Config.modulators.dictionary[\"tempo\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(this._doc.song.tempo - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null ) {\n                this._doc.song.tempo = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        /* Song reverb - a casualty of splitting to reverb per instrument, it's not modulate-able via slider!\n        else if (change instanceof ChangeSongReverb) { } */\n        else if (change instanceof ChangeVolume) {\n            var modulator = Config.modulators.dictionary[\"mix volume\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.volume - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null )\n                instrument.volume = slider.getValueBeforeProspectiveChange();\n        }\n        else if (change instanceof ChangePan) {\n            var modulator = Config.modulators.dictionary[\"pan\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.pan - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.pan = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeReverb) {\n            var modulator = Config.modulators.dictionary[\"reverb\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.reverb - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null ) {\n                instrument.reverb = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeDistortion) {\n            var modulator = Config.modulators.dictionary[\"distortion\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.distortion - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null ) {\n                instrument.distortion = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeOperatorAmplitude) {\n            var modulator = Config.modulators.dictionary[\"fm slider \" + (change.operatorIndex + 1)];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.operators[change.operatorIndex].amplitude - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null ) {\n                instrument.operators[change.operatorIndex].amplitude = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeFeedbackAmplitude) {\n            var modulator = Config.modulators.dictionary[\"fm feedback\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.feedbackAmplitude - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null ) {\n                instrument.feedbackAmplitude = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangePulseWidth) {\n            var modulator = Config.modulators.dictionary[\"pulse width\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.pulseWidth - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null ) {\n                instrument.pulseWidth = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeDetune) {\n            var modulator = Config.modulators.dictionary[\"detune\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.detune - modulator.convertRealFactor - Config.detuneCenter);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null ) {\n                instrument.detune = slider.getValueBeforeProspectiveChange() + Config.detuneCenter;\n            }\n        }\n        else if (change instanceof ChangeVibratoDepth) {\n            var modulator = Config.modulators.dictionary[\"vibrato depth\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.vibratoDepth * 25 - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if ( slider != null ) {\n                instrument.vibratoDepth = slider.getValueBeforeProspectiveChange() / 25;\n            }\n        }\n        else if (change instanceof ChangeVibratoSpeed) {\n            var modulator = Config.modulators.dictionary[\"vibrato speed\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.vibratoSpeed - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.vibratoSpeed = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeVibratoDelay) {\n            var modulator = Config.modulators.dictionary[\"vibrato delay\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.vibratoDelay - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.vibratoDelay = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeArpeggioSpeed) {\n            var modulator = Config.modulators.dictionary[\"arp speed\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.arpeggioSpeed - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.arpeggioSpeed = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangePanDelay) {\n            var modulator = Config.modulators.dictionary[\"pan delay\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.panDelay - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.panDelay = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeSequence && change.checkFirst() instanceof ChangeFilterMovePoint && !change.isCommitted()) {\n            // Pushes some pieces of data in each array, to be handled individually down below.\n            //   applyToMods:\n            //     mod index for eqFilter||noteFilter\n            //     mod index for eqFilter||noteFilter\n            //   applyValues:\n            //     new freq\n            //     new gain\n            //   applyToFilterTargets:\n            //     modFilterTarget freq index (X)\n            //     modFilterTarget gain index (Y)\n            //\n            const useChange: ChangeFilterMovePoint = change.checkFirst() as ChangeFilterMovePoint;\n            const preMoveData: FilterMoveData = useChange.getMoveData(true);\n            const postMoveData: FilterMoveData = useChange.getMoveData(false);\n            let useFilter: FilterSettings = instrument.eqFilter;\n            var modulatorIndex;\n\n            if (useChange.useNoteFilter) {\n                modulatorIndex = Config.modulators.dictionary[\"note filter\"].index;\n                useFilter = instrument.noteFilter;\n\n                if (instrument.tmpNoteFilterEnd == null) {\n                    instrument.tmpNoteFilterStart = new FilterSettings();\n                    instrument.tmpNoteFilterStart.fromJsonObject(instrument.noteFilter.toJsonObject());\n                    instrument.tmpNoteFilterEnd = instrument.tmpNoteFilterStart;\n                }\n\n                const modifyPoint: FilterControlPoint | null = instrument.tmpNoteFilterEnd.controlPoints[useChange.pointIndex];\n                if (modifyPoint != null && modifyPoint.type == useChange.pointType) {\n                    modifyPoint.freq = postMoveData.freq;\n                    modifyPoint.gain = postMoveData.gain;\n                }\n            }\n            else {\n                modulatorIndex = Config.modulators.dictionary[\"eq filter\"].index;\n\n                if (instrument.tmpEqFilterEnd == null) {\n                    instrument.tmpEqFilterStart = new FilterSettings();\n                    instrument.tmpEqFilterStart.fromJsonObject(instrument.eqFilter.toJsonObject());\n                    instrument.tmpEqFilterEnd = instrument.tmpEqFilterStart;\n                }\n\n                const modifyPoint: FilterControlPoint | null = instrument.tmpEqFilterEnd.controlPoints[useChange.pointIndex];\n                if (modifyPoint != null && modifyPoint.type == useChange.pointType) {\n                    modifyPoint.freq = postMoveData.freq;\n                    modifyPoint.gain = postMoveData.gain;\n                }\n            }\n\n            applyToMods.push(modulatorIndex);\n            applyToMods.push(modulatorIndex);\n            if (toApply) applyValues.push(postMoveData.freq);\n            if (toApply) applyValues.push(postMoveData.gain);\n\n            // ModFilterTypes indices, one each for X/Y.\n            applyToFilterTargets.push(1 + useChange.pointIndex * 2);\n            applyToFilterTargets.push(1 + useChange.pointIndex * 2 + 1);\n\n            // Reset the original point, if it was the instrument's default eq/note filter.\n            for (let i: number = 0; i < useFilter.controlPointCount; i++) {\n                var point = useFilter.controlPoints[i];\n                if (Object.is(point, preMoveData.point)) {\n                    // Reset the filter point to its previous value, as just the mods are being changed.\n                    point.freq = preMoveData.freq;\n                    point.gain = preMoveData.gain;\n                }\n            }\n            \n        }\n        else if (change instanceof ChangeBitcrusherQuantization) {\n            var modulator = Config.modulators.dictionary[\"bit crush\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.bitcrusherQuantization - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.bitcrusherQuantization = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeBitcrusherFreq) {\n            var modulator = Config.modulators.dictionary[\"freq crush\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.bitcrusherFreq - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.bitcrusherFreq = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeEchoSustain) {\n            var modulator = Config.modulators.dictionary[\"echo\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.echoSustain - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.echoSustain = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeChorus) {\n            var modulator = Config.modulators.dictionary[\"chorus\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.chorus - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.chorus = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeEQFilterSimpleCut) {\n            var modulator = Config.modulators.dictionary[\"eq filt cut\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.eqFilterSimpleCut - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.eqFilterSimpleCut = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeEQFilterSimplePeak) {\n            var modulator = Config.modulators.dictionary[\"eq filt peak\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.eqFilterSimplePeak - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.eqFilterSimplePeak = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeNoteFilterSimpleCut) {\n            var modulator = Config.modulators.dictionary[\"note filt cut\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.noteFilterSimpleCut - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.noteFilterSimpleCut = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeNoteFilterSimplePeak) {\n            var modulator = Config.modulators.dictionary[\"note filt peak\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.noteFilterSimplePeak - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.noteFilterSimplePeak = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangePitchShift) {\n            var modulator = Config.modulators.dictionary[\"pitch shift\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.pitchShift - Config.pitchShiftCenter - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.pitchShift = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeStringSustain) {\n            var modulator = Config.modulators.dictionary[\"sustain\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.stringSustain - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.stringSustain = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeEnvelopeSpeed) {\n            var modulator = Config.modulators.dictionary[\"envelope speed\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.envelopeSpeed - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.envelopeSpeed = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeSupersawDynamism) {\n            var modulator = Config.modulators.dictionary[\"dynamism\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.supersawDynamism - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.supersawDynamism = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeSupersawSpread) {\n            var modulator = Config.modulators.dictionary[\"spread\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.supersawSpread - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.supersawSpread = slider.getValueBeforeProspectiveChange();\n            }\n        }\n        else if (change instanceof ChangeSupersawShape) {\n            var modulator = Config.modulators.dictionary[\"saw shape\"];\n            applyToMods.push(modulator.index);\n            if (toApply) applyValues.push(instrument.supersawShape - modulator.convertRealFactor);\n            // Move the actual value back, since we just want to update the modulated value and not the base slider.\n            slider = songEditor.getSliderForModSetting(modulator.index);\n            if (slider != null) {\n                instrument.supersawShape = slider.getValueBeforeProspectiveChange();\n            }\n        }\n\n        for (let applyIndex: number = 0; applyIndex < applyValues.length; applyIndex++) {\n            applyValues[applyIndex] = Math.round(applyValues[applyIndex]);\n        }\n\n        // Held value from previous call. Used to record flat durations/notes.\n        if (this._doc.continuingModRecordingChange != null && applyToFilterTargets.length == 0) {\n            if (slider == null && this._doc.continuingModRecordingChange.storedSlider != null)\n                slider = this._doc.continuingModRecordingChange.storedSlider;\n            if (slider != null && +slider.input.value == slider.getValueBeforeProspectiveChange()) {\n                applyValues = this._doc.continuingModRecordingChange.storedValues!;\n                toApply = false;\n            }\n            this._doc.continuingModRecordingChange = null;\n        }\n\n        // Set the slider back to its previous value.\n        if ( slider != null )\n            slider.updateValue(slider.getValueBeforeProspectiveChange());\n\n        for (let applyIndex: number = 0; applyIndex < applyToMods.length; applyIndex++ ) {\n            // Search the current bar (and only the current bar) for active instruments (and only active instruments) matching to the related mod to apply to.\n            let usedPatterns: Pattern[] = [];\n            let usedInstruments: Instrument[] = [];\n            let usedInstrumentIndices: number[] = [];\n            let usedModIndices: number[] = [];\n\n            for (let channelIndex: number = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex < this._doc.song.getChannelCount(); channelIndex++) {\n                const channel: Channel = this._doc.song.channels[channelIndex];\n                let pattern: Pattern | null = this._doc.song.getPattern(channelIndex, currentBar);\n                let useInstrumentIndex: number = 0;\n                let useModIndex: number = 0;\n\n                if ( pattern == null ) {\n                    // Hunt for instrument matching this setting and swap to it.\n                    var rtn;\n                    if (applyToFilterTargets.length > applyIndex)\n                        rtn = getMatchingInstrumentAndMod(applyToMods[applyIndex], channel, undefined, applyToFilterTargets[applyIndex]);\n                    else\n                        rtn = getMatchingInstrumentAndMod(applyToMods[applyIndex], channel);\n                    useInstrumentIndex = rtn[0];\n                    useModIndex = rtn[1];\n\n                    // Found it in this channel, but the pattern doesn't exist. So, add a new pattern and swap to that instrument.\n                    if (useInstrumentIndex != -1) {\n                        sequence.append(new ChangeEnsurePatternExists(this._doc, channelIndex, currentBar));\n                        new ChangeDuplicateSelectedReusedPatterns(this._doc, currentBar, 1, channelIndex, 1);\n\n                        pattern = this._doc.song.getPattern(channelIndex, currentBar)!;\n                    \n                        pattern.instruments[0] = useInstrumentIndex;\n\n                        changedPatterns = true;\n                    }\n                }\n                else {\n                    var rtn;\n                    if (applyToFilterTargets.length > applyIndex)\n                        rtn = getMatchingInstrumentAndMod(applyToMods[applyIndex], channel, pattern.instruments[0], applyToFilterTargets[applyIndex]);\n                    else\n                        rtn = getMatchingInstrumentAndMod(applyToMods[applyIndex], channel, pattern.instruments[0]);\n                    useInstrumentIndex = rtn[0];\n                    useModIndex = rtn[1];\n\n                    if (useInstrumentIndex != -1) {\n                        new ChangeDuplicateSelectedReusedPatterns(this._doc, currentBar, 1, channelIndex, 1);\n                        pattern = this._doc.song.getPattern(channelIndex, currentBar);\n\n                        changedPatterns = true;\n                    }\n                }\n\n                if (useInstrumentIndex != -1) {\n                    // Found the appropriate mod channel's mod instrument, mod number, and the pattern to modify (useInstrumentIndex, useModIndex, and pattern respectively).\n                    // Note these as needing modification, but continue on until all channels are checked.\n                    usedPatterns.push(pattern!);\n                    usedInstrumentIndices.push(useInstrumentIndex);\n                    usedInstruments.push(channel.instruments[useInstrumentIndex]);\n                    usedModIndices.push(useModIndex);\n                }\n            }\n\n            // If the setting wasn't found in any channel or instruments, add it to the first unused slot in any channel.\n            if ( usedInstrumentIndices.length == 0 ) {\n                for (let channelIndex: number = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex < this._doc.song.getChannelCount(); channelIndex++) {\n                    const channel: Channel = this._doc.song.channels[channelIndex];\n                    let pattern: Pattern | null = this._doc.song.getPattern(channelIndex, currentBar);\n                    let useInstrument: number = -1;\n                    // If there's a pattern for this channel in this bar, it only makes sense to add the new slot in that instrument somewhere or give up and move to the next.\n                    if ( pattern != null ) {\n                        useInstrument = pattern.instruments[0];\n                    }\n                    // No pattern for this channel, so check through all the instruments for a free slot, and add a pattern if there's a free one.\n                    else {\n                        for ( let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++ ) {\n                            for (let mod: number = 0; mod < Config.modCount; mod++ ) {\n                                if ( channel.instruments[instrumentIndex].modulators[mod] == Config.modulators.dictionary[\"none\"].index ) {\n                                    useInstrument = instrumentIndex;\n\n                                    sequence.append(new ChangeEnsurePatternExists(this._doc, channelIndex, currentBar));\n                    \n                                    pattern = this._doc.song.getPattern(channelIndex, currentBar)!;\n                    \n                                    pattern.instruments[0] = instrumentIndex;\n\n                                    mod = Config.modCount;\n                                    instrumentIndex = channel.instruments.length;\n                                    channelIndex = this._doc.song.getChannelCount();\n\n                                    changedPatterns = true;\n                                }\n                            }\n                        }\n                    }\n\n                    // Found a suitable instrument to use, now add the setting\n                    if ( useInstrument != -1 ) {\n                        let instrument: Instrument = channel.instruments[useInstrument];\n                        for (let mod: number = 0; mod < Config.modCount; mod++) {\n                            if ( instrument.modulators[mod] == Config.modulators.dictionary[\"none\"].index ) {\n                                instrument.modulators[mod] = applyToMods[applyIndex];\n                                if ( Config.modulators[applyToMods[applyIndex]].forSong ) {\n                                    instrument.modChannels[mod] = -1; // Song\n                                }\n                                else {\n                                    instrument.modChannels[mod] = this._doc.channel;\n                                    \n                                    if (this._doc.song.channels[this._doc.channel].instruments.length > 1) {\n                                        // Ctrl key or Shift key: set the new mod target to \"active\" modulation for the most flexibility, if there's more than one instrument in the channel.\n                                        if (!this.controlMode || !this.shiftMode)\n                                            instrument.modInstruments[mod] = this._doc.song.channels[this._doc.channel].instruments.length + 1;\n                                        // Control+Shift key: Set the new mod target to the currently viewed instrument only.\n                                        else\n                                            instrument.modInstruments[mod] = this._doc.getCurrentInstrument();\n                                    }\n                                    else\n                                        instrument.modInstruments[mod] = 0;\n\n                                    // Filter dot. Add appropriate filter target settings (dot# X and dot# Y mod).\n                                    if (applyToFilterTargets.length > applyIndex) {\n                                        instrument.modFilterTypes[mod] = applyToFilterTargets[applyIndex];\n                                    }\n                                }\n\n                                usedPatterns.push(pattern!);\n                                usedInstrumentIndices.push(useInstrument);\n                                usedInstruments.push(instrument);\n                                usedModIndices.push(mod);\n\n                                mod = Config.modCount; channelIndex = this._doc.song.getChannelCount(); // Skip after finding one\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Now, finally, go through all the used patterns/instruments/mods and add appropriate pins\n            for (let i: number = 0; i < usedPatterns.length; i++) {\n\n                // When recording filter dots, have a longer minimum duration to lessen the chance of fighting with active morph mods.\n                const addLength: number = (applyToFilterTargets.length == 0) ? 0 : 24;\n\n                // The distance before previous notes won't be extended and a new one will be created instead. A bit longer at large time quanta since the chance of missing the end of a note is higher.\n                const newNoteDist: number = +(timeQuantum >= 6) * 6 + 12;\n\n                let latestPart: number = -1;\n                let latestNote: Note | null = null;\n                let latestPin: NotePin | null = null;\n                let latestPinIdx: number = -1;\n\n                let prevNotePart: number = -1;\n                let prevNote: Note | null = null;\n\n                // Debug, get an unaltered copy of the current pattern (usedPatterns[i]) for comparison if an error is thrown down below.\n                //let patternCopy: Pattern = JSON.parse(JSON.stringify(usedPatterns[i].notes));\n          \n                // Explicitly set the mod to the applied value, just in case the note we add isn't picked up in the next synth run.\n                const modNoteIndex: number = Config.modCount - 1 - usedModIndices[i];\n                const usedInstrument: Instrument = usedInstruments[i];\n                if ( usedInstrument.modChannels[usedModIndices[i]] >= -1 ) {\n                    // Generate list of used instruments\n                    let usedNewInstrumentIndices: number[] = [];\n                    if (Config.modulators[applyToMods[applyIndex]].forSong) {\n                        // Instrument doesn't matter for song, just push a random index to run the modsynth once\n                        usedNewInstrumentIndices.push(0);\n                    } else {\n                        // All\n                        if (usedInstrument.modInstruments[usedModIndices[i]] == this._doc.synth.song!.channels[usedInstrument.modChannels[usedModIndices[i]]].instruments.length) {\n                            for (let k: number = 0; k < this._doc.synth.song!.channels[usedInstrument.modChannels[usedModIndices[i]]].instruments.length; k++) {\n                                usedNewInstrumentIndices.push(k);\n                            }\n                        }\n                        // Active\n                        else if (usedInstrument.modInstruments[usedModIndices[i]] > this._doc.synth.song!.channels[usedInstrument.modChannels[usedModIndices[i]]].instruments.length) {\n                            if (this._doc.synth.song!.getPattern(usedInstrument.modChannels[usedModIndices[i]], currentBar) != null)\n                                usedNewInstrumentIndices = this._doc.synth.song!.getPattern(usedInstrument.modChannels[usedModIndices[i]], currentBar)!.instruments;\n                        } else {\n                            usedNewInstrumentIndices.push(usedInstrument.modInstruments[usedModIndices[i]]);\n                        }\n                    }\n\n                    for (let instrumentIndex: number = 0; instrumentIndex < usedNewInstrumentIndices.length; instrumentIndex++) {\n                        this._doc.synth.setModValue(applyValues[applyIndex], applyValues[applyIndex], usedInstruments[i].modChannels[usedModIndices[i]], usedNewInstrumentIndices[instrumentIndex], applyToMods[applyIndex] );\n                        this._doc.synth.forceHoldMods(applyValues[applyIndex], usedInstruments[i].modChannels[usedModIndices[i]], usedNewInstrumentIndices[instrumentIndex], applyToMods[applyIndex]);\n                    }\n                }\n                \n                // Scan for a note starting around this point.\n                for ( let j: number = 0; j < usedPatterns[i].notes.length; j++ ) {\n                    const note: Note = usedPatterns[i].notes[j];\n                    if ( note.pitches[0] == modNoteIndex && note.start <= currentPart ) {\n                        // Find latest pin that doesn't exceed this part.\n                        for (let pinIdx: number = 0; pinIdx < note.pins.length; pinIdx++ ) {\n                            const pin: NotePin = note.pins[pinIdx];\n                            // Special case in there to prioritize picking the start of a note over the end of another (though they share the same time).\n                            if ( note.start + pin.time <= currentPart && (note.start + pin.time > latestPart || (note.start == latestPart) ) ) {\n                                latestPart = note.start + pin.time;\n                                latestPin = pin;\n                                latestPinIdx = pinIdx;\n                                latestNote = note;\n                            }\n                        }\n                    }\n\n                    if (note.pitches[0] == modNoteIndex && note.end <= currentPart && note.end > prevNotePart) {\n                        prevNotePart = note.end;\n                        prevNote = note;\n                    }\n                }\n\n                let prevPart: number = Math.max(0, currentPart - timeQuantum);\n                let endPart: number = Math.min(currentPart + timeQuantum + addLength, Config.partsPerBeat * this._doc.song.beatsPerBar);\n\n                let continuous: boolean = (toApply == false);\n\n                // Make a new note if enough time has elapsed since the prior note.\n                if (latestNote == null || currentPart - latestNote.end >= newNoteDist) {\n                    // At end, so unable to make a new note.\n                    if (currentPart == endPart)\n                        continue;\n                    sanitizeInterval(this._doc, currentPart, endPart, usedPatterns[i], modNoteIndex, sequence);\n                    latestNote = new Note(modNoteIndex, currentPart, endPart, applyValues[applyIndex], this._doc.song.getChannelIsNoise(this._doc.channel));\n                    sequence.append(new ChangeNoteAdded(this._doc, usedPatterns[i], latestNote, usedPatterns[i].notes.length));\n                }\n                else if (latestPart == currentPart) {\n                    sanitizeInterval(this._doc, prevPart, currentPart, usedPatterns[i], modNoteIndex, sequence);\n                    sanitizeInterval(this._doc, currentPart, endPart, usedPatterns[i], modNoteIndex, sequence);\n\n                    latestPin!.size = applyValues[applyIndex];\n\n                    if (continuous) {\n                        for (let usePin: number = 0; usePin < latestNote.pins.length; usePin++) {\n                            if (latestNote.pins[usePin].time >= prevPart && latestNote.pins[usePin].time <= currentPart)\n                                latestNote.pins[usePin].size = applyValues[applyIndex];\n                        }\n                    }\n\n                    if (prevNote != null && prevNote.pins.length >= 2) {\n                        // Directly update the overlapping pin.\n                        if (prevNote.end == currentPart) {\n                            prevNote.pins[prevNote.pins.length - 1].size = applyValues[applyIndex];\n\n                            if (continuous) {\n                                for (let usePin: number = 0; usePin < prevNote.pins.length; usePin++) {\n                                    if (prevNote.pins[usePin].time + prevNote.start >= prevPart)\n                                        prevNote.pins[usePin].size = applyValues[applyIndex];\n                                }\n                            }\n                        }\n                        // Bridge the gap from previous note to this.\n                        else if (prevNote.end == prevPart && latestNote.start == currentPart) {\n                            prevNote.pins.push(makeNotePin(0, currentPart - prevNote.start, applyValues[applyIndex]));\n                            prevNote.end = currentPart;\n                        }\n                    }\n                }\n                else if (currentPart - latestPart < 8 && latestNote.pins[latestPinIdx].size == applyValues[applyIndex]) {\n                    // Don't record flat readings, prefer smooth interpolation.\n                    // But, we'll still smooth out previous pins if we're continuously holding.\n                    if (continuous) {\n                        for (let usePin: number = 0; usePin < latestNote.pins.length; usePin++) {\n                            if ( latestNote.pins[usePin].time >= prevPart && latestNote.pins[usePin].time <= currentPart)\n                            latestNote.pins[usePin].size = applyValues[applyIndex];\n                        }\n                    }\n                }\n                else {\n                    // Insert a pin in the current note.\n                    if (latestNote.pins.length - 1 > latestPinIdx) {\n                        sanitizeInterval(this._doc, prevPart, currentPart, usedPatterns[i], modNoteIndex, sequence);\n                        sanitizeInterval(this._doc, currentPart, endPart, usedPatterns[i], modNoteIndex, sequence);\n\n                        // Sanitization can cause a pin to snap to the insertion point. If so, use it instead.\n                        let k: number;\n                        let usePin: NotePin | null = null;\n                        for (k = 0; k < latestNote.pins.length; k++) {\n                            if (latestNote.pins[k].time == currentPart - latestNote.start) {\n                                usePin = latestNote.pins[k];\n                                break;\n                            }\n                            else if (latestNote.pins[k].time > currentPart - latestNote.start)\n                                break;\n                        }\n                        if (usePin != null)\n                            usePin.size = applyValues[applyIndex];\n                        else\n                            latestNote.pins.splice(k, 0, makeNotePin(0, currentPart - latestNote.start, applyValues[applyIndex]));\n                    }\n                    // Push a new pin at the end of the note.\n                    else {\n                        sanitizeInterval(this._doc, prevPart, currentPart, usedPatterns[i], modNoteIndex, sequence);\n                        sanitizeInterval(this._doc, currentPart, endPart, usedPatterns[i], modNoteIndex, sequence);\n                        latestNote.pins.push(makeNotePin(0, currentPart - latestNote.start, applyValues[applyIndex]));\n                        latestNote.end = currentPart;\n                    }\n\n                    if (continuous) {\n                        for (let usePin: number = 0; usePin < latestNote.pins.length; usePin++) {\n                            if ( latestNote.pins[usePin].time >= prevPart && latestNote.pins[usePin].time <= currentPart)\n                            latestNote.pins[usePin].size = applyValues[applyIndex];\n                        }\n                    }\n                }\n\n                // A few sanity checks.\n                let lastNoteEnds: number[] = [-1, -1, -1, -1, -1, -1];\n                usedPatterns[i].notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                for (let checkIndex: number = 0; checkIndex < usedPatterns[i].notes.length; checkIndex++) {\n                    const note: Note = usedPatterns[i].notes[checkIndex];\n                    if (note.start < lastNoteEnds[note.pitches[0]])\n                        throw new Error(\"Error in mod note recording!\");\n                    lastNoteEnds[note.pitches[0]] = note.end;\n                    if (note.pins.length < 2 || note.pins[0].time > 0 || note.start == note.end\n                        || note.pins[note.pins.length - 1].time != note.end - note.start) {\n                        throw new Error(\"Error in mod note recording!\");\n                    }\n                    let latestPinTime: number = -1;\n                    for (let k: number = 0; k < note.pins.length; k++) {\n                        if (note.pins[k].time <= latestPinTime) {\n                            throw new Error(\"Error in mod note recording!\");\n                        }\n                        latestPinTime = note.pins[k].time;\n                    }\n                }\n            }\n        }\n\n        // Re-render mod pattern since it may have new notes in it (e.g. if editing song mods from mod channel)\n        if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n            this._doc.currentPatternIsDirty = true;\n        }\n\n        if (applyValues.length > 0) {\n            //this._doc.record(sequence);\n            this._doc.continuingModRecordingChange = new ChangeHoldingModRecording(this._doc, change, applyValues, slider);\n        }\n\n        return changedPatterns;\n    }\n\n    public stopEditingModLabel(discardChanges: boolean) {\n        if (this.editingModLabel) {\n            this.editingModLabel = false;\n            this.modDragValueLabel.style.setProperty(\"pointer-events\", \"none\");\n\n            if (window.getSelection) {\n                let sel: Selection | null = window.getSelection();\n                if (sel != null)\n                    sel.removeAllRanges();\n            }\n            // Return pin to its state before text editing\n            if (discardChanges) {\n                this._modDragPin.size = this._modDragStartValue;\n\n                let presValue: number = this._modDragStartValue + Config.modulators[this._modDragSetting].convertRealFactor;\n\n                // This is me being too lazy to fiddle with the css to get it to align center.\n                let xOffset: number = (+(presValue >= 10.0)) + (+(presValue >= 100.0)) + (+(presValue < 0.0)) + (+(presValue <= -10.0));\n                this._modDragValueLabelLeft = +prettyNumber(Math.max(Math.min(this._editorWidth - 10 - xOffset * 8, this._partWidth * (this._modDragNote.start + this._modDragPin.time) - 4 - xOffset * 4), 2));\n                this.modDragValueLabel.style.setProperty(\"left\", \"\" + this._modDragValueLabelLeft + \"px\");\n\n                const sequence: ChangeSequence = new ChangeSequence();\n                this._dragChange = sequence;\n                this._doc.setProspectiveChange(this._dragChange);\n\n                sequence.append(new ChangeSizeBend(this._doc, this._modDragNote, this._modDragPin.time, this._modDragStartValue, this._modDragPin.interval, this.shiftMode));\n\n                this._dragChange = null;\n            }\n\n            const continuousState: boolean = this._doc.lastChangeWas(this._dragChange);\n            if (continuousState) {\n                if (this._dragChange != null) {\n                    this._doc.record(this._dragChange);\n                    this._dragChange = null;\n                }\n            }\n        }\n    }\n\n    private _whenCursorPressed(): void {\n        // Check for click on mod value label\n        if (this._doc.song.getChannelIsMod(this._doc.channel) && this.modDragValueLabel.style.getPropertyValue(\"display\") != \"none\" &&\n            this._mouseX > +this._modDragValueLabelLeft - 6 &&\n            this._mouseX < +this._modDragValueLabelLeft + this._modDragValueLabelWidth + 6 &&\n            this._mouseY > +this._modDragValueLabelTop - 8 &&\n            this._mouseY < +this._modDragValueLabelTop + 11) {\n            // Mod value label clicked, select it\n            this.modDragValueLabel.style.setProperty(\"pointer-events\", \"fill\");\n            this.modDragValueLabel.setAttribute(\"contenteditable\", \"true\");\n            if (window.getSelection) {\n                let sel: Selection | null = window.getSelection();\n                if (sel != null)\n                    sel.selectAllChildren(this.modDragValueLabel);\n            }\n\n            window.setTimeout(() => { this.modDragValueLabel.focus(); });\n            this.editingModLabel = true;\n        } else {\n            this.stopEditingModLabel(false);\n            if (this._doc.prefs.enableNotePreview) this._doc.synth.maintainLiveInput();\n            this._mouseDown = true;\n            this._mouseXStart = this._mouseX;\n            this._mouseYStart = this._mouseY;\n            this._updateCursorStatus();\n            this._updatePreview();\n            const sequence: ChangeSequence = new ChangeSequence();\n            this._dragChange = sequence;\n            this._lastChangeWasPatternSelection = this._doc.lastChangeWas(this._changePatternSelection);\n            this._doc.setProspectiveChange(this._dragChange);\n\n            if (this._cursorAtStartOfSelection()) {\n                this._draggingStartOfSelection = true;\n            } else if (this._cursorAtEndOfSelection()) {\n                this._draggingEndOfSelection = true;\n            } else if (this._shiftHeld) {\n                if ((this._doc.selection.patternSelectionActive && this._cursor.pitchIndex == -1) || this._cursorIsInSelection()) {\n                    sequence.append(new ChangePatternSelection(this._doc, 0, 0));\n                } else {\n                    if (this._cursor.curNote != null) {\n                        sequence.append(new ChangePatternSelection(this._doc, this._cursor.curNote.start, this._cursor.curNote.end));\n                    } else {\n                        const start: number = Math.max(0, Math.min((this._doc.song.beatsPerBar - 1) * Config.partsPerBeat, Math.floor(this._cursor.exactPart / Config.partsPerBeat) * Config.partsPerBeat));\n                        const end: number = start + Config.partsPerBeat;\n                        sequence.append(new ChangePatternSelection(this._doc, start, end));\n                    }\n                }\n            } else if (this._cursorIsInSelection()) {\n                this._draggingSelectionContents = true;\n            } else if (this._cursor.valid && this._cursor.curNote == null) {\n                sequence.append(new ChangePatternSelection(this._doc, 0, 0));\n\n                // If clicking in empty space, the result will be adding a note,\n                // so we can safely add it immediately. Note that if clicking on\n                // or near an existing note, the result will depend on whether\n                // a drag follows, so we couldn't add the note yet without being\n                // confusing.\n\n                const note: Note = new Note(this._cursor.pitch, this._cursor.start, this._cursor.end, Config.noteSizeMax, this._doc.song.getChannelIsNoise(this._doc.channel));\n                note.pins = [];\n                for (const oldPin of this._cursor.pins) {\n                    note.pins.push(makeNotePin(0, oldPin.time, oldPin.size));\n                }\n                sequence.append(new ChangeEnsurePatternExists(this._doc, this._doc.channel, this._doc.bar));\n                const pattern: Pattern | null = this._doc.getCurrentPattern(this._barOffset);\n                if (pattern == null) throw new Error();\n                sequence.append(new ChangeNoteAdded(this._doc, pattern, note, this._cursor.curIndex));\n\n                if (this._doc.prefs.enableNotePreview && !this._doc.synth.playing) {\n                    // Play the new note out loud if enabled.\n                    const duration: number = Math.min(Config.partsPerBeat, this._cursor.end - this._cursor.start);\n                    this._doc.performance.setTemporaryPitches([this._cursor.pitch], duration);\n                }\n            }\n            this._updateSelection();\n        }\n    }\n\n    private _whenMouseMoved = (event: MouseEvent): void => {\n        this.controlMode = event.ctrlKey;\n        this.shiftMode = event.shiftKey;\n\n        const boundingRect: ClientRect = this._svg.getBoundingClientRect();\n        this._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n        this._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n        if (isNaN(this._mouseX)) this._mouseX = 0;\n        if (isNaN(this._mouseY)) this._mouseY = 0;\n        this._usingTouch = false;\n        this._whenCursorMoved();\n    }\n\n    private _whenTouchMoved = (event: TouchEvent): void => {\n        if (!this._mouseDown) return;\n        event.preventDefault();\n        const boundingRect: ClientRect = this._svg.getBoundingClientRect();\n        this._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n        this._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n        if (isNaN(this._mouseX)) this._mouseX = 0;\n        if (isNaN(this._mouseY)) this._mouseY = 0;\n        this._whenCursorMoved();\n    }\n\n    private _whenCursorMoved(): void {\n        if (this._doc.prefs.enableNotePreview && this._mouseOver) this._doc.synth.maintainLiveInput();\n\n        // HACK: Undoable pattern changes rely on persistent instance\n        // references. Loading song from hash via undo/redo breaks that,\n        // so changes are no longer undoable and the cursor status may be\n        // invalid. Abort further drag changes until the mouse is released.\n        const continuousState: boolean = this._doc.lastChangeWas(this._dragChange);\n\n        if (!this._mouseDragging && this._mouseDown && this._cursor.valid && continuousState) {\n            const dx: number = this._mouseX - this._mouseXStart;\n            const dy: number = this._mouseY - this._mouseYStart;\n            if (Math.sqrt(dx * dx + dy * dy) > 5) {\n                this._mouseDragging = true;\n                this._mouseHorizontal = Math.abs(dx) >= Math.abs(dy);\n            }\n        }\n\n        if (this._shiftHeld && this._mouseHorizontal && Math.abs(this._mouseXStart - this._mouseX) > 5) {\n            this._dragConfirmed = true;\n        }\n\n        if (this._mouseDragging && this._mouseDown && this._cursor.valid && continuousState) {\n            this._dragChange!.undo();\n            const sequence: ChangeSequence = new ChangeSequence();\n            this._dragChange = sequence;\n            this._doc.setProspectiveChange(this._dragChange);\n\n            const minDivision: number = this._getMinDivision();\n            const currentPart: number = this._snapToMinDivision(this._mouseX / this._partWidth);\n            if (this._draggingStartOfSelection) {\n                sequence.append(new ChangePatternSelection(this._doc, Math.max(0, Math.min(this._doc.song.beatsPerBar * Config.partsPerBeat, currentPart)), this._doc.selection.patternSelectionEnd));\n                this._updateSelection();\n            } else if (this._draggingEndOfSelection) {\n                sequence.append(new ChangePatternSelection(this._doc, this._doc.selection.patternSelectionStart, Math.max(0, Math.min(this._doc.song.beatsPerBar * Config.partsPerBeat, currentPart))));\n                this._updateSelection();\n            } else if (this._draggingSelectionContents) {\n                const pattern: Pattern | null = this._doc.getCurrentPattern(this._barOffset);\n                if (this._mouseDragging && pattern != null) {\n                    this._dragChange!.undo();\n                    const sequence: ChangeSequence = new ChangeSequence();\n                    this._dragChange = sequence;\n                    this._doc.setProspectiveChange(this._dragChange);\n\n                    const notesInScale: number = Config.scales[this._doc.song.scale].flags.filter(x => x).length;\n                    const pitchRatio: number = this._doc.song.getChannelIsNoise(this._doc.channel) ? 1 : 12 / notesInScale;\n                    const draggedParts: number = Math.round((this._mouseX - this._mouseXStart) / (this._partWidth * minDivision)) * minDivision;\n                    const draggedTranspose: number = Math.round((this._mouseYStart - this._mouseY) / (this._pitchHeight * pitchRatio));\n                    sequence.append(new ChangeDragSelectedNotes(this._doc, this._doc.channel, pattern, draggedParts, draggedTranspose));\n                }\n\n            } else if (this._shiftHeld && this._dragConfirmed) {\n\n                if (this._mouseDragging) {\n                    let start: number = Math.max(0, Math.min((this._doc.song.beatsPerBar - 1) * Config.partsPerBeat, Math.floor(this._cursor.exactPart / Config.partsPerBeat) * Config.partsPerBeat));\n                    let end: number = start + Config.partsPerBeat;\n                    if (this._cursor.curNote != null) {\n                        start = Math.max(start, this._cursor.curNote.start);\n                        end = Math.min(end, this._cursor.curNote.end);\n                    }\n\n                    // Todo: The following two conditional blocks could maybe be refactored.\n                    if (currentPart < start) {\n                        start = 0;\n                        const pattern: Pattern | null = this._doc.getCurrentPattern(this._barOffset);\n                        if (pattern != null) {\n                            for (let i: number = 0; i < pattern.notes.length; i++) {\n                                if (pattern.notes[i].start <= currentPart) {\n                                    start = pattern.notes[i].start;\n                                }\n                                if (pattern.notes[i].end <= currentPart) {\n                                    start = pattern.notes[i].end;\n                                }\n                            }\n                        }\n                        for (let beat: number = 0; beat <= this._doc.song.beatsPerBar; beat++) {\n                            const part: number = beat * Config.partsPerBeat;\n                            if (start <= part && part <= currentPart) {\n                                start = part;\n                            }\n                        }\n                    }\n\n                    if (currentPart > end) {\n                        end = Config.partsPerBeat * this._doc.song.beatsPerBar;\n                        const pattern: Pattern | null = this._doc.getCurrentPattern(this._barOffset);\n                        if (pattern != null) {\n                            for (let i: number = 0; i < pattern.notes.length; i++) {\n                                if (pattern.notes[i].start >= currentPart) {\n                                    end = pattern.notes[i].start;\n                                    break;\n                                }\n                                if (pattern.notes[i].end >= currentPart) {\n                                    end = pattern.notes[i].end;\n                                    break;\n                                }\n                            }\n                        }\n                        for (let beat: number = 0; beat <= this._doc.song.beatsPerBar; beat++) {\n                            const part: number = beat * Config.partsPerBeat;\n                            if (currentPart < part && part < end) {\n                                end = part;\n                            }\n                        }\n                    }\n\n                    sequence.append(new ChangePatternSelection(this._doc, start, end));\n                    this._updateSelection();\n                }\n            } else {\n\n                if (this._cursor.curNote == null) {\n                    sequence.append(new ChangePatternSelection(this._doc, 0, 0));\n\n\n                    let backwards: boolean;\n                    let directLength: number;\n                    if (currentPart < this._cursor.start) {\n                        backwards = true;\n                        directLength = this._cursor.start - currentPart;\n                    } else {\n                        backwards = false;\n                        directLength = currentPart - this._cursor.start + minDivision;\n                    }\n\n                    let defaultLength: number = minDivision;\n                    for (let i: number = minDivision; i <= this._doc.song.beatsPerBar * Config.partsPerBeat; i += minDivision) {\n                        if (minDivision == 1) {\n                            if (i < 5) {\n                                // Allow small lengths.\n                            } else if (i <= Config.partsPerBeat / 2.0) {\n                                if (i % 3 != 0 && i % 4 != 0) {\n                                    continue;\n                                }\n                            } else if (i <= Config.partsPerBeat * 1.5) {\n                                if (i % 6 != 0 && i % 8 != 0) {\n                                    continue;\n                                }\n                            } else if (i % Config.partsPerBeat != 0) {\n                                continue;\n                            }\n                        } else {\n                            if (i >= 5 * minDivision &&\n                                i % Config.partsPerBeat != 0 &&\n                                i != Config.partsPerBeat * 3.0 / 4.0 &&\n                                i != Config.partsPerBeat * 3.0 / 2.0 &&\n                                i != Config.partsPerBeat * 4.0 / 3.0) {\n                                continue;\n                            }\n                        }\n\n                        const blessedLength: number = i;\n                        if (blessedLength == directLength) {\n                            defaultLength = blessedLength;\n                            break;\n                        }\n                        if (blessedLength < directLength) {\n                            defaultLength = blessedLength;\n                        }\n\n                        if (blessedLength > directLength) {\n                            if (defaultLength < directLength - minDivision) {\n                                defaultLength = blessedLength;\n                            }\n                            break;\n                        }\n                    }\n\n                    let start: number;\n                    let end: number;\n\n                    if (backwards) {\n                        end = this._cursor.start;\n                        start = end - defaultLength;\n                    } else {\n                        start = this._cursor.start;\n                        end = start + defaultLength;\n                    }\n                    const continuesLastPattern: boolean = (start < 0 && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount);\n                    if (start < 0) start = 0;\n                    if (end > this._doc.song.beatsPerBar * Config.partsPerBeat) end = this._doc.song.beatsPerBar * Config.partsPerBeat;\n\n                    if (start < end) {\n                        sequence.append(new ChangeEnsurePatternExists(this._doc, this._doc.channel, this._doc.bar));\n                        const pattern: Pattern | null = this._doc.getCurrentPattern(this._barOffset);\n                        if (pattern == null) throw new Error();\n                        // Using parameter skipNote to force proper \"collision\" checking vis-a-vis pitch for mod channels.\n                        sequence.append(new ChangeNoteTruncate(this._doc, pattern, start, end, new Note(this._cursor.pitch, 0, 0, 0)));\n                        let i: number;\n                        for (i = 0; i < pattern.notes.length; i++) {\n                            if (pattern.notes[i].start >= end) break;\n                        }\n                        const theNote: Note = new Note(this._cursor.pitch, start, end,\n                            this._doc.song.getNewNoteVolume(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), this._cursor.pitch),\n                            this._doc.song.getChannelIsNoise(this._doc.channel));\n                        theNote.continuesLastPattern = continuesLastPattern;\n                        sequence.append(new ChangeNoteAdded(this._doc, pattern, theNote, i));\n                        this._copyPins(theNote);\n\n                        this._dragTime = backwards ? start : end;\n                        this._dragPitch = this._cursor.pitch;\n                        this._dragSize = theNote.pins[backwards ? 0 : 1].size;\n                        this._dragVisible = true;\n                    }\n\n                    let prevPattern: Pattern | null = this._pattern;\n\n                    this._pattern = this._doc.getCurrentPattern(this._barOffset);\n\n                    if (this._pattern != null && this._doc.song.getChannelIsMod(this._doc.channel) && this._interactive && prevPattern != this._pattern) {\n                        // Need to re-sort the notes by start time as they might change order if user drags them around.\n                        this._pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                    }\n\n                } else if (this._mouseHorizontal) {\n\n                    sequence.append(new ChangePatternSelection(this._doc, 0, 0));\n\n                    const shift: number = (this._mouseX - this._mouseXStart) / this._partWidth;\n\n                    const shiftedPin: NotePin = this._cursor.curNote.pins[this._cursor.nearPinIndex];\n                    let shiftedTime: number = Math.round((this._cursor.curNote.start + shiftedPin.time + shift) / minDivision) * minDivision;\n                    const continuesLastPattern: boolean = (shiftedTime < 0.0 && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount);\n                    if (shiftedTime < 0) shiftedTime = 0;\n                    if (shiftedTime > this._doc.song.beatsPerBar * Config.partsPerBeat) shiftedTime = this._doc.song.beatsPerBar * Config.partsPerBeat;\n\n                    if (this._pattern == null) throw new Error();\n\n                    if (shiftedTime <= this._cursor.curNote.start && this._cursor.nearPinIndex == this._cursor.curNote.pins.length - 1 ||\n                        shiftedTime >= this._cursor.curNote.end && this._cursor.nearPinIndex == 0) {\n\n                        sequence.append(new ChangeNoteAdded(this._doc, this._pattern, this._cursor.curNote, this._cursor.curIndex, true));\n\n                        this._dragVisible = false;\n                    } else {\n                        const start: number = Math.min(this._cursor.curNote.start, shiftedTime);\n                        const end: number = Math.max(this._cursor.curNote.end, shiftedTime);\n\n                        this._dragTime = shiftedTime;\n                        this._dragPitch = this._cursor.curNote.pitches[this._cursor.pitchIndex == -1 ? 0 : this._cursor.pitchIndex] + this._cursor.curNote.pins[this._cursor.nearPinIndex].interval;\n                        this._dragSize = this._cursor.curNote.pins[this._cursor.nearPinIndex].size;\n                        this._dragVisible = true;\n\n                        sequence.append(new ChangeNoteTruncate(this._doc, this._pattern, start, end, this._cursor.curNote));\n                        sequence.append(new ChangePinTime(this._doc, this._cursor.curNote, this._cursor.nearPinIndex, shiftedTime, continuesLastPattern));\n                        this._copyPins(this._cursor.curNote);\n                    }\n                } else if (this._cursor.pitchIndex == -1 || this._doc.song.getChannelIsMod(this._doc.channel)) {\n\n                    if (!this._mouseDragging)\n                    sequence.append(new ChangePatternSelection(this._doc, 0, 0));\n\n                    const bendPart: number =\n                        Math.max(this._cursor.curNote.start,\n                            Math.min(this._cursor.curNote.end,\n                                Math.round(this._mouseX / (this._partWidth * minDivision)) * minDivision\n                            )\n                        ) - this._cursor.curNote.start;\n\n                    let prevPin: NotePin;\n                    let nextPin: NotePin = this._cursor.curNote.pins[0];\n                    let bendSize: number = 0;\n                    let bendInterval: number = 0;\n                    let cap: number = this._doc.song.getVolumeCap(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), this._cursor.pitch);\n\n                    // Dragging gets a bit faster after difference in drag counts is >8.\n                    let dragFactorSlow: number = 25.0 / Math.pow(cap, 0.4);\n                    let dragFactorFast: number = 22.0 / Math.pow(cap, 0.5);\n                    let dragSign: number = (this._mouseYStart > this._mouseY ? 1 : -1);\n                    let dragCounts: number = Math.min(Math.abs(this._mouseYStart - this._mouseY) / dragFactorSlow, 8) + Math.max(0, Math.abs(this._mouseYStart - this._mouseY) / dragFactorFast - 8);\n\n                    // Note volume drag overrides attempts to make a pattern selection\n                    if (dragCounts > 0) {\n                        this._shiftHeld = false;\n                    }\n\n                    for (let i: number = 1; i < this._cursor.curNote.pins.length; i++) {\n                        prevPin = nextPin;\n                        nextPin = this._cursor.curNote.pins[i];\n                        if (bendPart > nextPin.time) continue;\n                        if (bendPart < prevPin.time) throw new Error();\n                        const sizeRatio: number = (bendPart - prevPin.time) / (nextPin.time - prevPin.time);\n                        bendSize = Math.round(prevPin.size * (1.0 - sizeRatio) + nextPin.size * sizeRatio + dragSign * dragCounts);\n                        // If not in fine control mode, round to 0~2~4~6 (normal 4 settings)\n                        if (!this.controlMode && !this._doc.prefs.alwaysFineNoteVol && !this._doc.song.getChannelIsMod(this._doc.channel)) {\n                            bendSize = Math.floor(bendSize / 2) * 2;\n                        }\n                        if (bendSize < 0) bendSize = 0;\n                        if (bendSize > cap) bendSize = cap;\n                        bendInterval = this._snapToPitch(prevPin.interval * (1.0 - sizeRatio) + nextPin.interval * sizeRatio + this._cursor.curNote.pitches[0], 0, this._getMaxPitch()) - this._cursor.curNote.pitches[0];\n                        break;\n                    }\n                    if (this._doc.song.getChannelIsMod(this._doc.channel) && this.controlMode) {\n                        // Link bend to the next note over\n                        if (bendPart >= this._cursor.curNote.pins[this._cursor.curNote.pins.length - 1].time) {\n                            if (this._cursor.curNote.start + this._cursor.curNote.pins[this._cursor.curNote.pins.length - 1].time < this._doc.song.beatsPerBar * Config.partsPerBeat) {\n                                for (const note of this._pattern!.notes) {\n                                    if (note.start == this._cursor.curNote.start + this._cursor.curNote.pins[this._cursor.curNote.pins.length - 1].time && note.pitches[0] == this._cursor.curNote.pitches[0]) {\n                                        sequence.append(new ChangeSizeBend(this._doc, note, note.pins[0].time, bendSize, bendInterval, this.shiftMode));\n                                    }\n                                }\n                            }\n                            else {\n                                // Try to bend to the next pattern over. Only do this if a note starts at 0, and instrument is identical in next pattern.\n                                const nextPattern: Pattern | null = this._doc.getCurrentPattern(1);\n\n                                if (nextPattern != null && nextPattern.instruments[0] == this._pattern!.instruments[0]) {\n                                    for (const note of nextPattern.notes) {\n                                        if (note.start == 0 && note.pitches[0] == this._cursor.curNote.pitches[0]) {\n                                            sequence.append(new ChangeSizeBend(this._doc, note, note.pins[0].time, bendSize, bendInterval, this.shiftMode));\n                                        }\n                                    }\n                                }\n\n                            }\n                        }\n                        // Link bend to the previous note\n                        else if (bendPart <= this._cursor.curNote.pins[0].time) {\n                            if (this._cursor.curNote.start > 0) {\n                                for (const note of this._pattern!.notes) {\n                                    if (note.end == this._cursor.curNote.start && note.pitches[0] == this._cursor.curNote.pitches[0]) {\n                                        sequence.append(new ChangeSizeBend(this._doc, note, note.pins[note.pins.length - 1].time, bendSize, bendInterval, this.shiftMode));\n                                    }\n                                }\n                            }\n                            else {\n                                // Try to bend to the previous pattern over. Only do this if a note starts at the end, and instrument is identical in previous pattern.\n                                const prevPattern: Pattern | null = this._doc.getCurrentPattern(-1);\n\n                                if (prevPattern != null && prevPattern.instruments[0] == this._pattern!.instruments[0]) {\n                                    for (const note of prevPattern.notes) {\n                                        if (note.end == this._doc.song.beatsPerBar * Config.partsPerBeat && note.pitches[0] == this._cursor.curNote.pitches[0]) {\n                                            sequence.append(new ChangeSizeBend(this._doc, note, note.pins[note.pins.length - 1].time, bendSize, bendInterval, this.shiftMode));\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    this._dragTime = this._cursor.curNote.start + bendPart;\n                    this._dragPitch = this._cursor.curNote.pitches[this._cursor.pitchIndex == -1 ? 0 : this._cursor.pitchIndex] + bendInterval;\n                    this._dragSize = bendSize;\n                    this._dragVisible = true;\n\n                    sequence.append(new ChangeSizeBend(this._doc, this._cursor.curNote, bendPart, bendSize, bendInterval, this.shiftMode));\n                    this._copyPins(this._cursor.curNote);\n                } else {\n                    sequence.append(new ChangePatternSelection(this._doc, 0, 0));\n\n                    this._dragSize = this._cursor.curNote.pins[this._cursor.nearPinIndex].size;\n\n                    if (this._pattern == null) throw new Error();\n\n                    let bendStart: number;\n                    let bendEnd: number;\n                    if (this._mouseX >= this._mouseXStart) {\n                        bendStart = Math.max(this._cursor.curNote.start, this._cursor.part);\n                        bendEnd = currentPart + minDivision;\n                    } else {\n                        bendStart = Math.min(this._cursor.curNote.end, this._cursor.part + minDivision);\n                        bendEnd = currentPart;\n                    }\n                    if (bendEnd < 0) bendEnd = 0;\n                    if (bendEnd > this._doc.song.beatsPerBar * Config.partsPerBeat) bendEnd = this._doc.song.beatsPerBar * Config.partsPerBeat;\n                    if (bendEnd > this._cursor.curNote.end) {\n                        sequence.append(new ChangeNoteTruncate(this._doc, this._pattern, this._cursor.curNote.start, bendEnd, this._cursor.curNote));\n                    }\n                    if (bendEnd < this._cursor.curNote.start) {\n                        sequence.append(new ChangeNoteTruncate(this._doc, this._pattern, bendEnd, this._cursor.curNote.end, this._cursor.curNote));\n                    }\n\n                    let minPitch: number = Number.MAX_VALUE;\n                    let maxPitch: number = -Number.MAX_VALUE;\n                    for (const pitch of this._cursor.curNote.pitches) {\n                        if (minPitch > pitch) minPitch = pitch;\n                        if (maxPitch < pitch) maxPitch = pitch;\n                    }\n                    minPitch -= this._cursor.curNote.pitches[this._cursor.pitchIndex];\n                    maxPitch -= this._cursor.curNote.pitches[this._cursor.pitchIndex];\n\n                    if (!this._doc.song.getChannelIsMod(this._doc.channel)) {\n                        const bendTo: number = this._snapToPitch(this._findMousePitch(this._mouseY), -minPitch, this._getMaxPitch() - maxPitch);\n                        sequence.append(new ChangePitchBend(this._doc, this._cursor.curNote, bendStart, bendEnd, bendTo, this._cursor.pitchIndex));\n                        this._dragPitch = bendTo;\n                    }\n                    else {\n                        const bendTo: number = this._snapToPitch(this._dragPitch, -minPitch, Config.modCount - 1);\n                        sequence.append(new ChangePitchBend(this._doc, this._cursor.curNote, bendStart, bendEnd, bendTo, this._cursor.pitchIndex));\n                        this._dragPitch = bendTo;\n                    }\n                    this._copyPins(this._cursor.curNote);\n\n                    this._dragTime = bendEnd;\n                    this._dragVisible = true;\n                }\n            }\n        }\n\n        if (!(this._mouseDown && this._cursor.valid && continuousState)) {\n            this._updateCursorStatus();\n            this._updatePreview();\n        }\n    }\n\n    private _whenCursorReleased = (event: Event | null): void => {\n        if (!this._cursor.valid) return;\n\n        const continuousState: boolean = this._doc.lastChangeWas(this._dragChange);\n        if (this._mouseDown && continuousState && this._dragChange != null) {\n\n            if (this._draggingSelectionContents) {\n                this._doc.record(this._dragChange);\n                this._dragChange = null;\n                // Need to re-sort the notes by start time as they might change order if user drags them around.\n                if (this._pattern != null && this._doc.song.getChannelIsMod(this._doc.channel)) this._pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n\n            } else if (this._draggingStartOfSelection || this._draggingEndOfSelection || this._shiftHeld) {\n                this._setPatternSelection(this._dragChange);\n                this._dragChange = null;\n            } else if (this._mouseDragging || this._cursor.curNote == null || !this._dragChange.isNoop() || this._draggingStartOfSelection || this._draggingEndOfSelection || this._draggingSelectionContents || this._shiftHeld) {\n                this._doc.record(this._dragChange);\n                this._dragChange = null;\n                // Need to re-sort the notes by start time as they might change order if user drags them around.\n                if (this._pattern != null && this._doc.song.getChannelIsMod(this._doc.channel)) this._pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n\n            } else {\n\n                if (this._pattern == null) throw new Error();\n\n                const sequence: ChangeSequence = new ChangeSequence();\n                sequence.append(new ChangePatternSelection(this._doc, 0, 0));\n\n                if (this._cursor.pitchIndex == -1) {\n                    if (this._cursor.curNote.pitches.length == Config.maxChordSize) {\n                        sequence.append(new ChangePitchAdded(this._doc, this._cursor.curNote, this._cursor.curNote.pitches[0], 0, true));\n                    }\n                    sequence.append(new ChangePitchAdded(this._doc, this._cursor.curNote, this._cursor.pitch, this._cursor.curNote.pitches.length));\n                    this._copyPins(this._cursor.curNote);\n\n                    if (this._doc.prefs.enableNotePreview && !this._doc.synth.playing) {\n                        const duration: number = Math.min(Config.partsPerBeat, this._cursor.end - this._cursor.start);\n                        this._doc.performance.setTemporaryPitches(this._cursor.curNote.pitches, duration);\n                    }\n                } else {\n                    if (this._cursor.curNote.pitches.length == 1) {\n                        sequence.append(new ChangeNoteAdded(this._doc, this._pattern, this._cursor.curNote, this._cursor.curIndex, true));\n                    } else {\n                        sequence.append(new ChangePitchAdded(this._doc, this._cursor.curNote, this._cursor.pitch, this._cursor.curNote.pitches.indexOf(this._cursor.pitch), true));\n                    }\n                }\n\n                this._doc.record(sequence);\n            }\n        }\n\n        this._mouseDown = false;\n        this._mouseDragging = false;\n        this._draggingStartOfSelection = false;\n        this._draggingEndOfSelection = false;\n        this._draggingSelectionContents = false;\n        this._lastChangeWasPatternSelection = false;\n        this.modDragValueLabel.setAttribute(\"fill\", ColorConfig.secondaryText);\n        this._updateCursorStatus();\n        this._updatePreview();\n    }\n\n    private _setPatternSelection(change: UndoableChange): void {\n        this._changePatternSelection = change;\n        this._doc.record(this._changePatternSelection, this._lastChangeWasPatternSelection);\n    }\n\n\n    private _updatePreview(): void {\n        if (this._usingTouch) {\n            if (!this._mouseDown || !this._cursor.valid || !this._mouseDragging || !this._dragVisible || this._shiftHeld || this._draggingStartOfSelection || this._draggingEndOfSelection || this._draggingSelectionContents) {\n                this._svgPreview.setAttribute(\"visibility\", \"hidden\");\n\n                if (!this.editingModLabel) {\n                    this.modDragValueLabel.style.setProperty(\"display\", \"none\");\n                    this.modDragValueLabel.style.setProperty(\"pointer-events\", \"none\");\n                    this.modDragValueLabel.setAttribute(\"contenteditable\", \"false\");\n                }\n\n            } else {\n                this._svgPreview.setAttribute(\"visibility\", \"visible\");\n\n                const x: number = this._partWidth * this._dragTime;\n                const y: number = this._pitchToPixelHeight(this._dragPitch - this._octaveOffset);\n                const radius: number = (this._pitchHeight - this._pitchBorder) / 2;\n                const width: number = 80;\n                const height: number = 60;\n                const cap: number = this._doc.song.getVolumeCap(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), this._cursor.pitch);\n                //this._drawNote(this._svgPreview, this._cursor.pitch, this._cursor.start, this._cursor.pins, this._pitchHeight / 2 + 1, true, this._octaveOffset);\n\n                let pathString: string = \"\";\n\n                pathString += \"M \" + prettyNumber(x) + \" \" + prettyNumber(y - radius * (this._dragSize / cap)) + \" \";\n                pathString += \"L \" + prettyNumber(x) + \" \" + prettyNumber(y - radius * (this._dragSize / cap) - height) + \" \";\n                pathString += \"M \" + prettyNumber(x) + \" \" + prettyNumber(y + radius * (this._dragSize / cap)) + \" \";\n                pathString += \"L \" + prettyNumber(x) + \" \" + prettyNumber(y + radius * (this._dragSize / cap) + height) + \" \";\n                pathString += \"M \" + prettyNumber(x) + \" \" + prettyNumber(y - radius * (this._dragSize / cap)) + \" \";\n                pathString += \"L \" + prettyNumber(x + width) + \" \" + prettyNumber(y - radius * (this._dragSize / cap)) + \" \";\n                pathString += \"M \" + prettyNumber(x) + \" \" + prettyNumber(y + radius * (this._dragSize / cap)) + \" \";\n                pathString += \"L \" + prettyNumber(x + width) + \" \" + prettyNumber(y + radius * (this._dragSize / cap)) + \" \";\n                pathString += \"M \" + prettyNumber(x) + \" \" + prettyNumber(y - radius * (this._dragSize / cap)) + \" \";\n                pathString += \"L \" + prettyNumber(x - width) + \" \" + prettyNumber(y - radius * (this._dragSize / cap)) + \" \";\n                pathString += \"M \" + prettyNumber(x) + \" \" + prettyNumber(y + radius * (this._dragSize / cap)) + \" \";\n                pathString += \"L \" + prettyNumber(x - width) + \" \" + prettyNumber(y + radius * (this._dragSize / cap)) + \" \";\n\n                this._svgPreview.setAttribute(\"d\", pathString);\n            }\n        } else {\n            if (!this._mouseOver || this._mouseDown || !this._cursor.valid) {\n                this._svgPreview.setAttribute(\"visibility\", \"hidden\");\n                if (!this.editingModLabel) {\n                    this.modDragValueLabel.style.setProperty(\"display\", \"none\");\n                    this.modDragValueLabel.style.setProperty(\"pointer-events\", \"none\");\n                    this.modDragValueLabel.setAttribute(\"contenteditable\", \"false\");\n                }\n            } else {\n                this._svgPreview.setAttribute(\"visibility\", \"visible\");\n\n                if (this._cursorAtStartOfSelection()) {\n                    const center: number = this._partWidth * this._doc.selection.patternSelectionStart;\n                    const left: string = prettyNumber(center - 4);\n                    const right: string = prettyNumber(center + 4);\n                    const bottom: number = this._pitchToPixelHeight(-0.5);\n                    this._svgPreview.setAttribute(\"d\", \"M \" + left + \" 0 L \" + left + \" \" + bottom + \" L \" + right + \" \" + bottom + \" L \" + right + \" 0 z\");\n                } else if (this._cursorAtEndOfSelection()) {\n                    const center: number = this._partWidth * this._doc.selection.patternSelectionEnd;\n                    const left: string = prettyNumber(center - 4);\n                    const right: string = prettyNumber(center + 4);\n                    const bottom: number = this._pitchToPixelHeight(-0.5);\n                    this._svgPreview.setAttribute(\"d\", \"M \" + left + \" 0 L \" + left + \" \" + bottom + \" L \" + right + \" \" + bottom + \" L \" + right + \" 0 z\");\n                } else if (this._cursorIsInSelection()) {\n                    const left: string = prettyNumber(this._partWidth * this._doc.selection.patternSelectionStart - 2);\n                    const right: string = prettyNumber(this._partWidth * this._doc.selection.patternSelectionEnd + 2);\n                    const bottom: number = this._pitchToPixelHeight(-0.5);\n                    this._svgPreview.setAttribute(\"d\", \"M \" + left + \" 0 L \" + left + \" \" + bottom + \" L \" + right + \" \" + bottom + \" L \" + right + \" 0 z\");\n                } else {\n                    this._drawNote(this._svgPreview, this._cursor.pitch, this._cursor.start, this._cursor.pins, (this._pitchHeight - this._pitchBorder) / 2 + 1, true, this._octaveOffset);\n                }\n            }\n        }\n    }\n\n    private _updateSelection(): void {\n        if (this._doc.selection.patternSelectionActive) {\n            this._selectionRect.setAttribute(\"visibility\", \"visible\");\n            this._selectionRect.setAttribute(\"x\", String(this._partWidth * this._doc.selection.patternSelectionStart));\n            this._selectionRect.setAttribute(\"width\", String(this._partWidth * (this._doc.selection.patternSelectionEnd - this._doc.selection.patternSelectionStart)));\n        } else {\n            this._selectionRect.setAttribute(\"visibility\", \"hidden\");\n        }\n    }\n\n    public render(): void {\n        const nextPattern: Pattern | null = this._doc.getCurrentPattern(this._barOffset);\n\n        if (this._pattern != nextPattern) {\n            if (this._doc.song.getChannelIsMod(this._doc.channel) && this._interactive && nextPattern != null) {\n                // Need to re-sort the notes by start time as they might change order if user drags them around.\n                nextPattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n            }\n            if (this._pattern != null) {\n                this._dragChange = null;\n                this._whenCursorReleased(null);\n            }\n        }\n        this._pattern = nextPattern;\n\n        this._editorWidth = this.container.clientWidth;\n        this._editorHeight = this.container.clientHeight;\n        this._partWidth = this._editorWidth / (this._doc.song.beatsPerBar * Config.partsPerBeat);\n        this._octaveOffset = (this._doc.channel >= this._doc.song.pitchChannelCount) ? 0 : this._doc.song.channels[this._doc.channel].octave * this._doc.song.edo;\n\n        if (this._doc.song.getChannelIsNoise(this._doc.channel)) {\n            this._pitchBorder = 0;\n            this._pitchCount = Config.drumCount;\n        }\n        else if (this._doc.song.getChannelIsMod(this._doc.channel)) {\n            this._pitchBorder = this._defaultModBorder;\n            this._pitchCount = Config.modCount;\n\n            if (this._pattern != null) {\n                // Force max height of mod channels to conform to settings.\n                for (const note of this._pattern.notes) {\n                    let pitch = note.pitches[0]; // No pitch bend possible in mod channels.\n                    let maxHeight: number = this._doc.song.getVolumeCap(true, this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), pitch);\n                    let maxFoundHeight: number = 0;\n                    for (const pin of note.pins) {\n                        if (pin.size > maxFoundHeight) {\n                            maxFoundHeight = pin.size;\n                        }\n                    }\n                    // Apply scaling if the max height is below any pin setting.\n                    if (maxFoundHeight > maxHeight) {\n                        for (const pin of note.pins) {\n                            pin.size = Math.round(pin.size * (maxHeight / maxFoundHeight));\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            this._pitchBorder = 0;\n            this._pitchCount = this._doc.getVisiblePitchCount();\n        }\n\n        this._pitchHeight = this._editorHeight / this._pitchCount;\n        this._octaveOffset = (this._doc.channel >= this._doc.song.pitchChannelCount) ? 0 : this._doc.getBaseVisibleOctave(this._doc.channel) * this._doc.song.edo;\n\n        if (this._renderedRhythm != this._doc.song.rhythm ||\n            this._renderedPitchChannelCount != this._doc.song.pitchChannelCount ||\n            this._renderedNoiseChannelCount != this._doc.song.noiseChannelCount ||\n            this._renderedModChannelCount != this._doc.song.modChannelCount) {\n            this._renderedRhythm = this._doc.song.rhythm;\n            this._renderedPitchChannelCount = this._doc.song.pitchChannelCount;\n            this._renderedNoiseChannelCount = this._doc.song.noiseChannelCount;\n            this._renderedModChannelCount = this._doc.song.modChannelCount;\n            this.resetCopiedPins();\n        }\n\n        this._copiedPins = this._copiedPinChannels[this._doc.channel];\n\n        if (this._renderedWidth != this._editorWidth || this._renderedHeight != this._editorHeight) {\n            this._renderedWidth = this._editorWidth;\n            this._renderedHeight = this._editorHeight;\n            this._svgBackground.setAttribute(\"width\", \"\" + this._editorWidth);\n            this._svgBackground.setAttribute(\"height\", \"\" + this._editorHeight);\n            this._svgPlayhead.setAttribute(\"height\", \"\" + this._editorHeight);\n            this._selectionRect.setAttribute(\"y\", \"0\");\n            this._selectionRect.setAttribute(\"height\", \"\" + this._editorHeight);\n        }\n\n        const beatWidth = this._editorWidth / this._doc.song.beatsPerBar;\n        if (this._renderedBeatWidth != beatWidth || this._renderedPitchHeight != this._pitchHeight) {\n            this._renderedBeatWidth = beatWidth;\n            this._renderedPitchHeight = this._pitchHeight;\n            this._svgNoteBackground.setAttribute(\"width\", \"\" + beatWidth);\n            this._svgNoteBackground.setAttribute(\"height\", \"\" + (this._pitchHeight * this._doc.song.edo));\n            this._svgDrumBackground.setAttribute(\"width\", \"\" + beatWidth);\n            this._svgDrumBackground.setAttribute(\"height\", \"\" + this._pitchHeight);\n            this._svgModBackground.setAttribute(\"width\", \"\" + beatWidth);\n            this._svgModBackground.setAttribute(\"height\", \"\" + (this._pitchHeight));\n            this._svgModBackground.setAttribute(\"y\", \"\" + (this._pitchBorder / 2));\n            this._backgroundDrumRow.setAttribute(\"width\", \"\" + (beatWidth - 2));\n            this._backgroundDrumRow.setAttribute(\"height\", \"\" + (this._pitchHeight - 2));\n            if (this._pitchHeight > this._pitchBorder) {\n                this._backgroundModRow.setAttribute(\"width\", \"\" + (beatWidth - 2));\n                this._backgroundModRow.setAttribute(\"height\", \"\" + (this._pitchHeight - this._pitchBorder));\n            }\n\n\n\n            for (let j: number = 0; j < this._doc.song.edo; j++) {\n                const rectangle: SVGRectElement = this._backgroundPitchRows[j];\n                const y: number = (this._doc.song.edo - j) % this._doc.song.edo;\n                rectangle.setAttribute(\"width\", \"\" + (beatWidth - 2));\n                rectangle.setAttribute(\"y\", \"\" + (y * this._pitchHeight + 1));\n                rectangle.setAttribute(\"height\", \"\" + (this._pitchHeight - 2));\n            }\n        }\n\n        if (this._interactive) {\n            if (!this._mouseDown) this._updateCursorStatus();\n            this._updatePreview();\n            this._updateSelection();\n        }\n\n        if (this._renderedFifths != this._doc.prefs.showFifth) {\n            this._renderedFifths = this._doc.prefs.showFifth;\n            this._backgroundPitchRows[Math.round(this._doc.song.edo*Math.log2(3/2))].setAttribute(\"fill\", this._doc.prefs.showFifth ? ColorConfig.fifthNote : ColorConfig.pitchBackground);\n        }\n\n        for (let j: number = 0; j < this._doc.song.edo; j++) {\n\n            this._backgroundPitchRows[j].style.visibility = Config.scales[this._doc.song.scale].flags[j] ? \"visible\" : \"hidden\";\n        }\n\n        if (this._doc.song.getChannelIsNoise(this._doc.channel)) {\n            if (!this._renderedDrums) {\n                this._renderedDrums = true;\n                this._renderedMod = false;\n                this._svgBackground.setAttribute(\"fill\", \"url(#patternEditorDrumBackground\" + this._barOffset + \")\");\n            }\n        } else if (this._doc.song.getChannelIsMod(this._doc.channel)) {\n            if (!this._renderedMod) {\n                this._renderedDrums = false;\n                this._renderedMod = true;\n                this._svgBackground.setAttribute(\"fill\", \"url(#patternEditorModBackground\" + this._barOffset + \")\");\n            }\n        } else {\n            if (this._renderedDrums || this._renderedMod) {\n                this._renderedDrums = false;\n                this._renderedMod = false;\n                this._svgBackground.setAttribute(\"fill\", \"url(#patternEditorNoteBackground\" + this._barOffset + \")\");\n            }\n        }\n\n        this._redrawNotePatterns();\n    }\n\n    private _redrawNotePatterns(): void {\n        this._svgNoteContainer = makeEmptyReplacementElement(this._svgNoteContainer);\n\n        if (this._doc.prefs.showChannels) {\n            if (!this._doc.song.getChannelIsMod(this._doc.channel)) {\n                for (let channel: number = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount - 1; channel >= 0; channel--) {\n                    if (channel == this._doc.channel) continue;\n                    if (this._doc.song.getChannelIsNoise(channel) != this._doc.song.getChannelIsNoise(this._doc.channel)) continue;\n\n                    const pattern2: Pattern | null = this._doc.song.getPattern(channel, this._doc.bar + this._barOffset);\n                    if (pattern2 == null) continue;\n\n                    const octaveOffset: number = this._doc.getBaseVisibleOctave(channel) * this._doc.song.edo;\n                    for (const note of pattern2.notes) {\n                        for (const pitch of note.pitches) {\n                            const notePath: SVGPathElement = SVG.path();\n                            notePath.setAttribute(\"fill\", ColorConfig.getChannelColor(this._doc.song, channel).secondaryNote);\n                            notePath.setAttribute(\"pointer-events\", \"none\");\n                            this._drawNote(notePath, pitch, note.start, note.pins, this._pitchHeight * 0.19, false, octaveOffset);\n                            this._svgNoteContainer.appendChild(notePath);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this._pattern != null) {\n            const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument(this._barOffset)];\n            const chord: Chord = instrument.getChord();\n            const transition: Transition = instrument.getTransition();\n            const displayNumberedChords: boolean = chord.customInterval || chord.arpeggiates || chord.strumParts > 0 || transition.slides;\n            for (const note of this._pattern.notes) {\n                let disabled: boolean = false;\n                if (this._doc.song.getChannelIsMod(this._doc.channel)) {\n                    const modIndex: number = instrument.modulators[Config.modCount - 1 - note.pitches[0]];\n                    if ((modIndex == Config.modulators.dictionary[\"none\"].index)\n                    || instrument.invalidModulators[Config.modCount - 1 - note.pitches[0]])\n                        disabled = true;\n                }\n                for (let i: number = 0; i < note.pitches.length; i++) {\n                    const pitch: number = note.pitches[i];\n                    let notePath: SVGPathElement = SVG.path();\n                    let colorPrimary: string = (disabled ? ColorConfig.disabledNotePrimary : ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote);\n                    let colorSecondary: string = (disabled ? ColorConfig.disabledNoteSecondary : ColorConfig.getChannelColor(this._doc.song, this._doc.channel).secondaryNote);\n                    notePath.setAttribute(\"fill\", colorSecondary);\n                    notePath.setAttribute(\"pointer-events\", \"none\");\n                    this._drawNote(notePath, pitch, note.start, note.pins, (this._pitchHeight - this._pitchBorder) / 2 + 1, false, this._octaveOffset);\n                    this._svgNoteContainer.appendChild(notePath);\n                    notePath = SVG.path();\n                    notePath.setAttribute(\"fill\", colorPrimary);\n                    notePath.setAttribute(\"pointer-events\", \"none\");\n                    this._drawNote(notePath, pitch, note.start, note.pins, (this._pitchHeight - this._pitchBorder) / 2 + 1, true, this._octaveOffset);\n                    this._svgNoteContainer.appendChild(notePath);\n\n                    let indicatorOffset: number = 2;\n                    if (note.continuesLastPattern) {\n                        const arrowHeight: number = Math.min(this._pitchHeight, 20);\n                        let arrowPath: string;\n                        arrowPath = \"M \" + prettyNumber(this._partWidth * note.start + indicatorOffset) + \" \" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) - 0.1 * arrowHeight);\n                        arrowPath += \"L \" + prettyNumber(this._partWidth * note.start + indicatorOffset) + \" \" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) + 0.1 * arrowHeight);\n                        arrowPath += \"L \" + prettyNumber(this._partWidth * note.start + indicatorOffset + 4) + \" \" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) + 0.1 * arrowHeight);\n                        arrowPath += \"L \" + prettyNumber(this._partWidth * note.start + indicatorOffset + 4) + \" \" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) + 0.3 * arrowHeight);\n                        arrowPath += \"L \" + prettyNumber(this._partWidth * note.start + indicatorOffset + 12) + \" \" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset));\n                        arrowPath += \"L \" + prettyNumber(this._partWidth * note.start + indicatorOffset + 4) + \" \" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) - 0.3 * arrowHeight);\n                        arrowPath += \"L \" + prettyNumber(this._partWidth * note.start + indicatorOffset + 4) + \" \" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset) - 0.1 * arrowHeight);\n                        const arrow: SVGPathElement = SVG.path();\n                        arrow.setAttribute(\"d\", arrowPath);\n                        arrow.setAttribute(\"fill\", ColorConfig.invertedText);\n                        this._svgNoteContainer.appendChild(arrow);\n                        indicatorOffset += 12;\n                    }\n\n                    if (note.pitches.length > 1) {\n                        if (displayNumberedChords) {\n                            const oscillatorLabel: SVGTextElement = SVG.text();\n                            oscillatorLabel.setAttribute(\"x\", \"\" + prettyNumber(this._partWidth * note.start + indicatorOffset));\n                            oscillatorLabel.setAttribute(\"y\", \"\" + prettyNumber(this._pitchToPixelHeight(pitch - this._octaveOffset)));\n                            oscillatorLabel.setAttribute(\"width\", \"30\");\n                            oscillatorLabel.setAttribute(\"fill\", ColorConfig.invertedText);\n                            oscillatorLabel.setAttribute(\"text-anchor\", \"start\");\n                            oscillatorLabel.setAttribute(\"dominant-baseline\", \"central\");\n                            oscillatorLabel.setAttribute(\"pointer-events\", \"none\");\n                            oscillatorLabel.textContent = \"\" + (i + 1);\n                            this._svgNoteContainer.appendChild(oscillatorLabel);\n                        }\n                    }\n                }\n\n\n                if (this._doc.song.getChannelIsMod(this._doc.channel) && this._mouseDragging && !this._mouseHorizontal && note == this._cursor.curNote) {\n\n                    this.modDragValueLabel.style.setProperty(\"display\", \"\");\n                    this.modDragValueLabel.style.setProperty(\"pointer-events\", \"none\");\n                    this.modDragValueLabel.setAttribute(\"contenteditable\", \"false\");\n                    this.modDragValueLabel.style.setProperty(\"color\", \"#FFFFFF\");\n                    let setting: number = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument(this._barOffset)].modulators[Config.modCount - 1 - note.pitches[0]];\n                    let presValue: number = this._dragSize + Config.modulators[setting].convertRealFactor;\n\n                    // This is me being too lazy to fiddle with the css to get it to align center.\n                    let xOffset: number = (+(presValue >= 10.0)) + (+(presValue >= 100.0)) + (+(presValue < 0.0)) + (+(presValue <= -10.0));\n\n                    this._modDragValueLabelWidth = 8 + xOffset * 8;\n                    this._modDragValueLabelLeft = +prettyNumber(Math.max(Math.min(this._editorWidth - 10 - xOffset * 8, this._partWidth * this._dragTime - 4 - xOffset * 4), 2));\n                    this._modDragValueLabelTop = +prettyNumber(this._pitchToPixelHeight(note.pitches[0] - this._octaveOffset) - 17 - (this._pitchHeight - this._pitchBorder) / 2);\n\n                    this.modDragValueLabel.style.setProperty(\"left\", \"\" + this._modDragValueLabelLeft + \"px\");\n                    this.modDragValueLabel.style.setProperty(\"top\", \"\" + this._modDragValueLabelTop + \"px\");\n                    this.modDragValueLabel.textContent = \"\" + presValue;\n\n                }\n            }\n        }\n\n        this._doc.currentPatternIsDirty = false;\n    }\n\n    private _drawNote(svgElement: SVGPathElement, pitch: number, start: number, pins: NotePin[], radius: number, showSize: boolean, offset: number): void {\n        const totalWidth: number = this._partWidth * (pins[pins.length - 1].time + pins[0].time);\n        const endOffset: number = 0.5 * Math.min(2, totalWidth - 1);\n\n        let nextPin: NotePin = pins[0];\n\n        const cap: number = this._doc.song.getVolumeCap(this._doc.song.getChannelIsMod(this._doc.channel), this._doc.channel, this._doc.getCurrentInstrument(this._barOffset), pitch);\n\n        let pathString: string = \"M \" + prettyNumber(this._partWidth * (start + nextPin.time) + endOffset) + \" \" + prettyNumber(this._pitchToPixelHeight(pitch - offset) + radius * (showSize ? nextPin.size / cap : 1.0)) + \" \";\n\n        for (let i: number = 1; i < pins.length; i++) {\n            let prevPin: NotePin = nextPin;\n            nextPin = pins[i];\n            let prevSide: number = this._partWidth * (start + prevPin.time) + (i == 1 ? endOffset : 0);\n            let nextSide: number = this._partWidth * (start + nextPin.time) - (i == pins.length - 1 ? endOffset : 0);\n            let prevHeight: number = this._pitchToPixelHeight(pitch + prevPin.interval - offset);\n            let nextHeight: number = this._pitchToPixelHeight(pitch + nextPin.interval - offset);\n            let prevSize: number = showSize ? prevPin.size / cap : 1.0;\n            let nextSize: number = showSize ? nextPin.size / cap : 1.0;\n            pathString += \"L \" + prettyNumber(prevSide) + \" \" + prettyNumber(prevHeight - radius * prevSize) + \" \";\n            if (prevPin.interval > nextPin.interval) pathString += \"L \" + prettyNumber(prevSide + 1) + \" \" + prettyNumber(prevHeight - radius * prevSize) + \" \";\n            if (prevPin.interval < nextPin.interval) pathString += \"L \" + prettyNumber(nextSide - 1) + \" \" + prettyNumber(nextHeight - radius * nextSize) + \" \";\n            pathString += \"L \" + prettyNumber(nextSide) + \" \" + prettyNumber(nextHeight - radius * nextSize) + \" \";\n        }\n        for (let i: number = pins.length - 2; i >= 0; i--) {\n            let prevPin: NotePin = nextPin;\n            nextPin = pins[i];\n            let prevSide: number = this._partWidth * (start + prevPin.time) - (i == pins.length - 2 ? endOffset : 0);\n            let nextSide: number = this._partWidth * (start + nextPin.time) + (i == 0 ? endOffset : 0);\n            let prevHeight: number = this._pitchToPixelHeight(pitch + prevPin.interval - offset);\n            let nextHeight: number = this._pitchToPixelHeight(pitch + nextPin.interval - offset);\n            let prevSize: number = showSize ? prevPin.size / cap : 1.0;\n            let nextSize: number = showSize ? nextPin.size / cap : 1.0;\n            pathString += \"L \" + prettyNumber(prevSide) + \" \" + prettyNumber(prevHeight + radius * prevSize) + \" \";\n            if (prevPin.interval < nextPin.interval) pathString += \"L \" + prettyNumber(prevSide - 1) + \" \" + prettyNumber(prevHeight + radius * prevSize) + \" \";\n            if (prevPin.interval > nextPin.interval) pathString += \"L \" + prettyNumber(nextSide + 1) + \" \" + prettyNumber(nextHeight + radius * nextSize) + \" \";\n            pathString += \"L \" + prettyNumber(nextSide) + \" \" + prettyNumber(nextHeight + radius * nextSize) + \" \";\n        }\n        pathString += \"z\";\n\n        svgElement.setAttribute(\"d\", pathString);\n    }\n\n    private _pitchToPixelHeight(pitch: number): number {\n        return this._pitchHeight * (this._pitchCount - (pitch) - 0.5);\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"../synth/SynthConfig\";\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { Instrument } from \"../synth/synth\";\nimport { createKeys } from \"../synth/CreateScalesAndKeys\";\n\nexport class Piano {\n\t\tprivate readonly _pianoContainer: HTMLDivElement = HTML.div({style: \"width: 100%; height: 100%; display: flex; flex-direction: column-reverse; align-items: stretch;\"});\n\t\tprivate readonly _drumContainer: HTMLDivElement = HTML.div({style: \"width: 100%; height: 100%; display: flex; flex-direction: column-reverse; align-items: stretch;\"});\n\t\tprivate readonly _modContainer: HTMLDivElement = HTML.div({ style: \"width: 100%; height: 100%; display: flex; flex-direction: column-reverse; align-items: stretch;\" });\n\t\tprivate readonly _preview: HTMLDivElement = HTML.div({style: `width: 100%; height: 40px; border: 2px solid ${ColorConfig.primaryText}; position: absolute; box-sizing: border-box; pointer-events: none;`});\n\t\tpublic readonly container: HTMLDivElement = HTML.div({style: \"width: 32px; height: 100%; overflow: hidden; position: relative; flex-shrink: 0; touch-action: none;\"},\n\t\tthis._pianoContainer,\n\t\tthis._drumContainer,\n\t\tthis._modContainer,\n\t\tthis._preview,\n\t);\n\tprivate readonly _editorHeight: number = 481;\n\tprivate readonly _pianoKeys: HTMLDivElement[] = [];\n\tprivate readonly _pianoLabels: HTMLDivElement[] = [];\n\tprivate readonly _modFirstLabels: SVGTextElement[] = [];\n\tprivate readonly _modSecondLabels: SVGTextElement[] = [];\n\tprivate readonly _modCountLabels: SVGTextElement[] = [];\n\tprivate readonly _modCountRects: SVGRectElement[] = [];\n\t\t\n\tprivate _pitchHeight: number;\n\tprivate _pitchCount: number;\n\t//private _mouseX: number = 0;\n\tprivate _mouseY: number = 0;\n\tprivate _mouseDown: boolean = false;\n\tprivate _mouseOver: boolean = false;\n\tprivate _cursorPitch: number;\n\tprivate _playedPitch: number = -1;\n\tprivate _renderedScale: number = -1;\n\tprivate _renderedDrums: boolean = false;\n\tprivate _renderedMod: boolean = false;\n\tprivate _renderedKey: number = -1;\n\tprivate _renderedPitchCount: number = -1;\n\tprivate readonly _renderedLiveInputPitches: number[] = [];\n\t\n\t\t\n\tpublic forceRender(): void {\n\t\tthis._renderedScale = -1;\n\t\tthis._documentChanged();\n\t}\n\n\t// Bass cutoff pitch is roughly half of the viewed window and below, though on odd-numbered octave counts the lead has priority for the middle octave.\n\tpublic static getBassCutoffPitch(doc: SongDocument): number {\n\t\tconst octaveOffset: number = doc.getBaseVisibleOctave(doc.channel);\n\t\treturn octaveOffset * doc.song.edo + Math.floor( doc.getVisiblePitchCount() / ( doc.song.edo * 2 ) ) * doc.song.edo;\n\t}\n\n\tconstructor(private _doc: SongDocument) {\n\t\t\t\n\t\tfor (let i: number = 0; i < Config.drumCount; i++) {\n\t\t\tconst scale: number = (1.0 - (i / Config.drumCount) * 0.35) * 100;\n\t\t\tthis._drumContainer.appendChild(HTML.div({class: \"drum-button\", style: `background-size: ${scale}% ${scale}%;`}));\n\t\t}\n\t\t\t\n\t\tfor (let i: number = 0; i < Config.modCount; i++) {\n\n\t\t\tconst firstRowText: SVGTextElement = SVG.text({ class: \"modulator-label\", \"text-anchor\": \"left\", fill: ColorConfig.modLabelPrimaryText, style: \"font-weight: bold; align-self: flex-start; transform-origin: center; transform: rotate(-90deg) translate(-19px, 39px); font-size: 11px; font-family: sans-serif;\" });\n\t\t\tconst secondRowText: SVGTextElement = SVG.text({ class: \"modulator-label\", \"text-anchor\": \"left\", fill: ColorConfig.modLabelPrimaryText, style: \"font-weight: bold; align-self: flex-end; transform-origin: center; transform: rotate(-90deg) translate(-26px, 42px); font-size: 11px; font-family: sans-serif;\" });\n\t\t\tconst countText: SVGTextElement = SVG.text({ class: \"modulator-inverse-label\", fill: ColorConfig.modLabelPrimary, style: \"font-weight: bold; align-self: flex-start; transform-origin: center; transform: rotate(-90deg) translate(4px, 13px); font-size: 11px; font-family: sans-serif;\" });\n\t\t\tconst countRect: SVGRectElement = SVG.rect({ width: \"12px\", height: \"9px\", fill: ColorConfig.indicatorPrimary, style: \"pointer-events: none; transform: translate(4px, 4px);\" });\n\n\t\t\tconst firstRowSVG: SVGSVGElement = SVG.svg({ viewBox: \"0 0 16 66\", width: \"16px\", style: \"pointer-events: none; flex-grow: 1;\" }, [\n\t\t\t\tfirstRowText,\n\t\t\t]);\n\t\t\tconst countSVG: SVGSVGElement = SVG.svg({ viewBox: \"0 0 16 14\", width: \"16px\", style: \"pointer-events: none;\" }, [\n\t\t\t\tcountRect,\n\t\t\t\tcountText,\n\t\t\t]);\n\t\t\tconst secondRowSVG: SVGSVGElement = SVG.svg({ viewBox: \"0 0 16 80\", width: \"16px\", style: \"pointer-events: none;\" }, [\n\t\t\t\tsecondRowText,\n\t\t\t]);\n\n\t\t\tconst flexRow1: HTMLDivElement = HTML.div({ style: \"display: flex; flex-direction: column; justify-content: space-between; pointer-events: none;\" }, [\n\t\t\t\tcountSVG,\n\t\t\t\tfirstRowSVG,\n\t\t\t]);\n\t\t\tconst flexRow2: HTMLDivElement = HTML.div({ style: \"display: flex; flex-direction: column-reverse; justify-content: space-between; pointer-events: none;\" }, [\n\t\t\t\tsecondRowSVG,\n\t\t\t]);\n\n\t\t\tconst flexContainer: HTMLDivElement = HTML.div({ style: \"display: flex; flex-direction: row; justify-content: space-between; padding: 0px; width: 32px; height: 100%; overflow: hidden; pointer-events: none;\" }, [\n\t\t\t\tflexRow1,\n\t\t\t\tflexRow2,\n\t\t\t]);\n\n\t\t\tconst modKey: HTMLDivElement = HTML.div({ class: \"modulator-button\", style: \"background: \" + ColorConfig.modLabelPrimary + \";\" }, flexContainer);\n\t\t\tthis._modContainer.appendChild(modKey);\n\t\t\tthis._modFirstLabels.push(firstRowText);\n\t\t\tthis._modSecondLabels.push(secondRowText);\n\t\t\tthis._modCountLabels.push(countText);\n\t\t\tthis._modCountRects.push(countRect);\n\t\t}\n\n\t\tthis.container.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenMouseReleased);\n\t\tthis.container.addEventListener(\"mouseover\", this._whenMouseOver);\n\t\tthis.container.addEventListener(\"mouseout\", this._whenMouseOut);\n\t\t\t\n\t\tthis.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n\t\tthis.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n\t\tthis.container.addEventListener(\"touchend\", this._whenTouchReleased);\n\t\tthis.container.addEventListener(\"touchcancel\", this._whenTouchReleased);\n\t\t\t\n\t\tthis._doc.notifier.watch(this._documentChanged);\n\t\tthis._documentChanged();\n\t\t\n\t\twindow.requestAnimationFrame(this._onAnimationFrame);\n\t}\n\t\t\n\tprivate _updateCursorPitch(): void {\n\t\tconst scale: ReadonlyArray<boolean> = Config.scales[this._doc.song.scale].flags;\n\t\t\tconst mousePitch: number = Math.max(0, Math.min(this._pitchCount-1, this._pitchCount - (this._mouseY / this._pitchHeight)));\n\t\tif (scale[Math.floor(mousePitch) % this._doc.song.edo] || this._doc.song.getChannelIsNoise(this._doc.channel)) {\n\t\t\tthis._cursorPitch = Math.floor(mousePitch);\n\t\t} else {\n\t\t\tlet topPitch: number = Math.floor(mousePitch) + 1;\n\t\t\tlet bottomPitch: number = Math.floor(mousePitch) - 1;\n\t\t\twhile (!scale[topPitch % this._doc.song.edo]) {\n\t\t\t\ttopPitch++;\n\t\t\t}\n\t\t\twhile (!scale[(bottomPitch) % this._doc.song.edo]) {\n\t\t\t\tbottomPitch--;\n\t\t\t}\n\t\t\tlet topRange: number = topPitch;\n\t\t\tlet bottomRange: number = bottomPitch + 1;\n\t\t\tif (topPitch % this._doc.song.edo == 0 || topPitch % this._doc.song.edo == 7) {\n\t\t\t\ttopRange -= 0.5;\n\t\t\t}\n\t\t\tif (bottomPitch % this._doc.song.edo == 0 || bottomPitch % this._doc.song.edo == 7) {\n\t\t\t\tbottomRange += 0.5;\n\t\t\t}\n\t\t\tthis._cursorPitch = mousePitch - bottomRange > topRange - mousePitch ? topPitch : bottomPitch;\n\t\t}\n\t}\n\t\t\n\tprivate _playLiveInput(): void {\n\t\tconst octaveOffset: number = this._doc.getBaseVisibleOctave(this._doc.channel) * this._doc.song.edo;\n\t\tconst currentPitch: number = this._cursorPitch + octaveOffset;\n\t\tif (this._playedPitch == currentPitch) return;\n\t\tthis._doc.performance.removePerformedPitch(this._playedPitch);\n\t\tthis._playedPitch = currentPitch;\n\t\tthis._doc.performance.addPerformedPitch(currentPitch);\n\t}\n\t\t\n\tprivate _releaseLiveInput(): void {\n\t\tthis._doc.performance.removePerformedPitch(this._playedPitch);\n\t\tthis._playedPitch = -1;\n\t}\n\t\t\n\tprivate _whenMouseOver = (event: MouseEvent): void => {\n\t\tif (this._mouseOver) return;\n\t\tthis._mouseOver = true;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMouseOut = (event: MouseEvent): void => {\n\t\tif (!this._mouseOver) return;\n\t\tthis._mouseOver = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._doc.synth.maintainLiveInput();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this.container.getBoundingClientRect();\n\t\t//this._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._updateCursorPitch();\n\t\tthis._playLiveInput();\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tif (this._mouseDown || this._mouseOver) this._doc.synth.maintainLiveInput();\n\t\tconst boundingRect: ClientRect = this.container.getBoundingClientRect();\n\t\t//this._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._updateCursorPitch();\n\t\tif (this._mouseDown) this._playLiveInput();\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMouseReleased = (event: MouseEvent): void => {\n\t\tif (this._mouseDown) this._releaseLiveInput();\n\t\tthis._mouseDown = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenTouchPressed = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._doc.synth.maintainLiveInput();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this.container.getBoundingClientRect();\n\t\t//this._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._updateCursorPitch();\n\t\tthis._playLiveInput();\n\t}\n\t\t\n\tprivate _whenTouchMoved = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._doc.synth.maintainLiveInput();\n\t\tconst boundingRect: ClientRect = this.container.getBoundingClientRect();\n\t\t//this._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._updateCursorPitch();\n\t\tif (this._mouseDown) this._playLiveInput();\n\t}\n\t\t\n\tprivate _whenTouchReleased = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = false;\n\t\tthis._releaseLiveInput();\n\t}\n\t\n\tprivate _onAnimationFrame = (): void => {\n\t\twindow.requestAnimationFrame(this._onAnimationFrame);\n\t\t\n\t\tlet liveInputChanged: boolean = false;\n\t\tlet liveInputPitchCount: number = !this._doc.performance.pitchesAreTemporary() ? this._doc.synth.liveInputPitches.length : 0;\n\t\tliveInputPitchCount += !this._doc.performance.bassPitchesAreTemporary() ? this._doc.synth.liveBassInputPitches.length : 0;\n\t\tif (this._renderedLiveInputPitches.length != liveInputPitchCount) {\n\t\t\tliveInputChanged = true;\n\t\t}\n\t\tfor (let i: number = 0; i < this._doc.synth.liveInputPitches.length; i++) {\n\t\t\tif (this._renderedLiveInputPitches[i] != this._doc.synth.liveInputPitches[i]) {\n\t\t\t\tthis._renderedLiveInputPitches[i] = this._doc.synth.liveInputPitches[i];\n\t\t\t\tliveInputChanged = true;\n\t\t\t}\n\t\t}\n\t\tfor (let i: number = this._doc.synth.liveInputPitches.length; i < liveInputPitchCount; i++) {\n\t\t\tif (this._renderedLiveInputPitches[i] != this._doc.synth.liveBassInputPitches[i - this._doc.synth.liveInputPitches.length]) {\n\t\t\t\tthis._renderedLiveInputPitches[i] = this._doc.synth.liveBassInputPitches[i - this._doc.synth.liveInputPitches.length];\n\t\t\t\tliveInputChanged = true;\n\t\t\t}\n\t\t}\n\t\tthis._renderedLiveInputPitches.length = liveInputPitchCount;\n\t\t\n\t\tif (liveInputChanged) {\n\t\t\tthis._updatePreview();\n\t\t}\n\t}\n\t\n\tprivate _updatePreview(): void {\n\t\tthis._preview.style.visibility = (!this._mouseOver || this._mouseDown) ? \"hidden\" : \"visible\";\n\t\t\n\t\tif (this._mouseOver && !this._mouseDown) {\n\t\t\tconst boundingRect: ClientRect = this.container.getBoundingClientRect();\n\t\t\tconst pitchHeight: number = this._pitchHeight / (this._editorHeight / (boundingRect.bottom - boundingRect.top));\n\t\t\t\n\t\t\tthis._preview.style.left = \"0px\";\n\t\t\tthis._preview.style.top = pitchHeight * (this._pitchCount - this._cursorPitch - 1) + \"px\";\n\t\t\tthis._preview.style.height = pitchHeight + \"px\";\n\t\t}\n\t\t\n\t\tconst octaveOffset: number = this._doc.getBaseVisibleOctave(this._doc.channel) * this._doc.song.edo;\n\t\tconst container: HTMLDivElement = this._doc.song.getChannelIsNoise(this._doc.channel) ? this._drumContainer : this._pianoContainer;\n\t\tconst children: HTMLCollection = container.children;\n\t\tfor (let i: number = 0; i < children.length; i++) {\n\t\t\tconst child: Element = children[i];\n\t\t\tif (this._renderedLiveInputPitches.indexOf(i + octaveOffset) == -1) {\n\t\t\t\tchild.classList.remove(\"pressed\");\n\t\t\t} else {\n\t\t\t\tchild.classList.add(\"pressed\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate _documentChanged = (): void => {\n\t\tconst isDrum: boolean = this._doc.song.getChannelIsNoise(this._doc.channel);\n\t\tconst isMod: boolean = this._doc.song.getChannelIsMod(this._doc.channel);\n\t\tthis._pitchCount = isMod ? Config.modCount : ( isDrum ? Config.drumCount : this._doc.getVisiblePitchCount() );\n\n\t\tthis._pitchHeight = this._editorHeight / this._pitchCount;\n\t\tthis._updateCursorPitch();\n\t\tif (this._mouseDown) this._playLiveInput();\n\t\t\n\t\tif (!this._doc.prefs.showLetters) return;\n\t\tif (this._renderedScale == this._doc.song.scale && this._renderedKey == this._doc.song.key && this._renderedDrums == isDrum && this._renderedMod == isMod && this._renderedPitchCount == this._pitchCount) return;\n\t\t\n\t\tthis._renderedScale = this._doc.song.scale;\n\t\tthis._renderedKey = this._doc.song.key;\n\t\tthis._renderedDrums = isDrum;\n\t\tthis._renderedMod = isMod;\n\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\t\n\t\tthis._pianoContainer.style.display = (isDrum || isMod) ? \"none\" : \"flex\";\n\t\tthis._drumContainer.style.display = isDrum ? \"flex\" : \"none\";\n\t\tthis._modContainer.style.display = isMod ? \"flex\" : \"none\";\n\t\t\n\t\tif (!isDrum && !isMod) {\n\t\t\tif (this._renderedPitchCount != this._pitchCount) {\n\t\t\t\tthis._pianoContainer.innerHTML = \"\";\n\t\t\t\tfor (let i: number = 0; i < this._pitchCount; i++) {\n\t\t\t\t\tconst pianoLabel: HTMLDivElement = HTML.div({class: \"piano-label\", style: \"font-weight: bold; -webkit-text-stroke-width: 0; font-size: 11px; font-family: sans-serif; position: absolute; padding-left: 15px;\"});\n\t\t\t\t\tconst pianoKey: HTMLDivElement = HTML.div({class: \"piano-button\", style: \"background: gray;\"}, pianoLabel);\n\t\t\t\t\tthis._pianoContainer.appendChild(pianoKey);\n\t\t\t\t\tthis._pianoLabels[i] = pianoLabel;\n\t\t\t\t\tthis._pianoKeys[i] = pianoKey;\n\t\t\t\t}\n\t\t\t\tthis._pianoLabels.length = this._pitchCount;\n\t\t\t\tthis._pianoKeys.length = this._pitchCount;\n\t\t\t\tthis._renderedPitchCount = this._pitchCount;\n\t\t\t}\n\t\t\t\n\t\t\tfor (let j: number = 0; j < this._pitchCount; j++) {\n\t\t\t\tconst pitchNameIndex: number = (j + createKeys(this._doc.song.edo)[this._doc.song.key].basePitch) % this._doc.song.edo;\n\t\t\t\tconst isWhiteKey: boolean = createKeys(this._doc.song.edo)[pitchNameIndex].isWhiteKey;\n\t\t\t\tthis._pianoKeys[j].style.background = isWhiteKey ? ColorConfig.whitePianoKey : ColorConfig.blackPianoKey;\n\t\t\t\tif (!Config.scales[this._doc.song.scale].flags[j % this._doc.song.edo]) {\n\t\t\t\t\tthis._pianoKeys[j].classList.add(\"disabled\");\n\t\t\t\t\tthis._pianoLabels[j].style.display = \"none\";\n\t\t\t\t} else {\n\t\t\t\t\tthis._pianoKeys[j].classList.remove(\"disabled\");\n\t\t\t\t\tthis._pianoLabels[j].style.display = \"\";\n\t\t\t\t\t\t\n\t\t\t\t\tconst label: HTMLDivElement = this._pianoLabels[j];\n\n\t\t\t\t\tif ((j % this._doc.song.edo) == 0) {\n\t\t\t\t\t\tlabel.style.transform = \"translate(-5px, 0px)\";\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlabel.style.transform = \"translate(0px, 0px)\";\n\t\t\t\t\t}\n\n\t\t\t\t\t/* @jummbus - Visual distinciton for bass notes during live input. Axed for now... maybe needs new colors?\n\t\t\t\t\tI want to do filter: hue-shift(60deg) but keys are usually grayscale, and filter: is used already anyway for displaying played notes as pressed.\n\t\t\t\t\tif ( j + octaveOffset <= Piano.getBassCutoffPitch(this._doc) && this._doc.prefs.bassOffset != 0) {\n\t\t\t\t\t\tlabel.style.setProperty(\"font-style\", \"italic\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._pianoKeys[j].style.setProperty(\"font-style\", \"\");\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\n\n\t\t\t\t\tlabel.style.color = createKeys(this._doc.song.edo)[pitchNameIndex].isWhiteKey ? \"black\" : \"white\";\n\t\t\t\t\tlabel.textContent = Piano.getPitchName(pitchNameIndex, j, this._doc.getBaseVisibleOctave(this._doc.channel), this._doc.song.edo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (isMod) {\n\t\t\tlet firstRow: string = \"\";\n\t\t\tlet secondRow: string = \"\";\n\t\t\tlet useFirstColor: string = ColorConfig.modLabelPrimaryText;\n\t\t\tlet useSecondColor: string = ColorConfig.modLabelSecondaryText;\n\t\t\tfor (let j: number = 0; j < Config.modCount; j++) {\n\n\t\t\t\tlet usingSecondRow: boolean = true;\n\t\t\t\tlet usingMod: boolean = true;\n\t\t\t\tlet instrumentVal: number = instrument.modInstruments[Config.modCount - j - 1] + 1;\n\t\t\t\tlet channelVal: number = instrument.modChannels[Config.modCount - j - 1] + 1;\n\t\t\t\tlet modulator: number = instrument.modulators[Config.modCount - j - 1];\n\t\t\t\tlet status: number = 1 + +(channelVal - 1 >= this._doc.song.pitchChannelCount);\n\t\t\t\tif (instrument.modChannels[Config.modCount - j - 1] == -2)\n\t\t\t\t\tstatus = 0;\n\t\t\t\telse if (instrument.modChannels[Config.modCount - j - 1] == -1)\n\t\t\t\t\tstatus = 3;\n\t\t\t\tlet instrumentsLength: number = this._doc.song.channels[Math.max(0,channelVal - 1)].instruments.length;\n\t\t\t\t// 0 - none\n\t\t\t\t// 1 - pitch\n\t\t\t\t// 2 - noise\n\t\t\t\t// 3 - song\n\n\n\t\t\t\tswitch (status) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tfirstRow = \"Mod\"\n\t\t\t\t\t\tusingSecondRow = false;\n\t\t\t\t\t\tuseSecondColor = ColorConfig.modLabelSecondaryText;\n\t\t\t\t\t\tusingMod = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tif (this._doc.song.channels[channelVal - 1].name == \"\") {\n\n\t\t\t\t\t\t\tif (instrumentsLength > 1) {\n\t\t\t\t\t\t\t\tif (channelVal >= 10 || instrumentVal >= 10) {\n\t\t\t\t\t\t\t\t\tfirstRow = \"P\" + channelVal;\n\t\t\t\t\t\t\t\t\tif (instrumentVal - 1 == instrumentsLength) {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" All\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (instrumentVal - 1 > instrumentsLength) {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" Act\";\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" I\" + instrumentVal;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tfirstRow = \"Pitch\" + channelVal;\n\t\t\t\t\t\t\t\t\tif (instrumentVal-1 == instrumentsLength) {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" All\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (instrumentVal - 1 > instrumentsLength) {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" Act\";\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" Ins\" + instrumentVal;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tfirstRow = \"Pitch \" + channelVal;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Channel name display\n\t\t\t\t\t\t\tlet insText: string;\n\t\t\t\t\t\t\tif (instrumentVal - 1 == instrumentsLength) {\n\t\t\t\t\t\t\t\tinsText = \" All\";\n\t\t\t\t\t\t\t} else if (instrumentVal - 1 > instrumentsLength) {\n\t\t\t\t\t\t\t\tinsText = \" Act\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tinsText = \" I\" + instrumentVal;\n                            }\n\t\t\t\t\t\t\tif (instrumentsLength > 1) {\n\t\t\t\t\t\t\t\tfirstRow = \"P\" + channelVal + \" \" + this._doc.song.channels[channelVal - 1].name + insText;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tfirstRow = \"P\" + channelVal + \" \" + this._doc.song.channels[channelVal - 1].name;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tconst absoluteChannelVal: number = instrument.modChannels[Config.modCount - j - 1];\n\t\t\t\t\t\tconst relativeChannelVal: number = absoluteChannelVal - this._doc.song.pitchChannelCount;\n\n\t\t\t\t\t\tif (this._doc.song.channels[absoluteChannelVal].name == \"\") {\n\n\t\t\t\t\t\t\tif (instrumentsLength > 1) {\n\n\t\t\t\t\t\t\t\tif ((relativeChannelVal + 1) >= 10 || instrumentVal >= 10) {\n\t\t\t\t\t\t\t\t\tfirstRow = \"N\" + (relativeChannelVal + 1);\n\t\t\t\t\t\t\t\t\tif (instrumentVal - 1 == instrumentsLength) {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" All\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (instrumentVal - 1 > instrumentsLength) {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" Act\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" I\" + instrumentVal;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tfirstRow = \"Noise\" + (relativeChannelVal + 1);\n\t\t\t\t\t\t\t\t\tif (instrumentVal - 1 == instrumentsLength) {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" All\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse if (instrumentVal - 1 > instrumentsLength) {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" Act\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t\tfirstRow += \" Ins\" + instrumentVal;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tfirstRow = \"Noise \" + (relativeChannelVal + 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Channel name display\n\t\t\t\t\t\t\tif (instrumentsLength > 1) {\n\t\t\t\t\t\t\t\tlet insText: string;\n\t\t\t\t\t\t\t\tif (instrumentVal - 1 == instrumentsLength) {\n\t\t\t\t\t\t\t\t\tinsText = \" All\";\n\t\t\t\t\t\t\t\t} else if (instrumentVal - 1 > instrumentsLength) {\n\t\t\t\t\t\t\t\t\tinsText = \" Act\";\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tinsText = \" I\" + instrumentVal;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfirstRow = \"N\" + (relativeChannelVal + 1) + \" \" + this._doc.song.channels[absoluteChannelVal].name + insText;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tfirstRow = \"N\" + (relativeChannelVal + 1) + \" \" + this._doc.song.channels[absoluteChannelVal].name;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tfirstRow = \"Song\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// When unused, show name of mod on second row\n\t\t\t\tif (usingSecondRow) {\n\t\t\t\t\tsecondRow = Config.modulators[modulator].pianoName;\n\t\t\t\t\tif (modulator == Config.modulators.dictionary[\"none\"].index) {\n\t\t\t\t\t\tuseSecondColor = ColorConfig.modLabelSecondaryText;\n\t\t\t\t\t\tusingMod = false;\n\t\t\t\t\t}\n\t\t\t\t\telse if (modulator == Config.modulators.dictionary[\"eq filter\"].index || modulator == Config.modulators.dictionary[\"note filter\"].index) {\n\t\t\t\t\t\tvar text = \" Morph\";\n\t\t\t\t\t\tvar filterVal = instrument.modFilterTypes[Config.modCount - j - 1];\n\t\t\t\t\t\tif (filterVal > 0 && (filterVal % 2)) {\n\t\t\t\t\t\t\ttext = \" Dot\" + Math.ceil(filterVal / 2) + \"X\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (filterVal > 0) {\n\t\t\t\t\t\t\ttext = \" Dot\" + Math.ceil(filterVal / 2) + \"Y\";\n                        }\n\t\t\t\t\t\t\n\t\t\t\t\t\tsecondRow += text;\n                    }\n\t\t\t\t}\n\n\t\t\t\tconst firstLabel: SVGTextElement = this._modFirstLabels[j];\n\t\t\t\tconst secondLabel: SVGTextElement = this._modSecondLabels[j];\n\t\t\t\tconst modCountLabel: SVGTextElement = this._modCountLabels[j];\n\t\t\t\tconst modCountRect: SVGRectElement = this._modCountRects[j];\n\t\t\t\tfirstLabel.style.fill = useFirstColor;\n\t\t\t\tfirstLabel.textContent = firstRow;\n\t\t\t\tsecondLabel.style.fill = useSecondColor;\n\t\t\t\tsecondLabel.textContent = usingSecondRow ? secondRow : \"Not set\";\n\t\t\t\tmodCountLabel.textContent = \"\" + (Config.modCount - j);\n\t\t\t\tmodCountRect.style.fill = usingMod ? ColorConfig.indicatorPrimary : ColorConfig.modLabelSecondaryText;\n\n\t\t\t\t// Check if text is too long, if name is set\n\t\t\t\tif (this._doc.song.channels[Math.max(0,instrument.modChannels[Config.modCount - j - 1])].name != \"\") {\n\t\t\t\t\tlet scaleFactor: string = \"1\";\n\t\t\t\t\tlet height: number = firstLabel.parentElement!.parentElement!.getBoundingClientRect().height;\n\t\t\t\t\tlet length: number = firstLabel.getComputedTextLength();\n\t\t\t\t\tlet squeeze: number = 0;\n\t\t\t\t\tif (length > height - 8) {\n\t\t\t\t\t\tscaleFactor = \"0.65\";\n\t\t\t\t\t\tsqueeze = 2;\n\t\t\t\t\t}\n\t\t\t\t\telse if (length > height - 24) {\n\t\t\t\t\t\tscaleFactor = \"0.8\";\n\t\t\t\t\t\tsqueeze = 1;\n\t\t\t\t\t}\n\t\t\t\t\tfirstLabel.style.transform = \"rotate(-90deg) translate(\" + (-20 - squeeze - Math.round(Math.max(0, (height - 80) / 2))) + \"px, 39px) scale(\" + scaleFactor + \", 1)\";\n\t\t\t\t\t// Truncate end of string if it's too long, but keep instrument num\n\t\t\t\t\twhile (scaleFactor == \"0.65\" && firstLabel.getComputedTextLength() > height + 8) {\n\t\t\t\t\t\tvar offset = 4 + (instrumentVal >= 10 ? 1 : 0);\n\t\t\t\t\t\tfirstLabel.textContent = firstLabel.textContent.substr(0, firstLabel.textContent.length - offset) + firstLabel.textContent.substr(firstLabel.textContent.length - offset + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet height: number = firstLabel.parentElement!.parentElement!.getBoundingClientRect().height;\n\t\t\t\t\tfirstLabel.style.transform = \"rotate(-90deg) translate(\" + (-20 - Math.round(Math.max(0, (height - 80) / 2))) + \"px, 39px) scale(1, 1)\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._updatePreview();\n\t}\n\n\tpublic static getPitchName(pitchNameIndex: number, scaleIndex: number, baseVisibleOctave: number, edo: number): string {\n\t\tlet text: string;\n\n\t\ttext = createKeys(edo)[(pitchNameIndex + edo) % edo].name;\n\n\t\tif (scaleIndex % edo == 0) {\n\t\t\ttext += Math.floor(scaleIndex / edo) + baseVisibleOctave;\n\t\t}\n\n\t\treturn text;\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"../synth/SynthConfig\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Prompt } from \"./Prompt\";\nimport { ChangeGroup } from \"./Change\";\nimport { ChangeBarCount } from \"./changes\";\nimport { ColorConfig } from \"./ColorConfig\";\n\n\tconst {button, div, span, h2, input, br, select, option} = HTML;\n\nexport class SongDurationPrompt implements Prompt {\n\t\tprivate readonly _barsStepper: HTMLInputElement = input({style: \"width: 3em; margin-left: 1em;\", type: \"number\", step: \"1\"});\n\t\tprivate readonly _positionSelect: HTMLSelectElement = select({style: \"width: 100%;\"},\n\t\t\toption({value: \"end\"},       \"Apply change at end of song.\"),\n\t\t\toption({value: \"beginning\"}, \"Apply change at beginning of song.\"),\n\t);\n\t\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\t\tprivate readonly _okayButton: HTMLButtonElement = button({class: \"okayButton\", style: \"width:45%;\"}, \"Okay\");\n\t\t\n\t\tpublic readonly container: HTMLDivElement = div({class: \"prompt noSelection\", style: \"width: 250px;\"},\n\t\th2(\"Song Length\"),\n\t\t\tdiv({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\tdiv({style: \"display: inline-block; text-align: right;\"},\n\t\t\t\t\"Bars per song:\",\n\t\t\t\tbr(),\n\t\t\t\t\tspan({style: `font-size: smaller; color: ${ColorConfig.secondaryText};`}, \"(Multiples of 4 are recommended)\"),\n\n\t\t\t),\n\t\t\tthis._barsStepper,\n\t\t),\n\t\t\tdiv({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\"},\n\t\t\t\tdiv({class: \"selectContainer\", style: \"width: 100%;\"}, this._positionSelect),\n\t\t),\n\t\t\tdiv({style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\"},\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\t\n\tconstructor(private _doc: SongDocument) {\n\n\t\tthis._barsStepper.value = this._doc.song.barCount + \"\";\n\t\tthis._barsStepper.min = Config.barCountMin + \"\";\n\t\tthis._barsStepper.max = Config.barCountMax + \"\";\n\t\t\t\n\t\tconst lastPosition: string | null = window.localStorage.getItem(\"barCountPosition\");\n\t\tif (lastPosition != null) {\n\t\t\tthis._positionSelect.value = lastPosition;\n\t\t}\n\t\t\t\n\t\tthis._barsStepper.select();\n\t\t\tsetTimeout(()=>this._barsStepper.focus());\n\t\t\t\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis._barsStepper.addEventListener(\"keypress\", SongDurationPrompt._validateKey);\n\t\tthis._barsStepper.addEventListener(\"blur\", SongDurationPrompt._validateNumber);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\t\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\t\n\tpublic cleanUp = (): void => {\n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis._barsStepper.removeEventListener(\"keypress\", SongDurationPrompt._validateKey);\n\t\tthis._barsStepper.removeEventListener(\"blur\", SongDurationPrompt._validateNumber);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\t\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\t\tif ((<Element> event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t}\n\t\t\n\tprivate static _validateKey(event: KeyboardEvent): boolean {\n\t\tconst charCode = (event.which) ? event.which : event.keyCode;\n\t\tif (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {\n\t\t\tevent.preventDefault();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\t\n\tprivate static _validateNumber(event: Event): void {\n\t\tconst input: HTMLInputElement = <HTMLInputElement>event.target;\n\t\tinput.value = String(SongDurationPrompt._validate(input));\n\t}\n\t\t\n\tprivate static _validate(input: HTMLInputElement): number {\n\t\treturn Math.floor(Math.max(Number(input.min), Math.min(Number(input.max), Number(input.value))));\n\t}\n\t\t\n\tprivate _saveChanges = (): void => {\n\t\twindow.localStorage.setItem(\"barCountPosition\", this._positionSelect.value);\n\t\tconst group: ChangeGroup = new ChangeGroup();\n\t\tgroup.append(new ChangeBarCount(this._doc, SongDurationPrompt._validate(this._barsStepper), this._positionSelect.value == \"beginning\"));\n\t\tthis._doc.prompt = null;\n\t\tthis._doc.record(group, true);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {Config} from \"../synth/SynthConfig\";\nimport {Instrument} from \"../synth/synth\";\nimport {HTML} from \"imperative-html/dist/esm/elements-strict\";\nimport {SongDocument} from \"./SongDocument\";\nimport {Prompt} from \"./Prompt\";\nimport {ChangeGroup} from \"./Change\";\nimport {ChangeStringSustainType} from \"./changes\";\n\nconst {button, div, h2, p, select, option} = HTML;\n\nexport class SustainPrompt implements Prompt {\n\tprivate readonly _typeSelect: HTMLSelectElement = select({style: \"width: 100%;\"},\n\t\toption({value: \"acoustic\"}, \"(A) Acoustic\"),\n\t\toption({value: \"bright\"}, \"(B) Bright\"),\n\t);\n\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\tprivate readonly _okayButton: HTMLButtonElement = button({class: \"okayButton\", style: \"width:45%;\"}, \"Okay\");\n\t\n\tpublic readonly container: HTMLDivElement = div({class: \"prompt\", style: \"width: 300px;\"},\n\t\tdiv(\n\t\t\th2(\"String Sustain\"),\n\t\t\tp(\"This setting controls how quickly the picked string vibration decays.\"),\n\t\t\tp(\"Unlike most of BeepBox's instrument synthesizer features, a picked string cannot change frequency suddenly while maintaining its decay. If a tone's pitch changes suddenly (e.g. if the chord type is set to \\\"arpeggio\\\" or the transition type is set to \\\"continues\\\") then the string will be re-picked and start decaying from the beginning again, even if the envelopes don't otherwise restart.\"),\n\t\t),\n\t\tdiv({style: {display: Config.enableAcousticSustain ? undefined : \"none\"}},\n\t\t\tp(\"BeepBox comes with two slightly different sustain designs. You can select one here and press \\\"Okay\\\" to confirm it.\"),\n\t\t\tdiv({class: \"selectContainer\", style: \"width: 100%;\"}, this._typeSelect),\n\t\t),\n\t\tdiv({style: {display: Config.enableAcousticSustain ? \"flex\" : \"none\", \"flex-direction\": \"row-reverse\", \"justify-content\": \"space-between\"}},\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\n\tconstructor(private _doc: SongDocument) {\n\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\tthis._typeSelect.value = Config.sustainTypeNames[instrument.stringSustainType];\n\t\t\n\t\tsetTimeout(()=>this._cancelButton.focus());\n\t\t\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\n\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\n\tpublic cleanUp = (): void => { \n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif ((<Element> event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t}\n\t\n\tprivate _saveChanges = (): void => {\n\t\tif (Config.enableAcousticSustain) {\n\t\t\tconst group: ChangeGroup = new ChangeGroup();\n\t\t\tgroup.append(new ChangeStringSustainType(this._doc, <any> Config.sustainTypeNames.indexOf(this._typeSelect.value)));\n\t\t\tthis._doc.prompt = null;\n\t\t\tthis._doc.record(group, true);\n\t\t} else {\n\t\t\tthis._close();\n\t\t}\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Dictionary } from \"../synth/SynthConfig\";\nimport { Song } from \"../synth/synth\";\n\n\t\nexport interface RecoveredVersion {\n\tuid: string;\n\ttime: number;\n\tname: string;\n\twork: number;\n}\n\nexport interface RecoveredSong {\n\tversions: RecoveredVersion[];\n}\n\nconst versionPrefix = \"songVersion: \";\nconst maximumSongCount = 8;\nconst maximumWorkPerVersion = 3 * 60 * 1000; // 3 minutes\nconst minimumWorkPerSpan = 1 * 60 * 1000; // 1 minute\n\nfunction keyIsVersion(key: string): boolean {\n\treturn key.indexOf(versionPrefix) == 0;\n}\n\nfunction keyToVersion(key: string): RecoveredVersion {\n\treturn JSON.parse(key.substring(versionPrefix.length));\n}\n\nexport function versionToKey(version: RecoveredVersion): string {\n\treturn versionPrefix + JSON.stringify(version);\n}\n\nexport function generateUid(): string {\n\t// Not especially robust, but simple and effective!\n\treturn ((Math.random() * (-1 >>> 0)) >>> 0).toString(32);\n}\n\nexport function errorAlert(error: any): void {\n\tconsole.warn(error);\n\twindow.alert(\"Whoops, the song data appears to have been corrupted! Please try to recover the last working version of the song from the \\\"Recover Recent Song...\\\" option in BeepBox's \\\"File\\\" menu.\");\n}\n\n\nfunction compareSongs(a: RecoveredSong, b: RecoveredSong): number {\n\treturn b.versions[0].time - a.versions[0].time;\n}\n\nfunction compareVersions(a: RecoveredVersion, b: RecoveredVersion): number {\n\treturn b.time - a.time;\n}\n\t\t\nexport class SongRecovery {\n\tprivate _saveVersionTimeoutHandle: ReturnType<typeof setTimeout>;\n\t\t\n\tprivate _song: Song = new Song();\n\t\t\n\tpublic static getAllRecoveredSongs(): RecoveredSong[] {\n\t\tconst songs: RecoveredSong[] = [];\n\t\tconst songsByUid: Dictionary<RecoveredSong> = {};\n\t\tfor (let i = 0; i < localStorage.length; i++) {\n\t\t\tconst itemKey: string = localStorage.key(i)!;\n\t\t\tif (keyIsVersion(itemKey)) {\n\t\t\t\tconst version: RecoveredVersion = keyToVersion(itemKey);\n\t\t\t\tlet song: RecoveredSong | undefined = songsByUid[version.uid];\n\t\t\t\tif (song == undefined) {\n\t\t\t\t\t\tsong = {versions: []};\n\t\t\t\t\tsongsByUid[version.uid] = song;\n\t\t\t\t\tsongs.push(song);\n\t\t\t\t}\n\t\t\t\tsong.versions.push(version);\n\t\t\t}\n\t\t}\n\t\tfor (const song of songs) {\n\t\t\tsong.versions.sort(compareVersions);\n\t\t}\n\t\tsongs.sort(compareSongs);\n\t\treturn songs;\n\t}\n\t\t\n\tpublic saveVersion(uid: string, name: string, songData: string): void {\n\t\tconst newName: string = name;\n\t\tconst newTime: number = Math.round(Date.now());\n\t\t\t\n\t\tclearTimeout(this._saveVersionTimeoutHandle);\n\t\tthis._saveVersionTimeoutHandle = setTimeout((): void => {\n\t\t\ttry {\n\t\t\t\t// Ensure that the song is not corrupted.\n\t\t\t\tthis._song.fromBase64String(songData);\n\t\t\t} catch (error) {\n\t\t\t\terrorAlert(error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\t\n\t\t\tconst songs: RecoveredSong[] = SongRecovery.getAllRecoveredSongs();\n\t\t\tlet currentSong: RecoveredSong | null = null;\n\t\t\tfor (const song of songs) {\n\t\t\t\tif (song.versions[0].uid == uid) {\n\t\t\t\t\tcurrentSong = song;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (currentSong == null) {\n\t\t\t\t\tcurrentSong = {versions: []};\n\t\t\t\tsongs.unshift(currentSong);\n\t\t\t}\n\t\t\tlet versions: RecoveredVersion[] = currentSong.versions;\n\t\t\t\t\n\t\t\tlet newWork: number = 1000; // default to 1 second of work for the first change.\n\t\t\tif (versions.length > 0) {\n\t\t\t\tconst mostRecentTime: number = versions[0].time;\n\t\t\t\tconst mostRecentWork: number = versions[0].work;\n\t\t\t\tnewWork = mostRecentWork + Math.min(maximumWorkPerVersion, newTime - mostRecentTime);\n\t\t\t}\n\t\t\t\t\n\t\t\tconst newVersion: RecoveredVersion = { uid: uid, name: newName, time: newTime, work: newWork };\n\t\t\tconst newKey: string = versionToKey(newVersion);\n\t\t\tversions.unshift(newVersion);\n\t\t\tlocalStorage.setItem(newKey, songData);\n\t\t\t\t\n\t\t\t// Consider deleting an old version to free up space.\n\t\t\tlet minSpan: number = minimumWorkPerSpan; // start out with a gap between versions.\n\t\t\tconst spanMult: number = Math.pow(2, 1 / 2); // Double the span every 2 versions back.\n\t\t\tfor (var i: number = 1; i < versions.length; i++) {\n\t\t\t\tconst currentWork: number = versions[i].work;\n\t\t\t\tconst olderWork: number = (i == versions.length - 1) ? 0.0 : versions[i + 1].work;\n\t\t\t\t// If not enough work happened between two versions, discard one of them.\n\t\t\t\tif (currentWork - olderWork < minSpan) {\n\t\t\t\t\tlet indexToDiscard: number = i;\n\t\t\t\t\tif (i < versions.length - 1) {\n\t\t\t\t\t\tconst currentTime: number = versions[i].time;\n\t\t\t\t\t\tconst newerTime: number = versions[i - 1].time;\n\t\t\t\t\t\tconst olderTime: number = versions[i + 1].time;\n\t\t\t\t\t\t// Weird heuristic: Between the three adjacent versions, prefer to keep\n\t\t\t\t\t\t// the newest and the oldest, discarding the middle one (i), unless\n\t\t\t\t\t\t// there is a large gap of time between the newest and middle one, in\n\t\t\t\t\t\t// which case the middle one represents the end of a span of work and is\n\t\t\t\t\t\t// thus more memorable.\n\t\t\t\t\t\tif ((currentTime - olderTime) < 0.5 * (newerTime - currentTime)) {\n\t\t\t\t\t\t\tindexToDiscard = i + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlocalStorage.removeItem(versionToKey(versions[indexToDiscard]));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tminSpan *= spanMult;\n\t\t\t}\n\t\t\t\t\n\t\t\t// If there are too many songs, discard the least important ones.\n\t\t\t// Songs that are older, or have less work, are less important.\n\t\t\twhile (songs.length > maximumSongCount) {\n\t\t\t\tlet leastImportantSong: RecoveredSong | null = null;\n\t\t\t\tlet leastImportance: number = Number.POSITIVE_INFINITY;\n\t\t\t\tfor (let i: number = Math.round(maximumSongCount / 2); i < songs.length; i++) {\n\t\t\t\t\tconst song: RecoveredSong = songs[i];\n\t\t\t\t\tconst timePassed: number = newTime - song.versions[0].time;\n\t\t\t\t\t// Convert the time into a factor of 12 hours, add one, then divide by the result.\n\t\t\t\t\t// This creates a curve that starts at 1, and then gradually drops off.\n\t\t\t\t\tconst timeScale: number = 1.0 / ((timePassed / (12 * 60 * 60 * 1000)) + 1.0);\n\t\t\t\t\t// Add 5 minutes of work, to balance out simple songs a little bit.\n\t\t\t\t\tconst adjustedWork: number = song.versions[0].work + 5 * 60 * 1000;\n\t\t\t\t\tconst weight: number = adjustedWork * timeScale;\n\t\t\t\t\tif (leastImportance > weight) {\n\t\t\t\t\t\tleastImportance = weight;\n\t\t\t\t\t\tleastImportantSong = song;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const version of leastImportantSong!.versions) {\n\t\t\t\t\tlocalStorage.removeItem(versionToKey(version));\n\t\t\t\t}\n\t\t\t\tsongs.splice(songs.indexOf(leastImportantSong!), 1);\n\t\t\t}\n\t\t}, 750); // Wait 3/4 of a second before saving a version.\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { SongDocument } from \"./SongDocument\";\nimport { RecoveredSong, RecoveredVersion, SongRecovery, versionToKey } from \"./SongRecovery\";\nimport { Prompt } from \"./Prompt\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\n\n\tconst {button, div, h2, p, select, option, iframe} = HTML;\n\nexport class SongRecoveryPrompt implements Prompt {\n\tprivate readonly _songContainer: HTMLDivElement = div();\n\t\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\t\t\n\t\tpublic readonly container: HTMLDivElement = div({class: \"prompt\", style: \"width: 300px;\"},\n\t\th2(\"Song Recovery\"),\n\t\t\tdiv({style: \"max-height: 385px; overflow-y: auto;\"},\n\t\t\tp(\"This is a TEMPORARY list of songs you have recently modified. Please keep your own backups of songs you care about!\"),\n\t\t\tthis._songContainer,\n\t\t\tp(\"(If \\\"Display Song Data in URL\\\" is enabled in your preferences, then you may also be able to find song versions in your browser history. However, song recovery won't work if you were browsing in private/incognito mode.)\"),\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\t\t\n\t\tconst songs: RecoveredSong[] = SongRecovery.getAllRecoveredSongs();\n\t\t\t\n\t\tif (songs.length == 0) {\n\t\t\tthis._songContainer.appendChild(p(\"There are no recovered songs available yet. Try making a song!\"));\n\t\t}\n\t\t\t\n\t\tfor (const song of songs) {\n\t\t\t\tconst versionMenu: HTMLSelectElement = select({style: \"width: 100%;\"});\n\t\t\t\t\n\t\t\tfor (const version of song.versions) {\n\t\t\t\tversionMenu.appendChild(option({ value: version.time }, version.name + \": \" + new Date(version.time).toLocaleString()));\n\t\t\t}\n\t\t\t\t\n\t\t\t\tconst player: HTMLIFrameElement = iframe({style: \"width: 100%; height: 60px; border: none; display: block;\"});\n\t\t\tplayer.src = \"player/#song=\" + window.localStorage.getItem(versionToKey(song.versions[0]));\n\t\t\t\tconst container: HTMLDivElement = div({style: \"margin: 4px 0;\"}, div({class: \"selectContainer\", style: \"width: 100%; margin: 2px 0;\"}, versionMenu), player);\n\t\t\tthis._songContainer.appendChild(container);\n\t\t\t\t\n\t\t\tversionMenu.addEventListener(\"change\", () => {\n\t\t\t\tconst version: RecoveredVersion = song.versions[versionMenu.selectedIndex];\n\t\t\t\tplayer.contentWindow!.location.replace(\"player/#song=\" + window.localStorage.getItem(versionToKey(version)));\n\t\t\t\tplayer.contentWindow!.dispatchEvent(new Event(\"hashchange\"));\n\t\t\t});\n\t\t}\n\t}\n\t\t\n\t\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\t\n\t\tpublic cleanUp = (): void => { \n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {Config} from \"../synth/SynthConfig\";\nimport {createKeys} from \"../synth/CreateScalesAndKeys\";\nimport {EditorConfig} from \"./EditorConfig\";\nimport {SongDocument} from \"./SongDocument\";\nimport {Prompt} from \"./Prompt\";\nimport {HTML} from \"imperative-html/dist/esm/elements-strict\";\nimport {ColorConfig} from \"./ColorConfig\";\nimport {KeyboardLayout} from \"./KeyboardLayout\";\nimport {Piano} from \"./Piano\";\n\nconst {button, label, div, p, a, h2, input, select, option} = HTML;\n\nexport class RecordingSetupPrompt implements Prompt {\n\tprivate readonly _keyboardMode: HTMLSelectElement = select({style: \"width: 100%;\"},\n\t\toption({value: \"useCapsLockForNotes\"}, \"simple shortcuts, use caps lock to play notes\"),\n\t\toption({value: \"pressControlForShortcuts\"}, \"simple notes, press \" + EditorConfig.ctrlName + \" for shortcuts\"),\n\t);\n\tprivate readonly _keyboardLayout: HTMLSelectElement = select({style: \"width: 100%;\"},\n\t\toption({value: \"wickiHayden\"}, \"Wicki-Hayden\"),\n\t\toption({value: \"songScale\"}, \"selected song scale\"),\n\t\toption({value: \"pianoAtC\"}, \"piano starting at C :)\"),\n\t\toption({value: \"pianoAtA\"}, \"piano starting at A :(\"),\n\t\toption({value: \"pianoTransposingC\"}, \"piano transposing C :) to song key\"),\n\t\toption({value: \"pianoTransposingA\"}, \"piano transposing A :( to song key\"),\n\t);\n\tprivate readonly _bassOffset: HTMLSelectElement = select({style: \"width: 100%;\"},\n\t\toption({value: \"0\"}, \"disabled\"),\n\t\toption({value: \"-1\"}, \"before\"),\n\t\toption({value: \"1\"}, \"after\"),\n\t);\n\tprivate readonly _keyboardLayoutPreview: HTMLDivElement = div({style: \"display: grid; row-gap: 4px; margin: 4px auto; font-size: 10px;\"});\n\tprivate readonly _enableMidi: HTMLInputElement = input({style: \"width: 2em; margin-left: 1em;\", type: \"checkbox\"});\n\tprivate readonly _showRecordButton: HTMLInputElement = input({style: \"width: 2em; margin-left: 1em;\", type: \"checkbox\"});\n\tprivate readonly _snapRecordedNotesToRhythm: HTMLInputElement = input({style: \"width: 2em; margin-left: 1em;\", type: \"checkbox\"});\n\tprivate readonly _ignorePerformedNotesNotInScale: HTMLInputElement = input({style: \"width: 2em; margin-left: 1em;\", type: \"checkbox\"});\n\tprivate readonly _metronomeCountIn: HTMLInputElement = input({style: \"width: 2em; margin-left: 1em;\", type: \"checkbox\"});\n\tprivate readonly _metronomeWhileRecording: HTMLInputElement = input({style: \"width: 2em; margin-left: 1em;\", type: \"checkbox\"});\n\t\n\tprivate readonly _okayButton: HTMLButtonElement = button({class: \"okayButton\", style: \"width:45%;\"}, \"Okay\");\n\tprivate readonly _cancelButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\tpublic readonly container: HTMLDivElement = div({class: \"prompt noSelection recordingSetupPrompt\", style: \"width: 600px; text-align: right; max-height: 90%;\"},\n\t\th2({style: \"align-self: center;\"}, \"Note Recording Setup\"),\n\t\tdiv({style: \"display: grid; overflow-y: auto; overflow-x: hidden; flex-shrink: 1;\"},\n\t\t\tp(\"JummBox can record notes as you perform them. You can start recording by pressing Ctrl+Space (or \" + EditorConfig.ctrlSymbol + \"P).\"),\n\t\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;\"},\n\t\t\t\t\"Add ● record button next to ▶ play button:\",\n\t\t\t\tthis._showRecordButton,\n\t\t\t),\n\t\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;\"},\n\t\t\t\t\"Snap recorded notes to the song's rhythm:\",\n\t\t\t\tthis._snapRecordedNotesToRhythm,\n\t\t\t),\n\t\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;\"},\n\t\t\t\t\"Ignore notes not in the song's scale:\",\n\t\t\t\tthis._ignorePerformedNotesNotInScale,\n\t\t\t),\n\t\t\tp(\"While recording, you can perform notes on your keyboard!\"),\n\t\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; margin-top: 0.5em; margin-bottom: 0.5em; height: 2em; justify-content: center;\"},\n\t\t\t\t\"Keyboard layout:\",\n\t\t\t\tdiv({class: \"selectContainer\", style: \"width: 50%; margin-left: 1em;\"}, this._keyboardLayout),\n\t\t\t),\n\t\t\tthis._keyboardLayoutPreview,\n\t\t\tp(\"When not recording, you can use the computer keyboard either for shortcuts (like C and V for copy and paste) or for performing notes, depending on this mode:\"),\n\t\t\tlabel({style: \"display: flex; margin-top: 0.5em; margin-bottom: 0.5em; flex-direction: row; align-items: center; height: 2em; justify-content: center;\"},\n\t\t\t\tdiv({class: \"selectContainer\", style: \"width: 50%;\"}, this._keyboardMode),\n\t\t\t),\n\t\t\tp(\"Performing music takes practice! Try slowing the tempo and using this metronome to help you keep a rhythm.\"),\n\t\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;\"},\n\t\t\t\t\"Hear metronome while recording:\",\n\t\t\t\tthis._metronomeWhileRecording,\n\t\t\t),\n\t\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: center;\"},\n\t\t\t\t\"Count-in 1 bar of metronome before recording:\",\n\t\t\t\tthis._metronomeCountIn,\n\t\t\t),\n\t\t\tp(\"If you have a \", a({href: \"https://caniuse.com/midi\", target: \"_blank\"}, \"compatible browser\"), \" on a device connected to a MIDI keyboard, you can use it to perform notes in JummBox! (Or you could buy \", a({href: \"https://imitone.com/\", target: \"_blank\"}, \"Imitone\"), \" or \", a({href: \"https://vochlea.com/\", target: \"_blank\"}, \"Dubler\"), \" to hum notes into a microphone while wearing headphones!)\"),\n\t\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; margin-top: 0.5em; height: 2em; justify-content: center;\"},\n\t\t\t\t\"Enable MIDI performance:\",\n\t\t\t\tthis._enableMidi,\n\t\t\t),\n\t\t\tp(\"The range of pitches available to play via your computer keyboard is affected by the octave scrollbar of the currently selected channel.\"),\n\t\t\tp(\"If you set the channel offset below to 'before' or 'after', notes below the middle octave in the view will be 'bass' notes, and placed in the channel before or after the viewed one. Using this, you can play bass and lead at the same time!\"),\n\t\t\tlabel({style: \"display: flex; flex-direction: row; align-items: center; margin-top: 0.5em; margin-bottom: 0.5em; height: 2em; justify-content: center;\"},\n\t\t\t\t\"Bass Offset:\",\n\t\t\t\tdiv({class: \"selectContainer\", style: \"width: 50%; margin-left: 1em;\"}, this._bassOffset),\n\t\t\t),\n\t\t\tp(\"Once you enable the setting, the keyboard layout above will darken to denote the new bass notes. The notes will be recorded with independent timing and this works with MIDI devices, too. Be aware that the octave offset of both used channels will impact how high/low the bass/lead are relative to one another.\"),\n\t\t\tp(\"Recorded notes often overlap such that one note ends after the next note already started. In JummBox, these notes get split into multiple notes which may sound different when re-played than they did when you were recording. To fix the sound, you can either manually clean up the notes in the pattern editor, or you could try enabling the \\\"transition type\\\" effect on the instrument and setting it to \\\"continue\\\".\"),\n\t\t\tdiv({style: `width: 100%; height: 80px; background: linear-gradient(rgba(0,0,0,0), ${ColorConfig.editorBackground}); position: sticky; bottom: 0; pointer-events: none;`}),\n\t\t),\n\t\tdiv({style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\"},\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis._keyboardMode.value = this._doc.prefs.pressControlForShortcuts ? \"pressControlForShortcuts\" : \"useCapsLockForNotes\";\n\t\tthis._keyboardLayout.value = this._doc.prefs.keyboardLayout;\n\t\tthis._bassOffset.value = String(this._doc.prefs.bassOffset);\n\t\tthis._enableMidi.checked = this._doc.prefs.enableMidi;\n\t\tthis._showRecordButton.checked = this._doc.prefs.showRecordButton;\n\t\tthis._snapRecordedNotesToRhythm.checked = this._doc.prefs.snapRecordedNotesToRhythm;\n\t\tthis._ignorePerformedNotesNotInScale.checked = this._doc.prefs.ignorePerformedNotesNotInScale;\n\t\tthis._metronomeCountIn.checked = this._doc.prefs.metronomeCountIn;\n\t\tthis._metronomeWhileRecording.checked = this._doc.prefs.metronomeWhileRecording;\n\t\t\n\t\tsetTimeout(()=>this._showRecordButton.focus());\n\t\t\n\t\tthis._okayButton.addEventListener(\"click\", this._confirm);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t\t\n\t\tthis._renderKeyboardLayoutPreview();\n\t\tthis._keyboardLayout.addEventListener(\"change\", this._renderKeyboardLayoutPreview);\n\t\tthis._bassOffset.addEventListener(\"change\", this._renderKeyboardLayoutPreview);\n\t}\n\t\n\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\n\tpublic cleanUp = (): void => { \n\t\tthis._okayButton.removeEventListener(\"click\", this._confirm);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\t\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif ((<Element> event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._confirm();\n\t\t}\n\t}\n\t\n\tprivate _confirm = (): void => { \n\t\tthis._doc.prefs.pressControlForShortcuts = (this._keyboardMode.value == \"pressControlForShortcuts\");\n\t\tthis._doc.prefs.keyboardLayout = this._keyboardLayout.value;\n\t\tthis._doc.prefs.bassOffset = Number(this._bassOffset.value);\n\t\tthis._doc.prefs.enableMidi = this._enableMidi.checked;\n\t\tthis._doc.prefs.showRecordButton = this._showRecordButton.checked;\n\t\tthis._doc.prefs.snapRecordedNotesToRhythm = this._snapRecordedNotesToRhythm.checked;\n\t\tthis._doc.prefs.ignorePerformedNotesNotInScale = this._ignorePerformedNotesNotInScale.checked;\n\t\tthis._doc.prefs.metronomeCountIn = this._metronomeCountIn.checked;\n\t\tthis._doc.prefs.metronomeWhileRecording = this._metronomeWhileRecording.checked;\n\t\tthis._doc.prefs.save();\n\t\tthis._close();\n\t}\n\t\n\tprivate _renderKeyboardLayoutPreview = (): void => {\n\t\twhile (this._keyboardLayoutPreview.firstChild) {\n\t\t\tthis._keyboardLayoutPreview.removeChild(this._keyboardLayoutPreview.firstChild);\n\t\t}\n\t\tconst rowLengths: number[] = [12, 12, 11, 10];\n\t\tconst scale: ReadonlyArray<boolean> = Config.scales[this._doc.song.scale].flags;\n\t\tfor (let rowIndex: number = 0; rowIndex < 4; rowIndex++) {\n\t\t\tconst row: HTMLDivElement = div({style: \"display: flex;\"});\n\t\t\tthis._keyboardLayoutPreview.appendChild(row);\n\t\t\tconst spacer: HTMLDivElement = div({style: \"width: \" + (rowIndex * this._doc.song.edo) + \"px; height: 20px; flex-shrink: 0;\"});\n\t\t\trow.appendChild(spacer);\n\t\t\tfor (let colIndex: number = 0; colIndex < rowLengths[rowIndex]; colIndex++) {\n\t\t\t\tconst key: HTMLDivElement = div({style: `width: 20px; height: 20px; margin: 0 2px; box-sizing: border-box; flex-shrink: 0; display: flex; justify-content: center; align-items: center;`});\n\t\t\t\trow.appendChild(key);\n\t\t\t\tconst pitch: number | null = KeyboardLayout.keyPosToPitch(this._doc, colIndex, 3 - rowIndex, this._keyboardLayout.value);\n\t\t\t\tif (pitch != null) {\n\t\t\t\t\tconst scalePitch: number = pitch % this._doc.song.edo;\n\t\t\t\t\tif (scale[scalePitch]) {\n\t\t\t\t\t\tif (scalePitch == 0) {\n\t\t\t\t\t\t\tkey.style.background = ColorConfig.tonic;\n\t\t\t\t\t\t} else if (scalePitch == Math.round(this._doc.song.edo*Math.log2(3/2)) && this._doc.prefs.showFifth) {\n\t\t\t\t\t\t\tkey.style.background = ColorConfig.fifthNote;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tkey.style.background = ColorConfig.pitchBackground;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkey.style.border = \"2px solid \" + ColorConfig.pitchBackground;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this._bassOffset.selectedIndex != 0 && pitch <= Piano.getBassCutoffPitch(this._doc)) {\n\t\t\t\t\t\tkey.style.setProperty(\"filter\", \"hue-rotate(60deg) brightness(0.5)\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tkey.style.setProperty(\"filter\", \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tconst pitchNameIndex: number = (scalePitch + createKeys(this._doc.song.edo)[this._doc.song.key].basePitch) % this._doc.song.edo;\n\t\t\t\t\tkey.textContent = Piano.getPitchName(pitchNameIndex, scalePitch, Math.floor(pitch / this._doc.song.edo), this._doc.song.edo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"../synth/SynthConfig\";\nimport { SpectrumWave, Instrument } from \"../synth/synth\";\nimport { SongDocument } from \"./SongDocument\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { ChangeSpectrum } from \"./changes\";\nimport { prettyNumber } from \"./EditorConfig\";\n\nexport class SpectrumEditor {\n\tprivate readonly _editorWidth: number = 120;\n\tprivate readonly _editorHeight: number = 26;\n\t\tprivate readonly _fill: SVGPathElement = SVG.path({fill: ColorConfig.uiWidgetBackground, \"pointer-events\": \"none\"});\n\t\tprivate readonly _octaves: SVGSVGElement = SVG.svg({\"pointer-events\": \"none\"});\n\t\tprivate readonly _fifths: SVGSVGElement = SVG.svg({\"pointer-events\": \"none\"});\n\t\tprivate readonly _curve: SVGPathElement = SVG.path({fill: \"none\", stroke: \"currentColor\", \"stroke-width\": 2, \"pointer-events\": \"none\"});\n\t\tprivate readonly _arrow: SVGPathElement = SVG.path({fill: \"currentColor\", \"pointer-events\": \"none\"});\n\t\tprivate readonly _svg: SVGSVGElement = SVG.svg({style: `background-color: ${ColorConfig.editorBackground}; touch-action: none; cursor: crosshair;`, width: \"100%\", height: \"100%\", viewBox: \"0 0 \"+this._editorWidth+\" \"+this._editorHeight, preserveAspectRatio: \"none\"},\n\t\tthis._fill,\n\t\tthis._octaves,\n\t\tthis._fifths,\n\t\tthis._curve,\n\t\tthis._arrow,\n\t);\n\t\t\n\tpublic readonly container: HTMLElement = HTML.div({class: \"spectrum\", style: \"height: 100%;\"}, this._svg);\n\t\t\n\tprivate _mouseX: number = 0;\n\tprivate _mouseY: number = 0;\n\tprivate _freqPrev: number = 0;\n\tprivate _ampPrev: number = 0;\n\tprivate _mouseDown: boolean = false;\n\tprivate _change: ChangeSpectrum | null = null;\n\tprivate _renderedPath: String = \"\";\n\tprivate _renderedFifths: boolean = true;\n\t\t\n\tconstructor(private _doc: SongDocument, private _spectrumIndex: number | null) {\n\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i += Config.spectrumControlPointsPerOctave) {\n\t\t\t\tthis._octaves.appendChild(SVG.rect({fill: ColorConfig.tonic, x: (i+1) * this._editorWidth / (Config.spectrumControlPoints + 2) - 1, y: 0, width: 2, height: this._editorHeight}));\n\t\t}\n\t\tfor (let i: number = 4; i <= Config.spectrumControlPoints; i += Config.spectrumControlPointsPerOctave) {\n\t\t\t\tthis._fifths.appendChild(SVG.rect({fill: ColorConfig.fifthNote, x: (i+1) * this._editorWidth / (Config.spectrumControlPoints + 2) - 1, y: 0, width: 2, height: this._editorHeight}));\n\t\t}\n\t\t\t\n\t\tthis.container.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenCursorReleased);\n\t\t\t\n\t\tthis.container.addEventListener(\"touchstart\", this._whenTouchPressed);\n\t\tthis.container.addEventListener(\"touchmove\", this._whenTouchMoved);\n\t\tthis.container.addEventListener(\"touchend\", this._whenCursorReleased);\n\t\tthis.container.addEventListener(\"touchcancel\", this._whenCursorReleased);\n\t}\n\t\t\n\tprivate _xToFreq(x: number): number {\n\t\treturn (Config.spectrumControlPoints + 2) * x / this._editorWidth - 1;\n\t}\n\t\t\n\tprivate _yToAmp(y: number): number {\n\t\treturn Config.spectrumMax * (1 - (y - 1) / (this._editorHeight - 2));\n\t}\n\t\t\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\t    \n\t\tthis._freqPrev = this._xToFreq(this._mouseX);\n\t\tthis._ampPrev = this._yToAmp(this._mouseY);\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenTouchPressed = (event: TouchEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mouseDown = true;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\t    \n\t\tthis._freqPrev = this._xToFreq(this._mouseX);\n\t\tthis._ampPrev = this._yToAmp(this._mouseY);\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = ((event.clientX || event.pageX) - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = ((event.clientY || event.pageY) - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenTouchMoved = (event: TouchEvent): void => {\n\t\tif (this.container.offsetParent == null) return;\n\t\tif (!this._mouseDown) return;\n\t\tevent.preventDefault();\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.touches[0].clientX - boundingRect.left) * this._editorWidth / (boundingRect.right - boundingRect.left);\n\t\tthis._mouseY = (event.touches[0].clientY - boundingRect.top) * this._editorHeight / (boundingRect.bottom - boundingRect.top);\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._whenCursorMoved();\n\t}\n\t\t\n\tprivate _whenCursorMoved(): void {\n\t\tif (this._mouseDown) {\n\t\t\tconst freq: number = this._xToFreq(this._mouseX);\n\t\t\tconst amp: number = this._yToAmp(this._mouseY);\n\t\t\t\t\n\t\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\t\tconst spectrumWave: SpectrumWave = (this._spectrumIndex == null) ? instrument.spectrumWave : instrument.drumsetSpectrumWaves[this._spectrumIndex];\n\t\t\t\t\n\t\t\tif (freq != this._freqPrev) {\n\t\t\t\tconst slope: number = (amp - this._ampPrev) / (freq - this._freqPrev);\n\t\t\t\tconst offset: number = this._ampPrev - this._freqPrev * slope;\n\t\t\t\tconst lowerFreq: number = Math.ceil(Math.min(this._freqPrev, freq));\n\t\t\t\tconst upperFreq: number = Math.floor(Math.max(this._freqPrev, freq));\n\t\t\t\tfor (let i: number = lowerFreq; i <= upperFreq; i++) {\n\t\t\t\t\tif (i < 0 || i >= Config.spectrumControlPoints) continue;\n\t\t\t\t\tspectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(i * slope + offset)));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\tspectrumWave.spectrum[Math.max(0, Math.min(Config.spectrumControlPoints - 1, Math.round(freq)))] = Math.max(0, Math.min(Config.spectrumMax, Math.round(amp)));\n\t\t\t\t\n\t\t\tthis._freqPrev = freq;\n\t\t\tthis._ampPrev = amp;\n\t\t\t\t\n\t\t\tthis._change = new ChangeSpectrum(this._doc, instrument, spectrumWave);\n\t\t\tthis._doc.setProspectiveChange(this._change);\n\t\t}\n\t}\n\t\t\n\tprivate _whenCursorReleased = (event: Event): void => {\n\t\tif (this._mouseDown) {\n\t\t\tthis._doc.record(this._change!);\n\t\t\tthis._change = null;\n\t\t}\n\t\tthis._mouseDown = false;\n\t}\n\t\t\n\tpublic render(): void {\n\t\tconst instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\t\tconst spectrumWave: SpectrumWave = (this._spectrumIndex == null) ? instrument.spectrumWave : instrument.drumsetSpectrumWaves[this._spectrumIndex];\n\t\tconst controlPointToHeight = (point: number): number => {\n\t\t\treturn (1 - (point / Config.spectrumMax)) * (this._editorHeight - 1) + 1;\n\t\t}\n\t\t\t\n\t\tlet lastValue: number = 0;\n\t\tlet path: string = \"M 0 \" + prettyNumber(this._editorHeight) + \" \";\n\t\tfor (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n\t\t\tlet nextValue: number = spectrumWave.spectrum[i];\n\t\t\tif (lastValue != 0 || nextValue != 0) {\n\t\t\t\tpath += \"L \";\n\t\t\t} else {\n\t\t\t\tpath += \"M \";\n\t\t\t}\n\t\t\tpath += prettyNumber((i + 1) * this._editorWidth / (Config.spectrumControlPoints + 2)) + \" \" + prettyNumber(controlPointToHeight(nextValue)) + \" \";\n\t\t\tlastValue = nextValue;\n\t\t}\n\t\t\t\n\t\tconst lastHeight: number = controlPointToHeight(lastValue);\n\t\tif (lastValue > 0) {\n\t\t\tpath += \"L \" + (this._editorWidth - 1) + \" \" + prettyNumber(lastHeight) + \" \";\n\t\t}\n\t\t\t\n\t\tif (this._renderedPath != path) {\n\t\t\tthis._renderedPath = path;\n\t\t\tthis._curve.setAttribute(\"d\", path);\n\t\t\tthis._fill.setAttribute(\"d\", path + \"L \" + this._editorWidth + \" \" + prettyNumber(lastHeight) + \" L \" + this._editorWidth + \" \" + prettyNumber(this._editorHeight) + \" L 0 \" + prettyNumber(this._editorHeight) + \" z \");\n\t\t\t\t\n\t\t\tthis._arrow.setAttribute(\"d\", \"M \" + this._editorWidth + \" \" + prettyNumber(lastHeight) + \" L \" + (this._editorWidth - 4) + \" \" + prettyNumber(lastHeight - 4) + \" L \" + (this._editorWidth - 4) + \" \" + prettyNumber(lastHeight + 4) + \" z\");\n\t\t\tthis._arrow.style.display = (lastValue > 0) ? \"\" : \"none\";\n\t\t}\n\t\tif (this._renderedFifths != this._doc.prefs.showFifth) {\n\t\t\tthis._renderedFifths = this._doc.prefs.showFifth;\n\t\t\tthis._fifths.style.display = this._doc.prefs.showFifth ? \"\" : \"none\";\n\t\t}\n\t}\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { Prompt } from \"./Prompt\";\nimport { SongDocument } from \"./SongDocument\";\nimport { ColorConfig } from \"./ColorConfig\";\n\n//namespace beepbox {\nconst { button, div, h2, select, option } = HTML;\n\nexport class ThemePrompt implements Prompt {\n\tprivate readonly _themeSelect: HTMLSelectElement = select({ style: \"width: 100%;\" },\n\t\toption({ value: \"dark classic\" }, \"BeepBox Dark\"),\n\t\toption({ value: \"light classic\" }, \"BeepBox Light\"),\n\t\toption({ value: \"dark competition\" }, \"BeepBox Competition Dark\"),\n\t\toption({ value: \"jummbox classic\" }, \"JummBox Dark\"),\n\t\t// option({ value: \"jummbox light\" }, \"JummBox Light\"), // It's not ready to see the world yet...\n\t\toption({ value: \"forest\" }, \"Forest\"),\n\t\toption({ value: \"canyon\" }, \"Canyon\"),\n\t\toption({ value: \"midnight\" }, \"Midnight\"),\n\t\toption({ value: \"beachcombing\" }, \"Beachcombing\"),\n\t\toption({ value: \"violet verdant\" }, \"Violet Verdant\"),\n\t\toption({ value: \"sunset\" }, \"Sunset\"),\n\t\toption({ value: \"autumn\" }, \"Autumn\"),\n\t\toption({ value: \"fruit\" }, \"Shadowfruit\"),\n\t\toption({ value: \"toxic\" }, \"Toxic\"),\n\t\toption({ value: \"roe\" }, \"Roe\"),\n\t\toption({ value: \"moonlight\" }, \"Moonlight\"),\n\t\toption({ value: \"portal\" }, \"Portal\"),\n\t\toption({ value: \"fusion\" }, \"Fusion\"),\n\t\toption({ value: \"inverse\" }, \"Inverse\"),\n\t\toption({ value: \"nebula\" }, \"Nebula\"),\n\t\toption({ value: \"roe light\" }, \"Roe Light\"),\n\t\toption({ value: \"energized\" }, \"Energized\"),\n\t\toption({ value: \"neapolitan\" }, \"Neapolitan\"),\n\t\toption({ value: \"poly\" }, \"Poly\"),\n\t\toption({ value: \"blutonium\" }, \"Blutonium\"),\n\t);\n\tprivate readonly _cancelButton: HTMLButtonElement = button({ class: \"cancelButton\" });\n\tprivate readonly _okayButton: HTMLButtonElement = button({ class: \"okayButton\", style: \"width:45%;\" }, \"Okay\");\n\n\tpublic readonly container: HTMLDivElement = div({ class: \"prompt noSelection\", style: \"width: 220px;\" },\n\t\th2(\"Set Theme\"),\n\t\tdiv({ style: \"display: flex; flex-direction: row; align-items: center; height: 2em; justify-content: flex-end;\" },\n\t\t\tdiv({ class: \"selectContainer\", style: \"width: 100%;\" }, this._themeSelect),\n\t\t),\n\t\tdiv({ style: \"display: flex; flex-direction: row-reverse; justify-content: space-between;\" },\n\t\t\tthis._okayButton,\n\t\t),\n\t\tthis._cancelButton,\n\t);\n\tprivate readonly lastTheme: string | null = window.localStorage.getItem(\"colorTheme\")\n\n\tconstructor(private _doc: SongDocument) {\n\t\tif (this.lastTheme != null) {\n\t\t\tthis._themeSelect.value = this.lastTheme;\n\t\t}\n\t\tthis._okayButton.addEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.addEventListener(\"click\", this._close);\n\t\tthis.container.addEventListener(\"keydown\", this._whenKeyPressed);\n\t\tthis._themeSelect.addEventListener(\"change\", this._previewTheme);\n\t}\n\n\tprivate _close = (): void => {\n\t\tif (this.lastTheme != null) {\n\t\t\tColorConfig.setTheme(this.lastTheme);\n\t\t} else {\n\t\t\tColorConfig.setTheme(\"jummbox classic\");\n\t\t}\n\t\tthis._doc.undo();\n\t}\n\n\tpublic cleanUp = (): void => {\n\t\tthis._okayButton.removeEventListener(\"click\", this._saveChanges);\n\t\tthis._cancelButton.removeEventListener(\"click\", this._close);\n\t\tthis.container.removeEventListener(\"keydown\", this._whenKeyPressed);\n\t}\n\n\tprivate _whenKeyPressed = (event: KeyboardEvent): void => {\n\t\tif ((<Element>event.target).tagName != \"BUTTON\" && event.keyCode == 13) { // Enter key\n\t\t\tthis._saveChanges();\n\t\t}\n\t}\n\n\tprivate _saveChanges = (): void => {\n\t\twindow.localStorage.setItem(\"colorTheme\", this._themeSelect.value);\n\t\tthis._doc.prompt = null;\n\t\tthis._doc.prefs.colorTheme = this._themeSelect.value;\n\t\tthis._doc.undo();\n\t}\n\n\tprivate _previewTheme = (): void => {\n\t\tColorConfig.setTheme(this._themeSelect.value);\n\t\tthis._doc.notifier.changed();\n\t}\n}\n//}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { Prompt } from \"./Prompt\";\nimport { SongDocument } from \"./SongDocument\";\nimport { Config } from \"../synth/SynthConfig\";\n\nconst { button, div, p, h2, h3 } = HTML;\n\nexport class TipPrompt implements Prompt {\n\t\tprivate readonly _closeButton: HTMLButtonElement = button({class: \"cancelButton\"});\n\t\t\n\tpublic readonly container: HTMLDivElement;\n\t\t\n\tconstructor(private _doc: SongDocument, type: string) {\n\t\tlet message: HTMLDivElement;\n\t\t\t\n\t\tswitch (type) {\n\t\t\tcase \"scale\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Scale\"),\n\t\t\t\t\tp(\"This setting limits the available pitches for adding notes. You may think that there's no point in limiting your choices, but the set of pitches you use has a strong influence on the mood and feel of your song, and these scales serve as guides to help you choose appropriate pitches. Don't worry, you can change the scale at any time, so you're not locked into it. Try making little melodies using all the available pitches of a scale to get a sense for how it sounds.\"),\n\t\t\t\t\tp(\"The most common scales are major and minor. Assuming your song uses all pitches in the scale and especially \\\"tonic\\\" pitches (the purple rows in the pattern editor) then major scales tend to sound more playful or optimistic, whereas minor scales sound more serious or sad.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"key\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Song Key\"),\n\t\t\t\t\tp(\"This setting can shift the frequency of every note in your entire song up or down, keeping the \\\"tonic\\\" pitches (the brown rows in the pattern editor) aligned with the selected \\\"key\\\" pitch.\"),\n\t\t\t\t\tp(\"If you've already placed some notes but they don't emphasize \\\"tonic\\\" pitches then the selected key isn't very meaningful. You can select the \\\"Detect Key\\\" option in the key menu to automatically align the most emphasized notes with \\\"tonic\\\" pitches.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"tempo\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Song Tempo\"),\n\t\t\t\t\tp(\"This setting controls the speed of your song, measured in beats-per-minute. A \\\"beat\\\" is the duration of the little gray rectangles in the pattern editor. (In conventional music notation, a \\\"quarter note\\\" is usually equivalent to \\\"beat\\\".)\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"reverb\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Reverb\"),\n\t\t\t\t\tp(\"Reverb is like a continuous echo effect. A little bit helps instruments sound more natural. Adding a lot of reverb can add sense of depth or mystery, but too much reverb can kinda \\\"smear\\\" sounds so that it's harder to distinguish notes or instruments, especially for lower \\\"bass\\\" notes.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"rhythm\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Rhythm\"),\n\t\t\t\t\tp(\"This setting determines how beats are divided. The pattern editor helps you align notes to fractions of a beat based on this setting.\"),\n\t\t\t\t\tp(\"If you've already placed some notes but they don't align with the selected rhythm, you can select the \\\"Snap Notes To Rhythm\\\" option in the rhythm menu to force the notes in the currently selected pattern(s) to align with the selected rhythm.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"instrumentIndex\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Instrument Number\"),\n\t\t\t\t\tp(\"In the \\\"Channel Settings\\\" option from JummBox's \\\"Edit\\\" menu, there are a few ways to enable multiple instruments per channel.\"),\n\t\t\t\t\tp(\"First, you could enable multiple simultaneous instruments per channel. All of the channel's instruments will play all of the notes in the channel at the same time, and you can click an instrument number to view and edit its settings.\"),\n\t\t\t\t\tp(\"Second, you could enable different instruments per pattern. Only one of the instruments will play at any given time, but you can click the instrument number to change which instrument is used for the currently selected pattern(s).\"),\n\t\t\t\t\tp(\"Finally, you can enable them both, in which case you can click an instrument number once to view it, and again to toggle whether the instrument is used for the currently selected pattern(s).\"),\n\t\t\t\t\tp(\"Either way, you can click the + button to add more instruments to a channel, and you can press shift and a number key on your keyboard to select an instrument as if you had clicked the corresponding button here.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"instrumentVolume\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Instrument Volume\"),\n\t\t\t\t\tp(\"This setting controls the volume of the selected instrument without affecting the volume of the other instruments. This allows you to balance the loudness of each instrument relative to each other.\"),\n\t\t\t\t\tp(\"Please be careful when using volume settings above 0. This indicates amplification and too much of that can trip the audio limiter built into this tool. This can lead to your song sounding muffled if overused. But when used carefully, amplification can be a powerful tool!\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"pan\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Instrument Panning\"),\n\t\t\t\t\tp(\"If you're listening through headphones or some other stereo sound system, this controls the position of the instrument and where the sound is coming from, ranging from left to right.\"),\n\t\t\t\t\tp(\"As a suggestion, composers often put lead melodies, drums, and basses in the center, and spread other instruments toward either side. If too many instruments seem like they're coming from the same place, it can feel crowded and harder to distinguish individual sounds, especially if they cover a similar pitch range.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"panDelay\":\n\t\t\t\t{\n\t\t\t\t\tmessage = div(\n\t\t\t\t\t\th2(\"Stereo Delay\"),\n\t\t\t\t\t\tp(\"When panning, a slight delay is often added between the left and right ear to help make a sound feel more 'directional'. For example, in the real world your left ear will hear a sound coming from the left just slightly before the right ear.\"),\n\t\t\t\t\t\tp(\"This setting controls how much delay is added. When this is set to minimum, panning only affects the volume of the left/right ear without changing the delay. This can help to get a more 'uniform' feeling sound, which can be desirable for making 8-bit music.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"arpeggioSpeed\":\n\t\t\t\t{\n\t\t\t\t\tmessage = div(\n\t\t\t\t\t\th2(\"Arpeggio Speed\"),\n\t\t\t\t\t\tp(\"This setting affects how fast your chord will 'arpeggiate', or cycle between notes. With a fast arpeggio speed it will sound rapid-fire, with a slow speed you can hear each note one after another.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"twoNoteArpeggio\":\n\t\t\t\t{\n\t\t\t\t\tmessage = div(\n\t\t\t\t\t\th2(\"Faster Two-Note Arpeggio\"),\n\t\t\t\t\t\tp(\"This setting makes arpeggios with only two notes in them happen twice as fast. Arpeggios with more notes in them are unaffected.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"detune\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Detune\"),\n\t\t\t\t\tp(\"This setting can be used to finely control the pitch of your instrument. It is in units of 'cents', 100 of which equal a pitch shift of one semitone.\"),\n\t\t\t\t\tp(\"Careful - you can quickly get very dissonant sounding songs by using this setting.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"instrumentType\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Instrument Type\"),\n\t\t\t\t\tp(\"JummBox comes with many instrument presets, try them out! You can also create your own custom instruments!\"),\n\t\t\t\t\tp(\"There are also buttons for copying and pasting instruments at the bottom of the instrument settings tab, and for generating random instruments in the \\\"Randomize\\\" category in the instrument type menu.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"eqFilter\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"EQ Filter\"),\n\t\t\t\t\tp(\"Filters are a way of emphasizing or diminishing different parts of a sound. Musical notes have a fundamental (base) frequency, but the sound of a musical note also has parts at higher frequencies and filters can adjust the volume of each of these parts based on their frequency.\"),\n\t\t\t\t\tp(\"Click in the filter editor to insert, delete, or drag a filter control point. The horizontal position of the point determines which frequencies it affects, and the vertical position determines how the volume is affected at that frequency.\"),\n\t\t\t\t\tp(\"Insert a new point on the left side of the filter editor to add a \\\"high-pass\\\" filter point, which additionally reduces the volume of lower frequencies, or insert a new point on the right side to add a \\\"low-pass\\\" filter point which reduces the volume of higher frequencies.\"),\n\t\t\t\t\tp(\"You can also enable a \\\"Note Filter\\\" as an effect. EQ and note filters are mostly the same, but have different purposes. EQ filters are for overall adjustments, whereas note filters are for dynamic control and can be moved with envelopes. Note filters also change how the distortion effect sounds.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"noteFilter\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Note Filter\"),\n\t\t\t\t\tp(\"Note filters are mostly the same as EQ filters, but have a different purpose. EQ filters are for overall adjustments, whereas note filters are for dynamic control and can be moved with envelopes. Note filters also change how the distortion effect sounds.\"),\n\t\t\t\t\tp(\"Filters are a way of emphasizing or diminishing different parts of a sound. Musical notes have a fundamental (base) frequency, but the sound of a musical note also has parts at higher frequencies and filters can adjust the volume of each of these parts based on their frequency.\"),\n\t\t\t\t\tp(\"Click in the filter editor to insert, delete, or drag a filter control point. The horizontal position of the point determines which frequencies it affects, and the vertical position determines how the volume is affected at that frequency.\"),\n\t\t\t\t\tp(\"Insert a new point on the left side of the filter editor to add a \\\"high-pass\\\" filter point, which additionally reduces the volume of lower frequencies, or insert a new point on the right side to add a \\\"low-pass\\\" filter point which reduces the volume of higher frequencies.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"fadeInOut\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Fade In/Out\"),\n\t\t\t\t\tp(\"This setting controls how long it takes for notes to reach full volume at the beginning or decay to silence at the end.\"),\n\t\t\t\t\tp(\"An instant fade-in sounds like instruments that are played by hitting or plucking, whereas slower fade-ins sound like instruments that are played by blowing air.\"),\n\t\t\t\t\tp(\"You can also make the fade-out start before the note ends to leave a gap before the next note starts, or after the note ends to allow the sound of the end of the note to overlap with the start of the next note.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"transition\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Transition\"),\n\t\t\t\t\tp(\"Usually, when one note ends at the same time another begins, the old note will fade out and the new note will fade in based on the fade in/out settings, but this setting can override that, connecting the end of one note to the beginning of the next.\"),\n\t\t\t\t\tp(\"The \\\"interrupt\\\" transition makes the wave suddenly change from the old note's frequency to the new note's frequency without any fading, but still restarts envelopes at the beginning of the new note. The \\\"continue\\\" transition is similar but it doesn't even restart envelopes, and can be used to make each of the notes in a chord start or stop at different times!\"),\n\t\t\t\t\tp(\"The \\\"slide\\\" transition makes the pitch shift quickly but not instantaneously from the old note's frequency to the new note's frequency, and softly restarts envelopes. The \\\"slide in pattern\\\" transition is the same except it doesn't connect the last note in a pattern to the first note in the next pattern.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"chipWave\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Chip Wave\"),\n\t\t\t\t\tp(\"JummBox comes with some sound waves based on classic electronic sound chips, as well as several unique waves. This is the basic source of the sound of the instrument, which is modified by the other instrument settings.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"chipNoise\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Noise\"),\n\t\t\t\t\tp(\"JummBox comes with several basic noise sounds. These do not have any distinct musical pitch, and can be used like drums to create beats and emphasize your song's rhythm.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"supersawDynamism\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Supersaw Dynamism\"),\n\t\t\t\t\tp(\"A supersaw is a combination of many sawtooth waves, and this setting controls the contribution of extra sawtooth waves.\"),\n\t\t\t\t\tp(\"At the low end of the slider, only the first wave is contributing to the sound, which sounds like an ordinary static sawtooth wave. At the maximum setting, all of the waves are contributing equally and the resulting tone can randomly shift depending on how the waves line up with each other, similar to the \\\"unison\\\" and \\\"chorus\\\" settings.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"supersawSpread\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Supersaw Spread\"),\n\t\t\t\t\tp(\"A supersaw is a combination of many sawtooth waves, and this setting controls the distance between their frequencies. The dynamism setting must be used for the extra waves to have any effect.\"),\n\t\t\t\t\tp(\"At the low end of the spread slider, all of the voices have the same frequency but random phase, resulting in a different sound every time a note starts. In the middle, the waves all have slightly different frequencies that shift in and out of phase over time similar to the \\\"unison\\\" and \\\"chorus\\\" settings, creating a classic supersaw sound. At the extreme end, the frequencies are so far apart they sound dissonant.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"supersawShape\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Supersaw Shape\"),\n\t\t\t\t\tp(\"This supersaw instrument includes an option to change the shape of the waves from sawtooth waves to pulse waves. Use this setting to morph between the two shapes.\"),\n\t\t\t\t\tp(\"When a pulse wave shape is used, you can also control the pulse width with a separate setting.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"pulseWidth\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Pulse Wave Width\"),\n\t\t\t\t\tp(\"This setting controls the shape and sound of a pulse wave. At the minimum width, it sounds light and buzzy. At the maximum width, it is shaped like a classic square wave.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"unison\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Unison\"),\n\t\t\t\t\tp(\"This instrument can play two identical waves at different frequencies. When two waves play at slightly different frequencies, they move in and out of phase with each other over time as different parts of the waves line up. This creates a dynamic, shifting sound. Pianos are a common example of this kind of sound, because each piano key strikes multiple strings that are tuned to slightly different frequencies.\"),\n\t\t\t\t\tp(\"The distance between two frequencies is called an \\\"interval\\\", and this setting controls how large it is. If the interval is too wide, then the waves may sound out-of-tune and \\\"dissonant\\\". However, if the interval is even larger, then the two frequencies can even be distinct pitches.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"chords\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Chords\"),\n\t\t\t\t\tp(\"When multiple different notes occur at the same time, this is called a chord. Chords can be created in JummBox's pattern editor by adding notes above or below another note.\"),\n\t\t\t\t\tp(\"This setting determines how chords are played. The standard option is \\\"simultaneous\\\" which starts playing all of the pitches in a chord at the same instant. The \\\"strum\\\" option is similar, but plays the notes starting at slightly different times. The \\\"arpeggio\\\" option is used in \\\"chiptune\\\" style music and plays a single tone that rapidly alternates between all of the pitches in the chord.\"),\n\t\t\t\t\tp(\"Some JummBox instruments have an option called \\\"custom interval\\\" which uses the chord notes to control the interval between the waves of a single tone. This can create strange sound effects when combined with FM modulators.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"vibrato\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Vibrato\"),\n\t\t\t\t\tp(\"This setting causes the frequency of a note to wobble slightly. Singers and violinists often use vibrato.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"vibratoDepth\":\n\t\t\t\t{\n\t\t\t\t\tmessage = div(\n\t\t\t\t\t\th2(\"Vibrato Depth\"),\n\t\t\t\t\t\tp(\"This setting affects the depth of your instrument's vibrato, making the wobbling effect sound stronger or weaker.\")\n\t\t\t\t\t);\n\t\t\t\t} break;\n\t\t\tcase \"vibratoDelay\":\n\t\t\t\t{\n\t\t\t\t\tmessage = div(\n\t\t\t\t\t\th2(\"Vibrato Delay\"),\n\t\t\t\t\t\tp(\"This setting changes when vibrato starts to kick in after a note is played. Vibrato is most common for long held notes and less common in short notes, so this can help you achieve that effect.\")\n\t\t\t\t\t);\n\t\t\t\t} break;\n\t\t\tcase \"vibratoSpeed\":\n\t\t\t\t{\n\t\t\t\t\tmessage = div(\n\t\t\t\t\t\th2(\"Vibrato Speed\"),\n\t\t\t\t\t\tp(\"This setting determines how fast the vibrato's up-and-down wobble effect will happen for your instrument.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"vibratoType\":\n\t\t\t\t{\n\t\t\t\t\tmessage = div(\n\t\t\t\t\t\th2(\"Vibrato Type\"),\n\t\t\t\t\t\tp(\"This determines the way vibrato causes your instrument's pitch to wobble. The normal type is smooth up and down, the shaky type is chaotic.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"algorithm\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"FM Algorithm\"),\n\t\t\t\t\tp('FM Synthesis is a mysterious but powerful technique for crafting sounds, popularized by Yamaha keyboards and the Sega Genesis/Mega Drive. It may seem confusing, but try playing around with the options until you get a feel for it, or check out some of the preset examples!'),\n\t\t\t\t\tp('This FM synthesizer uses up to four waves, numbered 1, 2, 3, and 4. Each wave may have its own frequency and volume.'),\n\t\t\t\t\tp('There are two kinds of waves: \"carrier\" waves play a tone out loud, but \"modulator\" waves distort other waves instead. Wave 1 is always a carrier and plays a tone, but other waves may distort it. The \"Algorithm\" setting determines which waves are modulators, and which other waves those modulators distort. For example, \"1←2\" means that wave 2 modulates wave 1, and wave 1 plays out loud.'),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"feedbackType\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Feedback Type\"),\n\t\t\t\t\tp('Modulators distort in one direction (like 1←2), but you can also use the feedback setting to make any wave distort in the opposite direction (1→2), or even itself (1⟲).'),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"feedbackVolume\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Feedback Distortion\"),\n\t\t\t\t\tp(\"This setting controls the amount of feedback distortion based on the feedback type setting.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"operatorFrequency\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Operator Frequency\"),\n\t\t\t\t\tp('This setting controls the frequency of an individual FM wave, relative to the fundamental frequency of the note. The multiplier 1× is the same as the fundamental frequency, whereas 2x would be an octave (12 semitones) above it. The frequencies with a \"~\" are slightly detuned and shift in and out of phase over time compared to the other frequencies.'),\n\t\t\t\t\tp('Try different combinations of a \"carrier\" wave and a \"modulator\" wave with different frequencies to get a feel for how they sound together.'),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"operatorVolume\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Operator Volume\"),\n\t\t\t\t\tp(\"This setting controls the volume of \\\"carrier\\\" waves, or the amount of distortion that \\\"modulator\\\" waves apply to other waves.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"spectrum\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Spectrum\"),\n\t\t\t\t\tp(\"This setting allows you to draw your own noise spectrum! This is good for making drum sounds.\"),\n\t\t\t\t\tp(\"If you only use certain frequencies and a soft fade in/out, it's also possible to make howling wind sounds or even musical wind instruments.\"),\n\t\t\t\t\tp(\"The left side of the spectrum editor controls the noise energy at lower frequencies, and the right side controls higher frequencies.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"harmonics\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Harmonics\"),\n\t\t\t\t\tp(\"This setting allows you to design your own sound wave! Most musical waves are actually a combination of sine waves at certain frequencies, and this lets you control the volume of each sine wave individually.\"),\n\t\t\t\t\tp(\"The left side of the harmonics editor controls the sine wave volumes at lower frequencies, and the right side controls higher frequencies.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"effects\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Effects\"),\n\t\t\t\t\tp(\"JummBox has many different kinds of special effects you can add to instruments. You can turn on multiple effects at once, and they can be configured individually. Try them all out!\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"drumsetEnvelope\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Drumset Envelope\"),\n\t\t\t\t\tp(\"This drumset comes with a low-pass filter, and this setting can dynamically change the low-pass filter frequency over time. Each row in the pattern editor can have a different envelope shape.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"drumsetSpectrum\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Drumset Spectrum\"),\n\t\t\t\t\tp(\"This setting allows you to draw your own noise spectrum! This is good for making drumsets. Each row in the pattern editor gets its own spectrum.\"),\n\t\t\t\t\tp(\"The left side of the spectrum editor controls the noise energy at lower frequencies, and the right side controls higher frequencies.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"chorus\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Chorus\"),\n\t\t\t\t\tp(\"The chorus effect combines multiple copies of the instrument's sound and adds a bit of vibrato to simulate an ensemble of instruments or voices. Drag the slider to control how much chorus is added.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"echoSustain\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Echo Volume\"),\n\t\t\t\t\tp(\"The echo effect repeats the instrument's sound after a delay. Each echo is a little bit quieter than the last, and this setting controls how much quieter.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"echoDelay\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Echo Delay\"),\n\t\t\t\t\tp(\"The echo effect repeats the instrument's sound after a delay, and this setting controls how long the delay is.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"pitchShift\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Pitch Shift\"),\n\t\t\t\t\tp(\"This setting makes instruments play higher or lower pitches than the ones displayed in the pattern editor. Be careful that you don't confuse yourself!\"),\n\t\t\t\t\tp(\"You can combine this with envelopes to bend pitch over time, or play multiple simultaneous instruments with different pitch shifts for interesting layered sounds.\"),\n\t\t\t\t\tp(\"The intervals created by this setting are in \\\"just intonation\\\" which means they stay in phase with the original pitch instead of shifting in and out of phase over time. If you want the shifting, add the detune effect!\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"detune\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Detune\"),\n\t\t\t\t\tp(\"This setting slightly adjusts the frequency of notes played by the instrument. You can use a little bit to add a pleasing shifting sound similar to the \\\"unison\\\" feature when combined with other instruments. If you use too much, then the instrument may sound unpleasantly out-of-tune.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"distortion\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Distortion\"),\n\t\t\t\t\tp(\"This is the famous electric guitar effect! However, there are some things to be aware of.\"),\n\t\t\t\t\tp(\"First, most chords don't sound right when combined with heavy distortion. The only chords commonly used with distorted electric guitars are \\\"power chords\\\" which consist of a root note, a \\\"fifth\\\" note above that, and/or any octaves of those two notes.\"),\n\t\t\t\t\tp(\"Second, the distortion sound depends a lot on filtering. In particular, I recommend enabling the note filter effect, and adding both high-pass and low-pass points to the note filter. (Note filters are applied first, then distortion which transforms the sound based on that filtering, then the EQ filter is applied last.)\"),\n\t\t\t\t\tp(\"Finally, I recommend adjusting the fade-out setting to allow the end of each note to overlap a little bit with the beginning of the next, but not too much!\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"bitcrusherQuantization\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Bitcrusher Quantization\"),\n\t\t\t\t\tp(\"This effect makes stuff sounds harsher, artificial, and \\\"low quality\\\", which is great if that's what you're going for!\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"bitcrusherFreq\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Frequency Quantization\"),\n\t\t\t\t\tp(\"The bitcrusher effect comes with an additional frequency quantization effect! This is a fun one to play with, especially when combined with the note filter effect.\"),\n\t\t\t\t\tp(\"Every other notch on this slider is aligned with the currently selected key of the song, and the in-between notches are aligned with the tritones of the key.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"envelopes\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Envelopes\"),\n\t\t\t\t\tp(\"Envelopes are a way to dynamically adjust various other settings over time, usually based on how long the note lasts. Press the + button to add an envelope, then use the menus below to select which setting to control and the curve of the envelope. Try different combinations to see how they sound!\"),\n\t\t\t\t\tp(\"Most envelope curves restart from the beginning every time a new note plays. The \\\"note size\\\" option is based on the note width as drawn in the pattern editor.\"),\n\t\t\t\t\tp(\"Envelope curves move in the range from 0 to 1 (or vice versa), where 0 means as quiet as possible and 1 is the same as the corresponding position selected in the instrument settings above. If multiple envelopes are targetting the same setting, they are multiplied before applying to the setting.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"discreteEnvelope\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Use Discrete Envelopes?\"),\n\t\t\t\t\tp(\"Envelopes are usually interpolated, meaning they change continuously and smoothly. This setting, when ticked, makes envelopes not interpolate. It's a small difference, but can be helpful for some chip noises, and it's most noticeable with the 'blip' transitions.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"envelopeSpeed\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Envelope Speed\"),\n\t\t\t\t\tp(\"This setting controls the speed of ALL envelopes for the instrument. Each envelope 'plays' at a certain speed, and this slider can scale it to play faster or slower. Use this to fine-tune your tremolo or how fast something decays to get just the right effect.\"),\n\t\t\t\t\tp(\"Note that, while this setting is limited in the sense that it controls all envelopes at once, you can still achieve a variety of outcomes by trying combinations of modes of each envelope type, which typically differ only in speed.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"usedInstrument\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th3(\"'Is this instrument used somewhere else?'\"),\n\t\t\t\t\tp(\"This indicator will light up when the instrument you're currently looking at is used in another place in your song (outside the selection).\"),\n\t\t\t\t\tp(\"This can be useful when you're not sure if you've used the instrument before and making edits carelessly could change other parts of the song.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"usedPattern\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th3(\"'Is this pattern used somewhere else?'\"),\n\t\t\t\t\tp(\"This indicator will light up when the pattern you're currently looking at is used in another place in your song (outside the selection).\"),\n\t\t\t\t\tp(\"This can be useful when you're not sure if you've used the pattern before and making edits carelessly could change other parts of the song.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"modChannel\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Modulator Channel\"),\n\t\t\t\t\tp(\"Modulators can be used to change settings in your song automatically over time. This technique is also known as automation.\"),\n\t\t\t\t\tp(\"This setting controls which channel the modulators will take effect for. If you choose 'Song', you can change song-wide settings too!\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"modInstrument\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Modulator Instrument\"),\n\t\t\t\t\tp(\"Modulators can be used to change settings in your song automatically over time. This technique is also known as automation.\"),\n\t\t\t\t\tp(\"This setting controls which instrument your modulator will apply to within the given channel you've chosen.\"),\n\t\t\t\t\tp(\"If you choose 'all', every instrument in the channel will be affected. If you choose 'active', just the current ones used in this pattern will be instead.\"),\n\t\t\t\t\tp(\"Note that with 'all' or 'active', effects will only be applied to instruments that the effect is applicable on. For example if an instrument does not have panning effects, modulating panning will not affect it.\")\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"modSet\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Modulator Setting\"),\n\t\t\t\t\tp(\"This is the parameter that you want to change with this modulator. For example, if you set this to 'Tempo', you can speed up or slow down your song by laying notes in the pattern editor.\"),\n\t\t\t\t\tp(\"Note that you'll see different options if your channel is set to 'Song' versus a channel number. With 'Song', you'll see song-wide settings such as tempo. With a channel, you'll see specific instrument settings. Adding more effects to the instrument causes modulators for them to be available, so be sure to experiment!\"),\n\t\t\t\t\tp(\"Most modulators behave as you'd expect and work just as if you were moving their associated slider. Click the '?' when you have a setting selected to get more info about it!\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"modFilter\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Filter Target\"),\n\t\t\t\t\tp(\"This setting specifies which parameter of your targeted filter you would like to change.\"),\n\t\t\t\t\tp(\"With the 'morph' setting, the note value for your modulator represents the number of a subfilter to 'morph' into over time. For example, dragging a note from 0 to 7 will morph from your main filter to the 7th subfilter. To change how your subfilters are set up, click the '+' button on the target filter.\"),\n\t\t\t\t\tp(\"With a Dot setting, you can fine-tune the exact location of every dot on your filter graph. Note that this is extremely intensive if you want to modulate all dots - a morph is better in that case - but this can come in handy for small adjustments.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"transitionBar\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Tie Notes Over Bars\"),\n\t\t\t\t\tp(\"With this option ticked, notes won't transition across bars if you put notes with the same pitches at the start of the next bar. Instead they will 'tie over' and sound like one long note.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"clicklessTransition\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Clickless Transition\"),\n\t\t\t\t\tp(\"Sometimes, seamless and other transition types can make audible 'clicks' when changing between notes. Ticking this option will cause those clicks to be silenced as much as possible.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"aliases\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Aliasing\"),\n\t\t\t\t\tp(\"JummBox applies a technique called 'anti-aliasing' to instruments normally to help them sound cleaner even at high frequencies and low sample rates.\"),\n\t\t\t\t\tp(\"When this setting is ticked that technique is disabled, so you may hear strange audio artifacts especially at high pitches and when bending notes. However, this can lend a grungy sound to an instrument that could be desirable.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"operatorWaveform\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Operator Waveform\"),\n\t\t\t\t\tp('This setting controls the what kind of sound wave an individual FM wave uses. By defualt the FM synth only uses sinewaves.'),\n\t\t\t\t\tp('This feature was ported from Aury system`s GoldBox!'),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"filterType\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Filter Type\"),\n\t\t\t\t\tp('Toggling these buttons lets you choose between a simple filter interface with two sliders, or the more advanced filter graph.'),\n\t\t\t\t\tp('The two-slider version controls a single low-pass filter and was used in legacy versions. It is not as powerful, but if you feel overwhelmed you can start with this.'),\n\t\t\t\t\tp('Note that switching from the simple interface to the advanced interface will convert your current settings, so you can also use it as a basis for later tweaking.'),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"filterCutoff\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Low-Pass Filter Cutoff Frequency\"),\n\t\t\t\t\tp(\"The lowest setting feels \\\"muffled\\\" or \\\"dark\\\", and the highest setting feels \\\"harsh\\\" or \\\"bright\\\".\"),\n\t\t\t\t\tp(\"Most sounds include a range of frequencies from low to high. JummBox instruments have a filter that allows the lowest frequencies to pass through at full volume, but can reduce the volume of the higher frequencies that are above a cutoff frequency. This setting controls the cutoff frequency and thus the range of higher frequencies that are reduced.\"),\n\t\t\t\t\tp(\"This cutoff setting also determines which frequency resonates when the resonance peak setting is used.\"),\n\t\t\t\t);\n\t\t\t} break;\n\t\t\tcase \"filterResonance\": {\n\t\t\t\tmessage = div(\n\t\t\t\t\th2(\"Low-Pass Filter Resonance Peak\"),\n\t\t\t\t\tp(\"Increasing this setting emphasizes a narrow range of frequencies, based on the position of the filter cutoff setting. This can be used to imitate the resonant bodies of acoustic instruments and other interesting effects.\"),\n\t\t\t\t\tp(\"The filter preserves the volume of frequencies that are below the cutoff frequency, and reduces the volume of frequencies that are above the cutoff. If this setting is used, the filter also increases the volume of frequencies that are near the cutoff.\"),\n\t\t\t\t);\n\t\t\t} break;\n\n\t\t\tdefault:\n\t\t\t\t// Check for modSetinfo#\n\t\t\t\tif (type.indexOf(\"modSetInfo\") >= 0) {\n\t\t\t\t\tlet modNum: number = +type[type.length - 1];\n\t\t\t\t\tlet modulator: number = _doc.song.channels[_doc.channel].instruments[_doc.getCurrentInstrument()].modulators[modNum];\n\t\t\t\t\tlet pList: HTMLParagraphElement[] = [];\n\t\t\t\t\tfor (let s: number = 0; s < Config.modulators[modulator].promptDesc.length; s++) {\n\t\t\t\t\t\tpList.push(p(\n\t\t\t\t\t\t\tConfig.modulators[modulator].promptDesc[s]\n\t\t\t\t\t\t\t\t.replace(\"$LO\", \"\" + Config.modulators[modulator].convertRealFactor)\n\t\t\t\t\t\t\t\t.replace(\"$MID\", \"\" + (Config.modulators[modulator].convertRealFactor + Config.modulators[modulator].maxRawVol / 2))\n\t\t\t\t\t\t\t\t.replace(\"$HI\", \"\" + (Config.modulators[modulator].convertRealFactor + Config.modulators[modulator].maxRawVol))\n\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\t// Last element for mod settings is just some miscellaneous data for nerds like me.\n\t\t\t\t\tpList[pList.length-1].style.setProperty(\"color\", \"var(--secondary-text)\");\n\t\t\t\t\tmessage = div(\n\t\t\t\t\t\th2(Config.modulators[modulator].promptName),\n\t\t\t\t\t\tpList,\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error(\"Unhandled TipPrompt type: \" + type);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tthis.container = div({class: \"prompt\", style: \"width: 300px;\"},\n\t\t\tmessage,\n\t\t\tthis._closeButton,\n\t\t);\n\t\t\t\n\t\t\tsetTimeout(()=>this._closeButton.focus());\n\t\t\t\n\t\tthis._closeButton.addEventListener(\"click\", this._close);\n\t}\n\t\t\n\t\tprivate _close = (): void => { \n\t\tthis._doc.undo();\n\t}\n\t\t\n\t\tpublic cleanUp = (): void => { \n\t\tthis._closeButton.removeEventListener(\"click\", this._close);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { ColorConfig } from \"./ColorConfig\";\nimport { Config } from \"../synth/SynthConfig\";\nimport { isMobile } from \"./EditorConfig\";\nimport { SongDocument } from \"./SongDocument\";\nimport { ChannelRow } from \"./ChannelRow\";\nimport { SongEditor } from \"./SongEditor\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\n\nexport class TrackEditor {\n\tpublic readonly _barDropDown: HTMLSelectElement = HTML.select({ style: \"width: 32px; height: \" + Config.barEditorHeight + \"px; top: 0px; position: absolute; opacity: 0\" },\n\n\t\tHTML.option({ value: \"barBefore\" }, \"Insert Bar Before\"),\n\t\tHTML.option({ value: \"barAfter\" }, \"Insert Bar After\"),\n\t\tHTML.option({ value: \"deleteBar\" }, \"Delete This Bar\"),\n\t);\n\tprivate readonly _channelRowContainer: HTMLElement = HTML.div({style: `display: flex; flex-direction: column; padding-top: ${Config.barEditorHeight}px`});\n\tprivate readonly _barNumberContainer: SVGGElement = SVG.g();\n\tprivate readonly _playhead: SVGRectElement = SVG.rect({fill: ColorConfig.playhead, x: 0, y: 0, width: 4, height: 128});\n\tprivate readonly _boxHighlight: SVGRectElement = SVG.rect({fill: \"none\", stroke: ColorConfig.hoverPreview, \"stroke-width\": 2, \"pointer-events\": \"none\", x: 1, y: 1, width: 30, height: 30});\n\tprivate readonly _upHighlight: SVGPathElement = SVG.path({fill: ColorConfig.invertedText, stroke: ColorConfig.invertedText, \"stroke-width\": 1, \"pointer-events\": \"none\"});\n\tprivate readonly _downHighlight: SVGPathElement = SVG.path({fill: ColorConfig.invertedText, stroke: ColorConfig.invertedText, \"stroke-width\": 1, \"pointer-events\": \"none\"});\n\tprivate readonly _barEditorPath: SVGPathElement = SVG.path({ fill: ColorConfig.uiWidgetBackground, stroke: ColorConfig.uiWidgetBackground, \"stroke-width\": 1, \"pointer-events\": \"none\" });\n\tprivate readonly _selectionRect: SVGRectElement = SVG.rect({ class: \"dashed-line dash-move\", fill: ColorConfig.boxSelectionFill, stroke: ColorConfig.hoverPreview, \"stroke-width\": 2, \"stroke-dasharray\": \"5, 3\", \"fill-opacity\": \"0.4\", \"pointer-events\": \"none\", visibility: \"hidden\", x: 1, y: 1, width: 62, height: 62 });\n\tprivate readonly _svg: SVGSVGElement = SVG.svg({style: `position: absolute; top: 0;`},\n\t\tthis._barEditorPath,\n\t\tthis._selectionRect,\n\t\tthis._barNumberContainer,\n\t\tthis._boxHighlight,\n\t\tthis._upHighlight,\n\t\tthis._downHighlight,\n\t\tthis._playhead,\n\t);\n\tprivate readonly _select: HTMLSelectElement = HTML.select({class: \"trackSelectBox\", style: \"background: none; border: none; appearance: none; border-radius: initial; box-shadow: none; color: transparent; position: absolute; touch-action: none;\"});\n\tpublic readonly container: HTMLElement = HTML.div({class: \"noSelection\", style: \"position: relative; overflow: hidden;\"},\n\t\tthis._channelRowContainer,\n\t\tthis._svg,\n\t\tthis._select,\n\t\tthis._barDropDown\n\t);\n\tprivate readonly _channels: ChannelRow[] = [];\n\tprivate readonly _barNumbers: SVGTextElement[] = [];\n\tprivate _mouseX: number = 0;\n\tprivate _mouseY: number = 0;\n\t//private _lastScrollTime: number = 0;\n\t//private _selecting: boolean = false;\n\t//private _selectionStartBar: number = 0;\n\t//private _selectionStartChannel: number = 0;\n\t//private _pattern: Pattern | null = null;\n\tprivate _mouseStartBar: number = 0;\n\tprivate _mouseStartChannel: number = 0;\n\tprivate _mouseBar: number = 0;\n\tprivate _mouseChannel: number = 0;\n\tprivate _mouseOver: boolean = false;\n\tprivate _mousePressed: boolean = false;\n\tprivate _mouseDragging = false;\n\tprivate _barWidth: number = 32;\n\tprivate _renderedBarCount: number = -1;\n\tprivate _renderedEditorWidth: number = -1;\n\tprivate _renderedEditorHeight: number = -1;\n\tprivate _renderedPatternCount: number = 0;\n\tprivate _renderedPlayhead: number = -1;\n\tprivate _touchMode: boolean = isMobile;\n\tprivate _barDropDownBar: number = 0;\n\tprivate _lastScrollTime: number = 0;\n\t\t\n\tconstructor(private _doc: SongDocument, private _songEditor: SongEditor) {\n\t\twindow.requestAnimationFrame(this._animatePlayhead);\n\t\tthis._svg.addEventListener(\"mousedown\", this._whenMousePressed);\n\t\tdocument.addEventListener(\"mousemove\", this._whenMouseMoved);\n\t\tdocument.addEventListener(\"mouseup\", this._whenMouseReleased);\n\t\tthis._svg.addEventListener(\"mouseover\", this._whenMouseOver);\n\t\tthis._svg.addEventListener(\"mouseout\", this._whenMouseOut);\n\t\t\t\n\t\tthis._select.addEventListener(\"change\", this._whenSelectChanged);\n\t\tthis._select.addEventListener(\"touchstart\", this._whenSelectPressed);\n\t\tthis._select.addEventListener(\"touchmove\", this._whenSelectMoved);\n\t\tthis._select.addEventListener(\"touchend\", this._whenSelectReleased);\n\t\tthis._select.addEventListener(\"touchcancel\", this._whenSelectReleased);\n\t\t\t\n\t\tlet determinedCursorType: boolean = false;\n\t\tdocument.addEventListener(\"mousedown\", () => {\n\t\t\tif (!determinedCursorType) {\n\t\t\t\tthis._touchMode = false;\n\t\t\t\tthis._updatePreview();\n\t\t\t}\n\t\t\tdeterminedCursorType = true;\n\t\t}, true);\n\t\tdocument.addEventListener(\"touchstart\", () => {\n\t\t\tif (!determinedCursorType) {\n\t\t\t\tthis._touchMode = true;\n\t\t\t\tthis._updatePreview();\n\t\t\t}\n\t\t\tdeterminedCursorType = true;\n\t\t}, true);\n\n\t\tthis._barDropDown.selectedIndex = -1;\n\t\tthis._barDropDown.addEventListener(\"change\", this._barDropDownHandler);\n\t\tthis._barDropDown.addEventListener(\"mousedown\", this._barDropDownGetOpenedPosition);\n\n\t}\n\n\tprivate _barDropDownGetOpenedPosition = (event: MouseEvent): void => {\n\t\tthis._barDropDownBar = Math.floor(Math.min(this._doc.song.barCount - 1, Math.max(0, this._mouseX / this._barWidth)));\n\t}\n\n\tprivate _barDropDownHandler = (event: Event): void => {\n\n\t\tvar moveBarOffset = (this._barDropDown.value == \"barBefore\") ? 0 : 1;\n\n\t\tif (this._barDropDown.value == \"barBefore\" || this._barDropDown.value == \"barAfter\") {\n\n\t\t\t//var prevBar = this._doc.bar;\n\n\t\t\tthis._doc.bar = this._barDropDownBar - 1 + moveBarOffset;\n\n\t\t\tthis._doc.selection.resetBoxSelection();\n\t\t\tthis._doc.selection.insertBars();\n\n\t\t\t// This moves doc.bar back. I kind of like moving it to the inserted zone, though.\n\t\t\t// this._doc.bar = prevBar + ((prevBar < this._barDropDownBar + moveBarOffset) ? 0 : 1);\n\n\t\t\t// Adjust song playhead\n\t\t\tif (this._doc.synth.playhead >= this._barDropDownBar + moveBarOffset) {\n\t\t\t\tthis._doc.synth.playhead++;\n\t\t\t\tthis._songEditor._barScrollBar.animatePlayhead();\n\t\t\t}\n\n\t}\n\t\telse if (this._barDropDown.value == \"deleteBar\") {\n\t\t\n\t\t\t//var prevBar = this._doc.bar;\n\n\t\t\tthis._doc.bar = this._barDropDownBar;\n\n\t\t\tthis._doc.selection.resetBoxSelection();\n\t\t\tthis._doc.selection.deleteBars();\n\n\t\t\t// This moves doc.bar back. I kind of like moving it to the deleted zone, though.\n\t\t\t// this._doc.bar = prevBar - ((prevBar <= this._barDropDownBar) ? 0 : 1);\n\n\t\t\t// Adjust song playhead\n\t\t\tif (this._doc.synth.playhead > this._barDropDownBar) {\n\t\t\t\tthis._doc.synth.playhead--;\n\t\t\t\tthis._songEditor._barScrollBar.animatePlayhead();\n\t\t\t}\n\n\t\t}\n\n\t\tthis._barDropDown.selectedIndex = -1;\n\t}\n\n\tprivate _whenSelectChanged = (): void => {\n\t\tthis._doc.selection.setPattern(this._select.selectedIndex);\n\t}\n\t\t\n\tprivate _animatePlayhead = (timestamp: number): void => {\n\t\tconst playhead = (this._barWidth * this._doc.synth.playhead - 2);\n\t\tif (this._renderedPlayhead != playhead) {\n\t\t\tthis._renderedPlayhead = playhead;\n\t\t\tthis._playhead.setAttribute(\"x\", \"\" + playhead);\n\t\t}\n\t\twindow.requestAnimationFrame(this._animatePlayhead);\n\t}\n\t\n\tpublic movePlayheadToMouse(): boolean {\n\t\tif (this._mouseOver) {\n\t\t\tthis._doc.synth.playhead = this._mouseBar + (this._mouseX % this._barWidth) / this._barWidth;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tprivate _dragBoxSelection(): void {\n\t\tthis._doc.selection.setTrackSelection(this._doc.selection.boxSelectionX0, this._mouseBar, this._doc.selection.boxSelectionY0, this._mouseChannel);\n\t\tthis._doc.selection.selectionUpdated();\n\t}\n\t\t\n\tprivate _updateSelectPos(event: TouchEvent): void {\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = event.touches[0].clientX - boundingRect.left;\n\t\tthis._mouseY = event.touches[0].clientY - boundingRect.top;\n\t\tif (isNaN(this._mouseX)) this._mouseX = 0;\n\t\tif (isNaN(this._mouseY)) this._mouseY = 0;\n\t\tthis._mouseBar = Math.floor(Math.min(this._doc.song.barCount - 1, Math.max(0, this._mouseX / this._barWidth)));\n\t\tthis._mouseChannel = Math.floor(Math.min(this._doc.song.getChannelCount() - 1, Math.max(0, (this._mouseY - Config.barEditorHeight) / ChannelRow.patternHeight)));\n\t}\n\t\t\n\tprivate _whenSelectPressed = (event: TouchEvent): void => {\n\t\tthis._mousePressed = true;\n\t\tthis._mouseDragging = true;\n\t\tthis._updateSelectPos(event);\n\t\tthis._mouseStartBar = this._mouseBar;\n\t\tthis._mouseStartChannel = this._mouseChannel;\n\t}\n\t\t\n\tprivate _whenSelectMoved = (event: TouchEvent): void => {\n\t\tthis._updateSelectPos(event);\n\t\tif (this._mouseStartBar != this._mouseBar || this._mouseStartChannel != this._mouseChannel) {\n\t\t\t// if the touch has started dragging, cancel opening the select menu.\n\t\t\tevent.preventDefault();\n\t\t}\n\t\tif (this._mousePressed) this._dragBoxSelection();\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenSelectReleased = (event: TouchEvent): void => {\n\t\tthis._mousePressed = false;\n\t\tthis._mouseDragging = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMouseOver = (event: MouseEvent): void => {\n\t\tif (this._mouseOver) return;\n\t\tthis._mouseOver = true;\n\t}\n\t\t\n\tprivate _whenMouseOut = (event: MouseEvent): void => {\n\t\tif (!this._mouseOver) return;\n\t\tthis._mouseOver = false;\n\t}\n\t\t\n\tprivate _updateMousePos(event: MouseEvent): void {\n\t\tconst boundingRect: ClientRect = this._svg.getBoundingClientRect();\n\t\tthis._mouseX = (event.clientX || event.pageX) - boundingRect.left;\n\t\tthis._mouseY = (event.clientY || event.pageY) - boundingRect.top;\n\t\tthis._mouseBar = Math.floor(Math.min(this._doc.song.barCount - 1, Math.max(0, this._mouseX / this._barWidth)));\n\t\tthis._mouseChannel = Math.floor(Math.min(this._doc.song.getChannelCount() - 1, Math.max(0, (this._mouseY - Config.barEditorHeight) / ChannelRow.patternHeight)));\n\t}\n\t\t\n\tprivate _whenMousePressed = (event: MouseEvent): void => {\n\t\tevent.preventDefault();\n\t\tthis._mousePressed = true;\n\t\tthis._updateMousePos(event);\n\t\tthis._mouseStartBar = this._mouseBar;\n\t\tthis._mouseStartChannel = this._mouseChannel;\n\n\t\t// Act on track portion\n\t\tif (this._mouseY >= Config.barEditorHeight) {\n\n\t\tif (event.shiftKey) {\n\t\t\tthis._mouseDragging = true;\n\t\t\tthis._doc.selection.setTrackSelection(this._doc.selection.boxSelectionX0, this._mouseBar, this._doc.selection.boxSelectionY0, this._mouseChannel);\n\t\t\tthis._doc.selection.selectionUpdated();\n\t\t} else {\n\t\t\tthis._mouseDragging = false;\n\t\t\tif (this._doc.channel != this._mouseChannel || this._doc.bar != this._mouseBar) {\n\t\t\t\tthis._doc.selection.setChannelBar(this._mouseChannel, this._mouseBar);\n\t\t\t\tthis._mouseDragging = true;\n\t\t\t}\n\t\t\tthis._doc.selection.resetBoxSelection();\n\t\t}\n\t}\n\t}\n\t\t\n\tprivate _whenMouseMoved = (event: MouseEvent): void => {\n\t\tthis._updateMousePos(event);\n\t\tif (this._mousePressed) {\n\t\t\tif (this._mouseStartBar != this._mouseBar || this._mouseStartChannel != this._mouseChannel) {\n\t\t\t\tthis._mouseDragging = true;\n\t\t\t}\n\t\t\tthis._dragBoxSelection();\n\t\t}\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _whenMouseReleased = (event: MouseEvent): void => {\n\t\tif (this._mousePressed && !this._mouseDragging) {\n\t\t\tif (this._doc.channel == this._mouseChannel && this._doc.bar == this._mouseBar) {\n\t\t\t\tconst up: boolean = ((this._mouseY - Config.barEditorHeight) % ChannelRow.patternHeight) < ChannelRow.patternHeight / 2;\n\t\t\t\tconst patternCount: number = this._doc.song.patternsPerChannel;\n\t\t\t\tthis._doc.selection.setPattern((this._doc.song.channels[this._mouseChannel].bars[this._mouseBar] + (up ? 1 : patternCount)) % (patternCount + 1));\n\t\t\t}\n\t\t}\n\t\tthis._mousePressed = false;\n\t\tthis._mouseDragging = false;\n\t\tthis._updatePreview();\n\t}\n\t\t\n\tprivate _updatePreview(): void {\n\t\tlet channel: number = this._mouseChannel;\n\t\tlet bar: number = this._mouseBar;\n\t\t\t\n\t\tif (this._touchMode) {\n\t\t\tbar = this._doc.bar;\n\t\t\tchannel = this._doc.channel;\n\t\t}\n\t\t\t\n\t\tconst selected: boolean = (bar == this._doc.bar && channel == this._doc.channel);\n\t\tconst overTrackEditor: boolean = (this._mouseY >= Config.barEditorHeight);\n\t\t\t\n\t\tif (this._mouseDragging && this._mouseStartBar != this._mouseBar) {\n\n\t\t\t// Handle auto-scroll in selection. Only @50ms or slower.\n\t\t\tvar timestamp: number = Date.now();\n\n\t\t\tif (timestamp - this._lastScrollTime >= 50) {\n\n\t\t\t\tif (bar > this._doc.barScrollPos + this._doc.trackVisibleBars - 1 && this._doc.barScrollPos < this._doc.song.barCount - this._doc.trackVisibleBars) {\n\n\t\t\t\t\tthis._songEditor.changeBarScrollPos(1);\n\t\t\t\t}\n\t\t\t\tif (bar < this._doc.barScrollPos && this._doc.barScrollPos > 0) {\n\n\t\t\t\t\tthis._songEditor.changeBarScrollPos(-1);\n\t\t\t\t}\n\n\t\t\t\tthis._lastScrollTime = timestamp;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._mouseOver && !this._mousePressed && !selected && overTrackEditor) {\n\t\t\tthis._boxHighlight.setAttribute(\"x\", \"\" + (1 + this._barWidth * bar));\n\t\t\tthis._boxHighlight.setAttribute(\"y\", \"\" + (1 + Config.barEditorHeight + ChannelRow.patternHeight * channel));\n\t\t\tthis._boxHighlight.setAttribute(\"height\", \"\" + (ChannelRow.patternHeight - 2));\n\t\t\tthis._boxHighlight.setAttribute(\"width\", \"\" + (this._barWidth - 2));\n\t\t\tthis._boxHighlight.style.visibility = \"visible\";\n\t\t} else if ((this._mouseOver || ((this._mouseX >= bar * this._barWidth) && (this._mouseX < bar * this._barWidth + this._barWidth) && (this._mouseY > 0))) && (!overTrackEditor)) {\n\t\t\tthis._boxHighlight.setAttribute(\"x\", \"\" + (1 + this._barWidth * bar));\n\t\t\tthis._boxHighlight.setAttribute(\"y\", \"1\"); // The y is set to 1 instead of 0 due to the thickness of the box causing it to go slightly outside the frame at y=0.\n\t\t\tthis._boxHighlight.setAttribute(\"height\", \"\" + (Config.barEditorHeight - 3));\n\t\t\tthis._boxHighlight.style.visibility = \"visible\";\n\t\t} else {\n\t\t\tthis._boxHighlight.style.visibility = \"hidden\";\n\t\t}\n\t\t\t\n\t\tif ((this._mouseOver || this._touchMode) && selected && overTrackEditor) {\n\t\t\tconst up: boolean = ((this._mouseY - Config.barEditorHeight) % ChannelRow.patternHeight) < ChannelRow.patternHeight / 2;\n\t\t\tconst center: number = this._barWidth * (bar + 0.8);\n\t\t\tconst middle: number = Config.barEditorHeight + ChannelRow.patternHeight * (channel + 0.5);\n\t\t\tconst base: number = ChannelRow.patternHeight * 0.1;\n\t\t\tconst tip: number = ChannelRow.patternHeight * 0.4;\n\t\t\tconst width: number = ChannelRow.patternHeight * 0.175;\n\t\t\t\t\n\t\t\tthis._upHighlight.setAttribute(\"fill\", up && !this._touchMode ? ColorConfig.hoverPreview : ColorConfig.invertedText);\n\t\t\tthis._downHighlight.setAttribute(\"fill\", !up && !this._touchMode ? ColorConfig.hoverPreview : ColorConfig.invertedText);\n\t\t\t\t\n\t\t\tthis._upHighlight.setAttribute(\"d\", `M ${center} ${middle - tip} L ${center + width} ${middle - base} L ${center - width} ${middle - base} z`);\n\t\t\tthis._downHighlight.setAttribute(\"d\", `M ${center} ${middle + tip} L ${center + width} ${middle + base} L ${center - width} ${middle + base} z`);\n\t\t\t\t\n\t\t\tthis._upHighlight.style.visibility = \"visible\";\n\t\t\tthis._downHighlight.style.visibility = \"visible\";\n\t\t} else {\n\t\t\tthis._upHighlight.style.visibility = \"hidden\";\n\t\t\tthis._downHighlight.style.visibility = \"hidden\";\n\t\t}\n\t\t\t\n\t\tthis._selectionRect.style.left = (this._barWidth * this._doc.bar) + \"px\";\n\t\tthis._selectionRect.style.top = (Config.barEditorHeight + (ChannelRow.patternHeight * this._doc.channel)) + \"px\";\n\n\t\tthis._select.style.left = (this._barWidth * this._doc.bar) + \"px\";\n\n\t\tthis._select.style.width = this._barWidth + \"px\";\n\t\tthis._select.style.top = (Config.barEditorHeight + ChannelRow.patternHeight * this._doc.channel) + \"px\";\n\t\tthis._select.style.height = ChannelRow.patternHeight + \"px\";\n\t\t\t\n\t\tthis._barDropDown.style.left = (this._barWidth * bar) + \"px\";\n\n\t\tconst patternCount: number = this._doc.song.patternsPerChannel + 1;\n\t\tfor (let i: number = this._renderedPatternCount; i < patternCount; i++) {\n\t\t\t\tthis._select.appendChild(HTML.option({value: i}, i));\n\t\t}\n\t\tfor (let i: number = patternCount; i < this._renderedPatternCount; i++) {\n\t\t\t\tthis._select.removeChild(<Node> this._select.lastChild);\n\t\t}\n\t\tthis._renderedPatternCount = patternCount;\n\t\tconst selectedPattern: number = this._doc.song.channels[this._doc.channel].bars[this._doc.bar];\n\t\tif (this._select.selectedIndex != selectedPattern) this._select.selectedIndex = selectedPattern;\n\t}\n\t\t\n\tpublic render(): void {\n\n\t\tthis._barWidth = this._doc.getBarWidth();\n\t\t\t\n\t\tif (this._channels.length != this._doc.song.getChannelCount()) {\n\n\t\t\t// Add new channel boxes if needed\n\t\t\tfor (let y: number = this._channels.length; y < this._doc.song.getChannelCount(); y++) {\n\t\t\t\tconst channelRow: ChannelRow = new ChannelRow(this._doc, y);\n\t\t\t\tthis._channels[y] = channelRow;\n\t\t\t\tthis._channelRowContainer.appendChild(channelRow.container);\n\t\t\t}\n\t\t\t\t\n\t\t\t// Remove old channel boxes\n\t\t\tfor (let y: number = this._doc.song.getChannelCount(); y < this._channels.length; y++) {\n\t\t\t\tthis._channelRowContainer.removeChild(this._channels[y].container);\n\t\t\t}\n\t\t\t\n\t\t\tthis._channels.length = this._doc.song.getChannelCount();\n\t\t\tthis._mousePressed = false;\n\t\t}\n\n\t\tfor (let j: number = 0; j < this._doc.song.getChannelCount(); j++) {\n\t\t\tthis._channels[j].render();\n\t\t}\n\t\t\t\n\t\tconst editorWidth: number = this._barWidth * this._doc.song.barCount;\n\t\tif (this._renderedEditorWidth != editorWidth) {\n\t\t\tthis._renderedEditorWidth = editorWidth;\n\t\t\tthis._channelRowContainer.style.width = editorWidth + \"px\";\n\t\t\tthis.container.style.width = editorWidth + \"px\";\n\t\t\tthis._svg.setAttribute(\"width\", editorWidth + \"\");\n\t\t\tthis._mousePressed = false;\n\n\t\t\t// Update bar editor's SVG\n\t\t\t// this._upHighlight.setAttribute(\"d\", `M ${center} ${middle - tip} L ${center + width} ${middle - base} L ${center - width} ${middle - base} z`);\n\t\t\t//this._downHighlight.setAttribute(\"d\", `M ${center} ${middle + tip} L ${center + width} ${middle + base} L ${center - width} ${middle + base} z`);\n\n\t\t\tvar pathString = \"\";\n\n\t\t\tfor (let x: number = 0; x < this._doc.song.barCount; x++) {\n\t\t\t\tvar pathLeft = x * this._barWidth + 2;\n\t\t\t\tvar pathTop = 1;\n\t\t\t\tvar pathRight = x * this._barWidth + this._barWidth - 2;\n\t\t\t\tvar pathBottom = Config.barEditorHeight - 3;\n\n\t\t\t\tpathString += `M ${pathLeft} ${pathTop} H ${pathRight} V ${pathBottom} H ${pathLeft} V ${pathTop} Z `;\n\t\t}\n\t\t\t\n\t\t\tthis._barEditorPath.setAttribute(\"d\", pathString);\n\n\t\t\tif (this._renderedBarCount < this._doc.song.barCount) {\n\t\t\t\tthis._barNumbers.length = this._doc.song.barCount;\n\t\t\t\tfor (var pos = this._renderedBarCount; pos < this._barNumbers.length; pos++) {\n\t\t\t\t\tthis._barNumbers[pos] = SVG.text({ \"font-family\": \"sans-serif\", \"font-size\": \"8px\", \"text-anchor\": \"middle\", \"font-weight\": \"bold\", \"x\": (pos * this._barWidth + this._barWidth / 2) + \"px\", \"y\": \"7px\", fill: ColorConfig.secondaryText }, \"\" + (pos + 1));\n\t\t\t\t\tif (pos % 4 == 0) {\n\t\t\t\t\t\t// Highlighting every 4 bars\n\t\t\t\t\t\tthis._barNumbers[pos].setAttribute(\"fill\", ColorConfig.primaryText);\n\t\t\t\t\t}\n\t\t\t\t\tthis._barNumberContainer.appendChild(this._barNumbers[pos]);\n\t\t\t\t}\n\t\t\t\tthis._renderedBarCount = this._doc.song.barCount;\n\t\t\t}\n\t\t\telse if (this._renderedBarCount > this._doc.song.barCount) {\n\t\t\t\tfor (var pos = this._renderedBarCount - 1; pos >= this._doc.song.barCount; pos--) {\n\t\t\t\t\tthis._barNumberContainer.removeChild(this._barNumbers[pos]);\n\t\t\t\t}\n\t\t\t\tthis._barNumbers.length = this._doc.song.barCount;\n\t\t\t\tthis._renderedBarCount = this._doc.song.barCount;\n\t\t\t}\n\n\t\t\t// Update x of bar editor numbers\n\t\t\tfor (var pos = 0; pos < this._barNumbers.length; pos++) {\n\t\t\t\tthis._barNumbers[pos].setAttribute(\"x\", (pos * this._barWidth + this._barWidth / 2) + \"px\");\n\t\t\t}\n\t\t\n\t\t\tthis._renderedEditorWidth = editorWidth;\n\t\t\tthis._channelRowContainer.style.width = editorWidth + \"px\";\n\t\t\tthis.container.style.width = editorWidth + \"px\";\n\t\t\tthis._svg.setAttribute(\"width\", editorWidth + \"\");\n\t\t\tthis._mousePressed = false;\n\t\t}\n\t\t\n\t\tconst editorHeight: number = this._doc.song.getChannelCount() * ChannelRow.patternHeight;\n\t\tif (this._renderedEditorHeight != editorHeight) {\n\t\t\tthis._renderedEditorHeight = editorHeight;\n\t\t\tthis._svg.setAttribute(\"height\", \"\" + editorHeight + Config.barEditorHeight);\n\t\t\tthis._playhead.setAttribute(\"height\", \"\" + editorHeight + Config.barEditorHeight);\n\t\t\tthis.container.style.height = (editorHeight + Config.barEditorHeight) + \"px\";\n\t\t}\n\t\t\t\n\t\tthis._select.style.display = this._touchMode ? \"\" : \"none\";\n\t\t\n\t\tif (this._doc.selection.boxSelectionActive) {\n\t\t\t// TODO: This causes the selection rectangle to repaint every time the\n\t\t\t// editor renders and the selection is visible. Check if anything changed\n\t\t\t// before overwriting the attributes?\n\t\t\tthis._selectionRect.setAttribute(\"x\", String(this._barWidth * this._doc.selection.boxSelectionBar + 1));\n\t\t\tthis._selectionRect.setAttribute(\"y\", String(Config.barEditorHeight + ChannelRow.patternHeight * this._doc.selection.boxSelectionChannel + 1));\n\t\t\tthis._selectionRect.setAttribute(\"width\", String(this._barWidth * this._doc.selection.boxSelectionWidth - 2));\n\t\t\tthis._selectionRect.setAttribute(\"height\", String(ChannelRow.patternHeight * this._doc.selection.boxSelectionHeight - 2));\n\t\t\tthis._selectionRect.setAttribute(\"visibility\", \"visible\");\n\t\t} else {\n\t\t\tthis._selectionRect.setAttribute(\"visibility\", \"hidden\");\n\t\t}\n\t\t\t\n\t\tthis._updatePreview();\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\n//import {Layout} from \"./Layout\";\nimport { InstrumentType, EffectType, Config, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, DropdownID } from \"../synth/SynthConfig\";\nimport { BarScrollBar } from \"./BarScrollBar\";\nimport { BeatsPerBarPrompt } from \"./BeatsPerBarPrompt\";\nimport { Change, ChangeGroup } from \"./Change\";\nimport { ChannelSettingsPrompt } from \"./ChannelSettingsPrompt\";\nimport { ColorConfig, ChannelColors } from \"./ColorConfig\";\nimport { createKeys } from \"../synth/CreateScalesAndKeys\";\nimport { CustomChipPrompt } from \"./CustomChipPrompt\";\nimport { CustomFilterPrompt } from \"./CustomFilterPrompt\";\nimport { EditorConfig, isMobile, prettyNumber, Preset, PresetCategory } from \"./EditorConfig\";\nimport { EdoPrompt } from \"./EdoPrompt\";\nimport { ExportPrompt } from \"./ExportPrompt\";\nimport \"./Layout\"; // Imported here for the sake of ensuring this code is transpiled early.\nimport { Instrument, Channel, Synth } from \"../synth/synth\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { Preferences } from \"./Preferences\";\nimport { HarmonicsEditor } from \"./HarmonicsEditor\";\nimport { InputBox, Slider } from \"./HTMLWrapper\";\nimport { ImportPrompt } from \"./ImportPrompt\";\nimport { ChannelRow } from \"./ChannelRow\";\nimport { LayoutPrompt } from \"./LayoutPrompt\";\nimport { EnvelopeEditor } from \"./EnvelopeEditor\";\nimport { FadeInOutEditor } from \"./FadeInOutEditor\";\nimport { FilterEditor } from \"./FilterEditor\";\nimport { LimiterPrompt } from \"./LimiterPrompt\";\nimport { LoopEditor } from \"./LoopEditor\";\nimport { MoveNotesSidewaysPrompt } from \"./MoveNotesSidewaysPrompt\";\nimport { MuteEditor } from \"./MuteEditor\";\nimport { OctaveScrollBar } from \"./OctaveScrollBar\";\nimport { MidiInputHandler } from \"./MidiInput\";\nimport { KeyboardLayout } from \"./KeyboardLayout\";\nimport { PatternEditor } from \"./PatternEditor\";\nimport { Piano } from \"./Piano\";\nimport { Prompt } from \"./Prompt\";\nimport { SongDocument } from \"./SongDocument\";\nimport { SongDurationPrompt } from \"./SongDurationPrompt\";\nimport { SustainPrompt } from \"./SustainPrompt\";\nimport { SongRecoveryPrompt } from \"./SongRecoveryPrompt\";\nimport { RecordingSetupPrompt } from \"./RecordingSetupPrompt\";\nimport { SpectrumEditor } from \"./SpectrumEditor\";\nimport { ThemePrompt } from \"./ThemePrompt\";\nimport { TipPrompt } from \"./TipPrompt\";\nimport { ChangeTempo, ChangeChorus, ChangeEchoDelay, ChangeEchoSustain, ChangeReverb, ChangeVolume, ChangePan, ChangePatternSelection, ChangePatternsPerChannel, ChangePatternNumbers, ChangeSupersawDynamism, ChangeSupersawSpread, ChangeSupersawShape, ChangePulseWidth, ChangeFeedbackAmplitude, ChangeOperatorAmplitude, ChangeOperatorFrequency, ChangeDrumsetEnvelope, ChangePasteInstrument, ChangePreset, pickRandomPresetValue, ChangeRandomGeneratedInstrument, ChangeEQFilterType, ChangeNoteFilterType, ChangeEQFilterSimpleCut, ChangeEQFilterSimplePeak, ChangeNoteFilterSimpleCut, ChangeNoteFilterSimplePeak, ChangeScale, ChangeKey, ChangeRhythm, ChangeFeedbackType, ChangeAlgorithm, ChangeChipWave, ChangeNoiseWave, ChangeTransition, ChangeToggleEffects, ChangeVibrato, ChangeUnison, ChangeChord, ChangeSong, ChangePitchShift, ChangeDetune, ChangeDistortion, ChangeStringSustain, ChangeBitcrusherFreq, ChangeBitcrusherQuantization, ChangeAddEnvelope, ChangeEnvelopeSpeed, ChangeDiscreteEnvelope, ChangeAddChannelInstrument, ChangeRemoveChannelInstrument, ChangeCustomWave, ChangeOperatorWaveform, ChangeOperatorPulseWidth, ChangeSongTitle, ChangeVibratoDepth, ChangeVibratoSpeed, ChangeVibratoDelay, ChangeVibratoType, ChangePanDelay, ChangeArpeggioSpeed, ChangeFastTwoNoteArp, ChangeClicklessTransition, ChangeAliasing, ChangeSetPatternInstruments, ChangeHoldingModRecording } from \"./changes\";\n\nimport { TrackEditor } from \"./TrackEditor\";\n\nconst { button, div, input, select, span, optgroup, option, canvas } = HTML;\n\nfunction buildOptions(menu: HTMLSelectElement, items: ReadonlyArray<string | number>): HTMLSelectElement {\n    for (let index: number = 0; index < items.length; index++) {\n        menu.appendChild(option({ value: index }, items[index]));\n    }\n    return menu;\n}\n\n// Similar to the above, but adds a non-interactive header to the list.\n// @jummbus: Honestly not necessary with new HTML options interface, but not exactly necessary to change either!\n\nfunction buildHeaderedOptions(header: string, menu: HTMLSelectElement, items: ReadonlyArray<string | number>): HTMLSelectElement {\n    menu.appendChild(option({ selected: true, disabled: true, value: header }, header));\n\n    for (const item of items) {\n        menu.appendChild(option({ value: item }, item));\n    }\n    return menu;\n}\n\nfunction buildPresetOptions(isNoise: boolean, idSet: string): HTMLSelectElement {\n    const menu: HTMLSelectElement = select({ id: idSet });\n\n\n    // Show the \"spectrum\" custom type in both pitched and noise channels.\n    //const customTypeGroup: HTMLElement = optgroup({label: EditorConfig.presetCategories[0].name});\n    if (isNoise) {\n        menu.appendChild(option({ value: InstrumentType.noise }, EditorConfig.valueToPreset(InstrumentType.noise)!.name));\n        menu.appendChild(option({ value: InstrumentType.spectrum }, EditorConfig.valueToPreset(InstrumentType.spectrum)!.name));\n        menu.appendChild(option({ value: InstrumentType.drumset }, EditorConfig.valueToPreset(InstrumentType.drumset)!.name));\n    } else {\n        menu.appendChild(option({ value: InstrumentType.chip }, EditorConfig.valueToPreset(InstrumentType.chip)!.name));\n        menu.appendChild(option({ value: InstrumentType.pwm }, EditorConfig.valueToPreset(InstrumentType.pwm)!.name));\n        menu.appendChild(option({ value: InstrumentType.supersaw}, EditorConfig.valueToPreset(InstrumentType.supersaw)!.name));\n        menu.appendChild(option({ value: InstrumentType.harmonics }, EditorConfig.valueToPreset(InstrumentType.harmonics)!.name));\n        menu.appendChild(option({ value: InstrumentType.pickedString }, EditorConfig.valueToPreset(InstrumentType.pickedString)!.name));\n        menu.appendChild(option({ value: InstrumentType.spectrum }, EditorConfig.valueToPreset(InstrumentType.spectrum)!.name));\n        menu.appendChild(option({ value: InstrumentType.fm }, EditorConfig.valueToPreset(InstrumentType.fm)!.name));\n        menu.appendChild(option({ value: InstrumentType.customChipWave }, EditorConfig.valueToPreset(InstrumentType.customChipWave)!.name));\n    }\n\n    const randomGroup: HTMLElement = optgroup({ label: \"Randomize ▾\" });\n    randomGroup.appendChild(option({ value: \"randomPreset\" }, \"Random Preset\"));\n    randomGroup.appendChild(option({ value: \"randomGenerated\" }, \"Random Generated\"));\n    menu.appendChild(randomGroup);\n\n\n    for (let categoryIndex: number = 1; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n        const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n        const group: HTMLElement = optgroup({ label: category.name + \" ▾\" });\n        let foundAny: boolean = false;\n        for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n            const preset: Preset = category.presets[presetIndex];\n            if ((preset.isNoise == true) == isNoise) {\n                group.appendChild(option({ value: (categoryIndex << 6) + presetIndex }, preset.name));\n                foundAny = true;\n            }\n        }\n\n        // Need to re-sort some elements for readability. Can't just do this in the menu, because indices are saved in URLs and would get broken if the ordering actually changed.\n        if (category.name == \"String Presets\" && foundAny) {\n\n            // Put violin 2 after violin 1\n            let moveViolin2 = group.removeChild(group.children[11]);\n            group.insertBefore(moveViolin2, group.children[1]);\n        }\n\n        if (category.name == \"Flute Presets\" && foundAny) {\n\n            // Put flute 2 after flute 1\n            let moveFlute2 = group.removeChild(group.children[11]);\n            group.insertBefore(moveFlute2, group.children[1]);\n        }\n\n        if (category.name == \"Keyboard Presets\" && foundAny) {\n\n            // Put grand piano 2 and 3 after grand piano 1\n            let moveGrandPiano2 = group.removeChild(group.children[9]);\n            let moveGrandPiano3 = group.removeChild(group.children[9]);\n            group.insertBefore(moveGrandPiano3, group.children[1]);\n            group.insertBefore(moveGrandPiano2, group.children[1]);\n        }\n\n        if (foundAny) menu.appendChild(group);\n    }\n\n    return menu;\n}\n\nfunction setSelectedValue(menu: HTMLSelectElement, value: number, isSelect2: boolean = false): void {\n    const stringValue = value.toString();\n    if (menu.value != stringValue) {\n        menu.value = stringValue;\n\n        // Change select2 value, if this select is a member of that class.\n        if (isSelect2) {\n            $(menu).val(value).trigger('change.select2');\n        }\n    }\n}\n\nclass CustomChipCanvas {\n    private mouseDown: boolean;\n    private continuousEdit: boolean;\n    private lastX: number;\n    private lastY: number;\n    public newArray: Float32Array;\n    public renderedArray: Float32Array;\n    public renderedColor: string;\n\n    private _change: Change | null = null;\n\n    constructor(public readonly canvas: HTMLCanvasElement, private readonly _doc: SongDocument, private readonly _getChange: (newArray: Float32Array) => Change) {\n        canvas.addEventListener(\"mousemove\", this._onMouseMove);\n        canvas.addEventListener(\"mousedown\", this._onMouseDown);\n        canvas.addEventListener(\"mouseup\", this._onMouseUp);\n        canvas.addEventListener(\"mouseleave\", this._onMouseUp);\n\n        this.mouseDown = false;\n        this.continuousEdit = false;\n        this.lastX = 0;\n        this.lastY = 0;\n\n        this.newArray = new Float32Array(64);\n        this.renderedArray = new Float32Array(64);\n        this.renderedColor = \"\";\n\n        // Init waveform\n        this.redrawCanvas();\n\n    }\n\n    public redrawCanvas(): void {\n        const chipData: Float32Array = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].customChipWave;\n        const renderColor: string = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;\n\n        // Check if the data has changed from the last render.\n        let needsRedraw: boolean = false;\n        if (renderColor != this.renderedColor) {\n            needsRedraw = true;\n        } else for (let i: number = 0; i < 64; i++) {\n            if (chipData[i] != this.renderedArray[i]) {\n                needsRedraw = true;\n                i = 64;\n            }\n        }\n        if (!needsRedraw) {\n            return;\n        }\n\n        this.renderedArray.set(chipData);\n\n        var ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n        // Black BG\n        ctx.fillStyle = ColorConfig.getComputed(\"--editor-background\");\n        ctx.fillRect(0, 0, 128, 52);\n\n        // Mid-bar\n        ctx.fillStyle = ColorConfig.getComputed(\"--ui-widget-background\");\n        ctx.fillRect(0, 25, 128, 2);\n\n        // 25-75 bars\n        ctx.fillStyle = ColorConfig.getComputed(\"--track-editor-bg-pitch-dim\");\n        ctx.fillRect(0, 13, 128, 1);\n        ctx.fillRect(0, 39, 128, 1);\n\n        // Waveform\n        ctx.fillStyle = renderColor;\n\n        for (let x: number = 0; x < 64; x++) {\n            var y: number = chipData[x] + 26;\n            ctx.fillRect(x * 2, y - 2, 2, 4);\n\n            this.newArray[x] = y - 26;\n        }\n    }\n\n    private _onMouseMove = (event: MouseEvent): void => {\n        if (this.mouseDown) {\n\n            var x = (event.clientX || event.pageX) - this.canvas.getBoundingClientRect().left;\n            var y = Math.floor((event.clientY || event.pageY) - this.canvas.getBoundingClientRect().top);\n\n            if (y < 2) y = 2;\n            if (y > 50) y = 50;\n\n            var ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n            if (this.continuousEdit == true && Math.abs(this.lastX - x) < 40) {\n\n                var lowerBound = (x < this.lastX) ? x : this.lastX;\n                var upperBound = (x < this.lastX) ? this.lastX : x;\n\n                for (let i = lowerBound; i <= upperBound; i += 2) {\n\n                    var progress = (Math.abs(x - this.lastX) > 2.0) ? ((x > this.lastX) ?\n                        1.0 - ((i - lowerBound) / (upperBound - lowerBound))\n                        : ((i - lowerBound) / (upperBound - lowerBound))) : 0.0;\n                    var j = Math.round(y + (this.lastY - y) * progress);\n\n                    ctx.fillStyle = ColorConfig.getComputed(\"--editor-background\");\n                    ctx.fillRect(Math.floor(i / 2) * 2, 0, 2, 53);\n                    ctx.fillStyle = ColorConfig.getComputed(\"--ui-widget-background\");\n                    ctx.fillRect(Math.floor(i / 2) * 2, 25, 2, 2);\n                    ctx.fillStyle = ColorConfig.getComputed(\"--track-editor-bg-pitch-dim\");\n                    ctx.fillRect(Math.floor(i / 2) * 2, 13, 2, 1);\n                    ctx.fillRect(Math.floor(i / 2) * 2, 39, 2, 1);\n                    ctx.fillStyle = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;\n                    ctx.fillRect(Math.floor(i / 2) * 2, j - 2, 2, 4);\n\n                    // Actually update current instrument's custom waveform\n                    this.newArray[Math.floor(i / 2)] = (j - 26);\n                }\n\n            }\n            else {\n\n                ctx.fillStyle = ColorConfig.getComputed(\"--editor-background\");\n                ctx.fillRect(Math.floor(x / 2) * 2, 0, 2, 52);\n                ctx.fillStyle = ColorConfig.getComputed(\"--ui-widget-background\");\n                ctx.fillRect(Math.floor(x / 2) * 2, 25, 2, 2);\n                ctx.fillStyle = ColorConfig.getComputed(\"--track-editor-bg-pitch-dim\");\n                ctx.fillRect(Math.floor(x / 2) * 2, 13, 2, 1);\n                ctx.fillRect(Math.floor(x / 2) * 2, 39, 2, 1);\n                ctx.fillStyle = ColorConfig.getComputedChannelColor(this._doc.song, this._doc.channel).primaryNote;\n                ctx.fillRect(Math.floor(x / 2) * 2, y - 2, 2, 4);\n\n                // Actually update current instrument's custom waveform\n                this.newArray[Math.floor(x / 2)] = (y - 26);\n\n            }\n\n            this.continuousEdit = true;\n            this.lastX = x;\n            this.lastY = y;\n\n            // Preview - update integral used for sound synthesis based on new array, not actual stored array. When mouse is released, real update will happen.\n            let instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n\n            let sum: number = 0.0;\n            for (let i: number = 0; i < this.newArray.length; i++) {\n                sum += this.newArray[i];\n            }\n            const average: number = sum / this.newArray.length;\n\n            // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n            let cumulative: number = 0;\n            let wavePrev: number = 0;\n            for (let i: number = 0; i < this.newArray.length; i++) {\n                cumulative += wavePrev;\n                wavePrev = this.newArray[i] - average;\n                instrument.customChipWaveIntegral[i] = cumulative;\n            }\n\n            instrument.customChipWaveIntegral[64] = 0.0;\n        }\n\n    }\n\n    private _onMouseDown = (event: MouseEvent): void => {\n        this.mouseDown = true;\n\n        // Allow single-click edit\n        this._onMouseMove(event);\n    }\n    private _onMouseUp = (): void => {\n        this.mouseDown = false;\n        this.continuousEdit = false;\n\n        this._whenChange();\n    }\n\n    private _whenChange = (): void => {\n        this._change = this._getChange(this.newArray);\n\n        this._doc.record(this._change!);\n\n        this._change = null;\n    };\n\n}\n\nexport class SongEditor {\n    public prompt: Prompt | null = null;\n\n    private readonly _keyboardLayout: KeyboardLayout = new KeyboardLayout(this._doc);\n    private readonly _patternEditorPrev: PatternEditor = new PatternEditor(this._doc, false, -1);\n    private readonly _patternEditor: PatternEditor = new PatternEditor(this._doc, true, 0);\n    private readonly _patternEditorNext: PatternEditor = new PatternEditor(this._doc, false, 1);\n    private readonly _trackEditor: TrackEditor = new TrackEditor(this._doc, this);\n    private readonly _muteEditor: MuteEditor = new MuteEditor(this._doc, this);\n    private readonly _loopEditor: LoopEditor = new LoopEditor(this._doc, this._trackEditor);\n    private readonly _piano: Piano = new Piano(this._doc);\n    private readonly _octaveScrollBar: OctaveScrollBar = new OctaveScrollBar(this._doc, this._piano);\n    private readonly _playButton: HTMLButtonElement = button({ class: \"playButton\", type: \"button\", title: \"Play (Space)\" }, span(\"Play\"));\n    private readonly _pauseButton: HTMLButtonElement = button({ class: \"pauseButton\", style: \"display: none;\", type: \"button\", title: \"Pause (Space)\" }, \"Pause\");\n    private readonly _recordButton: HTMLButtonElement = button({ class: \"recordButton\", style: \"display: none;\", type: \"button\", title: \"Record (Ctrl+Space)\" }, span(\"Record\"));\n    private readonly _stopButton: HTMLButtonElement = button({ class: \"stopButton\", style: \"display: none;\", type: \"button\", title: \"Stop Recording (Space)\" }, \"Stop Recording\");\n    private readonly _prevBarButton: HTMLButtonElement = button({ class: \"prevBarButton\", type: \"button\", title: \"Previous Bar (left bracket)\" });\n    private readonly _nextBarButton: HTMLButtonElement = button({ class: \"nextBarButton\", type: \"button\", title: \"Next Bar (right bracket)\" });\n    private readonly _volumeSlider: Slider = new Slider(input({ title: \"main volume\", style: \"width: 5em; flex-grow: 1; margin: 0;\", type: \"range\", min: \"0\", max: \"75\", value: \"50\", step: \"1\" }), this._doc, null, false);\n    private readonly _outVolumeBarBg: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"90%\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetBackground });\n    private readonly _outVolumeBar: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", height: \"50%\", width: \"0%\", x: \"5%\", y: \"25%\", fill: \"url('#volumeGrad2')\" });\n    private readonly _outVolumeCap: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetFocus });\n    private readonly _stop1: SVGStopElement = SVG.stop({ \"stop-color\": \"lime\", offset: \"60%\" });\n    private readonly _stop2: SVGStopElement = SVG.stop({ \"stop-color\": \"orange\", offset: \"90%\" });\n    private readonly _stop3: SVGStopElement = SVG.stop({ \"stop-color\": \"red\", offset: \"100%\" });\n    private readonly _gradient: SVGGradientElement = SVG.linearGradient({ id: \"volumeGrad2\", gradientUnits: \"userSpaceOnUse\" }, this._stop1, this._stop2, this._stop3);\n    private readonly _defs: SVGDefsElement = SVG.defs({}, this._gradient);\n    private readonly _volumeBarContainer: SVGSVGElement = SVG.svg({ style: `touch-action: none; overflow: visible; margin: auto; max-width: 20vw;`, width: \"160px\", height: \"100%\", preserveAspectRatio: \"none\", viewBox: \"0 0 160 12\" },\n        this._defs,\n        this._outVolumeBarBg,\n        this._outVolumeBar,\n        this._outVolumeCap,\n    );\n    private readonly _volumeBarBox: HTMLDivElement = div({ class: \"playback-volume-bar\", style: \"height: 12px; align-self: center;\" },\n        this._volumeBarContainer,\n    );\n    private readonly _fileMenu: HTMLSelectElement = select({ style: \"width: 100%;\" },\n        option({ selected: true, disabled: true, hidden: false }, \"File\"), // todo: \"hidden\" should be true but looks wrong on mac chrome, adds checkmark next to first visible option even though it's not selected. :(\n        option({ value: \"new\" }, \"+ New Blank Song\"),\n        option({ value: \"import\" }, \"↑ Import Song... (\" + EditorConfig.ctrlSymbol + \"O)\"),\n        option({ value: \"export\" }, \"↓ Export Song... (\" + EditorConfig.ctrlSymbol + \"S)\"),\n        option({ value: \"copyUrl\" }, \"⎘ Copy Song URL\"),\n        option({ value: \"shareUrl\" }, \"⤳ Share Song URL\"),\n        option({ value: \"shortenUrl\" }, \"… Shorten Song URL\"),\n        option({ value: \"viewPlayer\" }, \"▶ View in Song Player\"),\n        option({ value: \"copyEmbed\" }, \"⎘ Copy HTML Embed Code\"),\n        option({ value: \"songRecovery\" }, \"⚠ Recover Recent Song...\"),\n    );\n    private readonly _editMenu: HTMLSelectElement = select({ style: \"width: 100%;\" },\n        option({ selected: true, disabled: true, hidden: false }, \"Edit\"), // todo: \"hidden\" should be true but looks wrong on mac chrome, adds checkmark next to first visible option even though it's not selected. :(\n        option({ value: \"undo\" }, \"Undo (Z)\"),\n        option({ value: \"redo\" }, \"Redo (Y)\"),\n        option({ value: \"copy\" }, \"Copy Pattern (C)\"),\n        option({ value: \"pasteNotes\" }, \"Paste Pattern Notes (V)\"),\n        option({ value: \"pasteNumbers\" }, \"Paste Pattern Numbers (\" + EditorConfig.ctrlSymbol + \"⇧V)\"),\n        option({ value: \"insertBars\" }, \"Insert Bar (⏎)\"),\n        option({ value: \"deleteBars\" }, \"Delete Selected Bars (⌫)\"),\n        option({ value: \"insertChannel\" }, \"Insert Channel (\" + EditorConfig.ctrlSymbol + \"⏎)\"),\n        option({ value: \"deleteChannel\" }, \"Delete Selected Channels (\" + EditorConfig.ctrlSymbol + \"⌫)\"),\n        option({ value: \"selectChannel\" }, \"Select Channel (⇧A)\"),\n        option({ value: \"selectAll\" }, \"Select All (A)\"),\n        option({ value: \"duplicatePatterns\" }, \"Duplicate Reused Patterns (D)\"),\n        option({ value: \"transposeUp\" }, \"Move Notes Up (+ or ⇧+)\"),\n        option({ value: \"transposeDown\" }, \"Move Notes Down (- or ⇧-)\"),\n        option({ value: \"moveNotesSideways\" }, \"Move All Notes Sideways... (W)\"),\n        option({ value: \"beatsPerBar\" }, \"Change Beats Per Bar...\"),\n        option({ value: \"barCount\" }, \"Change Song Length... (L)\"),\n        option({ value: \"edo\" }, \"Change EDO...\"),\n        option({ value: \"channelSettings\" }, \"Channel Settings... (Q)\"),\n        option({ value: \"limiterSettings\" }, \"Limiter Settings... (⇧L)\"),\n    );\n    private readonly _optionsMenu: HTMLSelectElement = select({ style: \"width: 100%;\" },\n        option({ selected: true, disabled: true, hidden: false }, \"Preferences\"), // todo: \"hidden\" should be true but looks wrong on mac chrome, adds checkmark next to first visible option even though it's not selected. :(\n        option({ value: \"autoPlay\" }, \"Auto Play on Load\"),\n        option({ value: \"autoFollow\" }, \"Auto Follow Playhead\"),\n        option({ value: \"enableNotePreview\" }, \"Hear Added Notes\"),\n        option({ value: \"showLetters\" }, \"Show Piano Keys\"),\n        option({ value: \"showFifth\" }, 'Highlight \"Fifth\" Note'),\n        option({ value: \"notesOutsideScale\" }, \"Place Notes Out of Scale\"),\n        option({ value: \"setDefaultScale\" }, \"Set Current Scale as Default\"),\n        option({ value: \"showChannels\" }, \"Show All Channels\"),\n        option({ value: \"showScrollBar\" }, \"Show Octave Scroll Bar\"),\n        option({ value: \"alwaysFineNoteVol\" }, \"Always Fine Note Volume\"),\n        option({ value: \"enableChannelMuting\" }, \"Enable Channel Muting\"),\n        option({ value: \"displayBrowserUrl\" }, \"Show Song Data in URL\"),\n        option({ value: \"displayVolumeBar\" }, \"Show Playback Volume\"),\n        option({ value: \"layout\" }, \"Set Layout...\"),\n        option({ value: \"colorTheme\" }, \"Set Theme...\"),\n        option({ value: \"recordingSetup\" }, \"Note Recording...\"),\n    );\n    private readonly _scaleSelect: HTMLSelectElement = buildOptions(select(), Config.scales.map(scale => scale.name));\n    private readonly _keySelect: HTMLSelectElement = buildOptions(select(), createKeys(this._doc.song.edo).map(key => key.name).reverse());\n    private readonly _tempoSlider: Slider = new Slider(input({ style: \"margin: 0; vertical-align: middle;\", type: \"range\", min: \"30\", max: \"320\", value: \"160\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeTempo(this._doc, oldValue, newValue), false);\n    private readonly _tempoStepper: HTMLInputElement = input({ style: \"width: 4em; font-size: 80%; margin-left: 0.4em; vertical-align: middle;\", type: \"number\", step: \"1\" });\n    private readonly _chorusSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.chorusRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeChorus(this._doc, oldValue, newValue), false);\n    private readonly _chorusRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"chorus\") }, \"Chorus:\"), this._chorusSlider.container);\n    private readonly _reverbSlider: Slider = new Slider(input({ style: \"margin: 0; position: sticky,\", type: \"range\", min: \"0\", max: Config.reverbRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeReverb(this._doc, oldValue, newValue), false);\n    private readonly _reverbRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"reverb\") }, \"Reverb:\"), this._reverbSlider.container);\n    private readonly _echoSustainSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.echoSustainRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeEchoSustain(this._doc, oldValue, newValue), false);\n    private readonly _echoSustainRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"echoSustain\") }, \"Echo:\"), this._echoSustainSlider.container);\n    private readonly _echoDelaySlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.echoDelayRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeEchoDelay(this._doc, oldValue, newValue), false);\n    private readonly _echoDelayRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"echoDelay\") }, \"Echo Delay:\"), this._echoDelaySlider.container);\n    private readonly _rhythmSelect: HTMLSelectElement = buildOptions(select(), Config.rhythms.map(rhythm => rhythm.name));\n    private readonly _pitchedPresetSelect: HTMLSelectElement = buildPresetOptions(false, \"pitchPresetSelect\");\n    private readonly _drumPresetSelect: HTMLSelectElement = buildPresetOptions(true, \"drumPresetSelect\");\n    private readonly _algorithmSelect: HTMLSelectElement = buildOptions(select(), Config.algorithms.map(algorithm => algorithm.name));\n    private readonly _algorithmSelectRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"algorithm\") }, \"Algorithm: \"), div({ class: \"selectContainer\" }, this._algorithmSelect));\n    private readonly _instrumentButtons: HTMLButtonElement[] = [];\n    private readonly _instrumentAddButton: HTMLButtonElement = button({ type: \"button\", class: \"add-instrument last-button\" });\n    private readonly _instrumentRemoveButton: HTMLButtonElement = button({ type: \"button\", class: \"remove-instrument\" });\n    private readonly _instrumentsButtonBar: HTMLDivElement = div({ class: \"instrument-bar\" }, this._instrumentRemoveButton, this._instrumentAddButton);\n    private readonly _instrumentsButtonRow: HTMLDivElement = div({ class: \"selectRow\", style: \"display: none;\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"instrumentIndex\") }, \"Instrument:\"), this._instrumentsButtonBar);\n    private readonly _instrumentVolumeSlider: Slider = new Slider(input({ style: \"margin: 0; position: sticky;\", type: \"range\", min: Math.floor(-Config.volumeRange / 2), max: Math.floor(Config.volumeRange / 2), value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeVolume(this._doc, oldValue, newValue), true);\n    private readonly _instrumentVolumeSliderInputBox: HTMLInputElement = input({ style: \"width: 4em; font-size: 80%\", id: \"volumeSliderInputBox\", type: \"number\", step: \"1\", min: Math.floor(-Config.volumeRange / 2), max: Math.floor(Config.volumeRange / 2), value: \"0\" });\n    private readonly _instrumentVolumeSliderTip: HTMLDivElement = div({ class: \"selectRow\", style: \"height: 1em\" }, span({ class: \"tip\", style: \"font-size: smaller;\", onclick: () => this._openPrompt(\"instrumentVolume\") }, \"Volume: \"));\n    private readonly _instrumentVolumeSliderRow: HTMLDivElement = div({ class: \"selectRow\" }, div({},\n        div({ style: `color: ${ColorConfig.secondaryText};` }, span({ class: \"tip\" }, this._instrumentVolumeSliderTip)),\n        div({ style: `color: ${ColorConfig.secondaryText}; margin-top: -3px;` }, this._instrumentVolumeSliderInputBox),\n    ), this._instrumentVolumeSlider.container);\n    private readonly _panSlider: Slider = new Slider(input({ style: \"margin: 0; position: sticky;\", type: \"range\", min: \"0\", max: Config.panMax, value: Config.panCenter, step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangePan(this._doc, oldValue, newValue), true);\n    private readonly _panDropdown: HTMLButtonElement = button({ style: \"margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;\", onclick: () => this._toggleDropdownMenu(DropdownID.Pan) }, \"▼\");\n    private readonly _panSliderInputBox: HTMLInputElement = input({ style: \"width: 4em; font-size: 80%; \", id: \"panSliderInputBox\", type: \"number\", step: \"1\", min: \"0\", max: \"100\", value: \"0\" });\n    private readonly _panSliderRow: HTMLDivElement = div({ class: \"selectRow\" }, div({},\n        span({ class: \"tip\", tabindex: \"0\", style: \"height:1em; font-size: smaller;\", onclick: () => this._openPrompt(\"pan\") }, \"Pan: \"),\n        div({ style: \"color: \" + ColorConfig.secondaryText + \"; margin-top: -3px;\" }, this._panSliderInputBox),\n    ), this._panDropdown, this._panSlider.container);\n    private readonly _panDelaySlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.modulators.dictionary[\"pan delay\"].maxRawVol, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangePanDelay(this._doc, oldValue, newValue), false);\n    private readonly _panDelayRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"panDelay\") }, \"‣ Delay:\"), this._panDelaySlider.container);\n    private readonly _panDropdownGroup: HTMLElement = div({ class: \"editor-controls\", style: \"display: none;\" }, this._panDelayRow);\n    private readonly _chipWaveSelect: HTMLSelectElement = buildOptions(select(), Config.chipWaves.map(wave => wave.name));\n    private readonly _chipNoiseSelect: HTMLSelectElement = buildOptions(select(), Config.chipNoises.map(wave => wave.name));\n    private readonly _chipWaveSelectRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"chipWave\") }, \"Wave: \"), div({ class: \"selectContainer\" }, this._chipWaveSelect));\n    private readonly _chipNoiseSelectRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"chipNoise\") }, \"Noise: \"), div({ class: \"selectContainer\" }, this._chipNoiseSelect));\n    private readonly _fadeInOutEditor: FadeInOutEditor = new FadeInOutEditor(this._doc);\n    private readonly _fadeInOutRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"fadeInOut\") }, \"Fade:\"), this._fadeInOutEditor.container);\n    private readonly _transitionSelect: HTMLSelectElement = buildOptions(select(), Config.transitions.map(transition => transition.name));\n    private readonly _transitionDropdown: HTMLButtonElement = button({ style: \"margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;\", onclick: () => this._toggleDropdownMenu(DropdownID.Transition) }, \"▼\");\n    private readonly _transitionRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"transition\") }, \"Transition:\"), this._transitionDropdown, div({ class: \"selectContainer\", style: \"width: 52.5%;\" }, this._transitionSelect));\n    private readonly _clicklessTransitionBox: HTMLInputElement = input({ type: \"checkbox\", style: \"width: 1em; padding: 0; margin-right: 4em;\" });\n    private readonly _clicklessTransitionRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"clicklessTransition\") }, \"‣ Clickless:\"), this._clicklessTransitionBox);\n    private readonly _transitionDropdownGroup: HTMLElement = div({ class: \"editor-controls\", style: \"display: none;\" }, this._clicklessTransitionRow);\n\n    private readonly _effectsSelect: HTMLSelectElement = select(option({ selected: true, disabled: true, hidden: false })); // todo: \"hidden\" should be true but looks wrong on mac chrome, adds checkmark next to first visible option even though it's not selected. :(\n    private readonly _eqFilterSimpleButton: HTMLButtonElement = button({ style: \"font-size: x-small; width: 50%; height: 40%\", class: \"no-underline\", onclick: () => this._switchEQFilterType(true) }, \"simple\");\n    private readonly _eqFilterAdvancedButton: HTMLButtonElement = button({ style: \"font-size: x-small; width: 50%; height: 40%\", class: \"last-button no-underline\", onclick: () => this._switchEQFilterType(false) }, \"advanced\");\n    private readonly _eqFilterTypeRow: HTMLElement = div({ class: \"selectRow\", style: \"padding-top: 4px; margin-bottom: 0px;\" }, span({ style: \"font-size: x-small;\", class: \"tip\", onclick: () => this._openPrompt(\"filterType\") }, \"EQ Filt.Type:\"), div({ class: \"instrument-bar\" }, this._eqFilterSimpleButton, this._eqFilterAdvancedButton));\n    private readonly _eqFilterEditor: FilterEditor = new FilterEditor(this._doc);\n    private readonly _eqFilterZoom: HTMLButtonElement = button({ style: \"margin-left:0em; padding-left:0.2em; height:1.5em; max-width: 12px;\", onclick: () => this._openPrompt(\"customEQFilterSettings\") }, \"+\");\n    private readonly _eqFilterRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"eqFilter\") }, \"EQ Filt:\"), this._eqFilterZoom, this._eqFilterEditor.container);\n    private readonly _eqFilterSimpleCutSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.filterSimpleCutRange - 1, value: \"6\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeEQFilterSimpleCut(this._doc, oldValue, newValue), false);\n    private _eqFilterSimpleCutRow: HTMLDivElement = div({ class: \"selectRow\", title: \"Low-pass Filter Cutoff Frequency\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"filterCutoff\") }, \"Filter Cut:\"), this._eqFilterSimpleCutSlider.container);\n    private readonly _eqFilterSimplePeakSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.filterSimplePeakRange - 1, value: \"6\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeEQFilterSimplePeak(this._doc, oldValue, newValue), false);\n    private _eqFilterSimplePeakRow: HTMLDivElement = div({ class: \"selectRow\", title: \"Low-pass Filter Peak Resonance\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"filterResonance\") }, \"Filter Peak:\"), this._eqFilterSimplePeakSlider.container);\n\n    private readonly _noteFilterSimpleButton: HTMLButtonElement = button({ style: \"font-size: x-small; width: 50%; height: 40%\", class: \"no-underline\", onclick: () => this._switchNoteFilterType(true) }, \"simple\");\n    private readonly _noteFilterAdvancedButton: HTMLButtonElement = button({ style: \"font-size: x-small; width: 50%; height: 40%\", class: \"last-button no-underline\", onclick: () => this._switchNoteFilterType(false) }, \"advanced\");\n    private readonly _noteFilterTypeRow: HTMLElement = div({ class: \"selectRow\", style: \"padding-top: 4px; margin-bottom: 0px;\" }, span({ style: \"font-size: x-small;\", class: \"tip\", onclick: () => this._openPrompt(\"filterType\") }, \"Note Filt.Type:\"), div({ class: \"instrument-bar\" }, this._noteFilterSimpleButton, this._noteFilterAdvancedButton));\n    private readonly _noteFilterEditor: FilterEditor = new FilterEditor(this._doc, true);\n    private readonly _noteFilterZoom: HTMLButtonElement = button({ style: \"margin-left:0em; padding-left:0.2em; height:1.5em; max-width: 12px;\", onclick: () => this._openPrompt(\"customNoteFilterSettings\") }, \"+\");\n    private readonly _noteFilterRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"noteFilter\") }, \"Note Filt:\"), this._noteFilterZoom, this._noteFilterEditor.container);\n    private readonly _supersawDynamismSlider: Slider = new Slider(input({style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.supersawDynamismMax, value: \"0\", step: \"1\"}), this._doc, (oldValue: number, newValue: number) => new ChangeSupersawDynamism(this._doc, oldValue, newValue), false);\n\tprivate readonly _supersawDynamismRow: HTMLDivElement = div({class: \"selectRow\"}, span({class: \"tip\", onclick: ()=>this._openPrompt(\"supersawDynamism\")}, \"Dynamism:\"), this._supersawDynamismSlider.container);\n\tprivate readonly _supersawSpreadSlider: Slider = new Slider(input({style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.supersawSpreadMax, value: \"0\", step: \"1\"}), this._doc, (oldValue: number, newValue: number) => new ChangeSupersawSpread(this._doc, oldValue, newValue), false);\n\tprivate readonly _supersawSpreadRow: HTMLDivElement = div({class: \"selectRow\"}, span({class: \"tip\", onclick: ()=>this._openPrompt(\"supersawSpread\")}, \"Spread:\"), this._supersawSpreadSlider.container);\n\tprivate readonly _supersawShapeSlider: Slider = new Slider(input({style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.supersawShapeMax, value: \"0\", step: \"1\"}), this._doc, (oldValue: number, newValue: number) => new ChangeSupersawShape(this._doc, oldValue, newValue), false);\n\tprivate readonly _supersawShapeRow: HTMLDivElement = div({class: \"selectRow\"}, span({class: \"tip\", onclick: ()=>this._openPrompt(\"supersawShape\"), style: \"overflow: clip;\"}, \"Saw↔Pulse:\"), this._supersawShapeSlider.container);\n\t\n    private readonly _noteFilterSimpleCutSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.filterSimpleCutRange - 1, value: \"6\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeNoteFilterSimpleCut(this._doc, oldValue, newValue), false);\n    private _noteFilterSimpleCutRow: HTMLDivElement = div({ class: \"selectRow\", title: \"Low-pass Filter Cutoff Frequency\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"filterCutoff\") }, \"Filter Cut:\"), this._noteFilterSimpleCutSlider.container);\n    private readonly _noteFilterSimplePeakSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.filterSimplePeakRange - 1, value: \"6\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeNoteFilterSimplePeak(this._doc, oldValue, newValue), false);\n    private _noteFilterSimplePeakRow: HTMLDivElement = div({ class: \"selectRow\", title: \"Low-pass Filter Peak Resonance\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"filterResonance\") }, \"Filter Peak:\"), this._noteFilterSimplePeakSlider.container);\n\n    private readonly _pulseWidthSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"1\", max: Config.pulseWidthRange, value: \"1\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangePulseWidth(this._doc, oldValue, newValue), false);\n    private readonly _pwmSliderInputBox: HTMLInputElement = input({ style: \"width: 4em; font-size: 80%; \", id: \"pwmSliderInputBox\", type: \"number\", step: \"1\", min: \"1\", max: Config.pulseWidthRange, value: \"1\" });\n    private readonly _pulseWidthRow: HTMLDivElement = div({ class: \"selectRow\" }, div({},\n        span({ class: \"tip\", tabindex: \"0\", style: \"height:1em; font-size: smaller;\", onclick: () => this._openPrompt(\"pulseWidth\") }, \"PulseWidth:\"),\n        div({ style: `color: ${ColorConfig.secondaryText}; margin-top: -3px;` }, this._pwmSliderInputBox)\n        ), this._pulseWidthSlider.container);\n\n    private readonly _pitchShiftSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.pitchShiftRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangePitchShift(this._doc, oldValue, newValue), true);\n    private readonly _pitchShiftTonicMarkers: HTMLDivElement[] = [div({ class: \"pitchShiftMarker\", style: { color: ColorConfig.tonic } }), div({ class: \"pitchShiftMarker\", style: { color: ColorConfig.tonic, left: \"50%\" } }), div({ class: \"pitchShiftMarker\", style: { color: ColorConfig.tonic, left: \"100%\" } })];\n    private readonly _pitchShiftFifthMarkers: HTMLDivElement[] = [div({ class: \"pitchShiftMarker\", style: { color: ColorConfig.fifthNote, left: (100 * 7 / 24) + \"%\" } }), div({ class: \"pitchShiftMarker\", style: { color: ColorConfig.fifthNote, left: (100 * 19 / 24) + \"%\" } })];\n    private readonly _pitchShiftMarkerContainer: HTMLDivElement = div({ style: \"display: flex; position: relative;\" }, this._pitchShiftSlider.container, div({ class: \"pitchShiftMarkerContainer\" }, this._pitchShiftTonicMarkers, this._pitchShiftFifthMarkers));\n    private readonly _pitchShiftRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"pitchShift\") }, \"Pitch Shift:\"), this._pitchShiftMarkerContainer);\n    private readonly _detuneSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: Config.detuneMin - Config.detuneCenter, max: Config.detuneMax - Config.detuneCenter, value: 0, step: \"4\" }), this._doc, (oldValue: number, newValue: number) => new ChangeDetune(this._doc, oldValue, newValue), true);\n    private readonly _detuneSliderInputBox: HTMLInputElement = input({ style: \"width: 4em; font-size: 80%; \", id: \"detuneSliderInputBox\", type: \"number\", step: \"1\", min: Config.detuneMin - Config.detuneCenter, max: Config.detuneMax - Config.detuneCenter, value: 0 });\n    private readonly _detuneSliderRow: HTMLDivElement = div({ class: \"selectRow\" }, div({},\n        span({ class: \"tip\", style: \"height:1em; font-size: smaller;\", onclick: () => this._openPrompt(\"detune\") }, \"Detune: \"),\n        div({ style: `color: ${ColorConfig.secondaryText}; margin-top: -3px;` }, this._detuneSliderInputBox),\n    ), this._detuneSlider.container);\n    private readonly _distortionSlider: Slider = new Slider(input({ style: \"margin: 0; position: sticky;\", type: \"range\", min: \"0\", max: Config.distortionRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeDistortion(this._doc, oldValue, newValue), false);\n    private readonly _distortionRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"distortion\") }, \"Distortion:\"), this._distortionSlider.container);\n    private readonly _aliasingBox: HTMLInputElement = input({ type: \"checkbox\", style: \"width: 1em; padding: 0; margin-right: 4em;\" });\n    private readonly _aliasingRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", style: \"margin-left:10px;\", onclick: () => this._openPrompt(\"aliases\") }, \"Aliasing:\"), this._aliasingBox);\n    private readonly _bitcrusherQuantizationSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.bitcrusherQuantizationRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeBitcrusherQuantization(this._doc, oldValue, newValue), false);\n    private readonly _bitcrusherQuantizationRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"bitcrusherQuantization\") }, \"Bit Crush:\"), this._bitcrusherQuantizationSlider.container);\n    private readonly _bitcrusherFreqSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.bitcrusherFreqRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeBitcrusherFreq(this._doc, oldValue, newValue), false);\n    private readonly _bitcrusherFreqRow: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"bitcrusherFreq\") }, \"Freq Crush:\"), this._bitcrusherFreqSlider.container);\n    private readonly _stringSustainSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.stringSustainRange - 1, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeStringSustain(this._doc, oldValue, newValue), false);\n    private readonly _stringSustainLabel: HTMLSpanElement = span({class: \"tip\", onclick: ()=>this._openPrompt(\"stringSustain\")}, \"Sustain:\");\n\tprivate readonly _stringSustainRow: HTMLDivElement = div({class: \"selectRow\"}, this._stringSustainLabel, this._stringSustainSlider.container);\n\tprivate readonly _unisonSelect: HTMLSelectElement = buildOptions(select(), Config.unisons.map(unison => unison.name));\n    private readonly _unisonSelectRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"unison\") }, \"Unison:\"), div({ class: \"selectContainer\" }, this._unisonSelect));\n    private readonly _chordSelect: HTMLSelectElement = buildOptions(select(), Config.chords.map(chord => chord.name));\n    private readonly _chordDropdown: HTMLButtonElement = button({ style: \"margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;\", onclick: () => this._toggleDropdownMenu(DropdownID.Chord) }, \"▼\");\n\n    private readonly _chordSelectRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"chords\") }, \"Chords:\"), this._chordDropdown, div({ class: \"selectContainer\" }, this._chordSelect));\n    private readonly _arpeggioSpeedDisplay: HTMLSpanElement = span({ style: `color: ${ColorConfig.secondaryText}; font-size: smaller; text-overflow: clip;` }, \"x1\");\n    private readonly _arpeggioSpeedSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.modulators.dictionary[\"arp speed\"].maxRawVol, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeArpeggioSpeed(this._doc, oldValue, newValue), false);\n    private readonly _arpeggioSpeedRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"arpeggioSpeed\") }, \"‣ Spd:\"), this._arpeggioSpeedDisplay, this._arpeggioSpeedSlider.container);\n    private readonly _twoNoteArpBox: HTMLInputElement = input({ type: \"checkbox\", style: \"width: 1em; padding: 0; margin-right: 4em;\" });\n    private readonly _twoNoteArpRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"twoNoteArpeggio\") }, \"‣ Fast Two-Note:\"), this._twoNoteArpBox);\n    private readonly _chordDropdownGroup: HTMLElement = div({ class: \"editor-controls\", style: \"display: none;\" }, this._arpeggioSpeedRow, this._twoNoteArpRow);\n\n    private readonly _vibratoSelect: HTMLSelectElement = buildOptions(select(), Config.vibratos.map(vibrato => vibrato.name));\n    private readonly _vibratoDropdown: HTMLButtonElement = button({ style: \"margin-left:0em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;\", onclick: () => this._toggleDropdownMenu(DropdownID.Vibrato) }, \"▼\");\n    private readonly _vibratoSelectRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"vibrato\") }, \"Vibrato:\"), this._vibratoDropdown, div({ class: \"selectContainer\", style: \"width: 61.5%;\" }, this._vibratoSelect));\n    private readonly _vibratoDepthSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.modulators.dictionary[\"vibrato depth\"].maxRawVol, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeVibratoDepth(this._doc, oldValue, newValue), false);\n    private readonly _vibratoDepthRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"vibratoDepth\") }, \"‣ Depth:\"), this._vibratoDepthSlider.container);\n    private readonly _vibratoSpeedDisplay: HTMLSpanElement = span({ style: `color: ${ColorConfig.secondaryText}; font-size: smaller; text-overflow: clip;` }, \"x1\");\n    private readonly _vibratoSpeedSlider: Slider = new Slider(input({ style: \"margin: 0; text-overflow: clip;\", type: \"range\", min: \"0\", max: Config.modulators.dictionary[\"vibrato speed\"].maxRawVol, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeVibratoSpeed(this._doc, oldValue, newValue), false);\n    private readonly _vibratoSpeedRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"vibratoSpeed\") }, \"‣ Spd:\"), this._vibratoSpeedDisplay, this._vibratoSpeedSlider.container);\n    private readonly _vibratoDelaySlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.modulators.dictionary[\"vibrato delay\"].maxRawVol, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeVibratoDelay(this._doc, oldValue, newValue), false);\n    private readonly _vibratoDelayRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"vibratoDelay\") }, \"‣ Delay:\"), this._vibratoDelaySlider.container);\n    private readonly _vibratoTypeSelect: HTMLSelectElement = buildOptions(select(), Config.vibratoTypes.map(vibrato => vibrato.name));\n    private readonly _vibratoTypeSelectRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"vibratoType\") }, \"‣ Type:\"), div({ class: \"selectContainer\", style: \"width: 61.5%;\" }, this._vibratoTypeSelect));\n    private readonly _vibratoDropdownGroup: HTMLElement = div({ class: \"editor-controls\", style: `display: none;` }, this._vibratoDepthRow, this._vibratoSpeedRow, this._vibratoDelayRow, this._vibratoTypeSelectRow);\n    private readonly _phaseModGroup: HTMLElement = div({ class: \"editor-controls\" });\n    private readonly _feedbackTypeSelect: HTMLSelectElement = buildOptions(select(), Config.feedbacks.map(feedback => feedback.name));\n    private readonly _feedbackRow1: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"feedbackType\") }, \"Feedback:\"), div({ class: \"selectContainer\" }, this._feedbackTypeSelect));\n    private readonly _spectrumEditor: SpectrumEditor = new SpectrumEditor(this._doc, null);\n    private readonly _spectrumRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"spectrum\") }, \"Spectrum:\"), this._spectrumEditor.container);\n    private readonly _harmonicsEditor: HarmonicsEditor = new HarmonicsEditor(this._doc);\n    private readonly _harmonicsRow: HTMLElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"harmonics\") }, \"Harmonics:\"), this._harmonicsEditor.container);\n\n    private readonly _envelopeEditor: EnvelopeEditor = new EnvelopeEditor(this._doc);\n    private readonly _discreteEnvelopeBox: HTMLInputElement = input({ type: \"checkbox\", style: \"width: 1em; padding: 0; margin-right: 4em;\" });\n    private readonly _discreteEnvelopeRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"discreteEnvelope\") }, \"‣ Discrete:\"), this._discreteEnvelopeBox);\n    private readonly _envelopeSpeedDisplay: HTMLSpanElement = span({ style: `color: ${ColorConfig.secondaryText}; font-size: smaller; text-overflow: clip;` }, \"x1\");\n    private readonly _envelopeSpeedSlider: Slider = new Slider(input({ style: \"margin: 0;\", type: \"range\", min: \"0\", max: Config.modulators.dictionary[\"envelope speed\"].maxRawVol, value: \"0\", step: \"1\" }), this._doc, (oldValue: number, newValue: number) => new ChangeEnvelopeSpeed(this._doc, oldValue, newValue), false);\n    private readonly _envelopeSpeedRow: HTMLElement = div({ class: \"selectRow dropFader\" }, span({ class: \"tip\", style: \"margin-left:4px;\", onclick: () => this._openPrompt(\"envelopeSpeed\") }, \"‣ Spd:\"), this._envelopeSpeedDisplay, this._envelopeSpeedSlider.container);\n    private readonly _envelopeDropdownGroup: HTMLElement = div({ class: \"editor-controls\", style: \"display: none;\" }, this._discreteEnvelopeRow, this._envelopeSpeedRow);\n    private readonly _envelopeDropdown: HTMLButtonElement = button({ style: \"margin-left:0em; margin-right: 1em; height:1.5em; width: 10px; padding: 0px; font-size: 8px;\", onclick: () => this._toggleDropdownMenu(DropdownID.Envelope) }, \"▼\");\n   \n    private readonly _drumsetGroup: HTMLElement = div({ class: \"editor-controls\" });\n    private readonly _modulatorGroup: HTMLElement = div({ class: \"editor-controls\" });\n    private readonly _modNameRows: HTMLElement[];\n    private readonly _modChannelBoxes: HTMLSelectElement[];\n    private readonly _modInstrumentBoxes: HTMLSelectElement[];\n    private readonly _modSetRows: HTMLElement[];\n    private readonly _modSetBoxes: HTMLSelectElement[];\n    private readonly _modFilterRows: HTMLElement[];\n    private readonly _modFilterBoxes: HTMLSelectElement[];\n    private readonly _modTargetIndicators: SVGElement[];\n\n    private readonly _instrumentCopyButton: HTMLButtonElement = button({ style: \"max-width:86px; width: 86px;\", class: \"copyButton\", title: \"Copy Instrument (⇧C)\" }, [\n        \"Copy\",\n        // Copy icon:\n        SVG.svg({ style: \"flex-shrink: 0; position: absolute; left: 0; top: 50%; margin-top: -1em; pointer-events: none;\", width: \"2em\", height: \"2em\", viewBox: \"-5 -21 26 26\" }, [\n            SVG.path({ d: \"M 0 -15 L 1 -15 L 1 0 L 13 0 L 13 1 L 0 1 L 0 -15 z M 2 -1 L 2 -17 L 10 -17 L 14 -13 L 14 -1 z M 3 -2 L 13 -2 L 13 -12 L 9 -12 L 9 -16 L 3 -16 z\", fill: \"currentColor\" }),\n        ]),\n    ]);\n    private readonly _instrumentPasteButton: HTMLButtonElement = button({ style: \"max-width:86px;\", class: \"pasteButton\", title: \"Paste Instrument (⇧V)\" }, [\n        \"Paste\",\n        // Paste icon:\n        SVG.svg({ style: \"flex-shrink: 0; position: absolute; left: 0; top: 50%; margin-top: -1em; pointer-events: none;\", width: \"2em\", height: \"2em\", viewBox: \"0 0 26 26\" }, [\n            SVG.path({ d: \"M 8 18 L 6 18 L 6 5 L 17 5 L 17 7 M 9 8 L 16 8 L 20 12 L 20 22 L 9 22 z\", stroke: \"currentColor\", fill: \"none\" }),\n            SVG.path({ d: \"M 9 3 L 14 3 L 14 6 L 9 6 L 9 3 z M 16 8 L 20 12 L 16 12 L 16 8 z\", fill: \"currentColor\", }),\n        ]),\n    ]);\n\n    private readonly _customWaveDrawCanvas: CustomChipCanvas = new CustomChipCanvas(canvas({ width: 128, height: 52, style: \"border:2px solid \" + ColorConfig.uiWidgetBackground, id: \"customWaveDrawCanvas\" }), this._doc, (newArray: Float32Array) => new ChangeCustomWave(this._doc, newArray));\n    private readonly _customWavePresetDrop: HTMLSelectElement = buildHeaderedOptions(\"Load Preset\", select({ style: \"width: 50%; height:1.5em; text-align: center; text-align-last: center;\" }),\n        Config.chipWaves.map(wave => wave.name)\n    );\n    private readonly _customWaveZoom: HTMLButtonElement = button({ style: \"margin-left:0.5em; height:1.5em; max-width: 20px;\", onclick: () => this._openPrompt(\"customChipSettings\") }, \"+\");\n\n    private readonly _customWaveDraw: HTMLDivElement = div({ style: \"height:80px; margin-top:10px; margin-bottom:5px\" }, [\n        div({ style: \"height:54px; display:flex; justify-content:center;\" }, [this._customWaveDrawCanvas.canvas]),\n        div({ style: \"margin-top:5px; display:flex; justify-content:center;\" }, [this._customWavePresetDrop, this._customWaveZoom]),\n    ]);\n\n    private readonly _songTitleInputBox: InputBox = new InputBox(input({ style: \"font-weight:bold; border:none; width: 98%; background-color:${ColorConfig.editorBackground}; color:${ColorConfig.primaryText}; text-align:center\", maxlength: \"30\", type: \"text\", value: EditorConfig.versionDisplayName }), this._doc, (oldValue: string, newValue: string) => new ChangeSongTitle(this._doc, oldValue, newValue));\n\n\n    private readonly _feedbackAmplitudeSlider: Slider = new Slider(input({ type: \"range\", min: \"0\", max: Config.operatorAmplitudeMax, value: \"0\", step: \"1\", title: \"Feedback Amplitude\" }), this._doc, (oldValue: number, newValue: number) => new ChangeFeedbackAmplitude(this._doc, oldValue, newValue), false);\n    private readonly _feedbackRow2: HTMLDivElement = div({ class: \"selectRow\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"feedbackVolume\") }, \"Fdback Vol:\"), this._feedbackAmplitudeSlider.container);\n    /*\n     * @jummbus - my very real, valid reason for cutting this button: I don't like it.\n     * \n    private readonly _customizeInstrumentButton: HTMLButtonElement = button({type: \"button\", style: \"margin: 2px 0\"},\n\n        \"Customize Instrument\",\n    );\n    */\n    private readonly _addEnvelopeButton: HTMLButtonElement = button({ type: \"button\", class: \"add-envelope\" });\n    private readonly _customInstrumentSettingsGroup: HTMLDivElement = div({ class: \"editor-controls\" },\n        this._panSliderRow,\n        this._panDropdownGroup,\n        this._chipWaveSelectRow,\n        this._chipNoiseSelectRow,\n        this._customWaveDraw,\n        this._eqFilterTypeRow,\n        this._eqFilterRow,\n        this._eqFilterSimpleCutRow,\n        this._eqFilterSimplePeakRow,\n        this._fadeInOutRow,\n        this._algorithmSelectRow,\n        this._phaseModGroup,\n        this._feedbackRow1,\n        this._feedbackRow2,\n        this._spectrumRow,\n        this._harmonicsRow,\n        this._drumsetGroup,\n\t\tthis._supersawDynamismRow,\n\t\tthis._supersawSpreadRow,\n\t\tthis._supersawShapeRow,\n        this._pulseWidthRow,\n        this._stringSustainRow,\n        this._unisonSelectRow,\n        div({ style: `padding: 2px 0; margin-left: 2em; display: flex; align-items: center;` },\n            span({ style: `flex-grow: 1; text-align: center;` }, span({ class: \"tip\", onclick: () => this._openPrompt(\"effects\") }, \"Effects\")),\n            div({ class: \"effects-menu\" }, this._effectsSelect),\n        ),\n        this._transitionRow,\n        this._transitionDropdownGroup,\n        this._chordSelectRow,\n        this._chordDropdownGroup,\n        this._pitchShiftRow,\n        this._detuneSliderRow,\n        this._vibratoSelectRow,\n        this._vibratoDropdownGroup,\n        this._noteFilterTypeRow,\n        this._noteFilterRow,\n        this._noteFilterSimpleCutRow,\n        this._noteFilterSimplePeakRow,\n        this._distortionRow,\n        this._aliasingRow,\n        this._bitcrusherQuantizationRow,\n        this._bitcrusherFreqRow,\n        this._chorusRow,\n        this._echoSustainRow,\n        this._echoDelayRow,\n        this._reverbRow,\n        div({ style: `padding: 2px 0; margin-left: 2em; display: flex; align-items: center;` },\n            span({ style: `flex-grow: 1; text-align: center;` }, span({ class: \"tip\", onclick: () => this._openPrompt(\"envelopes\") }, \"Envelopes\")),\n            this._envelopeDropdown,\n            this._addEnvelopeButton,\n        ),\n        this._envelopeDropdownGroup,\n        this._envelopeEditor.container,\n    );\n    private readonly _instrumentCopyGroup: HTMLDivElement = div({ class: \"editor-controls\" },\n        div({ class: \"selectRow\" },\n            this._instrumentCopyButton,\n            this._instrumentPasteButton,\n        ),\n    );\n    private readonly _instrumentSettingsTextRow: HTMLDivElement = div({ id: \"instrumentSettingsText\", style: `padding: 3px 0; max-width: 15em; text-align: center; color: ${ColorConfig.secondaryText};` },\n        \"Instrument Settings\"\n    );\n    private readonly _instrumentTypeSelectRow: HTMLDivElement = div({ class: \"selectRow\", id: \"typeSelectRow\" },\n        span({ class: \"tip\", onclick: () => this._openPrompt(\"instrumentType\") }, \"Type:\"),\n        div(\n            div({ class: \"pitchSelect\" }, this._pitchedPresetSelect),\n            div({ class: \"drumSelect\" }, this._drumPresetSelect)\n        ),\n    );\n    private readonly _instrumentSettingsGroup: HTMLDivElement = div({ class: \"editor-controls\" },\n        this._instrumentSettingsTextRow,\n        this._instrumentsButtonRow,\n        this._instrumentTypeSelectRow,\n        this._instrumentVolumeSliderRow,\n        //this._customizeInstrumentButton,\n        this._customInstrumentSettingsGroup,\n    );\n    private readonly _usedPatternIndicator: SVGElement = SVG.path({ d: \"M -6 -6 H 6 V 6 H -6 V -6 M -2 -3 L -2 -3 L -1 -4 H 1 V 4 H -1 V -1.2 L -1.2 -1 H -2 V -3 z\", fill: ColorConfig.indicatorSecondary, \"fill-rule\": \"evenodd\" });\n    private readonly _usedInstrumentIndicator: SVGElement = SVG.path({ d: \"M -6 -0.8 H -3.8 V -6 H 0.8 V 4.4 H 2.2 V -0.8 H 6 V 0.8 H 3.8 V 6 H -0.8 V -4.4 H -2.2 V 0.8 H -6 z\", fill: ColorConfig.indicatorSecondary });\n    private readonly _jumpToModIndicator: SVGElement = SVG.svg({ style: \"width: 92%; height: 1.3em; flex-shrink: 0; position: absolute;\", viewBox: \"0 0 200 200\" }, [\n        SVG.path({ d: \"M90 155 l0 -45 -45 0 c-25 0 -45 -4 -45 -10 0 -5 20 -10 45 -10 l45 0 0 -45 c0 -25 5 -45 10 -45 6 0 10 20 10 45 l0 45 45 0 c25 0 45 5 45 10 0 6 -20 10 -45 10 l -45 0 0 45 c0 25 -4 45 -10 45 -5 0 -10 -20 -10 -45z\" }),\n        SVG.path({ d: \"M42 158 c-15 -15 -16 -38 -2 -38 6 0 10 7 10 15 0 8 7 15 15 15 8 0 15 5 15 10 0 14 -23 13 -38 -2z\" }),\n        SVG.path({ d: \"M120 160 c0 -5 7 -10 15 -10 8 0 15 -7 15 -15 0 -8 5 -15 10 -15 14 0 13 23 -2 38 -15 15 -38 16 -38 2z\" }),\n        SVG.path({ d: \"M32 58 c3 -23 48 -40 48 -19 0 6 -7 11 -15 11 -8 0 -15 7 -15 15 0 8 -5 15 -11 15 -6 0 -9 -10 -7 -22z\" }),\n        SVG.path({ d: \"M150 65 c0 -8 -7 -15 -15 -15 -8 0 -15 -4 -15 -10 0 -14 23 -13 38 2 15 15 16 38 2 38 -5 0 -10 -7 -10 -15z\" })]);\n\n    private readonly _promptContainer: HTMLDivElement = div({ class: \"promptContainer\", style: \"display: none;\" });\n    private readonly _zoomInButton: HTMLButtonElement = button({ class: \"zoomInButton\", type: \"button\", title: \"Zoom In\" });\n    private readonly _zoomOutButton: HTMLButtonElement = button({ class: \"zoomOutButton\", type: \"button\", title: \"Zoom Out\" });\n    private readonly _patternEditorRow: HTMLDivElement = div({ style: \"flex: 1; height: 100%; display: flex; overflow: hidden; justify-content: center;\" },\n        this._patternEditorPrev.container,\n        this._patternEditor.container,\n        this._patternEditorNext.container,\n    );\n    private readonly _patternArea: HTMLDivElement = div({ class: \"pattern-area\" },\n        this._piano.container,\n        this._patternEditorRow,\n        this._octaveScrollBar.container,\n        this._zoomInButton,\n        this._zoomOutButton,\n    );\n    private readonly _trackContainer: HTMLDivElement = div({ class: \"trackContainer\" },\n        this._trackEditor.container,\n        this._loopEditor.container,\n    );\n    private readonly _trackVisibleArea: HTMLDivElement = div({ style: \"position: absolute; width: 100%; height: 100%; pointer-events: none;\" });\n    private readonly _trackAndMuteContainer: HTMLDivElement = div({ class: \"trackAndMuteContainer\" },\n        this._muteEditor.container,\n        this._trackContainer,\n        this._trackVisibleArea,\n    );\n    public readonly _barScrollBar: BarScrollBar = new BarScrollBar(this._doc);\n    private readonly _trackArea: HTMLDivElement = div({ class: \"track-area\" },\n        this._trackAndMuteContainer,\n        this._barScrollBar.container,\n    );\n\n    private readonly _menuArea: HTMLDivElement = div({ class: \"menu-area\" },\n        div({ class: \"selectContainer menu file\" },\n            this._fileMenu,\n        ),\n        div({ class: \"selectContainer menu edit\" },\n            this._editMenu,\n        ),\n        div({ class: \"selectContainer menu preferences\" },\n            this._optionsMenu,\n        ),\n    );\n    private readonly _songSettingsArea: HTMLDivElement = div({ class: \"song-settings-area\" },\n        div({ class: \"editor-controls\" },\n            div({ class: \"editor-song-settings\" },\n                div({ style: \"margin: 3px 0; position: relative; text-align: center; color: ${ColorConfig.secondaryText};\" },\n                    div({ class: \"tip\", style: \"flex-shrink: 0; position:absolute; left: 0; top: 0; width: 12px; height: 12px\", onclick: () => this._openPrompt(\"usedPattern\") },\n                        SVG.svg({ style: \"flex-shrink: 0; position: absolute; left: 0; top: 0; pointer-events: none;\", width: \"12px\", height: \"12px\", \"margin-right\": \"0.5em\", viewBox: \"-6 -6 12 12\" },\n                            this._usedPatternIndicator,\n                        ),\n                    ),\n                    div({ class: \"tip\", style: \"flex-shrink: 0; position: absolute; left: 14px; top: 0; width: 12px; height: 12px\", onclick: () => this._openPrompt(\"usedInstrument\") },\n                        SVG.svg({ style: \"flex-shrink: 0; position: absolute; left: 0; top: 0; pointer-events: none;\", width: \"12px\", height: \"12px\", \"margin-right\": \"1em\", viewBox: \"-6 -6 12 12\" },\n                            this._usedInstrumentIndicator,\n                        ),\n                    ),\n                    \"Song Settings\",\n                    div({ style: \"width: 100%; left: 0; top: -1px; position:absolute; overflow-x:clip;\" }, this._jumpToModIndicator),\n                ),\n            ),\n            div({ class: \"selectRow\" },\n                span({ class: \"tip\", onclick: () => this._openPrompt(\"scale\") }, \"Scale: \"),\n                div({ class: \"selectContainer\" }, this._scaleSelect),\n            ),\n            div({ class: \"selectRow\" },\n                span({ class: \"tip\", onclick: () => this._openPrompt(\"key\") }, \"Key: \"),\n                div({ class: \"selectContainer\" }, this._keySelect),\n            ),\n            div({ class: \"selectRow\" },\n                span({ class: \"tip\", onclick: () => this._openPrompt(\"tempo\") }, \"Tempo: \"),\n                span({ style: \"display: flex;\" },\n                    this._tempoSlider.container,\n                    this._tempoStepper,\n                ),\n            ),\n            div({ class: \"selectRow\" },\n                span({ class: \"tip\", onclick: () => this._openPrompt(\"rhythm\") }, \"Rhythm: \"),\n                div({ class: \"selectContainer\" }, this._rhythmSelect),\n            ),\n        ),\n    );\n    private readonly _instrumentSettingsArea: HTMLDivElement = div({ class: \"instrument-settings-area\" },\n        this._instrumentSettingsGroup,\n        this._modulatorGroup);\n    public readonly _settingsArea: HTMLDivElement = div({ class: \"settings-area noSelection\" },\n        div({ class: \"version-area\" },\n            div({ style: `text-align: center; margin: 3px 0; color: ${ColorConfig.secondaryText};` },\n                this._songTitleInputBox.input,\n            ),\n        ),\n        div({ class: \"play-pause-area\" },\n            this._volumeBarBox,\n            div({ class: \"playback-bar-controls\" },\n                this._playButton,\n                this._pauseButton,\n                this._recordButton,\n                this._stopButton,\n                this._prevBarButton,\n                this._nextBarButton,\n            ),\n            div({ class: \"playback-volume-controls\" },\n                span({ class: \"volume-speaker\" }),\n                this._volumeSlider.container,\n            ),\n        ),\n        this._menuArea,\n        this._songSettingsArea,\n        this._instrumentSettingsArea,\n    );\n\n    public readonly mainLayer: HTMLDivElement = div({ class: \"beepboxEditor\", tabIndex: \"0\" },\n        this._patternArea,\n        this._trackArea,\n        this._settingsArea,\n        this._promptContainer,\n    );\n\n    private _wasPlaying: boolean = false;\n    private _currentPromptName: string | null = null;\n    private _highlightedInstrumentIndex: number = -1;\n    private _renderedInstrumentCount: number = 0;\n    private _renderedIsPlaying: boolean = false;\n    private _renderedIsRecording: boolean = false;\n    private _renderedShowRecordButton: boolean = false;\n    private _renderedCtrlHeld: boolean = false;\n    private _ctrlHeld: boolean = false;\n    private _shiftHeld: boolean = false;\n    private _deactivatedInstruments: boolean = false;\n    private readonly _operatorRows: HTMLDivElement[] = [];\n    private readonly _operatorAmplitudeSliders: Slider[] = [];\n    private readonly _operatorFrequencySelects: HTMLSelectElement[] = [];\n    private readonly _operatorDropdowns: HTMLButtonElement[] = [];\n    private readonly _operatorWaveformSelects: HTMLSelectElement[] = [];\n    private readonly _operatorWaveformHints: HTMLSpanElement[] = [];\n    private readonly _operatorWaveformPulsewidthSliders: Slider[] = [];\n    private readonly _operatorDropdownRows: HTMLElement[] = []\n    private readonly _operatorDropdownGroups: HTMLDivElement[] = [];\n    private readonly _drumsetSpectrumEditors: SpectrumEditor[] = [];\n    private readonly _drumsetEnvelopeSelects: HTMLSelectElement[] = [];\n    private _showModSliders: boolean[] = [];\n    private _newShowModSliders: boolean[] = [];\n    private _modSliderValues: number[] = [];\n    private _hasActiveModSliders: boolean = false;\n\n    private _openPanDropdown: boolean = false;\n    private _openVibratoDropdown: boolean = false;\n    private _openEnvelopeDropdown: boolean = false;\n    private _openChordDropdown: boolean = false;\n    private _openTransitionDropdown: boolean = false;\n    private _openOperatorDropdowns: boolean[] = [];\n\n    private outVolumeHistoricTimer: number = 0;\n    private outVolumeHistoricCap: number = 0;\n    private lastOutVolumeCap: number = 0;\n    public patternUsed: boolean = false;\n    private _modRecTimeout: number = -1;\n\n    constructor(private _doc: SongDocument) {\n\n        this._doc.notifier.watch(this.whenUpdated);\n        this._doc.modRecordingHandler = () => { this.handleModRecording() };\n        new MidiInputHandler(this._doc);\n        window.addEventListener(\"resize\", this.whenUpdated);\n        window.requestAnimationFrame(this.updatePlayButton);\n        window.requestAnimationFrame(this._animate);\n\n        if (!(\"share\" in navigator)) {\n            this._fileMenu.removeChild(this._fileMenu.querySelector(\"[value='shareUrl']\")!);\n        }\n\n        this._scaleSelect.appendChild(optgroup({ label: \"Edit\" },\n            option({ value: \"forceScale\" }, \"Snap Notes To Scale\"),\n        ));\n        this._keySelect.appendChild(optgroup({ label: \"Edit\" },\n            option({ value: \"detectKey\" }, \"Detect Key\"),\n        ));\n        this._rhythmSelect.appendChild(optgroup({ label: \"Edit\" },\n            option({ value: \"forceRhythm\" }, \"Snap Notes To Rhythm\"),\n        ));\n\n        this._vibratoSelect.appendChild(option({ hidden: true, value: 5 }, \"custom\"));\n\n        this._showModSliders = new Array<boolean>(Config.modulators.length);\n        this._modSliderValues = new Array<number>(Config.modulators.length);\n\n        this._phaseModGroup.appendChild(div({ class: \"selectRow\", style: `color: ${ColorConfig.secondaryText}; height: 1em; margin-top: 0.5em;` },\n            div({ style: \"margin-right: .1em; visibility: hidden;\" }, 1 + \".\"),\n            div({ style: \"width: 3em; margin-right: .3em;\", class: \"tip\", onclick: () => this._openPrompt(\"operatorFrequency\") }, \"Freq:\"),\n            div({ class: \"tip\", onclick: () => this._openPrompt(\"operatorVolume\") }, \"Volume:\"),\n        ));\n        for (let i: number = 0; i < Config.operatorCount; i++) {\n            const operatorIndex: number = i;\n            const operatorNumber: HTMLDivElement = div({ style: \"margin-right: 0px; color: \" + ColorConfig.secondaryText + \";\" }, i + 1 + \"\");\n            const frequencySelect: HTMLSelectElement = buildOptions(select({ style: \"width: 100%;\", title: \"Frequency\" }), Config.operatorFrequencies.map(freq => freq.name));\n            const amplitudeSlider: Slider = new Slider(input({ type: \"range\", min: \"0\", max: Config.operatorAmplitudeMax, value: \"0\", step: \"1\", title: \"Volume\" }), this._doc, (oldValue: number, newValue: number) => new ChangeOperatorAmplitude(this._doc, operatorIndex, oldValue, newValue), false);\n            const waveformSelect: HTMLSelectElement = buildOptions(select({ style: \"width: 100%;\", title: \"Waveform\" }), Config.operatorWaves.map(wave => wave.name));\n            const waveformDropdown: HTMLButtonElement = button({ style: \"margin-left:0em; margin-right: 2px; height:1.5em; width: 8px; max-width: 10px; padding: 0px; font-size: 8px;\", onclick: () => this._toggleDropdownMenu(DropdownID.FM, i) }, \"▼\");\n            const waveformDropdownHint: HTMLSpanElement = span({ class: \"tip\", style: \"margin-left: 10px;\", onclick: () => this._openPrompt(\"operatorWaveform\") }, \"Wave:\");\n            const waveformPulsewidthSlider: Slider = new Slider(input({ style: \"margin-left: 10px; width: 85%;\", type: \"range\", min: \"0\", max: Config.pwmOperatorWaves.length - 1, value: \"0\", step: \"1\", title: \"Pulse Width\" }), this._doc, (oldValue: number, newValue: number) => new ChangeOperatorPulseWidth(this._doc, operatorIndex, oldValue, newValue), true);\n            const waveformDropdownRow: HTMLElement = div({ class: \"selectRow\" }, waveformDropdownHint, waveformPulsewidthSlider.container,\n                div({ class: \"selectContainer\", style: \"width: 6em; margin-left: .3em;\" }, waveformSelect));\n            const waveformDropdownGroup: HTMLDivElement = div({ class: \"operatorRow\" }, waveformDropdownRow);\n            const row: HTMLDivElement = div({ class: \"selectRow\" },\n                operatorNumber,\n                waveformDropdown,\n                div({ class: \"selectContainer\", style: \"width: 3em; margin-right: .3em;\" }, frequencySelect),\n                amplitudeSlider.container,\n            );\n            this._phaseModGroup.appendChild(row);\n            this._operatorRows[i] = row;\n            this._operatorAmplitudeSliders[i] = amplitudeSlider;\n            this._operatorFrequencySelects[i] = frequencySelect;\n            this._operatorDropdowns[i] = waveformDropdown;\n            this._operatorWaveformHints[i] = waveformDropdownHint;\n            this._operatorWaveformSelects[i] = waveformSelect;\n            this._operatorWaveformPulsewidthSliders[i] = waveformPulsewidthSlider;\n            this._operatorDropdownRows[i] = waveformDropdownRow;\n            this._phaseModGroup.appendChild(waveformDropdownGroup);\n            this._operatorDropdownGroups[i] = waveformDropdownGroup;\n            this._openOperatorDropdowns[i] = false;\n\n            waveformSelect.addEventListener(\"change\", () => {\n                this._doc.record(new ChangeOperatorWaveform(this._doc, operatorIndex, waveformSelect.selectedIndex));\n            });\n\n            frequencySelect.addEventListener(\"change\", () => {\n                this._doc.record(new ChangeOperatorFrequency(this._doc, operatorIndex, frequencySelect.selectedIndex));\n            });\n        }\n\n        this._drumsetGroup.appendChild(\n            div({ class: \"selectRow\" },\n                span({ class: \"tip\", onclick: () => this._openPrompt(\"drumsetEnvelope\") }, \"Envelope:\"),\n                span({ class: \"tip\", onclick: () => this._openPrompt(\"drumsetSpectrum\") }, \"Spectrum:\"),\n            ),\n        );\n        for (let i: number = Config.drumCount - 1; i >= 0; i--) {\n            const drumIndex: number = i;\n            const spectrumEditor: SpectrumEditor = new SpectrumEditor(this._doc, drumIndex);\n            spectrumEditor.container.addEventListener(\"mousedown\", this.refocusStage);\n            this._drumsetSpectrumEditors[i] = spectrumEditor;\n\n            const envelopeSelect: HTMLSelectElement = buildOptions(select({ style: \"width: 100%;\", title: \"Filter Envelope\" }), Config.envelopes.map(envelope => envelope.name));\n            this._drumsetEnvelopeSelects[i] = envelopeSelect;\n            envelopeSelect.addEventListener(\"change\", () => {\n                this._doc.record(new ChangeDrumsetEnvelope(this._doc, drumIndex, envelopeSelect.selectedIndex));\n            });\n\n            const row: HTMLDivElement = div({ class: \"selectRow\" },\n                div({ class: \"selectContainer\", style: \"width: 5em; margin-right: .3em;\" }, envelopeSelect),\n                this._drumsetSpectrumEditors[i].container,\n            );\n            this._drumsetGroup.appendChild(row);\n        }\n\n        this._modNameRows = [];\n        this._modChannelBoxes = [];\n        this._modInstrumentBoxes = [];\n        this._modSetRows = [];\n        this._modSetBoxes = [];\n        this._modFilterRows = [];\n        this._modFilterBoxes = [];\n        this._modTargetIndicators = [];\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\n\n            let modChannelBox: HTMLSelectElement = select({ style: \"width: 100%; color: currentColor; text-overflow:ellipsis;\" });\n            let modInstrumentBox: HTMLSelectElement = select({ style: \"width: 100%; color: currentColor;\" });\n\n            let modNameRow: HTMLDivElement = div({ class: \"operatorRow\", style: \"height: 1em; margin-bottom: 0.65em;\" },\n                div({ class: \"tip\", style: \"width: 10%; max-width: 5.4em;\", id: \"modChannelText\" + mod, onclick: () => this._openPrompt(\"modChannel\") }, \"Ch:\"),\n                div({ class: \"selectContainer\", style: 'width: 35%;' }, modChannelBox),\n                div({ class: \"tip\", style: \"width: 1.2em; margin-left: 0.8em;\", id: \"modInstrumentText\" + mod, onclick: () => this._openPrompt(\"modInstrument\") }, \"Ins:\"),\n                div({ class: \"selectContainer\", style: \"width: 10%;\" }, modInstrumentBox),\n            );\n\n            let modSetBox: HTMLSelectElement = select();\n            let modFilterBox: HTMLSelectElement = select();\n            let modSetRow: HTMLDivElement = div({ class: \"selectRow\", id: \"modSettingText\" + mod, style: \"margin-bottom: 0.9em; color: currentColor;\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"modSet\") }, \"Setting: \"), span({ class: \"tip\", style: \"font-size:x-small;\", onclick: () => this._openPrompt(\"modSetInfo\" + mod) }, \"?\"), div({ class: \"selectContainer\" }, modSetBox));\n            let modFilterRow: HTMLDivElement = div({ class: \"selectRow\", id: \"modFilterText\" + mod, style: \"margin-bottom: 0.9em; color: currentColor;\" }, span({ class: \"tip\", onclick: () => this._openPrompt(\"modFilter\" + mod) }, \"Target: \"), div({ class: \"selectContainer\" }, modFilterBox));\n\n            // @jummbus: I could template this up above and simply create from the template, especially since I also reuse it in song settings, but unsure how to do that with imperative-html :P\n            let modTarget: SVGElement = SVG.svg({ style: \"transform: translate(0px, 1px);\", width: \"1.5em\", height: \"1em\", viewBox: \"0 0 200 200\" }, [\n                SVG.path({ d: \"M90 155 l0 -45 -45 0 c-25 0 -45 -4 -45 -10 0 -5 20 -10 45 -10 l45 0 0 -45 c0 -25 5 -45 10 -45 6 0 10 20 10 45 l0 45 45 0 c25 0 45 5 45 10 0 6 -20 10 -45 10 l -45 0 0 45 c0 25 -4 45 -10 45 -5 0 -10 -20 -10 -45z\" }),\n                SVG.path({ d: \"M42 158 c-15 -15 -16 -38 -2 -38 6 0 10 7 10 15 0 8 7 15 15 15 8 0 15 5 15 10 0 14 -23 13 -38 -2z\" }),\n                SVG.path({ d: \"M120 160 c0 -5 7 -10 15 -10 8 0 15 -7 15 -15 0 -8 5 -15 10 -15 14 0 13 23 -2 38 -15 15 -38 16 -38 2z\" }),\n                SVG.path({ d: \"M32 58 c3 -23 48 -40 48 -19 0 6 -7 11 -15 11 -8 0 -15 7 -15 15 0 8 -5 15 -11 15 -6 0 -9 -10 -7 -22z\" }),\n                SVG.path({ d: \"M150 65 c0 -8 -7 -15 -15 -15 -8 0 -15 -4 -15 -10 0 -14 23 -13 38 2 15 15 16 38 2 38 -5 0 -10 -7 -10 -15z\" })]);\n\n            this._modNameRows.push(modNameRow);\n            this._modChannelBoxes.push(modChannelBox);\n            this._modInstrumentBoxes.push(modInstrumentBox);\n            this._modSetRows.push(modSetRow);\n            this._modSetBoxes.push(modSetBox);\n            this._modFilterRows.push(modFilterRow);\n            this._modFilterBoxes.push(modFilterBox);\n            this._modTargetIndicators.push(modTarget);\n\n            this._modulatorGroup.appendChild(div({ style: \"margin: 3px 0; font-weight: bold; margin-bottom: 0.7em; text-align: center; color: \" + ColorConfig.secondaryText + \"; background: \" + ColorConfig.uiWidgetBackground + \";\" }, [\"Modulator \" + (mod + 1), modTarget]));\n            this._modulatorGroup.appendChild(modNameRow);\n            this._modulatorGroup.appendChild(modSetRow);\n            this._modulatorGroup.appendChild(modFilterRow);\n\n        }\n\n        // @jummbus - Unsure why this hack is needed for alignment, but I've never been a css wiz...\n        this._pitchShiftSlider.container.style.setProperty(\"transform\", \"translate(0px, 3px)\");\n        this._pitchShiftSlider.container.style.setProperty(\"width\", \"100%\");\n\n        this._fileMenu.addEventListener(\"change\", this._fileMenuHandler);\n        this._editMenu.addEventListener(\"change\", this._editMenuHandler);\n        this._optionsMenu.addEventListener(\"change\", this._optionsMenuHandler);\n        this._customWavePresetDrop.addEventListener(\"change\", this._customWavePresetHandler);\n        this._tempoStepper.addEventListener(\"change\", this._whenSetTempo);\n        this._scaleSelect.addEventListener(\"change\", this._whenSetScale);\n        this._keySelect.addEventListener(\"change\", this._whenSetKey);\n        this._rhythmSelect.addEventListener(\"change\", this._whenSetRhythm);\n        //this._pitchedPresetSelect.addEventListener(\"change\", this._whenSetPitchedPreset);\n        //this._drumPresetSelect.addEventListener(\"change\", this._whenSetDrumPreset);\n        this._algorithmSelect.addEventListener(\"change\", this._whenSetAlgorithm);\n        this._instrumentsButtonBar.addEventListener(\"click\", this._whenSelectInstrument);\n        //this._customizeInstrumentButton.addEventListener(\"click\", this._whenCustomizePressed);\n        this._feedbackTypeSelect.addEventListener(\"change\", this._whenSetFeedbackType);\n        this._chipWaveSelect.addEventListener(\"change\", this._whenSetChipWave);\n        this._chipNoiseSelect.addEventListener(\"change\", this._whenSetNoiseWave);\n        this._transitionSelect.addEventListener(\"change\", this._whenSetTransition);\n        this._effectsSelect.addEventListener(\"change\", this._whenSetEffects);\n        this._unisonSelect.addEventListener(\"change\", this._whenSetUnison);\n        this._chordSelect.addEventListener(\"change\", this._whenSetChord);\n        this._vibratoSelect.addEventListener(\"change\", this._whenSetVibrato);\n        this._vibratoTypeSelect.addEventListener(\"change\", this._whenSetVibratoType);\n        this._playButton.addEventListener(\"click\", this.togglePlay);\n        this._pauseButton.addEventListener(\"click\", this.togglePlay);\n        this._recordButton.addEventListener(\"click\", this._toggleRecord);\n        this._stopButton.addEventListener(\"click\", this._toggleRecord);\n        // Start recording instead of opening context menu when control-clicking the record button on a Mac.\n        this._recordButton.addEventListener(\"contextmenu\", (event: MouseEvent) => {\n            if (event.ctrlKey) {\n                event.preventDefault();\n                this._toggleRecord();\n            }\n        });\n        this._stopButton.addEventListener(\"contextmenu\", (event: MouseEvent) => {\n            if (event.ctrlKey) {\n                event.preventDefault();\n                this._toggleRecord();\n            }\n        });\n        this._prevBarButton.addEventListener(\"click\", this._whenPrevBarPressed);\n        this._nextBarButton.addEventListener(\"click\", this._whenNextBarPressed);\n        this._volumeSlider.input.addEventListener(\"input\", this._setVolumeSlider);\n        this._zoomInButton.addEventListener(\"click\", this._zoomIn);\n        this._zoomOutButton.addEventListener(\"click\", this._zoomOut);\n        this._patternArea.addEventListener(\"mousedown\", this._refocusStageNotEditing);\n        this._trackArea.addEventListener(\"mousedown\", this.refocusStage);\n\n        // The song volume slider is styled slightly different than the class' default.\n        this._volumeSlider.container.style.setProperty(\"flex-grow\", \"1\");\n        this._volumeSlider.container.style.setProperty(\"display\", \"flex\");\n\n        this._volumeBarContainer.style.setProperty(\"flex-grow\", \"1\");\n        this._volumeBarContainer.style.setProperty(\"display\", \"flex\");\n\n        // Also, any slider with a multiplicative effect instead of a replacement effect gets a different mod color, and a round slider.\n        this._volumeSlider.container.style.setProperty(\"--mod-color\", ColorConfig.multiplicativeModSlider);\n        this._volumeSlider.container.style.setProperty(\"--mod-border-radius\", \"50%\");\n        this._instrumentVolumeSlider.container.style.setProperty(\"--mod-color\", ColorConfig.multiplicativeModSlider);\n        this._instrumentVolumeSlider.container.style.setProperty(\"--mod-border-radius\", \"50%\");\n        this._feedbackAmplitudeSlider.container.style.setProperty(\"--mod-color\", ColorConfig.multiplicativeModSlider);\n        this._feedbackAmplitudeSlider.container.style.setProperty(\"--mod-border-radius\", \"50%\");\n        for (let i: number = 0; i < Config.operatorCount; i++) {\n            this._operatorAmplitudeSliders[i].container.style.setProperty(\"--mod-color\", ColorConfig.multiplicativeModSlider);\n            this._operatorAmplitudeSliders[i].container.style.setProperty(\"--mod-border-radius\", \"50%\");\n        }\n\n        let thisRef: SongEditor = this;\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\n            this._modChannelBoxes[mod].addEventListener(\"change\", function () { thisRef._whenSetModChannel(mod); });\n            this._modInstrumentBoxes[mod].addEventListener(\"change\", function () { thisRef._whenSetModInstrument(mod); });\n            this._modSetBoxes[mod].addEventListener(\"change\", function () { thisRef._whenSetModSetting(mod); });\n            this._modFilterBoxes[mod].addEventListener(\"change\", function () { thisRef._whenSetModFilter(mod); });\n            this._modTargetIndicators[mod].addEventListener(\"click\", function () { thisRef._whenClickModTarget(mod); });\n        }\n\n        this._jumpToModIndicator.addEventListener(\"click\", function () { thisRef._whenClickJumpToModTarget() });\n\n        this._patternArea.addEventListener(\"mousedown\", this.refocusStage);\n        this._fadeInOutEditor.container.addEventListener(\"mousedown\", this.refocusStage);\n        this._spectrumEditor.container.addEventListener(\"mousedown\", this.refocusStage);\n        this._eqFilterEditor.container.addEventListener(\"mousedown\", this.refocusStage);\n        this._noteFilterEditor.container.addEventListener(\"mousedown\", this.refocusStage);\n        this._harmonicsEditor.container.addEventListener(\"mousedown\", this.refocusStage);\n        this._tempoStepper.addEventListener(\"keydown\", this._tempoStepperCaptureNumberKeys, false);\n        this._addEnvelopeButton.addEventListener(\"click\", this._addNewEnvelope);\n        this._patternArea.addEventListener(\"contextmenu\", this._disableCtrlContextMenu);\n        this._trackArea.addEventListener(\"contextmenu\", this._disableCtrlContextMenu);\n        this.mainLayer.addEventListener(\"keydown\", this._whenKeyPressed);\n        this.mainLayer.addEventListener(\"keyup\", this._whenKeyReleased);\n        this.mainLayer.addEventListener(\"focusin\", this._onFocusIn);\n        this._instrumentCopyButton.addEventListener(\"click\", this._copyInstrument.bind(this));\n        this._instrumentPasteButton.addEventListener(\"click\", this._pasteInstrument.bind(this));\n\n        this._instrumentVolumeSliderInputBox.addEventListener(\"input\", () => { this._doc.record(new ChangeVolume(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].volume, Math.min(25.0, Math.max(-25.0, Math.round(+this._instrumentVolumeSliderInputBox.value))))) });\n        this._panSliderInputBox.addEventListener(\"input\", () => { this._doc.record(new ChangePan(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].pan, Math.min(100.0, Math.max(0.0, Math.round(+this._panSliderInputBox.value))))) });\n        this._pwmSliderInputBox.addEventListener(\"input\", () => { this._doc.record(new ChangePulseWidth(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].pulseWidth, Math.min(Config.pulseWidthRange, Math.max(1.0, Math.round(+this._pwmSliderInputBox.value))))) });\n        this._detuneSliderInputBox.addEventListener(\"input\", () => { this._doc.record(new ChangeDetune(this._doc, this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].detune, Math.min(Config.detuneMax - Config.detuneCenter, Math.max(Config.detuneMin - Config.detuneCenter, Math.round(+this._detuneSliderInputBox.value))))) });\n        this._customWaveDraw.addEventListener(\"input\", () => { this._doc.record(new ChangeCustomWave(this._doc, this._customWaveDrawCanvas.newArray)) });\n        this._twoNoteArpBox.addEventListener(\"input\", () => { this._doc.record(new ChangeFastTwoNoteArp(this._doc, this._twoNoteArpBox.checked)) });\n        this._clicklessTransitionBox.addEventListener(\"input\", () => { this._doc.record(new ChangeClicklessTransition(this._doc, this._clicklessTransitionBox.checked)) });\n        this._aliasingBox.addEventListener(\"input\", () => { this._doc.record(new ChangeAliasing(this._doc, this._aliasingBox.checked)) });\n        this._discreteEnvelopeBox.addEventListener(\"input\", () => { this._doc.record(new ChangeDiscreteEnvelope(this._doc, this._discreteEnvelopeBox.checked)) });\n\n        this._promptContainer.addEventListener(\"click\", (event) => {\n            if (event.target == this._promptContainer) {\n                this._doc.undo();\n            }\n        });\n\n        // Sorry, bypassing typescript type safety on this function because I want to use the new \"passive\" option.\n\t\t//this._trackAndMuteContainer.addEventListener(\"scroll\", this._onTrackAreaScroll, {capture: false, passive: true});\n\t\t(<Function>this._trackAndMuteContainer.addEventListener)(\"scroll\", this._onTrackAreaScroll, {capture: false, passive: true});\n\n        if (isMobile) {\n            const autoPlayOption: HTMLOptionElement = <HTMLOptionElement>this._optionsMenu.querySelector(\"[value=autoPlay]\");\n            autoPlayOption.disabled = true;\n            autoPlayOption.setAttribute(\"hidden\", \"\");\n        }\n\n        // Beepbox uses availHeight too, but I have a display that fails the check even when one of the other layouts would look better on it. -jummbus\n        if (window.screen.availWidth < 710 /*|| window.screen.availHeight < 710*/) {\n            const layoutOption: HTMLOptionElement = <HTMLOptionElement>this._optionsMenu.querySelector(\"[value=layout]\");\n            layoutOption.disabled = true;\n            layoutOption.setAttribute(\"hidden\", \"\");\n        }\n    }\n\n    private _toggleDropdownMenu(dropdown: DropdownID, submenu: number = 0): void {\n        let target: HTMLButtonElement = this._vibratoDropdown;\n        let group: HTMLElement = this._vibratoDropdownGroup;\n        switch (dropdown) {\n            case DropdownID.Envelope:\n                target = this._envelopeDropdown;\n                this._openEnvelopeDropdown = this._openEnvelopeDropdown ? false : true;\n                group = this._envelopeDropdownGroup;\n                break;\n            case DropdownID.Vibrato:\n                target = this._vibratoDropdown;\n                this._openVibratoDropdown = this._openVibratoDropdown ? false : true;\n                group = this._vibratoDropdownGroup;\n                break;\n            case DropdownID.Pan:\n                target = this._panDropdown;\n                this._openPanDropdown = this._openPanDropdown ? false : true;\n                group = this._panDropdownGroup;\n                break;\n            case DropdownID.Chord:\n                target = this._chordDropdown;\n                this._openChordDropdown = this._openChordDropdown ? false : true;\n                group = this._chordDropdownGroup;\n                break;\n            case DropdownID.Transition:\n                target = this._transitionDropdown;\n                this._openTransitionDropdown = this._openTransitionDropdown ? false : true;\n                group = this._transitionDropdownGroup;\n                break;\n            case DropdownID.FM:\n                target = this._operatorDropdowns[submenu];\n                this._openOperatorDropdowns[submenu] = this._openOperatorDropdowns[submenu] ? false : true;\n                group = this._operatorDropdownGroups[submenu];\n                break;\n        }\n\n        if (target.textContent == \"▼\") {\n            let instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n            target.textContent = \"▲\";\n            if (group != this._chordDropdownGroup) {\n                group.style.display = \"\";\n            } // Only show arpeggio dropdown if chord arpeggiates\n            else if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                group.style.display = \"\";\n            }\n\n            for (let i: number = 0; i < group.children.length; i++) {\n                // A timeout is needed so that the previous 0s, 0 opacity settings can be applied. They're not done until the group is visible again because display: none prunes animation steps.\n                setTimeout(() => {\n                    (group.children[i] as HTMLElement).style.animationDelay = '0.17s';\n                    (group.children[i] as HTMLElement).style.opacity = '1';}\n                );\n            }\n\n        }\n        else {\n            for (let i: number = 0; i < group.children.length; i++) {\n                (group.children[i] as HTMLElement).style.animationDelay = '0s';\n                (group.children[i] as HTMLElement).style.opacity = '0';\n            }\n            target.textContent = \"▼\";\n            group.style.display = \"none\";\n        }\n    }\n\n    private _modSliderUpdate(): void {\n\n        if (!this._doc.synth.playing) {\n            this._hasActiveModSliders = false;\n\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                if (this._showModSliders[setting] == true) {\n                    this._showModSliders[setting] = false;\n                    this._newShowModSliders[setting] = false;\n                    let slider: Slider | null = this.getSliderForModSetting(setting);\n\n                    if (slider != null) {\n                        slider.container.classList.remove(\"modSlider\");\n\n                    }\n                }\n            }\n        }\n        else {\n\n            let instrument: number = this._doc.getCurrentInstrument();\n            const anyModActive: boolean = this._doc.synth.isAnyModActive(this._doc.channel, instrument);\n\n            // Check and update mod values on sliders\n            if (anyModActive) {\n\n                let instrument: number = this._doc.getCurrentInstrument();\n\n                function updateModSlider(editor: SongEditor, slider: Slider, setting: number, channel: number, instrument: number): boolean {\n                    if (editor._doc.synth.isModActive(setting, channel, instrument)) {\n                        let currentVal: number = (editor._doc.synth.getModValue(setting, channel, instrument, false) - Config.modulators[setting].convertRealFactor) / Config.modulators[setting].maxRawVol;\n                        if (currentVal != editor._modSliderValues[setting]) {\n                            editor._modSliderValues[setting] = currentVal;\n                            slider.container.style.setProperty(\"--mod-position\", (currentVal * 96.0 + 2.0) + \"%\");\n                        }\n                        return true;\n                    }\n                    return false;\n                }\n\n                // Set mod sliders to present values\n                for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                    // Set to last value\n                    this._newShowModSliders[setting] = this._showModSliders[setting];\n\n                    // Check for newer value\n                    let slider: Slider | null = this.getSliderForModSetting(setting);\n                    if (slider != null) {\n                        this._newShowModSliders[setting] = updateModSlider(this, slider, setting, this._doc.channel, instrument);\n                    }\n                }\n\n            }\n            else if (this._hasActiveModSliders) {\n                // Zero out show-mod-slider settings (since none are active) to kill active mod slider flag\n                for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                    this._newShowModSliders[setting] = false;\n                }\n            }\n\n            // Class or unclass mod sliders based on present status\n            if (anyModActive || this._hasActiveModSliders) {\n\n                let anySliderActive: boolean = false;\n\n                for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                    if (this._newShowModSliders[setting] != this._showModSliders[setting]) {\n                        this._showModSliders[setting] = this._newShowModSliders[setting];\n                        let slider: Slider | null = this.getSliderForModSetting(setting);\n\n                        if (slider != null) {\n\n                            if (this._showModSliders[setting] == true) {\n                                slider.container.classList.add(\"modSlider\");\n                            }\n                            else {\n                                slider.container.classList.remove(\"modSlider\");\n                            }\n\n                        }\n                    }\n\n                    if (this._newShowModSliders[setting] == true)\n                        anySliderActive = true;\n                }\n\n                this._hasActiveModSliders = anySliderActive;\n\n            }\n\n        }\n\n    }\n\n    public getSliderForModSetting(setting: number): Slider | null {\n        switch (setting) {\n            case Config.modulators.dictionary[\"pan\"].index:\n                return this._panSlider;\n            case Config.modulators.dictionary[\"detune\"].index:\n                return this._detuneSlider;\n            case Config.modulators.dictionary[\"fm slider 1\"].index:\n                return this._operatorAmplitudeSliders[0];\n            case Config.modulators.dictionary[\"fm slider 2\"].index:\n                return this._operatorAmplitudeSliders[1];\n            case Config.modulators.dictionary[\"fm slider 3\"].index:\n                return this._operatorAmplitudeSliders[2];\n            case Config.modulators.dictionary[\"fm slider 4\"].index:\n                return this._operatorAmplitudeSliders[3];\n            case Config.modulators.dictionary[\"fm feedback\"].index:\n                return this._feedbackAmplitudeSlider;\n            case Config.modulators.dictionary[\"pulse width\"].index:\n                return this._pulseWidthSlider;\n            case Config.modulators.dictionary[\"reverb\"].index:\n                return this._reverbSlider;\n            case Config.modulators.dictionary[\"distortion\"].index:\n                return this._distortionSlider;\n            case Config.modulators.dictionary[\"note volume\"].index:\n                // So, this should technically not affect this slider, but it will look better as legacy songs used this mod as 'volume'.\n                // In the case that mix volume is used as well, they'd fight for the display, so just don't use this.\n                if (!this._showModSliders[Config.modulators.dictionary[\"mix volume\"].index])\n                    return this._instrumentVolumeSlider;\n                return null;\n            case Config.modulators.dictionary[\"mix volume\"].index:\n                return this._instrumentVolumeSlider;\n            case Config.modulators.dictionary[\"vibrato depth\"].index:\n                return this._vibratoDepthSlider;\n            case Config.modulators.dictionary[\"vibrato speed\"].index:\n                return this._vibratoSpeedSlider;\n            case Config.modulators.dictionary[\"vibrato delay\"].index:\n                return this._vibratoDelaySlider;\n            case Config.modulators.dictionary[\"arp speed\"].index:\n                return this._arpeggioSpeedSlider;\n            case Config.modulators.dictionary[\"pan delay\"].index:\n                return this._panDelaySlider;\n            case Config.modulators.dictionary[\"tempo\"].index:\n                return this._tempoSlider;\n            case Config.modulators.dictionary[\"song volume\"].index:\n                return this._volumeSlider;\n            case Config.modulators.dictionary[\"eq filt cut\"].index:\n                return this._eqFilterSimpleCutSlider;\n            case Config.modulators.dictionary[\"eq filt peak\"].index:\n                return this._eqFilterSimplePeakSlider;\n            case Config.modulators.dictionary[\"note filt cut\"].index:\n                return this._noteFilterSimpleCutSlider;\n            case Config.modulators.dictionary[\"note filt peak\"].index:\n                return this._noteFilterSimplePeakSlider;\n            case Config.modulators.dictionary[\"bit crush\"].index:\n                return this._bitcrusherQuantizationSlider;\n            case Config.modulators.dictionary[\"freq crush\"].index:\n                return this._bitcrusherFreqSlider;\n            case Config.modulators.dictionary[\"pitch shift\"].index:\n                return this._pitchShiftSlider;\n            case Config.modulators.dictionary[\"chorus\"].index:\n                return this._chorusSlider;\n            case Config.modulators.dictionary[\"echo\"].index:\n                return this._echoSustainSlider;\n            case Config.modulators.dictionary[\"echo delay\"].index:\n                return this._echoDelaySlider;\n            case Config.modulators.dictionary[\"sustain\"].index:\n                return this._stringSustainSlider;\n            case Config.modulators.dictionary[\"envelope speed\"].index:\n                return this._envelopeSpeedSlider;\n            case Config.modulators.dictionary[\"dynamism\"].index:\n                return this._supersawDynamismSlider;\n            case Config.modulators.dictionary[\"spread\"].index:\n                return this._supersawSpreadSlider;\n            case Config.modulators.dictionary[\"saw shape\"].index:\n                return this._supersawShapeSlider;\n            default:\n                return null;\n        }\n\n    }\n\n    private _openPrompt(promptName: string): void {\n        this._doc.openPrompt(promptName);\n        this._setPrompt(promptName);\n    }\n\n    private _setPrompt(promptName: string | null): void {\n        if (this._currentPromptName == promptName) return;\n        this._currentPromptName = promptName;\n\n        if (this.prompt) {\n            if (this._wasPlaying && !(this.prompt instanceof TipPrompt || this.prompt instanceof LimiterPrompt || this.prompt instanceof CustomChipPrompt || this.prompt instanceof CustomFilterPrompt || this.prompt instanceof SustainPrompt)) {\n                this._doc.performance.play();\n            }\n            this._wasPlaying = false;\n            this._promptContainer.style.display = \"none\";\n            this._promptContainer.removeChild(this.prompt.container);\n            this.prompt.cleanUp();\n            this.prompt = null;\n            this.refocusStage();\n        }\n\n        if (promptName) {\n            switch (promptName) {\n                case \"export\":\n                    this.prompt = new ExportPrompt(this._doc);\n                    break;\n                case \"import\":\n                    this.prompt = new ImportPrompt(this._doc);\n                    break;\n                case \"songRecovery\":\n                    this.prompt = new SongRecoveryPrompt(this._doc);\n                    break;\n                case \"barCount\":\n                    this.prompt = new SongDurationPrompt(this._doc);\n                    break;\n                case \"beatsPerBar\":\n                    this.prompt = new BeatsPerBarPrompt(this._doc);\n                    break;\n                case \"edo\":\n                    this.prompt = new EdoPrompt(this._doc);\n                    break;\n                case \"moveNotesSideways\":\n                    this.prompt = new MoveNotesSidewaysPrompt(this._doc);\n                    break;\n                case \"channelSettings\":\n                    this.prompt = new ChannelSettingsPrompt(this._doc);\n                    break;\n                case \"limiterSettings\":\n                    this.prompt = new LimiterPrompt(this._doc, this);\n                    break;\n                case \"customChipSettings\":\n                    this.prompt = new CustomChipPrompt(this._doc, this);\n                    break;\n                case \"customEQFilterSettings\":\n                    this.prompt = new CustomFilterPrompt(this._doc, this, false);\n                    break;\n                case \"customNoteFilterSettings\":\n                    this.prompt = new CustomFilterPrompt(this._doc, this, true);\n                    break;\n                case \"theme\":\n                    this.prompt = new ThemePrompt(this._doc);\n                    break;\n                case \"layout\":\n                    this.prompt = new LayoutPrompt(this._doc);\n                    break;\n                case \"recordingSetup\":\n                    this.prompt = new RecordingSetupPrompt(this._doc);\n                    break;\n\t\t\t\tcase \"stringSustain\":\n\t\t\t\t\tthis.prompt = new SustainPrompt(this._doc);\n\t\t\t\t\tbreak;\n                default:\n                    this.prompt = new TipPrompt(this._doc, promptName);\n                    break;\n            }\n\n            if (this.prompt) {\n                if (!(this.prompt instanceof TipPrompt || this.prompt instanceof LimiterPrompt || this.prompt instanceof CustomChipPrompt || this.prompt instanceof CustomFilterPrompt || this.prompt instanceof SustainPrompt)) {\n                    this._wasPlaying = this._doc.synth.playing;\n                    this._doc.performance.pause();\n                }\n                this._promptContainer.style.display = \"\";\n                this._promptContainer.appendChild(this.prompt.container);\n            }\n        }\n    }\n\n    public refocusStage = (): void => {\n        this.mainLayer.focus({ preventScroll: true });\n    }\n\n    private _onFocusIn = (event: Event): void => {\n        if (this._doc.synth.recording && event.target != this.mainLayer && event.target != this._stopButton && event.target != this._volumeSlider.input) {\n            // Don't allow using tab to focus on the song settings while recording,\n            // since interacting with them while recording would mess up the recording.\n            this.refocusStage();\n        }\n    }\n\n    // Refocus stage if a sub-element that needs focus isn't being edited.\n    private _refocusStageNotEditing = (): void => {\n        if (!this._patternEditor.editingModLabel)\n            this.mainLayer.focus({ preventScroll: true });\n    }\n\n    public changeBarScrollPos(offset: number) {\n        this._barScrollBar.changePos(offset);\n    }\n\n    public whenUpdated = (): void => {\n        const prefs: Preferences = this._doc.prefs;\n        this._muteEditor.container.style.display = prefs.enableChannelMuting ? \"\" : \"none\";\n        const trackBounds: DOMRect = this._trackVisibleArea.getBoundingClientRect();\n        this._doc.trackVisibleBars = Math.floor((trackBounds.right - trackBounds.left - (prefs.enableChannelMuting ? 32 : 0)) / this._doc.getBarWidth());\n        this._doc.trackVisibleChannels = Math.floor((trackBounds.bottom - trackBounds.top - 30) / ChannelRow.patternHeight);\n\t\tfor (let i: number = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; i < this._doc.song.channels.length; i++) {\n            const channel: Channel = this._doc.song.channels[i];\n            for (let j: number = 0; j < channel.instruments.length; j++) {\n                this._doc.synth.determineInvalidModulators(channel.instruments[j]);\n            }\n        }\n        this._barScrollBar.render();\n        this._trackEditor.render();\n        this._muteEditor.render();\n\n        this._trackAndMuteContainer.scrollLeft = this._doc.barScrollPos * this._doc.getBarWidth();\n\t\tthis._trackAndMuteContainer.scrollTop = this._doc.channelScrollPos * ChannelRow.patternHeight;\n\n        if (document.activeElement != this._patternEditor.modDragValueLabel && this._patternEditor.editingModLabel) {\n            this._patternEditor.stopEditingModLabel(false);\n        }\n\n        this._piano.container.style.display = prefs.showLetters ? \"\" : \"none\";\n        this._octaveScrollBar.container.style.display = prefs.showScrollBar ? \"\" : \"none\";\n        this._barScrollBar.container.style.display = this._doc.song.barCount > this._doc.trackVisibleBars ? \"\" : \"none\";\n        this._volumeBarBox.style.display = this._doc.prefs.displayVolumeBar ? \"\" : \"none\";\n\n        if (this._doc.getFullScreen()) {\n            const semitoneHeight: number = this._patternEditorRow.clientHeight / this._doc.getVisiblePitchCount();\n            const targetBeatWidth: number = semitoneHeight * 5;\n            const minBeatWidth: number = this._patternEditorRow.clientWidth / (this._doc.song.beatsPerBar * 3);\n            const maxBeatWidth: number = this._patternEditorRow.clientWidth / (this._doc.song.beatsPerBar + 2);\n            const beatWidth: number = Math.max(minBeatWidth, Math.min(maxBeatWidth, targetBeatWidth));\n            const patternEditorWidth: number = beatWidth * this._doc.song.beatsPerBar;\n\n            this._patternEditorPrev.container.style.width = patternEditorWidth + \"px\";\n            this._patternEditor.container.style.width = patternEditorWidth + \"px\";\n            this._patternEditorNext.container.style.width = patternEditorWidth + \"px\";\n            this._patternEditorPrev.container.style.flexShrink = \"0\";\n            this._patternEditor.container.style.flexShrink = \"0\";\n            this._patternEditorNext.container.style.flexShrink = \"0\";\n            this._patternEditorPrev.container.style.display = \"\";\n            this._patternEditorNext.container.style.display = \"\";\n            this._patternEditorPrev.render();\n            this._patternEditorNext.render();\n            this._zoomInButton.style.display = (this._doc.channel < this._doc.song.pitchChannelCount) ? \"\" : \"none\";\n            this._zoomOutButton.style.display = (this._doc.channel < this._doc.song.pitchChannelCount) ? \"\" : \"none\";\n            this._zoomInButton.style.right = prefs.showScrollBar ? \"24px\" : \"4px\";\n            this._zoomOutButton.style.right = prefs.showScrollBar ? \"24px\" : \"4px\";\n        } else {\n            this._patternEditor.container.style.width = \"\";\n            this._patternEditor.container.style.flexShrink = \"\";\n            this._patternEditorPrev.container.style.display = \"none\";\n            this._patternEditorNext.container.style.display = \"none\";\n            this._zoomInButton.style.display = \"none\";\n            this._zoomOutButton.style.display = \"none\";\n        }\n        this._patternEditor.render();\n\n        const optionCommands: ReadonlyArray<string> = [\n            (prefs.autoPlay ? \"✓ \" : \"　\") + \"Auto Play on Load\",\n            (prefs.autoFollow ? \"✓ \" : \"　\") + \"Auto Follow Playhead\",\n            (prefs.enableNotePreview ? \"✓ \" : \"　\") + \"Hear Added Notes\",\n            (prefs.showLetters ? \"✓ \" : \"　\") + \"Show Piano Keys\",\n            (prefs.showFifth ? \"✓ \" : \"　\") + 'Highlight \"Fifth\" Note',\n            (prefs.notesOutsideScale ? \"✓ \" : \"　\") + \"Place Notes Out of Scale\",\n            (prefs.defaultScale == this._doc.song.scale ? \"✓ \" : \"　\") + \"Set Current Scale as Default\",\n            (prefs.showChannels ? \"✓ \" : \"　\") + \"Show All Channels\",\n            (prefs.showScrollBar ? \"✓ \" : \"　\") + \"Show Octave Scroll Bar\",\n            (prefs.alwaysFineNoteVol ? \"✓ \" : \"\") + \"Always Fine Note Volume\",\n            (prefs.enableChannelMuting ? \"✓ \" : \"　\") + \"Enable Channel Muting\",\n            (prefs.displayBrowserUrl ? \"✓ \" : \"　\") + \"Show Song Data in URL\",\n            (prefs.displayVolumeBar ? \"✓ \" : \"　\") + \"Show Playback Volume\",\n            \"　Set Layout...\",\n            \"　Set Theme...\",\n            \"　Note Recording...\",\n        ];\n        for (let i: number = 0; i < optionCommands.length; i++) {\n            const option: HTMLOptionElement = <HTMLOptionElement>this._optionsMenu.children[i + 1];\n            if (option.textContent != optionCommands[i]) option.textContent = optionCommands[i];\n        }\n\n        const channel: Channel = this._doc.song.channels[this._doc.channel];\n        const instrumentIndex: number = this._doc.getCurrentInstrument();\n        const instrument: Instrument = channel.instruments[instrumentIndex];\n        const wasActive: boolean = this.mainLayer.contains(document.activeElement);\n        const activeElement: Element | null = document.activeElement;\n        const colors: ChannelColors = ColorConfig.getChannelColor(this._doc.song, this._doc.channel);\n\n        for (let i: number = this._effectsSelect.childElementCount - 1; i < Config.effectOrder.length; i++) {\n            this._effectsSelect.appendChild(option({ value: i }));\n        }\n        this._effectsSelect.selectedIndex = -1;\n        for (let i: number = 0; i < Config.effectOrder.length; i++) {\n            let effectFlag: number = Config.effectOrder[i];\n            const selected: boolean = ((instrument.effects & (1 << effectFlag)) != 0);\n            const label: string = (selected ? \"✓ \" : \"　\") + Config.effectNames[effectFlag];\n            const option: HTMLOptionElement = <HTMLOptionElement>this._effectsSelect.children[i + 1];\n            if (option.textContent != label) option.textContent = label;\n        }\n\n        setSelectedValue(this._scaleSelect, this._doc.song.scale);\n        this._scaleSelect.title = Config.scales[this._doc.song.scale].realName;\n        setSelectedValue(this._keySelect, createKeys(this._doc.song.edo).length - 1 - this._doc.song.key);\n        this._tempoSlider.updateValue(Math.max(0, Math.round(this._doc.song.tempo)));\n        this._tempoStepper.value = Math.round(this._doc.song.tempo).toString();\n        this._songTitleInputBox.updateValue(this._doc.song.title);\n\n        this._eqFilterTypeRow.style.setProperty(\"--text-color-lit\", colors.primaryNote);\n        this._eqFilterTypeRow.style.setProperty(\"--text-color-dim\", colors.secondaryNote);\n        this._eqFilterTypeRow.style.setProperty(\"--background-color-lit\", colors.primaryChannel);\n        this._eqFilterTypeRow.style.setProperty(\"--background-color-dim\", colors.secondaryChannel);\n\n        if (instrument.eqFilterType) {\n            this._eqFilterSimpleButton.classList.remove(\"deactivated\");\n            this._eqFilterAdvancedButton.classList.add(\"deactivated\");\n            this._eqFilterRow.style.display = \"none\";\n            this._eqFilterSimpleCutRow.style.display = \"\";\n            this._eqFilterSimplePeakRow.style.display = \"\";\n        } else {\n            this._eqFilterSimpleButton.classList.add(\"deactivated\");\n            this._eqFilterAdvancedButton.classList.remove(\"deactivated\");\n            this._eqFilterRow.style.display = \"\";\n            this._eqFilterSimpleCutRow.style.display = \"none\";\n            this._eqFilterSimplePeakRow.style.display = \"none\";\n        }\n\n        setSelectedValue(this._rhythmSelect, this._doc.song.rhythm);\n\n        if (!this._doc.song.getChannelIsMod(this._doc.channel)) {\n\n            this._customInstrumentSettingsGroup.style.display = \"\";\n            this._panSliderRow.style.display = \"\";\n            this._panDropdownGroup.style.display = (this._openPanDropdown ? \"\" : \"none\");\n            this._detuneSliderRow.style.display = \"\";\n            this._instrumentVolumeSliderRow.style.display = \"\";\n            this._instrumentTypeSelectRow.style.setProperty(\"display\", \"\");\n            this._instrumentSettingsGroup.appendChild(this._instrumentCopyGroup);\n            this._instrumentSettingsGroup.insertBefore(this._instrumentsButtonRow, this._instrumentSettingsGroup.firstChild);\n            this._instrumentSettingsGroup.insertBefore(this._instrumentSettingsTextRow, this._instrumentSettingsGroup.firstChild);\n\n            if (this._doc.song.channels[this._doc.channel].name == \"\") {\n                this._instrumentSettingsTextRow.textContent = \"Instrument Settings\";\n            }\n            else {\n                this._instrumentSettingsTextRow.textContent = this._doc.song.channels[this._doc.channel].name;\n            }\n\n            this._modulatorGroup.style.display = \"none\";\n\n            // Check if current viewed pattern on channel is used anywhere\n            // + Check if current instrument on channel is used anywhere\n            // + Check if a mod targets this\n            this._usageCheck(this._doc.channel, instrumentIndex);\n\n            if (this._doc.song.getChannelIsNoise(this._doc.channel)) {\n                this._pitchedPresetSelect.style.display = \"none\";\n                this._drumPresetSelect.style.display = \"\";\n                // Also hide select2\n                $(\"#pitchPresetSelect\").parent().hide();\n                $(\"#drumPresetSelect\").parent().show();\n\n                setSelectedValue(this._drumPresetSelect, instrument.preset, true);\n            } else {\n                this._pitchedPresetSelect.style.display = \"\";\n                this._drumPresetSelect.style.display = \"none\";\n\n                // Also hide select2\n                $(\"#pitchPresetSelect\").parent().show();\n                $(\"#drumPresetSelect\").parent().hide();\n\n                setSelectedValue(this._pitchedPresetSelect, instrument.preset, true);\n            }\n\n            if (instrument.type == InstrumentType.noise) {\n                this._chipWaveSelectRow.style.display = \"none\";\n                this._chipNoiseSelectRow.style.display = \"\";\n                setSelectedValue(this._chipNoiseSelect, instrument.chipNoise, true);\n            } else {\n                this._chipNoiseSelectRow.style.display = \"none\";\n            }\n            if (instrument.type == InstrumentType.spectrum) {\n                this._chipWaveSelectRow.style.display = \"none\";\n                this._spectrumRow.style.display = \"\";\n                this._spectrumEditor.render();\n            } else {\n                this._spectrumRow.style.display = \"none\";\n            }\n            if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                this._chipWaveSelectRow.style.display = \"none\";\n                this._harmonicsRow.style.display = \"\";\n                this._harmonicsEditor.render();\n            } else {\n                this._harmonicsRow.style.display = \"none\";\n            }\n            if (instrument.type == InstrumentType.pickedString) {\n                this._chipWaveSelectRow.style.display = \"none\";\n                this._stringSustainRow.style.display = \"\";\n                this._stringSustainSlider.updateValue(instrument.stringSustain);\n                this._stringSustainLabel.textContent = Config.enableAcousticSustain ? \"Sustain (\" + Config.sustainTypeNames[instrument.stringSustainType].substring(0,1).toUpperCase() + \"):\" : \"Sustain:\";\n            } else {\n                this._stringSustainRow.style.display = \"none\";\n            }\n            if (instrument.type == InstrumentType.drumset) {\n                this._drumsetGroup.style.display = \"\";\n                this._chipWaveSelectRow.style.display = \"none\";\n                this._fadeInOutRow.style.display = \"none\";\n                for (let i: number = 0; i < Config.drumCount; i++) {\n                    setSelectedValue(this._drumsetEnvelopeSelects[i], instrument.drumsetEnvelopes[i]);\n                    this._drumsetSpectrumEditors[i].render();\n                }\n            } else {\n                this._drumsetGroup.style.display = \"none\";\n                this._fadeInOutRow.style.display = \"\";\n                this._fadeInOutEditor.render();\n            }\n\n            if (instrument.type == InstrumentType.chip) {\n                this._chipWaveSelectRow.style.display = \"\";\n                setSelectedValue(this._chipWaveSelect, instrument.chipWave);\n            }\n\n            if (instrument.type == InstrumentType.customChipWave) {\n                this._customWaveDraw.style.display = \"\";\n                this._chipWaveSelectRow.style.display = \"none\";\n            }\n            else {\n                this._customWaveDraw.style.display = \"none\";\n            }\n\n            if (instrument.type == InstrumentType.supersaw) {\n\t\t\t\tthis._supersawDynamismRow.style.display = \"\";\n\t\t\t\tthis._supersawSpreadRow.style.display = \"\";\n\t\t\t\tthis._supersawShapeRow.style.display = \"\";\n\t\t\t\tthis._supersawDynamismSlider.updateValue(instrument.supersawDynamism);\n\t\t\t\tthis._supersawSpreadSlider.updateValue(instrument.supersawSpread);\n\t\t\t\tthis._supersawShapeSlider.updateValue(instrument.supersawShape);\n\t\t\t} else {\n\t\t\t\tthis._supersawDynamismRow.style.display = \"none\";\n\t\t\t\tthis._supersawSpreadRow.style.display = \"none\";\n\t\t\t\tthis._supersawShapeRow.style.display = \"none\";\n\t\t\t}\n            if (instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.supersaw) {\n                this._chipWaveSelectRow.style.display = \"none\";\n                this._pulseWidthRow.style.display = \"\";\n                this._pulseWidthSlider.input.title = prettyNumber(instrument.pulseWidth) + \"%\";\n                this._pulseWidthSlider.updateValue(instrument.pulseWidth);\n            } else {\n                this._pulseWidthRow.style.display = \"none\";\n            }\n\n\n            if (instrument.type == InstrumentType.fm) {\n                this._algorithmSelectRow.style.display = \"\";\n                this._phaseModGroup.style.display = \"\";\n                this._feedbackRow1.style.display = \"\";\n                this._feedbackRow2.style.display = \"\";\n                this._chipWaveSelectRow.style.display = \"none\";\n                setSelectedValue(this._algorithmSelect, instrument.algorithm);\n                setSelectedValue(this._feedbackTypeSelect, instrument.feedbackType);\n                this._feedbackAmplitudeSlider.updateValue(instrument.feedbackAmplitude);\n                for (let i: number = 0; i < Config.operatorCount; i++) {\n                    const isCarrier: boolean = (i < Config.algorithms[instrument.algorithm].carrierCount);\n                    this._operatorRows[i].style.color = isCarrier ? ColorConfig.primaryText : \"\";\n                    setSelectedValue(this._operatorFrequencySelects[i], instrument.operators[i].frequency);\n                    this._operatorAmplitudeSliders[i].updateValue(instrument.operators[i].amplitude);\n                    setSelectedValue(this._operatorWaveformSelects[i], instrument.operators[i].waveform);\n                    this._operatorWaveformPulsewidthSliders[i].updateValue(instrument.operators[i].pulseWidth);\n                    this._operatorWaveformPulsewidthSliders[i].input.title = \"\" + Config.pwmOperatorWaves[instrument.operators[i].pulseWidth].name;\n                    this._operatorDropdownGroups[i].style.color = isCarrier ? ColorConfig.primaryText : \"\";\n                    const operatorName: string = (isCarrier ? \"Voice \" : \"Modulator \") + (i + 1);\n                    this._operatorFrequencySelects[i].title = operatorName + \" Frequency\";\n                    this._operatorAmplitudeSliders[i].input.title = operatorName + (isCarrier ? \" Volume\" : \" Amplitude\");\n                    this._operatorDropdownGroups[i].style.display = (this._openOperatorDropdowns[i] ? \"\" : \"none\");\n                    if (instrument.operators[i].waveform == 3) {\n                        this._operatorWaveformPulsewidthSliders[i].container.style.display = \"\";\n                        this._operatorWaveformHints[i].style.display = \"none\";\n                    } else {\n                        this._operatorWaveformPulsewidthSliders[i].container.style.display = \"none\";\n                        this._operatorWaveformHints[i].style.display = \"\";\n                    }\n                }\n            }\n            else {\n                this._algorithmSelectRow.style.display = \"none\";\n                this._phaseModGroup.style.display = \"none\";\n                this._feedbackRow1.style.display = \"none\";\n                this._feedbackRow2.style.display = \"none\";\n            }\n            this._pulseWidthSlider.input.title = prettyNumber(instrument.pulseWidth) + \"%\";\n\n\n            if (effectsIncludeTransition(instrument.effects)) {\n                this._transitionRow.style.display = \"\";\n                if (this._openTransitionDropdown)\n                    this._transitionDropdownGroup.style.display = \"\";\n                setSelectedValue(this._transitionSelect, instrument.transition);\n            } else {\n                this._transitionDropdownGroup.style.display = \"none\";\n                this._transitionRow.style.display = \"none\";\n            }\n\n            if (effectsIncludeChord(instrument.effects)) {\n                this._chordSelectRow.style.display = \"\";\n                this._chordDropdown.style.display = (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) ? \"\" : \"none\";\n                this._chordDropdownGroup.style.display = (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && this._openChordDropdown) ? \"\" : \"none\";\n                setSelectedValue(this._chordSelect, instrument.chord);\n            } else {\n                this._chordSelectRow.style.display = \"none\";\n                this._chordDropdown.style.display = \"none\";\n                this._chordDropdownGroup.style.display = \"none\";\n            }\n\n            if (effectsIncludePitchShift(instrument.effects)) {\n                this._pitchShiftRow.style.display = \"\";\n                this._pitchShiftSlider.updateValue(instrument.pitchShift);\n                this._pitchShiftSlider.input.title = (instrument.pitchShift - Config.pitchShiftCenter) + \" semitone(s)\";\n                for (const marker of this._pitchShiftFifthMarkers) {\n                    marker.style.display = prefs.showFifth ? \"\" : \"none\";\n                }\n            } else {\n                this._pitchShiftRow.style.display = \"none\";\n            }\n\n            if (effectsIncludeDetune(instrument.effects)) {\n                this._detuneSliderRow.style.display = \"\";\n                this._detuneSlider.updateValue(instrument.detune - Config.detuneCenter);\n                this._detuneSlider.input.title = (Synth.detuneToCents(instrument.detune)) + \" cent(s)\";\n            } else {\n                this._detuneSliderRow.style.display = \"none\";\n            }\n\n            if (effectsIncludeVibrato(instrument.effects)) {\n                this._vibratoSelectRow.style.display = \"\";\n                if (this._openVibratoDropdown)\n                    this._vibratoDropdownGroup.style.display = \"\";\n                setSelectedValue(this._vibratoSelect, instrument.vibrato);\n            } else {\n                this._vibratoDropdownGroup.style.display = \"none\";\n                this._vibratoSelectRow.style.display = \"none\";\n            }\n\n            if (effectsIncludeNoteFilter(instrument.effects)) {\n\n                this._noteFilterTypeRow.style.setProperty(\"--text-color-lit\", colors.primaryNote);\n                this._noteFilterTypeRow.style.setProperty(\"--text-color-dim\", colors.secondaryNote);\n                this._noteFilterTypeRow.style.setProperty(\"--background-color-lit\", colors.primaryChannel);\n                this._noteFilterTypeRow.style.setProperty(\"--background-color-dim\", colors.secondaryChannel);\n                this._noteFilterTypeRow.style.display = \"\";\n\n                if (this._doc.synth.isFilterModActive(true, this._doc.channel, this._doc.getCurrentInstrument())) {\n                    this._noteFilterEditor.render(true, this._ctrlHeld || this._shiftHeld);\n                }\n                else {\n                    this._noteFilterEditor.render();\n                }\n\n                if (instrument.noteFilterType) {\n                    this._noteFilterSimpleButton.classList.remove(\"deactivated\");\n                    this._noteFilterAdvancedButton.classList.add(\"deactivated\");\n                    this._noteFilterRow.style.display = \"none\";\n                    this._noteFilterSimpleCutRow.style.display = \"\";\n                    this._noteFilterSimplePeakRow.style.display = \"\";\n                } else {\n                    this._noteFilterSimpleButton.classList.add(\"deactivated\");\n                    this._noteFilterAdvancedButton.classList.remove(\"deactivated\");\n                    this._noteFilterRow.style.display = \"\";\n                    this._noteFilterSimpleCutRow.style.display = \"none\";\n                    this._noteFilterSimplePeakRow.style.display = \"none\";\n                }\n            } else {\n                this._noteFilterRow.style.display = \"none\";\n                this._noteFilterSimpleCutRow.style.display = \"none\";\n                this._noteFilterSimplePeakRow.style.display = \"none\";\n                this._noteFilterTypeRow.style.display = \"none\";\n            }\n\n            if (effectsIncludeDistortion(instrument.effects)) {\n                this._distortionRow.style.display = \"\";\n                if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.supersaw)\n                    this._aliasingRow.style.display = \"\";\n                else\n                    this._aliasingRow.style.display = \"none\";\n                this._distortionSlider.updateValue(instrument.distortion);\n            } else {\n                this._distortionRow.style.display = \"none\";\n                this._aliasingRow.style.display = \"none\";\n            }\n\n            if (effectsIncludeBitcrusher(instrument.effects)) {\n                this._bitcrusherQuantizationRow.style.display = \"\";\n                this._bitcrusherFreqRow.style.display = \"\";\n                this._bitcrusherQuantizationSlider.updateValue(instrument.bitcrusherQuantization);\n                this._bitcrusherFreqSlider.updateValue(instrument.bitcrusherFreq);\n            } else {\n                this._bitcrusherQuantizationRow.style.display = \"none\";\n                this._bitcrusherFreqRow.style.display = \"none\";\n            }\n\n            if (effectsIncludePanning(instrument.effects)) {\n                this._panSliderRow.style.display = \"\";\n                if (this._openPanDropdown)\n                    this._panDropdownGroup.style.display = \"\";\n                this._panSlider.updateValue(instrument.pan);\n            } else {\n                this._panSliderRow.style.display = \"none\";\n                this._panDropdownGroup.style.display = \"none\";\n            }\n\n            if (effectsIncludeChorus(instrument.effects)) {\n                this._chorusRow.style.display = \"\";\n                this._chorusSlider.updateValue(instrument.chorus);\n            } else {\n                this._chorusRow.style.display = \"none\";\n            }\n\n            if (effectsIncludeEcho(instrument.effects)) {\n                this._echoSustainRow.style.display = \"\";\n                this._echoSustainSlider.updateValue(instrument.echoSustain);\n                this._echoDelayRow.style.display = \"\";\n                this._echoDelaySlider.updateValue(instrument.echoDelay);\n                this._echoDelaySlider.input.title = (Math.round((instrument.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat) * 1000) / 1000) + \" beat(s)\";\n            } else {\n                this._echoSustainRow.style.display = \"none\";\n                this._echoDelayRow.style.display = \"none\";\n            }\n\n            if (effectsIncludeReverb(instrument.effects)) {\n                this._reverbRow.style.display = \"\";\n                this._reverbSlider.updateValue(instrument.reverb);\n            } else {\n                this._reverbRow.style.display = \"none\";\n            }\n\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                this._unisonSelectRow.style.display = \"\";\n                setSelectedValue(this._unisonSelect, instrument.unison);\n            } else {\n                this._unisonSelectRow.style.display = \"none\";\n            }\n\n            if (this._openEnvelopeDropdown)\n                this._envelopeDropdownGroup.style.display = \"\";\n            else\n                this._envelopeDropdownGroup.style.display = \"none\";\n\n            this._envelopeEditor.render();\n\n            for (let chordIndex: number = 0; chordIndex < Config.chords.length; chordIndex++) {\n                let hidden: boolean = (!Config.instrumentTypeHasSpecialInterval[instrument.type] && Config.chords[chordIndex].customInterval);\n                const option: Element = this._chordSelect.children[chordIndex];\n                if (hidden) {\n                    if (!option.hasAttribute(\"hidden\")) {\n                        option.setAttribute(\"hidden\", \"\");\n                    }\n                } else {\n                    option.removeAttribute(\"hidden\");\n                }\n            }\n\n            this._instrumentSettingsGroup.style.color = ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote;\n\n            setSelectedValue(this._transitionSelect, instrument.transition);\n            setSelectedValue(this._vibratoSelect, instrument.vibrato);\n            setSelectedValue(this._vibratoTypeSelect, instrument.vibratoType);\n            setSelectedValue(this._chordSelect, instrument.chord);\n            this._panSliderInputBox.value = instrument.pan + \"\";\n            this._pwmSliderInputBox.value = instrument.pulseWidth + \"\";\n            this._detuneSliderInputBox.value = (instrument.detune - Config.detuneCenter) + \"\";\n            this._instrumentVolumeSlider.updateValue(instrument.volume);\n            this._instrumentVolumeSliderInputBox.value = \"\" + (instrument.volume);\n            this._vibratoDepthSlider.updateValue(Math.round(instrument.vibratoDepth * 25));\n            this._vibratoDelaySlider.updateValue(Math.round(instrument.vibratoDelay));\n            this._vibratoSpeedSlider.updateValue(instrument.vibratoSpeed);\n            setSelectedValue(this._vibratoTypeSelect, instrument.vibratoType);\n            this._arpeggioSpeedSlider.updateValue(instrument.arpeggioSpeed);\n            this._panDelaySlider.updateValue(instrument.panDelay);\n            this._vibratoDelaySlider.input.title = \"\" + Math.round(instrument.vibratoDelay);\n            this._vibratoDepthSlider.input.title = \"\" + instrument.vibratoDepth;\n            this._vibratoSpeedSlider.input.title = \"x\" + instrument.vibratoSpeed / 10;\n            this._vibratoSpeedDisplay.textContent = \"x\" + instrument.vibratoSpeed / 10;\n            this._panDelaySlider.input.title = \"\" + instrument.panDelay;\n            this._arpeggioSpeedSlider.input.title = \"x\" + prettyNumber(Config.arpSpeedScale[instrument.arpeggioSpeed]);\n            this._arpeggioSpeedDisplay.textContent = \"x\" + prettyNumber(Config.arpSpeedScale[instrument.arpeggioSpeed]);\n            this._eqFilterSimpleCutSlider.updateValue(instrument.eqFilterSimpleCut);\n            this._eqFilterSimplePeakSlider.updateValue(instrument.eqFilterSimplePeak);\n            this._noteFilterSimpleCutSlider.updateValue(instrument.noteFilterSimpleCut);\n            this._noteFilterSimplePeakSlider.updateValue(instrument.noteFilterSimplePeak);\n            this._envelopeSpeedSlider.updateValue(instrument.envelopeSpeed);\n            this._envelopeSpeedSlider.input.title = \"x\" + prettyNumber(Config.arpSpeedScale[instrument.envelopeSpeed]);\n            this._envelopeSpeedDisplay.textContent = \"x\" + prettyNumber(Config.arpSpeedScale[instrument.envelopeSpeed]);\n\n\n            if (instrument.type == InstrumentType.customChipWave) {\n                this._customWaveDrawCanvas.redrawCanvas();\n                if (this.prompt instanceof CustomChipPrompt) {\n                    this.prompt.customChipCanvas.render();\n                }\n            }\n\n            this._renderInstrumentBar(channel, instrumentIndex, colors);\n        }\n        // Options for mod channel\n        else {\n            this._usageCheck(this._doc.channel, instrumentIndex);\n\n            this._pitchedPresetSelect.style.display = \"none\";\n            this._drumPresetSelect.style.display = \"none\";\n            $(\"#pitchPresetSelect\").parent().hide();\n            $(\"#drumPresetSelect\").parent().hide();\n            this._modulatorGroup.appendChild(this._instrumentCopyGroup);\n\n            this._modulatorGroup.insertBefore(this._instrumentsButtonRow, this._modulatorGroup.firstChild);\n            this._modulatorGroup.insertBefore(this._instrumentSettingsTextRow, this._modulatorGroup.firstChild);\n            if (this._doc.song.channels[this._doc.channel].name == \"\") {\n                this._instrumentSettingsTextRow.textContent = \"Modulator Settings\";\n            }\n            else {\n                this._instrumentSettingsTextRow.textContent = this._doc.song.channels[this._doc.channel].name;\n            }\n\n            this._chipNoiseSelectRow.style.display = \"none\";\n            this._chipWaveSelectRow.style.display = \"none\";\n            this._spectrumRow.style.display = \"none\";\n            this._harmonicsRow.style.display = \"none\";\n            this._transitionRow.style.display = \"none\";\n            this._chordSelectRow.style.display = \"none\";\n            this._chordDropdownGroup.style.display = \"none\";\n            //this._filterCutoffRow.style.display = \"none\";\n            //this._filterResonanceRow.style.display = \"none\";\n            //this._filterEnvelopeRow.style.display = \"none\";\n            this._drumsetGroup.style.display = \"none\";\n            this._customWaveDraw.style.display = \"none\";\n            this._supersawDynamismRow.style.display = \"none\";\n\t\t\tthis._supersawSpreadRow.style.display = \"none\";\n\t\t\tthis._supersawShapeRow.style.display = \"none\";\n            this._algorithmSelectRow.style.display = \"none\";\n            this._phaseModGroup.style.display = \"none\";\n            this._feedbackRow1.style.display = \"none\";\n            this._feedbackRow2.style.display = \"none\";\n            //this._pulseEnvelopeRow.style.display = \"none\";\n            this._pulseWidthRow.style.display = \"none\";\n            this._vibratoSelectRow.style.display = \"none\";\n            this._vibratoDropdownGroup.style.display = \"none\";\n            this._envelopeDropdownGroup.style.display = \"none\";\n            //this._intervalSelectRow.style.display = \"none\";\n            this._detuneSliderRow.style.display = \"none\";\n            this._panSliderRow.style.display = \"none\";\n            this._panDropdownGroup.style.display = \"none\";\n\n            this._modulatorGroup.style.display = \"\";\n            this._modulatorGroup.style.color = ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote;\n\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n\n                let instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n                let modChannel: number = Math.max(0, instrument.modChannels[mod]);\n                let modInstrument: number = instrument.modInstruments[mod];\n\n                // Boundary checking\n                if (modInstrument >= this._doc.song.channels[modChannel].instruments.length + 2 || (modInstrument > 0 && this._doc.song.channels[modChannel].instruments.length <= 1)) {\n                    modInstrument = 0;\n                    instrument.modInstruments[mod] = 0;\n                }\n                if (modChannel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n                    instrument.modInstruments[mod] = 0;\n                    instrument.modulators[mod] = 0;\n                }\n\n                // Build options for modulator channels (make sure it has the right number).\n                if (this._doc.recalcChannelNames || (this._modChannelBoxes[mod].children.length != 2 + this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)) {\n                    while (this._modChannelBoxes[mod].firstChild) this._modChannelBoxes[mod].remove(0);\n                    const channelList: string[] = [];\n                    channelList.push(\"none\");\n                    channelList.push(\"song\");\n                    for (let i: number = 0; i < this._doc.song.pitchChannelCount; i++) {\n                        if (this._doc.song.channels[i].name == \"\") {\n                            channelList.push(\"pitch \" + (i + 1));\n                        }\n                        else {\n                            channelList.push(this._doc.song.channels[i].name);\n                        }\n                    }\n                    for (let i: number = 0; i < this._doc.song.noiseChannelCount; i++) {\n                        if (this._doc.song.channels[i + this._doc.song.pitchChannelCount].name == \"\") {\n                            channelList.push(\"noise \" + (i + 1));\n                        }\n                        else {\n                            channelList.push(this._doc.song.channels[i + this._doc.song.pitchChannelCount].name);\n                        }\n                    }\n                    buildOptions(this._modChannelBoxes[mod], channelList);\n                }\n\n                // Set selected index based on channel info.\n\n                this._modChannelBoxes[mod].selectedIndex = instrument.modChannels[mod] + 2; // Offset to get to first pitch channel\n\n                let channel: Channel = this._doc.song.channels[modChannel];\n\n                // Build options for modulator instruments (make sure it has the right number).\n                if (this._modInstrumentBoxes[mod].children.length != channel.instruments.length + 2) {\n                    while (this._modInstrumentBoxes[mod].firstChild) this._modInstrumentBoxes[mod].remove(0);\n                    const instrumentList: string[] = [];\n                    for (let i: number = 0; i < channel.instruments.length; i++) {\n                        instrumentList.push(\"\" + i + 1);\n                    }\n                    instrumentList.push(\"all\");\n                    instrumentList.push(\"active\");\n                    buildOptions(this._modInstrumentBoxes[mod], instrumentList);\n                }\n\n                // If non-zero pattern, point to which instrument(s) is/are the current\n                if (channel.bars[this._doc.bar] > 0) {\n\n                    let usedInstruments: number[] = channel.patterns[channel.bars[this._doc.bar] - 1].instruments;\n\n                    for (let i: number = 0; i < channel.instruments.length; i++) {\n\n                        if (usedInstruments.includes(i)) {\n                            this._modInstrumentBoxes[mod].options[i].label = \"🢒\" + (i + 1);\n                        }\n                        else {\n                            this._modInstrumentBoxes[mod].options[i].label = \"\" + (i + 1);\n                        }\n                    }\n                }\n                else {\n                    for (let i: number = 0; i < channel.instruments.length; i++) {\n                        this._modInstrumentBoxes[mod].options[i].label = \"\" + (i + 1);\n                    }\n                }\n\n                // Set selected index based on instrument info.\n                this._modInstrumentBoxes[mod].selectedIndex = instrument.modInstruments[mod];\n\n                // Build options for modulator settings (based on channel settings)\n\n                if (instrument.modChannels[mod] != -2) {\n                    while (this._modSetBoxes[mod].firstChild) this._modSetBoxes[mod].remove(0);\n                    const settingList: string[] = [];\n                    const unusedSettingList: string[] = [];\n\n                    // Make sure these names match the names declared for modulators in SynthConfig.ts.\n\n                    settingList.push(\"none\");\n\n                    // Populate mod setting options for the song scope.\n                    if (instrument.modChannels[mod] == -1) {\n                        settingList.push(\"song volume\");\n                        settingList.push(\"tempo\");\n                        settingList.push(\"song reverb\");\n                        settingList.push(\"next bar\");\n                        settingList.push(\"song detune\");\n                    }\n                    // Populate mod setting options for instrument scope.\n                    else {\n\n                        settingList.push(\"note volume\");\n                        settingList.push(\"mix volume\");\n\n                        // Build a list of target instrument indices, types and other info. It will be a single type for a single instrument, but with \"all\" and \"active\" it could be more.\n                        // All or active are included together. Active allows any to be set, just in case the user fiddles with which are active later.\n                        let tgtInstrumentTypes: InstrumentType[] = [];\n                        let anyInstrumentAdvancedEQ:     boolean = false,\n                            anyInstrumentSimpleEQ:       boolean = false,\n                            anyInstrumentAdvancedNote:   boolean = false,\n                            anyInstrumentSimpleNote:     boolean = false,\n                            anyInstrumentArps:           boolean = false,\n                            anyInstrumentPitchShifts:    boolean = false,\n                            anyInstrumentDetunes:        boolean = false,\n                            anyInstrumentVibratos:       boolean = false,\n                            anyInstrumentNoteFilters:    boolean = false,\n                            anyInstrumentDistorts:       boolean = false,\n                            anyInstrumentBitcrushes:     boolean = false,\n                            anyInstrumentPans:           boolean = false,\n                            anyInstrumentChorus:         boolean = false,\n                            anyInstrumentEchoes:         boolean = false,\n                            anyInstrumentReverbs:        boolean = false,\n                            anyInstrumentHasEnvelopes:   boolean = false;\n                        let allInstrumentPitchShifts:    boolean = true,\n                            allInstrumentNoteFilters:    boolean = true,\n                            allInstrumentDetunes:        boolean = true,\n                            allInstrumentVibratos:       boolean = true,\n                            allInstrumentDistorts:       boolean = true,\n                            allInstrumentBitcrushes:     boolean = true,\n                            allInstrumentPans:           boolean = true,\n                            allInstrumentChorus:         boolean = true,\n                            allInstrumentEchoes:         boolean = true,\n                            allInstrumentReverbs:        boolean = true;\n                        let instrumentCandidates: number[] = [];\n                        if (modInstrument >= channel.instruments.length) {\n                            for (let i: number = 0; i < channel.instruments.length; i++) {\n                                instrumentCandidates.push(i);\n                            }\n                        } else {\n                            instrumentCandidates.push(modInstrument);\n                        }\n                        for (let i: number = 0; i < instrumentCandidates.length; i++) {\n                            let instrumentIndex = instrumentCandidates[i];\n\n                            if (!tgtInstrumentTypes.includes(channel.instruments[instrumentIndex].type))\n                                tgtInstrumentTypes.push(channel.instruments[instrumentIndex].type);\n                            if (channel.instruments[instrumentIndex].eqFilterType)\n                                anyInstrumentSimpleEQ = true;\n                            else\n                                anyInstrumentAdvancedEQ = true;\n                            if (effectsIncludeChord(channel.instruments[instrumentIndex].effects) && channel.instruments[instrumentIndex].getChord().arpeggiates) {\n                                anyInstrumentArps = true;\n                            }\n                            if (effectsIncludePitchShift(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentPitchShifts = true;\n                            }\n                            if (effectsIncludeDetune(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentDetunes = true;\n                            }\n                            else {\n                                allInstrumentDetunes = false;\n                            }\n                            if (effectsIncludeVibrato(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentVibratos = true;\n                            }\n                            else {\n                                allInstrumentVibratos = false;\n                            }\n                            if (effectsIncludeNoteFilter(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentNoteFilters = true;\n                                if (channel.instruments[instrumentIndex].noteFilterType)\n                                    anyInstrumentSimpleNote = true;\n                                else\n                                    anyInstrumentAdvancedNote = true;\n                            }\n                            else {\n                                allInstrumentNoteFilters = false;\n                            }\n                            if (effectsIncludeDistortion(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentDistorts = true;\n                            }\n                            else {\n                                allInstrumentDistorts = false;\n                            }\n                            if (effectsIncludeBitcrusher(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentBitcrushes = true;\n                            }\n                            else {\n                                allInstrumentBitcrushes = false;\n                            }\n                            if (effectsIncludePanning(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentPans = true;\n                            }\n                            else {\n                                allInstrumentPans = false;\n                            }\n                            if (effectsIncludeChorus(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentChorus = true;\n                            }\n                            else {\n                                allInstrumentChorus = false;\n                            }\n                            if (effectsIncludeEcho(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentEchoes = true;\n                            }\n                            else {\n                                allInstrumentEchoes = false;\n                            }\n                            if (effectsIncludeReverb(channel.instruments[instrumentIndex].effects)) {\n                                anyInstrumentReverbs = true;\n                            }\n                            else {\n                                allInstrumentReverbs = false;\n                            }\n                            if (channel.instruments[instrumentIndex].envelopes.length > 0) {\n                                anyInstrumentHasEnvelopes = true;\n                            }\n\n                        }\n                        if (anyInstrumentAdvancedEQ) {\n                            settingList.push(\"eq filter\");\n                        }\n                        if (anyInstrumentSimpleEQ) {\n                            settingList.push(\"eq filt cut\");\n                            settingList.push(\"eq filt peak\");\n                        }\n                        if (tgtInstrumentTypes.includes(InstrumentType.fm)) {\n                            settingList.push(\"fm slider 1\");\n                            settingList.push(\"fm slider 2\");\n                            settingList.push(\"fm slider 3\");\n                            settingList.push(\"fm slider 4\");\n                            settingList.push(\"fm feedback\");\n                        }\n                        if (tgtInstrumentTypes.includes(InstrumentType.pwm) || tgtInstrumentTypes.includes(InstrumentType.supersaw)) {\n                            settingList.push(\"pulse width\");\n                        }\n                        if (tgtInstrumentTypes.includes(InstrumentType.supersaw)) {\n                            settingList.push(\"dynamism\");\n                            settingList.push(\"spread\");\n                            settingList.push(\"saw shape\");\n                        }\n                        if (tgtInstrumentTypes.includes(InstrumentType.pickedString)) {\n                            settingList.push(\"sustain\");\n                        }\n                        if (anyInstrumentArps) {\n                            settingList.push(\"arp speed\");\n                            settingList.push(\"reset arp\");\n                        }\n                        if (anyInstrumentPitchShifts) {\n                            settingList.push(\"pitch shift\");\n                        }\n                        if (!allInstrumentPitchShifts) {\n                            unusedSettingList.push(\"+ pitch shift\");\n                        }\n                        if (anyInstrumentDetunes) {\n                            settingList.push(\"detune\");\n                        }\n                        if (!allInstrumentDetunes) {\n                            unusedSettingList.push(\"+ detune\");\n                        }\n                        if (anyInstrumentVibratos) {\n                            settingList.push(\"vibrato depth\");\n                            settingList.push(\"vibrato speed\");\n                            settingList.push(\"vibrato delay\");\n                        }\n                        if (!allInstrumentVibratos) {\n                            unusedSettingList.push(\"+ vibrato depth\");\n                            unusedSettingList.push(\"+ vibrato speed\");\n                            unusedSettingList.push(\"+ vibrato delay\");\n                        }\n                        if (anyInstrumentNoteFilters) {\n                            if (anyInstrumentAdvancedNote) {\n                                settingList.push(\"note filter\");\n                            }\n                            if (anyInstrumentSimpleNote) {\n                                settingList.push(\"note filt cut\");\n                                settingList.push(\"note filt peak\");\n                            }\n                        }\n                        if (!allInstrumentNoteFilters) {\n                            unusedSettingList.push(\"+ note filter\");\n                        }\n                        if (anyInstrumentDistorts) {\n                            settingList.push(\"distortion\");\n                        }\n                        if (!allInstrumentDistorts) {\n                            unusedSettingList.push(\"+ distortion\");\n                        }\n                        if (anyInstrumentBitcrushes) {\n                            settingList.push(\"bit crush\");\n                            settingList.push(\"freq crush\");\n                        }\n                        if (!allInstrumentBitcrushes) {\n                            unusedSettingList.push(\"+ bit crush\");\n                            unusedSettingList.push(\"+ freq crush\");\n                        }\n                        if (anyInstrumentPans) {\n                            settingList.push(\"pan\");\n                            settingList.push(\"pan delay\");\n                        }\n                        if (!allInstrumentPans) {\n                            unusedSettingList.push(\"+ pan\");\n                            unusedSettingList.push(\"+ pan delay\");\n                        }\n                        if (anyInstrumentChorus) {\n                            settingList.push(\"chorus\");\n                        }\n                        if (!allInstrumentChorus) {\n                            unusedSettingList.push(\"+ chorus\");\n                        }\n                        if (anyInstrumentEchoes) {\n                            settingList.push(\"echo\");\n                            // Disabled currently!\n                            //settingList.push(\"echo delay\");\n                        }\n                        if (!allInstrumentEchoes) {\n                            unusedSettingList.push(\"+ echo\");\n                            //unusedSettingList.push(\"echo delay\");\n                        }\n                        if (anyInstrumentReverbs) {\n                            settingList.push(\"reverb\");\n                        }\n                        if (!allInstrumentReverbs) {\n                            unusedSettingList.push(\"+ reverb\");\n                        }\n\n                        if (anyInstrumentHasEnvelopes) {\n                            settingList.push(\"envelope speed\");\n                        }\n\n                    }\n\n                    buildOptions(this._modSetBoxes[mod], settingList);\n                    if (unusedSettingList.length > 0) {\n                        this._modSetBoxes[mod].appendChild(option({ selected: false, disabled: true, value: \"Add Effect\" }, \"Add Effect\"));\n                        buildOptions(this._modSetBoxes[mod], unusedSettingList);\n                    }\n\n                    let setIndex: number = settingList.indexOf(Config.modulators[instrument.modulators[mod]].name);\n\n                    // Catch instances where invalid set forced setting to \"none\"\n                    if (setIndex == -1) {\n                        this._modSetBoxes[mod].insertBefore(option({ value: Config.modulators[instrument.modulators[mod]].name, style: \"color: red;\" }, Config.modulators[instrument.modulators[mod]].name), this._modSetBoxes[mod].children[0]);\n                        this._modSetBoxes[mod].selectedIndex = 0;\n                        this._whenSetModSetting(mod, true);\n                    }\n                    else {\n                        this._modSetBoxes[mod].selectedIndex = setIndex;\n                        this._modSetBoxes[mod].classList.remove(\"invalidSetting\");\n                        instrument.invalidModulators[mod] = false;\n                    }\n\n                } else if (this._modSetBoxes[mod].selectedIndex > 0) {\n                    this._modSetBoxes[mod].selectedIndex = 0;\n                    this._whenSetModSetting(mod);\n                }\n\n                //Hide instrument select if channel is \"none\" or \"song\"\n                if (instrument.modChannels[mod] < 0) {\n                    ((this._modInstrumentBoxes[mod].parentElement) as HTMLDivElement).style.display = \"none\";\n                    $(\"#modInstrumentText\" + mod).get(0).style.display = \"none\";\n                    $(\"#modChannelText\" + mod).get(0).innerText = \"Channel:\";\n\n                    //Hide setting select if channel is \"none\"\n                    if (instrument.modChannels[mod] == -2) {\n                        $(\"#modSettingText\" + mod).get(0).style.display = \"none\";\n                        ((this._modSetBoxes[mod].parentElement) as HTMLDivElement).style.display = \"none\";\n                    }\n                    else {\n                        $(\"#modSettingText\" + mod).get(0).style.display = \"\";\n                        ((this._modSetBoxes[mod].parentElement) as HTMLDivElement).style.display = \"\";\n                    }\n\n                    this._modTargetIndicators[mod].style.setProperty(\"fill\", ColorConfig.uiWidgetFocus);\n                    this._modTargetIndicators[mod].classList.remove(\"modTarget\");\n\n                }\n                else {\n                    ((this._modInstrumentBoxes[mod].parentElement) as HTMLDivElement).style.display = (channel.instruments.length > 1) ? \"\" : \"none\";\n                    $(\"#modInstrumentText\" + mod).get(0).style.display = (channel.instruments.length > 1) ? \"\" : \"none\";\n                    $(\"#modChannelText\" + mod).get(0).innerText = (channel.instruments.length > 1) ? \"Ch:\" : \"Channel:\";\n                    $(\"#modSettingText\" + mod).get(0).style.display = \"\";\n                    ((this._modSetBoxes[mod].parentElement) as HTMLDivElement).style.display = \"\";\n\n                    this._modTargetIndicators[mod].style.setProperty(\"fill\", ColorConfig.indicatorPrimary);\n                    this._modTargetIndicators[mod].classList.add(\"modTarget\");\n                }\n\n                let filterType: string = Config.modulators[instrument.modulators[mod]].name;\n                if (filterType == \"eq filter\" || filterType == \"note filter\") {\n                    $(\"#modFilterText\" + mod).get(0).style.display = \"\";\n                    $(\"#modSettingText\" + mod).get(0).style.setProperty(\"margin-bottom\", \"2px\");\n\n                    let useInstrument: number = instrument.modInstruments[mod];\n                    let modChannel: Channel = this._doc.song.channels[Math.max(0, instrument.modChannels[mod])];\n                    let tmpCount: number = -1;\n                    if (useInstrument >= modChannel.instruments.length) {\n                        // Use greatest number of dots among all instruments if setting is 'all' or 'active'. If it won't have an effect on one, no worry.\n                        for (let i: number = 0; i < modChannel.instruments.length; i++) {\n                            if (filterType == \"eq filter\") {\n                                if (modChannel.instruments[i].eqFilter.controlPointCount > tmpCount) {\n                                    tmpCount = modChannel.instruments[i].eqFilter.controlPointCount;\n                                    useInstrument = i;\n                                }\n                            } else {\n                                if (modChannel.instruments[i].noteFilter.controlPointCount > tmpCount) {\n                                    tmpCount = modChannel.instruments[i].noteFilter.controlPointCount;\n                                    useInstrument = i;\n                                }\n                            }\n                        }\n                    }\n\n                    // Build options for modulator filters (make sure it has the right number of filter dots).\n                    let dotCount: number = (filterType == \"eq filter\")\n                        ? channel.instruments[useInstrument].getLargestControlPointCount(false)\n                        : channel.instruments[useInstrument].getLargestControlPointCount(true);\n\n                    const isSimple: boolean = (filterType == \"eq filter\" ? channel.instruments[useInstrument].eqFilterType : channel.instruments[useInstrument].noteFilterType);\n                    if (isSimple)\n                        dotCount = 0;\n\n                    if (isSimple || this._modFilterBoxes[mod].children.length != 1 + dotCount * 2) {\n                        while (this._modFilterBoxes[mod].firstChild) this._modFilterBoxes[mod].remove(0);\n                        const dotList: string[] = [];\n                        if (!isSimple)\n                            dotList.push(\"morph\");\n                        for (let i: number = 0; i < dotCount; i++) {\n                            dotList.push(\"dot \" + (i + 1) + \" x\");\n                            dotList.push(\"dot \" + (i + 1) + \" y\");\n                        }\n                        buildOptions(this._modFilterBoxes[mod], dotList);\n                    }\n\n                    if (isSimple || instrument.modFilterTypes[mod] >= this._modFilterBoxes[mod].length) {\n                        this._modFilterBoxes[mod].classList.add(\"invalidSetting\");\n                        instrument.invalidModulators[mod] = true;\n                        let useName: string = ((instrument.modFilterTypes[mod] - 1) % 2 == 1) ?\n                            \"dot \" + (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) + 1) + \" y\"\n                            : \"dot \" + (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) + 1) + \" x\";\n                        if (instrument.modFilterTypes[mod] == 0)\n                            useName = \"morph\";\n                        this._modFilterBoxes[mod].insertBefore(option({ value: useName, style: \"color: red;\" }, useName), this._modFilterBoxes[mod].children[0]);\n                        this._modFilterBoxes[mod].selectedIndex = 0;\n\n                    }\n                    else {\n                        this._modFilterBoxes[mod].classList.remove(\"invalidSetting\");\n                        instrument.invalidModulators[mod] = false;\n                        this._modFilterBoxes[mod].selectedIndex = instrument.modFilterTypes[mod];\n                    }\n\n\n\n                } else {\n                    $(\"#modFilterText\" + mod).get(0).style.display = \"none\";\n                    $(\"#modSettingText\" + mod).get(0).style.setProperty(\"margin-bottom\", \"0.9em\");\n\n                }\n            }\n\n            this._doc.recalcChannelNames = false;\n\n            for (let chordIndex: number = 0; chordIndex < Config.chords.length; chordIndex++) {\n                const option: Element = this._chordSelect.children[chordIndex];\n                if (!option.hasAttribute(\"hidden\")) {\n                    option.setAttribute(\"hidden\", \"\");\n                }\n\n            }\n\n            //this._instrumentSelectRow.style.display = \"none\";\n\n            this._customInstrumentSettingsGroup.style.display = \"none\";\n            this._panSliderRow.style.display = \"none\";\n            this._panDropdownGroup.style.display = \"none\";\n            this._instrumentVolumeSliderRow.style.display = \"none\";\n            this._instrumentTypeSelectRow.style.setProperty(\"display\", \"none\");\n\n            this._instrumentSettingsGroup.style.color = ColorConfig.getChannelColor(this._doc.song, this._doc.channel).primaryNote;\n\n            // Force piano to re-show, if channel is modulator\n            if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n                this._piano.forceRender();\n            }\n\n            this._renderInstrumentBar(channel, instrumentIndex, colors);\n\n        }\n\n        this._instrumentSettingsGroup.style.color = colors.primaryNote;\n\n        if (this._doc.synth.isFilterModActive(false, this._doc.channel, this._doc.getCurrentInstrument())) {\n            this._eqFilterEditor.render(true, this._ctrlHeld || this._shiftHeld);\n        }\n        else {\n            this._eqFilterEditor.render();\n        }\n        this._instrumentVolumeSlider.updateValue(instrument.volume);\n        this._detuneSlider.updateValue(instrument.detune - Config.detuneCenter);\n        this._twoNoteArpBox.checked = instrument.fastTwoNoteArp ? true : false;\n        this._clicklessTransitionBox.checked = instrument.clicklessTransition ? true : false;\n        this._aliasingBox.checked = instrument.aliases ? true : false;\n        this._addEnvelopeButton.disabled = (instrument.envelopeCount >= Config.maxEnvelopeCount);\n        this._discreteEnvelopeBox.checked = instrument.discreteEnvelope ? true : false;\n\n        this._volumeSlider.updateValue(prefs.volume);\n\n        // If an interface element was selected, but becomes invisible (e.g. an instrument\n        // select menu) just select the editor container so keyboard commands still work.\n        if (wasActive && activeElement != null && activeElement.clientWidth == 0) {\n            this.refocusStage();\n        }\n\n        this._setPrompt(this._doc.prompt);\n\n        if (prefs.autoFollow && !this._doc.synth.playing) {\n            this._doc.synth.goToBar(this._doc.bar);\n        }\n\n        // When adding effects or envelopes to an instrument in fullscreen modes,\n        // auto-scroll the settings areas to ensure the new settings are visible.\n        if (this._doc.addedEffect) {\n            const envButtonRect: DOMRect = this._addEnvelopeButton.getBoundingClientRect();\n            const instSettingsRect: DOMRect = this._instrumentSettingsArea.getBoundingClientRect();\n            const settingsRect: DOMRect = this._settingsArea.getBoundingClientRect();\n            this._instrumentSettingsArea.scrollTop += Math.max(0, envButtonRect.top - (instSettingsRect.top + instSettingsRect.height));\n            this._settingsArea.scrollTop += Math.max(0, envButtonRect.top - (settingsRect.top + settingsRect.height));\n            this._doc.addedEffect = false;\n        }\n        if (this._doc.addedEnvelope) {\n            this._instrumentSettingsArea.scrollTop = this._instrumentSettingsArea.scrollHeight;\n            this._settingsArea.scrollTop = this._settingsArea.scrollHeight;\n            this._doc.addedEnvelope = false;\n        }\n\n        // Writeback to mods if control key is held while moving a slider.\n        this.handleModRecording();\n\n    }\n\n    public handleModRecording(): void {\n        window.clearTimeout(this._modRecTimeout);\n        const lastChange: Change | null = this._doc.checkLastChange();\n        if ((this._ctrlHeld || this._shiftHeld) && lastChange != null && this._doc.synth.playing) {\n            const changedPatterns = this._patternEditor.setModSettingsForChange(lastChange, this);\n            if (this._doc.continuingModRecordingChange != null) {\n                this._modRecTimeout = window.setTimeout(() => { this.handleModRecording(); }, 10);\n                this._doc.recordingModulators = true;\n\n                if (changedPatterns)\n                    this._trackEditor.render();\n            }\n        }\n        else if (this._doc.recordingModulators) {\n            this._doc.recordingModulators = false;\n            // A dummy change that pushes history state.\n            this._doc.record(new ChangeHoldingModRecording(this._doc, null, null, null));\n        }\n    }\n\n    private _renderInstrumentBar(channel: Channel, instrumentIndex: number, colors: ChannelColors) {\n        if (this._doc.song.layeredInstruments || this._doc.song.patternInstruments) {\n            this._instrumentsButtonRow.style.display = \"\";\n            this._instrumentsButtonBar.style.setProperty(\"--text-color-lit\", colors.primaryNote);\n            this._instrumentsButtonBar.style.setProperty(\"--text-color-dim\", colors.secondaryNote);\n            this._instrumentsButtonBar.style.setProperty(\"--background-color-lit\", colors.primaryChannel);\n            this._instrumentsButtonBar.style.setProperty(\"--background-color-dim\", colors.secondaryChannel);\n\n            const maxInstrumentsPerChannel = this._doc.song.getMaxInstrumentsPerChannel();\n            while (this._instrumentButtons.length < channel.instruments.length) {\n                const instrumentButton: HTMLButtonElement = button(String(this._instrumentButtons.length + 1));\n                this._instrumentButtons.push(instrumentButton);\n                this._instrumentsButtonBar.insertBefore(instrumentButton, this._instrumentRemoveButton);\n            }\n            for (let i: number = this._renderedInstrumentCount; i < channel.instruments.length; i++) {\n                this._instrumentButtons[i].style.display = \"\";\n            }\n            for (let i: number = channel.instruments.length; i < this._renderedInstrumentCount; i++) {\n                this._instrumentButtons[i].style.display = \"none\";\n            }\n            this._renderedInstrumentCount = channel.instruments.length;\n            while (this._instrumentButtons.length > maxInstrumentsPerChannel) {\n                this._instrumentsButtonBar.removeChild(this._instrumentButtons.pop()!);\n            }\n\n            this._instrumentRemoveButton.style.display = (channel.instruments.length > Config.instrumentCountMin) ? \"\" : \"none\";\n            this._instrumentAddButton.style.display = (channel.instruments.length < maxInstrumentsPerChannel) ? \"\" : \"none\";\n            if (channel.instruments.length < maxInstrumentsPerChannel) {\n                this._instrumentRemoveButton.classList.remove(\"last-button\");\n            } else {\n                this._instrumentRemoveButton.classList.add(\"last-button\");\n            }\n            if (channel.instruments.length > 1) {\n                if (this._highlightedInstrumentIndex != instrumentIndex) {\n                    const oldButton: HTMLButtonElement = this._instrumentButtons[this._highlightedInstrumentIndex];\n                    if (oldButton != null) oldButton.classList.remove(\"selected-instrument\");\n                    const newButton: HTMLButtonElement = this._instrumentButtons[instrumentIndex];\n                    newButton.classList.add(\"selected-instrument\");\n                    this._highlightedInstrumentIndex = instrumentIndex;\n                }\n            } else {\n                const oldButton: HTMLButtonElement = this._instrumentButtons[this._highlightedInstrumentIndex];\n                if (oldButton != null) oldButton.classList.remove(\"selected-instrument\");\n                this._highlightedInstrumentIndex = -1;\n            }\n\n            if (this._doc.song.layeredInstruments && this._doc.song.patternInstruments && (this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)) {\n                //const pattern: Pattern | null = this._doc.getCurrentPattern();\n                for (let i: number = 0; i < channel.instruments.length; i++) {\n                    if (this._doc.recentPatternInstruments[this._doc.channel].indexOf(i) != -1) {\n                        this._instrumentButtons[i].classList.remove(\"deactivated\");\n                    } else {\n                        this._instrumentButtons[i].classList.add(\"deactivated\");\n                    }\n                }\n                this._deactivatedInstruments = true;\n            } else if (this._deactivatedInstruments || (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)) {\n                for (let i: number = 0; i < channel.instruments.length; i++) {\n\n                    this._instrumentButtons[i].classList.remove(\"deactivated\");\n                }\n                this._deactivatedInstruments = false;\n            }\n\n            if ((this._doc.song.layeredInstruments && this._doc.song.patternInstruments) && channel.instruments.length > 1 && (this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)) {\n                for (let i: number = 0; i < channel.instruments.length; i++) {\n                    this._instrumentButtons[i].classList.remove(\"no-underline\");\n                }\n            }\n            else {\n                for (let i: number = 0; i < channel.instruments.length; i++) {\n                    this._instrumentButtons[i].classList.add(\"no-underline\");\n                }\n            }\n        } else {\n            this._instrumentsButtonRow.style.display = \"none\";\n        }\n    }\n\n    public updatePlayButton = (): void => {\n        if (this._renderedIsPlaying != this._doc.synth.playing || this._renderedIsRecording != this._doc.synth.recording || this._renderedShowRecordButton != this._doc.prefs.showRecordButton || this._renderedCtrlHeld != this._ctrlHeld) {\n            this._renderedIsPlaying = this._doc.synth.playing;\n            this._renderedIsRecording = this._doc.synth.recording;\n            this._renderedShowRecordButton = this._doc.prefs.showRecordButton;\n            this._renderedCtrlHeld = this._ctrlHeld;\n\n            if (document.activeElement == this._playButton || document.activeElement == this._pauseButton || document.activeElement == this._recordButton || document.activeElement == this._stopButton) {\n                // When a focused element is hidden, focus is transferred to the document, so let's refocus the editor instead to make sure we can still capture keyboard input.\n                this.refocusStage();\n            }\n\n            this._playButton.style.display = \"none\";\n            this._pauseButton.style.display = \"none\";\n            this._recordButton.style.display = \"none\";\n            this._stopButton.style.display = \"none\";\n            this._prevBarButton.style.display = \"\";\n            this._nextBarButton.style.display = \"\";\n            this._playButton.classList.remove(\"shrunk\");\n            this._recordButton.classList.remove(\"shrunk\");\n            this._patternEditorRow.style.pointerEvents = \"\";\n            this._octaveScrollBar.container.style.pointerEvents = \"\";\n            this._octaveScrollBar.container.style.opacity = \"\";\n            this._trackContainer.style.pointerEvents = \"\";\n            this._loopEditor.container.style.opacity = \"\";\n            this._instrumentSettingsArea.style.pointerEvents = \"\";\n            this._instrumentSettingsArea.style.opacity = \"\";\n            this._menuArea.style.pointerEvents = \"\";\n            this._menuArea.style.opacity = \"\";\n            this._songSettingsArea.style.pointerEvents = \"\";\n            this._songSettingsArea.style.opacity = \"\";\n\n            if (this._doc.synth.recording) {\n                this._stopButton.style.display = \"\";\n                this._prevBarButton.style.display = \"none\";\n                this._nextBarButton.style.display = \"none\";\n                this._patternEditorRow.style.pointerEvents = \"none\";\n                this._octaveScrollBar.container.style.pointerEvents = \"none\";\n                this._octaveScrollBar.container.style.opacity = \"0.5\";\n                this._trackContainer.style.pointerEvents = \"none\";\n                this._loopEditor.container.style.opacity = \"0.5\";\n                this._instrumentSettingsArea.style.pointerEvents = \"none\";\n                this._instrumentSettingsArea.style.opacity = \"0.5\";\n                this._menuArea.style.pointerEvents = \"none\";\n                this._menuArea.style.opacity = \"0.5\";\n                this._songSettingsArea.style.pointerEvents = \"none\";\n                this._songSettingsArea.style.opacity = \"0.5\";\n            } else if (this._doc.synth.playing) {\n                this._pauseButton.style.display = \"\";\n            } else if (this._doc.prefs.showRecordButton) {\n                this._playButton.style.display = \"\";\n                this._recordButton.style.display = \"\";\n                this._playButton.classList.add(\"shrunk\");\n                this._recordButton.classList.add(\"shrunk\");\n            } else if (this._ctrlHeld) {\n                this._recordButton.style.display = \"\";\n            } else {\n                this._playButton.style.display = \"\";\n            }\n        }\n        window.requestAnimationFrame(this.updatePlayButton);\n    }\n\n    private _onTrackAreaScroll = (event: Event): void => {\n        this._doc.barScrollPos = (this._trackAndMuteContainer.scrollLeft / this._doc.getBarWidth());\n        this._doc.channelScrollPos = (this._trackAndMuteContainer.scrollTop / ChannelRow.patternHeight);\n\t\t//this._doc.notifier.changed();\n\t}\n\n    private _disableCtrlContextMenu = (event: MouseEvent): boolean => {\n        // On a Mac, clicking while holding control opens the right-click context menu.\n        // But in the pattern and track editors I'd rather prevent that and instead allow\n        // custom behaviors such as setting the volume of a note.\n        if (event.ctrlKey) {\n            event.preventDefault();\n            return false;\n        }\n        return true;\n    }\n\n    private _usageCheck(channelIndex: number, instrumentIndex: number): void {\n        var instrumentUsed = false;\n        var patternUsed = false;\n        var modUsed = false;\n        const channel: Channel = this._doc.song.channels[channelIndex];\n\n        if (channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n            for (let modChannelIdx: number = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; modChannelIdx < this._doc.song.channels.length; modChannelIdx++) {\n                const modChannel: Channel = this._doc.song.channels[modChannelIdx];\n                const patternIdx = modChannel.bars[this._doc.bar];\n                if (patternIdx > 0) {\n                    const modInstrumentIdx: number = modChannel.patterns[patternIdx - 1].instruments[0];\n                    const modInstrument: Instrument = modChannel.instruments[modInstrumentIdx];\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        if (modInstrument.modChannels[mod] == channelIndex && (modInstrument.modInstruments[mod] == instrumentIndex || modInstrument.modInstruments[mod] >= channel.instruments.length)) {\n                            modUsed = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        let lowestSelX: number = Math.min(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);\n        let highestSelX: number = Math.max(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);\n        let lowestSelY: number = Math.min(this._doc.selection.boxSelectionY0, this._doc.selection.boxSelectionY1);\n        let highestSelY: number = Math.max(this._doc.selection.boxSelectionY0, this._doc.selection.boxSelectionY1);\n\n        if (channel.bars[this._doc.bar] != 0) {\n            for (let i: number = 0; i < this._doc.song.barCount; i++) {\n                // Check for this exact bar in another place, but only count it if it's not within the selection\n                if (channel.bars[i] == channel.bars[this._doc.bar] && i != this._doc.bar &&\n                    (i < lowestSelX || i > highestSelX || this._doc.channel < lowestSelY || this._doc.channel > highestSelY)) {\n\n                    patternUsed = true;\n                    i = this._doc.song.barCount;\n                }\n            }\n        }\n\n        for (let i: number = 0; i < this._doc.song.barCount; i++) {\n            // Check for this exact instrument in another place, but only count it if it's not within the selection\n            if (channel.bars[i] != 0 && channel.bars[i] != channel.bars[this._doc.bar] &&\n                channel.patterns[channel.bars[i] - 1].instruments.includes(instrumentIndex) && i != this._doc.bar &&\n                (i < lowestSelX || i > highestSelX || this._doc.channel < lowestSelY || this._doc.channel > highestSelY)) {\n\n                instrumentUsed = true;\n                i = this._doc.song.barCount;\n            }\n        }\n\n        if (patternUsed) {\n            this._usedPatternIndicator.style.setProperty(\"fill\", ColorConfig.indicatorPrimary);\n            this.patternUsed = true;\n        }\n        else {\n            this._usedPatternIndicator.style.setProperty(\"fill\", ColorConfig.indicatorSecondary);\n            this.patternUsed = false;\n        }\n        if (instrumentUsed) {\n            this._usedInstrumentIndicator.style.setProperty(\"fill\", ColorConfig.indicatorPrimary);\n        }\n        else {\n            this._usedInstrumentIndicator.style.setProperty(\"fill\", ColorConfig.indicatorSecondary);\n        }\n        if (modUsed) {\n            this._jumpToModIndicator.style.setProperty(\"display\", \"\");\n            this._jumpToModIndicator.style.setProperty(\"fill\", ColorConfig.indicatorPrimary);\n            this._jumpToModIndicator.classList.add(\"modTarget\");\n        }\n        else if (channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n            this._jumpToModIndicator.style.setProperty(\"display\", \"\");\n            this._jumpToModIndicator.style.setProperty(\"fill\", ColorConfig.indicatorSecondary);\n            this._jumpToModIndicator.classList.remove(\"modTarget\");\n        } else {\n            this._jumpToModIndicator.style.setProperty(\"display\", \"none\");\n        }\n\n    }\n\n    private _tempoStepperCaptureNumberKeys = (event: KeyboardEvent): void => {\n        // When the number input is in focus, allow some keyboard events to\n        // edit the input without accidentally editing the song otherwise.\n        switch (event.keyCode) {\n            case 8: // backspace/delete\n            case 13: // enter/return\n            case 38: // up\n            case 40: // down\n            case 37: // left\n            case 39: // right\n            case 48: // 0\n            case 49: // 1\n            case 50: // 2\n            case 51: // 3\n            case 52: // 4\n            case 53: // 5\n            case 54: // 6\n            case 55: // 7\n            case 56: // 8\n            case 57: // 9\n                event.stopPropagation();\n                break;\n        }\n    }\n\n    private _whenKeyPressed = (event: KeyboardEvent): void => {\n        this._ctrlHeld = event.ctrlKey;\n        this._shiftHeld = event.shiftKey;\n\n        if (this.prompt) {\n            if (this.prompt instanceof CustomChipPrompt || this.prompt instanceof LimiterPrompt || this.prompt instanceof CustomFilterPrompt) {\n                this.prompt.whenKeyPressed(event);\n            }\n            if (event.keyCode == 27) { // ESC key\n                // close prompt.\n                this._doc.undo();\n            }\n            return;\n        }\n\n        // Defer to actively editing song title, channel name, or mod label\n        if (document.activeElement == this._songTitleInputBox.input || this._patternEditor.editingModLabel || document.activeElement == this._muteEditor._channelNameInput.input) {\n            // Enter/esc returns focus to form\n            if (event.keyCode == 13 || event.keyCode == 27) {\n                this.mainLayer.focus();\n                this._patternEditor.stopEditingModLabel(event.keyCode == 27);\n            }\n\n            return;\n        }\n\n        // Defer to actively editing volume/pan rows\n        if (document.activeElement == this._panSliderInputBox || document.activeElement == this._pwmSliderInputBox || document.activeElement == this._detuneSliderInputBox || document.activeElement == this._instrumentVolumeSliderInputBox) {\n            // Enter/esc returns focus to form\n            if (event.keyCode == 13 || event.keyCode == 27) {\n                this.mainLayer.focus();\n            }\n\n            return;\n        }\n\n        if (this._doc.synth.recording) {\n            // The only valid keyboard interactions when recording are playing notes or pressing space OR P to stop.\n            if (!event.ctrlKey && !event.metaKey) {\n                this._keyboardLayout.handleKeyEvent(event, true);\n            }\n            if (event.keyCode == 32) { // space\n                this._toggleRecord();\n                event.preventDefault();\n                this.refocusStage();\n            } else if (event.keyCode == 80 && (event.ctrlKey || event.metaKey)) { // p\n                this._toggleRecord();\n                event.preventDefault();\n                this.refocusStage();\n            }\n            return;\n        }\n\n        const needControlForShortcuts: boolean = (this._doc.prefs.pressControlForShortcuts != event.getModifierState(\"CapsLock\"));\n        const canPlayNotes: boolean = (!event.ctrlKey && !event.metaKey && needControlForShortcuts);\n        if (canPlayNotes) this._keyboardLayout.handleKeyEvent(event, true);\n\n        //this._trackEditor.onKeyPressed(event);\n        switch (event.keyCode) {\n            case 27: // ESC key\n                if (!event.ctrlKey && !event.metaKey) {\n                    new ChangePatternSelection(this._doc, 0, 0);\n                    this._doc.selection.resetBoxSelection();\n                }\n                break;\n            case 16: // Shift\n                this._patternEditor.shiftMode = true;\n                break;\n            case 17: // Ctrl\n                this._patternEditor.controlMode = true;\n                break;\n            case 32: // space\n                if (event.ctrlKey) {\n                    this._toggleRecord();\n                } else if (event.shiftKey) {\n                    // Jump to mouse\n                    if (this._trackEditor.movePlayheadToMouse() || this._patternEditor.movePlayheadToMouse()) {\n                        if (!this._doc.synth.playing) this._doc.performance.play();\n                    }\n                    if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {\n                        this._doc.synth.loopBarStart = -1;\n                        this._doc.synth.loopBarEnd = -1;\n                        this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n                    }\n                } else {\n                    this.togglePlay();\n                }\n                event.preventDefault();\n                this.refocusStage();\n                break;\n            case 80: // p\n                if (canPlayNotes) break;\n                if (event.ctrlKey || event.metaKey) {\n                    this._toggleRecord();\n                    this._doc.synth.loopBarStart = -1;\n                    this._doc.synth.loopBarEnd = -1;\n                    this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n\n                    event.preventDefault();\n                    this.refocusStage();\n                }\n                break;\n            case 90: // z\n                if (canPlayNotes) break;\n                if (event.shiftKey) {\n                    this._doc.redo();\n                } else {\n                    this._doc.undo();\n                }\n                event.preventDefault();\n                break;\n            case 89: // y\n                if (canPlayNotes) break;\n                this._doc.redo();\n                event.preventDefault();\n                break;\n            case 66: // b\n                if (canPlayNotes) break;\n\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    const leftSel = Math.min(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);\n                    const rightSel = Math.max(this._doc.selection.boxSelectionX0, this._doc.selection.boxSelectionX1);\n                    if ((leftSel < this._doc.synth.loopBarStart || this._doc.synth.loopBarStart == -1)\n                        || (rightSel > this._doc.synth.loopBarEnd || this._doc.synth.loopBarEnd == -1)\n                    ) {\n                        this._doc.synth.loopBarStart = leftSel;\n                        this._doc.synth.loopBarEnd = rightSel;\n\n                        if (!this._doc.synth.playing) {\n                            this._doc.synth.snapToBar();\n                            this._doc.performance.play();\n                        }\n                    }\n                    else {\n                        this._doc.synth.loopBarStart = -1;\n                        this._doc.synth.loopBarEnd = -1;\n                    }\n\n                    // Pressed while viewing a different bar than the current synth playhead.\n                    if (this._doc.bar != Math.floor(this._doc.synth.playhead) && this._doc.synth.loopBarStart != -1) {\n\n                        this._doc.synth.goToBar(this._doc.bar);\n                        this._doc.synth.snapToBar();\n                        this._doc.synth.initModFilters(this._doc.song);\n                        this._doc.synth.computeLatestModValues();\n                        if (this._doc.prefs.autoFollow) {\n                            this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));\n                        }\n\n                    }\n\n                    this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n\n\n                    event.preventDefault();\n                }\n                break;\n            case 67: // c\n                if (canPlayNotes) break;\n                if (event.shiftKey) {\n                    this._copyInstrument();\n                } else {\n                    this._doc.selection.copy();\n                }\n                this._doc.selection.resetBoxSelection();\n                this._doc.selection.selectionUpdated();\n                event.preventDefault();\n                break;\n            case 13: // enter/return\n                this._doc.synth.loopBarStart = -1;\n                this._doc.synth.loopBarEnd = -1;\n                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n\n                if (event.ctrlKey || event.metaKey) {\n                    this._doc.selection.insertChannel();\n                } else {\n                    this._doc.selection.insertBars();\n                }\n                event.preventDefault();\n                break;\n            case 8: // backspace/delete\n                this._doc.synth.loopBarStart = -1;\n                this._doc.synth.loopBarEnd = -1;\n                this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n\n                if (event.ctrlKey || event.metaKey) {\n                    this._doc.selection.deleteChannel();\n                } else {\n                    this._doc.selection.deleteBars();\n                }\n                this._barScrollBar.animatePlayhead();\n                event.preventDefault();\n                break;\n            case 65: // a\n                if (canPlayNotes) break;\n                if (event.shiftKey) {\n                    this._doc.selection.selectChannel();\n                } else {\n                    this._doc.selection.selectAll();\n                }\n                event.preventDefault();\n                break;\n            case 68: // d\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    this._doc.selection.duplicatePatterns();\n                    event.preventDefault();\n                }\n                break;\n            case 69: // e (+shift: eq filter settings)\n                if (event.shiftKey) {\n                    const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n                    if (!instrument.eqFilterType && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)\n                        this._openPrompt(\"customEQFilterSettings\");\n                }\n                break;\n            case 70: // f\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n\n                    this._doc.synth.loopBarStart = -1;\n                    this._doc.synth.loopBarEnd = -1;\n                    this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n\n                    this._doc.synth.snapToStart();\n                    this._doc.synth.initModFilters(this._doc.song);\n                    this._doc.synth.computeLatestModValues();\n                    if (this._doc.prefs.autoFollow) {\n                        this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));\n                    }\n                    event.preventDefault();\n                }\n                break;\n            case 72: // h\n                if (canPlayNotes) break;\n\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n\n                    this._doc.synth.goToBar(this._doc.bar);\n                    this._doc.synth.snapToBar();\n                    this._doc.synth.initModFilters(this._doc.song);\n                    this._doc.synth.computeLatestModValues();\n\n                    if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {\n                        this._doc.synth.loopBarStart = -1;\n                        this._doc.synth.loopBarEnd = -1;\n                        this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n                    }\n\n                    if (this._doc.prefs.autoFollow) {\n                        this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));\n                    }\n                    event.preventDefault();\n                }\n                break;\n            case 74: // j\n                if (canPlayNotes) break;\n                // Ctrl Alt Shift J: Jummbify - set all prefs to my preferred ones lol\n                if (event.shiftKey && event.ctrlKey && event.altKey) {\n                    this._doc.prefs.autoPlay = false;\n                    this._doc.prefs.autoFollow = false;\n                    this._doc.prefs.enableNotePreview = true;\n                    this._doc.prefs.showFifth = true;\n                    this._doc.prefs.notesOutsideScale = false;\n                    this._doc.prefs.defaultScale = 0;\n                    this._doc.prefs.showLetters = true;\n                    this._doc.prefs.showChannels = true;\n                    this._doc.prefs.showScrollBar = true;\n                    this._doc.prefs.alwaysFineNoteVol = false;\n                    this._doc.prefs.enableChannelMuting = true;\n                    this._doc.prefs.displayBrowserUrl = true;\n                    this._doc.prefs.displayVolumeBar = true;\n                    this._doc.prefs.layout = \"wide\";\n                    this._doc.prefs.visibleOctaves = 5;\n                    this._doc.prefs.save();\n                    event.preventDefault();\n                    location.reload();\n                }\n                break;\n            case 76: // l\n                if (canPlayNotes) break;\n                if (event.shiftKey) {\n                    this._openPrompt(\"limiterSettings\");\n                }\n                else {\n                    this._openPrompt(\"barCount\");\n                }\n                break;\n            case 77: // m\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    if (this._doc.prefs.enableChannelMuting) {\n                        this._doc.selection.muteChannels(event.shiftKey);\n                        event.preventDefault();\n                    }\n                }\n                break;\n            case 78: // n\n                if (canPlayNotes) break;\n                // Find lowest-index unused pattern for current channel\n                // Ctrl+n - lowest-index completely empty pattern\n                // Shift+n - note filter settings\n\n                const group: ChangeGroup = new ChangeGroup();\n\n                if (event.shiftKey) {\n                    const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n                    if (effectsIncludeNoteFilter(instrument.effects) && !instrument.noteFilterType && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)\n                        this._openPrompt(\"customNoteFilterSettings\");\n                    break;\n                }\n                else if (event.ctrlKey) {\n                    let nextEmpty: number = 0;\n                    while (nextEmpty < this._doc.song.patternsPerChannel && this._doc.song.channels[this._doc.channel].patterns[nextEmpty].notes.length > 0)\n                        nextEmpty++;\n\n                    nextEmpty++; // The next empty pattern is actually the one after the found one\n\n                    // Can't set anything if we're at the absolute limit.\n                    if (nextEmpty <= Config.barCountMax) {\n\n                        if (nextEmpty > this._doc.song.patternsPerChannel) {\n\n                            // Add extra empty pattern, if all the rest have something in them.\n                            group.append(new ChangePatternsPerChannel(this._doc, nextEmpty));\n                        }\n\n                        // Change pattern number to lowest-index unused\n                        group.append(new ChangePatternNumbers(this._doc, nextEmpty, this._doc.bar, this._doc.channel, 1, 1));\n\n                        // Auto set the used instruments to the ones you were most recently viewing.\n                        if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)\n                        {\n                           \n                                this._doc.viewedInstrument[this._doc.channel] = this._doc.recentPatternInstruments[this._doc.channel][0];\n                        }\n                        group.append(new ChangeSetPatternInstruments(this._doc, this._doc.channel, this._doc.recentPatternInstruments[this._doc.channel],  this._doc.song.channels[this._doc.channel].patterns[nextEmpty-1]));\n                        \n                    }\n                }\n                else {\n                    let nextUnused: number = 1;\n                    while (this._doc.song.channels[this._doc.channel].bars.indexOf(nextUnused) != -1\n                        && nextUnused <= this._doc.song.patternsPerChannel)\n                        nextUnused++;\n\n                    // Can't set anything if we're at the absolute limit.\n                    if (nextUnused <= Config.barCountMax) {\n\n                        if (nextUnused > this._doc.song.patternsPerChannel) {\n\n                            // Add extra empty pattern, if all the rest are used.\n                            group.append(new ChangePatternsPerChannel(this._doc, nextUnused));\n                        }\n\n                        // Change pattern number to lowest-index unused\n                        group.append(new ChangePatternNumbers(this._doc, nextUnused, this._doc.bar, this._doc.channel, 1, 1));\n                        \n                        // Auto set the used instruments to the ones you were most recently viewing.\n                        if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)\n                        {\n                                this._doc.viewedInstrument[this._doc.channel] = this._doc.recentPatternInstruments[this._doc.channel][0];\n                        }\n                        group.append(new ChangeSetPatternInstruments(this._doc, this._doc.channel, this._doc.recentPatternInstruments[this._doc.channel],  this._doc.song.channels[this._doc.channel].patterns[nextUnused-1]));\n\n                    }\n                }\n\n                this._doc.record(group);\n\n                event.preventDefault();\n                break;\n            case 81: // q\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    this._openPrompt(\"channelSettings\");\n                    event.preventDefault();\n                }\n                break;\n            case 83: // s\n                if (canPlayNotes) break;\n                if (event.ctrlKey || event.metaKey) {\n                    this._openPrompt(\"export\");\n                    event.preventDefault();\n                } else {\n                    if (this._doc.prefs.enableChannelMuting) {\n                        // JummBox deviation: I like shift+s as just another mute toggle personally.\n                        // Easier to reach than M and the shift+s invert functionality I am overwriting could be \n                        // obtained with M anyway. Useability-wise you very often want to 'add' channels on to a solo as you work.\n                        if (event.shiftKey) {\n                            this._doc.selection.muteChannels(false);\n                        } else {\n                            this._doc.selection.soloChannels(false);\n                        }\n                        event.preventDefault();\n                    }\n                }\n                break;\n            case 79: // o\n                if (canPlayNotes) break;\n                if (event.ctrlKey || event.metaKey) {\n                    this._openPrompt(\"import\");\n                    event.preventDefault();\n                }\n                break;\n            case 86: // v\n                if (canPlayNotes) break;\n                if ((event.ctrlKey || event.metaKey) && event.shiftKey && !needControlForShortcuts) {\n                    this._doc.selection.pasteNumbers();\n                } else if (event.shiftKey) {\n                    this._pasteInstrument();\n                } else {\n                    this._doc.selection.pasteNotes();\n                }\n                event.preventDefault();\n                break;\n            case 87: // w\n                if (canPlayNotes) break;\n                this._openPrompt(\"moveNotesSideways\");\n                break;\n            case 73: // i\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey) && event.shiftKey) {\n                    // Copy the current instrument as a preset to the clipboard.\n                    const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n                    const instrumentObject: any = instrument.toJsonObject();\n                    delete instrumentObject[\"preset\"];\n                    // Volume and the panning effect are not included in presets.\n                    delete instrumentObject[\"volume\"];\n                    delete instrumentObject[\"pan\"];\n                    const panningEffectIndex: number = instrumentObject[\"effects\"].indexOf(Config.effectNames[EffectType.panning]);\n                    if (panningEffectIndex != -1) instrumentObject[\"effects\"].splice(panningEffectIndex, 1);\n                    for (let i: number = 0; i < instrumentObject[\"envelopes\"].length; i++) {\n                        const envelope: any = instrumentObject[\"envelopes\"][i];\n                        // If there are any envelopes targeting panning or none, remove those too.\n                        if (envelope[\"target\"] == \"panning\" || envelope[\"target\"] == \"none\" || envelope[\"envelope\"] == \"none\") {\n                            instrumentObject[\"envelopes\"].splice(i, 1);\n                            i--;\n                        }\n                    }\n                    this._copyTextToClipboard(JSON.stringify(instrumentObject));\n                    event.preventDefault();\n                }\n                break;\n            case 82: // r\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    if (event.shiftKey) {\n                        this._randomGenerated();\n                    } else {\n                        this._randomPreset();\n                    }\n                    event.preventDefault();\n                }\n                break;\n            case 219: // left brace\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    this._doc.synth.goToPrevBar();\n                    this._doc.synth.initModFilters(this._doc.song);\n                    this._doc.synth.computeLatestModValues();\n                    if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {\n                        this._doc.synth.loopBarStart = -1;\n                        this._doc.synth.loopBarEnd = -1;\n                        this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n                    }\n\n                    if (this._doc.prefs.autoFollow) {\n                        this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));\n                    }\n                    event.preventDefault();\n                }\n                break;\n            case 221: // right brace\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    this._doc.synth.goToNextBar();\n                    this._doc.synth.initModFilters(this._doc.song);\n                    this._doc.synth.computeLatestModValues();\n                    if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {\n                        this._doc.synth.loopBarStart = -1;\n                        this._doc.synth.loopBarEnd = -1;\n                        this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n                    }\n\n                    if (this._doc.prefs.autoFollow) {\n                        this._doc.selection.setChannelBar(this._doc.channel, Math.floor(this._doc.synth.playhead));\n                    }\n                    event.preventDefault();\n                }\n                break;\n            case 189: // -\n            case 173: // Firefox -\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    this._doc.selection.transpose(false, event.shiftKey);\n                    event.preventDefault();\n                }\n                break;\n            case 187: // +\n            case 61: // Firefox +\n            case 171: // Some users have this as +? Hmm.\n                if (canPlayNotes) break;\n                if (needControlForShortcuts == (event.ctrlKey || event.metaKey)) {\n                    this._doc.selection.transpose(true, event.shiftKey);\n                    event.preventDefault();\n                }\n                break;\n            case 38: // up\n                if (event.ctrlKey || event.metaKey) {\n                    this._doc.selection.swapChannels(-1);\n                } else if (event.shiftKey) {\n                    this._doc.selection.boxSelectionY1 = Math.max(0, this._doc.selection.boxSelectionY1 - 1);\n                    this._doc.selection.scrollToEndOfSelection();\n                    this._doc.selection.selectionUpdated();\n                } else {\n                    this._doc.selection.setChannelBar((this._doc.channel - 1 + this._doc.song.getChannelCount()) % this._doc.song.getChannelCount(), this._doc.bar);\n                    this._doc.selection.resetBoxSelection();\n                }\n                event.preventDefault();\n                break;\n            case 40: // down\n                if (event.ctrlKey || event.metaKey) {\n                    this._doc.selection.swapChannels(1);\n                } else if (event.shiftKey) {\n                    this._doc.selection.boxSelectionY1 = Math.min(this._doc.song.getChannelCount() - 1, this._doc.selection.boxSelectionY1 + 1);\n                    this._doc.selection.scrollToEndOfSelection();\n                    this._doc.selection.selectionUpdated();\n                } else {\n                    this._doc.selection.setChannelBar((this._doc.channel + 1) % this._doc.song.getChannelCount(), this._doc.bar);\n                    this._doc.selection.resetBoxSelection();\n                }\n                event.preventDefault();\n                break;\n            case 37: // left\n                if (event.shiftKey) {\n                    this._doc.selection.boxSelectionX1 = Math.max(0, this._doc.selection.boxSelectionX1 - 1);\n                    this._doc.selection.scrollToEndOfSelection();\n                    this._doc.selection.selectionUpdated();\n                } else {\n                    this._doc.selection.setChannelBar(this._doc.channel, (this._doc.bar + this._doc.song.barCount - 1) % this._doc.song.barCount);\n                    this._doc.selection.resetBoxSelection();\n                }\n                event.preventDefault();\n                break;\n            case 39: // right\n                if (event.shiftKey) {\n                    this._doc.selection.boxSelectionX1 = Math.min(this._doc.song.barCount - 1, this._doc.selection.boxSelectionX1 + 1);\n                    this._doc.selection.scrollToEndOfSelection();\n                    this._doc.selection.selectionUpdated();\n                } else {\n                    this._doc.selection.setChannelBar(this._doc.channel, (this._doc.bar + 1) % this._doc.song.barCount);\n                    this._doc.selection.resetBoxSelection();\n                }\n                event.preventDefault();\n                break;\n            case 46: // Delete\n                this._doc.selection.digits = \"\";\n                this._doc.selection.nextDigit(\"0\", false, false);\n                break;\n            case 48: // 0\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"0\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 49: // 1\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"1\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 50: // 2\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"2\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 51: // 3\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"3\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 52: // 4\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"4\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 53: // 5\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"5\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 54: // 6\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"6\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 55: // 7\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"7\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 56: // 8\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"8\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            case 57: // 9\n                if (canPlayNotes) break;\n                this._doc.selection.nextDigit(\"9\", needControlForShortcuts != (event.shiftKey || event.ctrlKey || event.metaKey), event.altKey);\n                this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], this._doc.getCurrentInstrument(), ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n                event.preventDefault();\n                break;\n            default:\n                this._doc.selection.digits = \"\";\n                this._doc.selection.instrumentDigits = \"\";\n                break;\n        }\n\n        if (canPlayNotes) {\n            this._doc.selection.digits = \"\";\n            this._doc.selection.instrumentDigits = \"\";\n        }\n    }\n\n\n    private _whenKeyReleased = (event: KeyboardEvent): void => {\n        this._muteEditor.onKeyUp(event);\n        if (!event.ctrlKey) { // Ctrl\n            this._patternEditor.controlMode = false;\n        }\n        if (!event.shiftKey) { // Shift\n            this._patternEditor.shiftMode = false;\n        }\n\n        this._ctrlHeld = event.ctrlKey;\n        this._shiftHeld = event.shiftKey;\n        // Release live pitches regardless of control or caps lock so that any pitches played before will get released even if the modifier keys changed.\n        this._keyboardLayout.handleKeyEvent(event, false);\n    }\n\n    private _copyTextToClipboard(text: string): void {\n        // Set as any to allow compilation without clipboard types (since, uh, I didn't write this bit and don't know the proper types library) -jummbus\n        let nav: any;\n        nav = navigator;\n\n        if (nav.clipboard && nav.clipboard.writeText) {\n            nav.clipboard.writeText(text).catch(() => {\n                window.prompt(\"Copy to clipboard:\", text);\n            });\n            return;\n        }\n        const textField: HTMLTextAreaElement = document.createElement(\"textarea\");\n        textField.textContent = text;\n        document.body.appendChild(textField);\n        textField.select();\n        const succeeded: boolean = document.execCommand(\"copy\");\n        textField.remove();\n        this.refocusStage();\n        if (!succeeded) window.prompt(\"Copy this:\", text);\n    }\n\n    private _whenPrevBarPressed = (): void => {\n        this._doc.synth.goToPrevBar();\n        if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {\n            this._doc.synth.loopBarStart = -1;\n            this._doc.synth.loopBarEnd = -1;\n            this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n        }\n        this._barScrollBar.animatePlayhead();\n    }\n\n    private _whenNextBarPressed = (): void => {\n        this._doc.synth.goToNextBar();\n        if (Math.floor(this._doc.synth.playhead) < this._doc.synth.loopBarStart || Math.floor(this._doc.synth.playhead) > this._doc.synth.loopBarEnd) {\n            this._doc.synth.loopBarStart = -1;\n            this._doc.synth.loopBarEnd = -1;\n            this._loopEditor.setLoopAt(this._doc.synth.loopBarStart, this._doc.synth.loopBarEnd);\n        }\n        this._barScrollBar.animatePlayhead();\n    }\n\n    public togglePlay = (): void => {\n        if (this._doc.synth.playing) {\n            this._doc.performance.pause();\n            this.outVolumeHistoricCap = 0;\n        } else {\n            this._doc.synth.snapToBar();\n            this._doc.performance.play();\n        }\n    }\n\n    private _toggleRecord = (): void => {\n        if (this._doc.synth.playing) {\n            this._doc.performance.pause();\n        } else {\n            this._doc.performance.record();\n        }\n    }\n\n    public _animate = (): void => {\n        // Need to update mods once more to clear the slider display\n        this._modSliderUpdate();\n        // Same for volume display\n        if (this._doc.prefs.displayVolumeBar) {\n            this._volumeUpdate();\n        }\n        // ...and barscrollbar playhead\n        this._barScrollBar.animatePlayhead();\n        // ...and filters\n        if (this._doc.synth.isFilterModActive(false, this._doc.channel, this._doc.getCurrentInstrument())) {\n            this._eqFilterEditor.render(true, this._ctrlHeld || this._shiftHeld);\n        }\n        if (this._doc.synth.isFilterModActive(true, this._doc.channel, this._doc.getCurrentInstrument())) {\n            this._noteFilterEditor.render(true, this._ctrlHeld || this._shiftHeld);\n        }\n\n\n        window.requestAnimationFrame(this._animate);\n    }\n\n    public _volumeUpdate = (): void => {\n        this.outVolumeHistoricTimer--;\n        if (this.outVolumeHistoricTimer <= 0) {\n            this.outVolumeHistoricCap -= 0.03;\n        }\n        if (this._doc.song.outVolumeCap > this.outVolumeHistoricCap) {\n            this.outVolumeHistoricCap = this._doc.song.outVolumeCap;\n            this.outVolumeHistoricTimer = 50;\n        }\n\n        if (this._doc.song.outVolumeCap != this.lastOutVolumeCap) {\n            this.lastOutVolumeCap = this._doc.song.outVolumeCap;\n            this._animateVolume(this._doc.song.outVolumeCap, this.outVolumeHistoricCap);\n        }\n    }\n\n    private _animateVolume(outVolumeCap: number, historicOutCap: number): void {\n        this._outVolumeBar.setAttribute(\"width\", \"\" + Math.min(144, outVolumeCap * 144));\n        this._outVolumeCap.setAttribute(\"x\", \"\" + (8 + Math.min(144, historicOutCap * 144)));\n    }\n\n    private _setVolumeSlider = (): void => {\n        // Song volume slider doesn't use a change, but it can still be modulated.\n        if ((this._ctrlHeld || this._shiftHeld) && this._doc.synth.playing) {\n            const prevVol = this._doc.prefs.volume;\n            // The slider only goes to 75, but the mod is 0-100 and in this instance we're using the value for a mod set.\n            this._doc.prefs.volume = Math.round(Number(this._volumeSlider.input.value) * 4 / 3);\n            const changedPatterns = this._patternEditor.setModSettingsForChange(null, this);\n            const useVol: number = this._doc.prefs.volume;\n            window.clearTimeout(this._modRecTimeout);\n            this._modRecTimeout = window.setTimeout(() => { this._recordVolumeSlider(useVol); }, 10);\n            this._doc.recordingModulators = true;\n\n            this._doc.prefs.volume = prevVol;\n            this._volumeSlider.updateValue(this._doc.prefs.volume);\n\n            if (changedPatterns)\n                this._trackEditor.render();\n            }\n        else {\n            this._doc.setVolume(Number(this._volumeSlider.input.value));\n            if (this._doc.recordingModulators) {\n                this._doc.recordingModulators = false;\n                // A dummy change that pushes history state.\n                this._doc.record(new ChangeHoldingModRecording(this._doc, null, null, null));\n            }\n        }\n    }\n\n    private _recordVolumeSlider(useVol: number): void {\n        // Song volume slider doesn't use a change, but it can still be modulated.\n        if ((this._ctrlHeld || this._shiftHeld) && this._doc.synth.playing) {\n            const prevVol = this._doc.prefs.volume;\n            // The slider only goes to 75, but the mod is 0-100 and in this instance we're using the value for a mod set.\n            this._doc.prefs.volume = useVol;\n            this._patternEditor.setModSettingsForChange(null, this);\n            window.clearTimeout(this._modRecTimeout);\n            this._modRecTimeout = window.setTimeout(() => { this._recordVolumeSlider(useVol); }, 10);\n            this._doc.recordingModulators = true;\n\n            this._doc.prefs.volume = prevVol;\n            this._volumeSlider.updateValue(this._doc.prefs.volume);\n        }\n        else {\n            this._doc.setVolume(Number(this._volumeSlider.input.value));\n            if (this._doc.recordingModulators) {\n                this._doc.recordingModulators = false;\n                // A dummy change that pushes history state.\n                this._doc.record(new ChangeHoldingModRecording(this._doc, null, null, null));\n            }\n        }\n    }\n\n    private _copyInstrument = (): void => {\n        const channel: Channel = this._doc.song.channels[this._doc.channel];\n        const instrument: Instrument = channel.instruments[this._doc.getCurrentInstrument()];\n        const instrumentCopy: any = instrument.toJsonObject();\n        instrumentCopy[\"isDrum\"] = this._doc.song.getChannelIsNoise(this._doc.channel);\n        instrumentCopy[\"isMod\"] = this._doc.song.getChannelIsMod(this._doc.channel);\n        window.localStorage.setItem(\"instrumentCopy\", JSON.stringify(instrumentCopy));\n        this.refocusStage();\n    }\n\n    private _pasteInstrument = (): void => {\n        const channel: Channel = this._doc.song.channels[this._doc.channel];\n        const instrument: Instrument = channel.instruments[this._doc.getCurrentInstrument()];\n        const instrumentCopy: any = JSON.parse(String(window.localStorage.getItem(\"instrumentCopy\")));\n        if (instrumentCopy != null && instrumentCopy[\"isDrum\"] == this._doc.song.getChannelIsNoise(this._doc.channel) && instrumentCopy[\"isMod\"] == this._doc.song.getChannelIsMod(this._doc.channel)) {\n            this._doc.record(new ChangePasteInstrument(this._doc, instrument, instrumentCopy));\n        }\n        this.refocusStage();\n    }\n\n    private _switchEQFilterType(toSimple: boolean) {\n        const channel: Channel = this._doc.song.channels[this._doc.channel];\n        const instrument: Instrument = channel.instruments[this._doc.getCurrentInstrument()];\n        if (instrument.eqFilterType != toSimple) {\n            this._doc.record(new ChangeEQFilterType(this._doc, instrument, toSimple));\n        }\n    }\n\n    private _switchNoteFilterType(toSimple: boolean) {\n        const channel: Channel = this._doc.song.channels[this._doc.channel];\n        const instrument: Instrument = channel.instruments[this._doc.getCurrentInstrument()];\n        if (instrument.noteFilterType != toSimple) {\n            this._doc.record(new ChangeNoteFilterType(this._doc, instrument, toSimple));\n        }\n    }\n\n    private _randomPreset(): void {\n        const isNoise: boolean = this._doc.song.getChannelIsNoise(this._doc.channel);\n        this._doc.record(new ChangePreset(this._doc, pickRandomPresetValue(isNoise)));\n    }\n\n    private _randomGenerated(): void {\n        this._doc.record(new ChangeRandomGeneratedInstrument(this._doc));\n    }\n\n\n    private _whenSetTempo = (): void => {\n        this._doc.record(new ChangeTempo(this._doc, -1, parseInt(this._tempoStepper.value) | 0));\n    }\n\n    private _whenSetScale = (): void => {\n        if (isNaN(<number><unknown>this._scaleSelect.value)) {\n            switch (this._scaleSelect.value) {\n                case \"forceScale\":\n                    this._doc.selection.forceScale();\n                    break;\n            }\n            this._doc.notifier.changed();\n        } else {\n            this._doc.record(new ChangeScale(this._doc, this._scaleSelect.selectedIndex));\n        }\n    }\n\n    private _whenSetKey = (): void => {\n        if (isNaN(<number><unknown>this._keySelect.value)) {\n            switch (this._keySelect.value) {\n                case \"detectKey\":\n                    break;\n            }\n            this._doc.notifier.changed();\n        } else {\n            this._doc.record(new ChangeKey(this._doc, createKeys(this._doc.song.edo).length - 1 - this._keySelect.selectedIndex));\n        }\n    }\n\n    private _whenSetRhythm = (): void => {\n        if (isNaN(<number><unknown>this._rhythmSelect.value)) {\n            switch (this._rhythmSelect.value) {\n                case \"forceRhythm\":\n                    this._doc.selection.forceRhythm();\n                    break;\n            }\n            this._doc.notifier.changed();\n        } else {\n            this._doc.record(new ChangeRhythm(this._doc, this._rhythmSelect.selectedIndex));\n        }\n    }\n\n    public _refocus = (): void => {\n        // Waits a bit because select2 \"steals\" back focus even after the close event fires.\n        var selfRef = this;\n        setTimeout(function () { selfRef.mainLayer.focus(); }, 20);\n    }\n\n    public _whenSetPitchedPreset = (): void => {\n        this._setPreset($('#pitchPresetSelect').val() + \"\");\n    }\n\n    public _whenSetDrumPreset = (): void => {\n        this._setPreset($('#drumPresetSelect').val() + \"\");\n    }\n\n    private _setPreset(preset: string): void {\n        if (isNaN(<number><unknown>preset)) {\n            switch (preset) {\n                case \"copyInstrument\":\n                    this._copyInstrument();\n                    break;\n                case \"pasteInstrument\":\n                    this._pasteInstrument();\n                    break;\n                case \"randomPreset\":\n                    this._randomPreset();\n                    break;\n                case \"randomGenerated\":\n                    this._randomGenerated();\n                    break;\n            }\n            this._doc.notifier.changed();\n        } else {\n            this._doc.record(new ChangePreset(this._doc, parseInt(preset)));\n        }\n    }\n\n    private _whenSetFeedbackType = (): void => {\n        this._doc.record(new ChangeFeedbackType(this._doc, this._feedbackTypeSelect.selectedIndex));\n    }\n\n\n    private _whenSetAlgorithm = (): void => {\n        this._doc.record(new ChangeAlgorithm(this._doc, this._algorithmSelect.selectedIndex));\n    }\n\n    private _whenSelectInstrument = (event: MouseEvent): void => {\n        if (event.target == this._instrumentAddButton) {\n            this._doc.record(new ChangeAddChannelInstrument(this._doc));\n        } else if (event.target == this._instrumentRemoveButton) {\n            this._doc.record(new ChangeRemoveChannelInstrument(this._doc));\n        } else {\n            const index: number = this._instrumentButtons.indexOf(<any>event.target);\n            if (index != -1) {\n                this._doc.selection.selectInstrument(index);\n            }\n            // Force piano to re-show, if channel is modulator\n            if (this._doc.channel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n                this._piano.forceRender();\n            }\n            this._renderInstrumentBar(this._doc.song.channels[this._doc.channel], index, ColorConfig.getChannelColor(this._doc.song, this._doc.channel));\n        }\n\n        this.refocusStage();\n    }\n\n    private _whenSetModChannel = (mod: number): void => {\n\n        let instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        let previouslyUnset: boolean = (instrument.modulators[mod] == 0 || Config.modulators[instrument.modulators[mod]].forSong);\n\n        this._doc.selection.setModChannel(mod, this._modChannelBoxes[mod].selectedIndex);\n\n        const modChannel: number = Math.max(0, instrument.modChannels[mod]);\n\n        // Check if setting was 'song' or 'none' and is changing to a channel number, in which case suggested instrument to mod will auto-set to the current one.\n        if (this._doc.song.channels[modChannel].instruments.length > 1 && previouslyUnset && this._modChannelBoxes[mod].selectedIndex >= 2) {\n            if (this._doc.song.channels[modChannel].bars[this._doc.bar] > 0) {\n                this._doc.selection.setModInstrument(mod, this._doc.song.channels[modChannel].patterns[this._doc.song.channels[modChannel].bars[this._doc.bar] - 1].instruments[0]);\n            }\n        }\n\n        // Force piano to re-show\n        this._piano.forceRender();\n    }\n\n    private _whenSetModInstrument = (mod: number): void => {\n        this._doc.selection.setModInstrument(mod, this._modInstrumentBoxes[mod].selectedIndex);\n\n        // Force piano to re-show\n        this._piano.forceRender();\n    }\n\n    private _whenSetModSetting = (mod: number, invalidIndex: boolean = false): void => {\n        let text: string = \"none\";\n        if (this._modSetBoxes[mod].selectedIndex != -1) {\n            text = this._modSetBoxes[mod].children[this._modSetBoxes[mod].selectedIndex].textContent as string;\n\n            if (invalidIndex) {\n                // A setting is invalid (not in instrument's effects). It will be the first index. Allow it, but mark it as red.\n                this._modSetBoxes[mod].selectedOptions.item(0)!.style.setProperty(\"color\", \"red\");\n                this._modSetBoxes[mod].classList.add(\"invalidSetting\");\n                this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].invalidModulators[mod] = true;\n            } else {\n                this._modSetBoxes[mod].classList.remove(\"invalidSetting\");\n                this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()].invalidModulators[mod] = false;\n            }\n        }\n        if (!invalidIndex) // Invalid index means a set is actually not occurring, just the same index and a warning.\n            this._doc.selection.setModSetting(mod, text);\n\n        // Force piano to re-show if channel is modulator, as text shown on it needs to update\n        this._piano.forceRender();\n\n    }\n\n    private _whenClickModTarget = (mod: number): void => {\n        if (this._modChannelBoxes[mod].selectedIndex >= 2) {\n            this._doc.selection.setChannelBar(this._modChannelBoxes[mod].selectedIndex - 2, this._doc.bar);\n        }\n    }\n\n    private _whenClickJumpToModTarget = (): void => {\n        const channelIndex: number = this._doc.channel;\n        const instrumentIndex: number = this._doc.getCurrentInstrument();\n        if (channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n            for (let modChannelIdx: number = this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; modChannelIdx < this._doc.song.channels.length; modChannelIdx++) {\n                const modChannel: Channel = this._doc.song.channels[modChannelIdx];\n                const patternIdx = modChannel.bars[this._doc.bar];\n                if (patternIdx > 0) {\n                    const modInstrumentIdx: number = modChannel.patterns[patternIdx - 1].instruments[0];\n                    const modInstrument: Instrument = modChannel.instruments[modInstrumentIdx];\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        if (modInstrument.modChannels[mod] == channelIndex && (modInstrument.modInstruments[mod] == instrumentIndex || modInstrument.modInstruments[mod] >= this._doc.song.channels[channelIndex].instruments.length)) {\n                            this._doc.selection.setChannelBar(modChannelIdx, this._doc.bar);\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private _whenSetModFilter = (mod: number): void => {\n        this._doc.selection.setModFilter(mod, this._modFilterBoxes[mod].selectedIndex);\n    }\n\n    private _whenSetChipWave = (): void => {\n        this._doc.record(new ChangeChipWave(this._doc, this._chipWaveSelect.selectedIndex));\n    }\n\n    private _whenSetNoiseWave = (): void => {\n        this._doc.record(new ChangeNoiseWave(this._doc, this._chipNoiseSelect.selectedIndex));\n    }\n\n\n\n    private _whenSetTransition = (): void => {\n        this._doc.record(new ChangeTransition(this._doc, this._transitionSelect.selectedIndex));\n    }\n\n    private _whenSetEffects = (): void => {\n        const instrument: Instrument = this._doc.song.channels[this._doc.channel].instruments[this._doc.getCurrentInstrument()];\n        const oldValue: number = instrument.effects;\n        const toggleFlag: number = Config.effectOrder[this._effectsSelect.selectedIndex - 1];\n        this._doc.record(new ChangeToggleEffects(this._doc, toggleFlag, null));\n        this._effectsSelect.selectedIndex = 0;\n        if (instrument.effects > oldValue) {\n            this._doc.addedEffect = true;\n        }\n        this._doc.notifier.changed();\n    }\n\n    private _whenSetVibrato = (): void => {\n        this._doc.record(new ChangeVibrato(this._doc, this._vibratoSelect.selectedIndex));\n    }\n\n    private _whenSetVibratoType = (): void => {\n        this._doc.record(new ChangeVibratoType(this._doc, this._vibratoTypeSelect.selectedIndex));\n    }\n\n    private _whenSetUnison = (): void => {\n        this._doc.record(new ChangeUnison(this._doc, this._unisonSelect.selectedIndex));\n    }\n\n    private _whenSetChord = (): void => {\n        this._doc.record(new ChangeChord(this._doc, this._chordSelect.selectedIndex));\n    }\n\n    private _addNewEnvelope = (): void => {\n        this._doc.record(new ChangeAddEnvelope(this._doc));\n        this.refocusStage();\n        this._doc.addedEnvelope = true;\n    }\n\n    private _zoomIn = (): void => {\n        this._doc.prefs.visibleOctaves = Math.max(1, this._doc.prefs.visibleOctaves - 1);\n        this._doc.prefs.save();\n        this._doc.notifier.changed();\n        this.refocusStage();\n    }\n\n    private _zoomOut = (): void => {\n        this._doc.prefs.visibleOctaves = Math.min(Config.pitchOctaves, this._doc.prefs.visibleOctaves + 1);\n        this._doc.prefs.save();\n        this._doc.notifier.changed();\n        this.refocusStage();\n    }\n\n    private _fileMenuHandler = (event: Event): void => {\n        switch (this._fileMenu.value) {\n            case \"new\":\n                this._doc.goBackToStart();\n                this._doc.song.restoreLimiterDefaults();\n                for (const channel of this._doc.song.channels) {\n                    channel.muted = false;\n                    channel.name = \"\";\n                }\n                this._doc.record(new ChangeSong(this._doc, \"\"), false, true);\n                break;\n            case \"export\":\n                this._openPrompt(\"export\");\n                break;\n            case \"import\":\n                this._openPrompt(\"import\");\n                break;\n            case \"copyUrl\":\n                this._copyTextToClipboard(new URL(\"#\" + this._doc.song.toBase64String(), location.href).href);\n                break;\n            case \"shareUrl\":\n                (<any>navigator).share({ url: new URL(\"#\" + this._doc.song.toBase64String(), location.href).href });\n                break;\n            case \"shortenUrl\":\n                window.open(\"https://tinyurl.com/api-create.php?url=\" + encodeURIComponent(new URL(\"#\" + this._doc.song.toBase64String(), location.href).href));\n                break;\n            case \"viewPlayer\":\n                location.href = \"player/#song=\" + this._doc.song.toBase64String();\n                break;\n            case \"copyEmbed\":\n                this._copyTextToClipboard(`<iframe width=\"384\" height=\"60\" style=\"border: none;\" src=\"${new URL(\"player/#song=\" + this._doc.song.toBase64String(), location.href).href}\"></iframe>`);\n                break;\n            case \"songRecovery\":\n                this._openPrompt(\"songRecovery\");\n                break;\n        }\n        this._fileMenu.selectedIndex = 0;\n    }\n\n    private _editMenuHandler = (event: Event): void => {\n        switch (this._editMenu.value) {\n            case \"undo\":\n                this._doc.undo();\n                break;\n            case \"redo\":\n                this._doc.redo();\n                break;\n            case \"copy\":\n                this._doc.selection.copy();\n                break;\n            case \"insertBars\":\n                this._doc.selection.insertBars();\n                break;\n            case \"deleteBars\":\n                this._doc.selection.deleteBars();\n                break;\n            case \"insertChannel\":\n                this._doc.selection.insertChannel();\n                break;\n            case \"deleteChannel\":\n                this._doc.selection.deleteChannel();\n                break;\n            case \"pasteNotes\":\n                this._doc.selection.pasteNotes();\n                break;\n            case \"pasteNumbers\":\n                this._doc.selection.pasteNumbers();\n                break;\n            case \"transposeUp\":\n                this._doc.selection.transpose(true, false);\n                break;\n            case \"transposeDown\":\n                this._doc.selection.transpose(false, false);\n                break;\n            case \"selectAll\":\n                this._doc.selection.selectAll();\n                break;\n            case \"selectChannel\":\n                this._doc.selection.selectChannel();\n                break;\n            case \"duplicatePatterns\":\n                this._doc.selection.duplicatePatterns();\n                break;\n            case \"barCount\":\n                this._openPrompt(\"barCount\");\n                break;\n            case \"beatsPerBar\":\n                this._openPrompt(\"beatsPerBar\");\n                break;\n            case \"edo\":\n                this._openPrompt(\"edo\");\n                break;\n            case \"moveNotesSideways\":\n                this._openPrompt(\"moveNotesSideways\");\n                break;\n            case \"channelSettings\":\n                this._openPrompt(\"channelSettings\");\n                break;\n            case \"limiterSettings\":\n                this._openPrompt(\"limiterSettings\");\n                break;\n        }\n        this._editMenu.selectedIndex = 0;\n    }\n\n    private _optionsMenuHandler = (event: Event): void => {\n        switch (this._optionsMenu.value) {\n            case \"autoPlay\":\n                this._doc.prefs.autoPlay = !this._doc.prefs.autoPlay;\n                break;\n            case \"autoFollow\":\n                this._doc.prefs.autoFollow = !this._doc.prefs.autoFollow;\n                break;\n            case \"enableNotePreview\":\n                this._doc.prefs.enableNotePreview = !this._doc.prefs.enableNotePreview;\n                break;\n            case \"showLetters\":\n                this._doc.prefs.showLetters = !this._doc.prefs.showLetters;\n                break;\n            case \"showFifth\":\n                this._doc.prefs.showFifth = !this._doc.prefs.showFifth;\n                break;\n            case \"notesOutsideScale\":\n                this._doc.prefs.notesOutsideScale = !this._doc.prefs.notesOutsideScale;\n                break;\n            case \"setDefaultScale\":\n                this._doc.prefs.defaultScale = this._doc.song.scale;\n                break;\n            case \"showChannels\":\n                this._doc.prefs.showChannels = !this._doc.prefs.showChannels;\n                break;\n            case \"showScrollBar\":\n                this._doc.prefs.showScrollBar = !this._doc.prefs.showScrollBar;\n                break;\n            case \"alwaysFineNoteVol\":\n                this._doc.prefs.alwaysFineNoteVol = !this._doc.prefs.alwaysFineNoteVol;\n                break;\n            case \"enableChannelMuting\":\n                this._doc.prefs.enableChannelMuting = !this._doc.prefs.enableChannelMuting;\n                for (const channel of this._doc.song.channels) channel.muted = false;\n                break;\n            case \"displayBrowserUrl\":\n                this._doc.toggleDisplayBrowserUrl();\n                break;\n            case \"displayVolumeBar\":\n                this._doc.prefs.displayVolumeBar = !this._doc.prefs.displayVolumeBar;\n                break;\n            case \"layout\":\n                this._openPrompt(\"layout\");\n                break;\n            case \"colorTheme\":\n                this._openPrompt(\"theme\");\n                break;\n            case \"recordingSetup\":\n                this._openPrompt(\"recordingSetup\");\n                break;\n        }\n        this._optionsMenu.selectedIndex = 0;\n        this._doc.notifier.changed();\n        this._doc.prefs.save();\n    }\n\n    private _customWavePresetHandler = (event: Event): void => {\n\n        // Update custom wave value\n        let customWaveArray: Float32Array = new Float32Array(64);\n        let index: number = this._customWavePresetDrop.selectedIndex - 1;\n        let maxValue: number = Number.MIN_VALUE;\n        let minValue: number = Number.MAX_VALUE;\n        let arrayPoint: number = 0;\n        let arrayStep: number = (Config.chipWaves[index].samples.length - 1) / 64.0;\n\n        for (let i: number = 0; i < 64; i++) {\n            // Compute derivative to get original wave.\n            customWaveArray[i] = (Config.chipWaves[index].samples[Math.floor(arrayPoint)] - Config.chipWaves[index].samples[(Math.floor(arrayPoint) + 1)]) / arrayStep;\n\n            if (customWaveArray[i] < minValue)\n                minValue = customWaveArray[i];\n\n            if (customWaveArray[i] > maxValue)\n                maxValue = customWaveArray[i];\n\n            // Scale an any-size array to 64 elements\n            arrayPoint += arrayStep;\n        }\n\n        for (let i: number = 0; i < 64; i++) {\n            // Change array range from Min~Max to 0~(Max-Min)\n            customWaveArray[i] -= minValue;\n            // Divide by (Max-Min) to get a range of 0~1,\n            customWaveArray[i] /= (maxValue - minValue);\n            //then multiply by 48 to get 0~48,\n            customWaveArray[i] *= 48.0;\n            //then subtract 24 to get - 24~24\n            customWaveArray[i] -= 24.0;\n            //need to force integers\n            customWaveArray[i] = Math.ceil(customWaveArray[i]);\n\n            // Copy back data to canvas\n            this._customWaveDrawCanvas.newArray[i] = customWaveArray[i];\n        }\n\n        //this._instrumentVolumeSlider.input.value = \"\" + Math.round(Config.waveVolumes[index] * 50.0 - 50.0);\n\n        this._doc.record(new ChangeCustomWave(this._doc, customWaveArray))\n        this._doc.record(new ChangeVolume(this._doc, +this._instrumentVolumeSlider.input.value, -Config.volumeRange / 2 + Math.round(Math.sqrt(Config.chipWaves[index].expression) * Config.volumeRange / 2)));\n\n        this._customWavePresetDrop.selectedIndex = 0;\n        this._doc.notifier.changed();\n        this._doc.prefs.save();\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {Config} from \"../synth/SynthConfig\";\nimport {Note, Pattern} from \"../synth/synth\";\nimport {SongDocument} from \"./SongDocument\";\nimport {ChangeGroup} from \"./Change\";\nimport {ChangeChannelBar, ChangePinTime, ChangeEnsurePatternExists, ChangeNoteAdded, ChangeInsertBars, ChangeDeleteBars, ChangeNoteLength} from \"./changes\";\nimport {Piano} from \"./Piano\";\n\nexport class SongPerformance {\n\tprivate _channelIsDrum: boolean = false;\n\tprivate _channelOctave: number = -1;\n\tprivate _songKey: number = -1;\n\tprivate _pitchesAreTemporary: boolean = false;\n\tprivate _bassPitchesAreTemporary: boolean = false;\n\tprivate readonly _recentlyAddedPitches: number[] = []; // Pitches that are rapidly added then removed within a minimum rhythm duration wouldn't get recorded until I explicitly track recently added notes and check if any are no longer held.\n\tprivate readonly _recentlyAddedBassPitches: number[] = []; // Pitches that are rapidly added then removed within a minimum rhythm duration wouldn't get recorded until I explicitly track recently added notes and check if any are no longer held.\n\n\tprivate _songLengthWhenRecordingStarted: number = -1;\n\tprivate _playheadPart: number = -1;\n\tprivate _bassPlayheadPart: number = -1;\n\tprivate _playheadPattern: Pattern | null = null;\n\tprivate _bassPlayheadPattern: Pattern | null = null;\n\tprivate _pitchesChanged: boolean = false;\n\tprivate _bassPitchesChanged: boolean = false;\n\tprivate _lastNote: Note | null = null;\n\tprivate _lastBassNote: Note | null = null;\n\tprivate _recordingChange: ChangeGroup | null = null;\n\t\n\tconstructor(private _doc: SongDocument) {\n\t\tthis._doc.notifier.watch(this._documentChanged);\n\t\tthis._documentChanged();\n\t\twindow.requestAnimationFrame(this._onAnimationFrame);\n\t}\n\t\n\tpublic play(): void {\n\t\tthis._doc.synth.play();\n\t\tthis._doc.synth.enableMetronome = false;\n\t\tthis._doc.synth.countInMetronome = false\n\t\tthis._doc.synth.maintainLiveInput();\n\t}\n\t\n\tpublic pause(): void {\n\t\tthis.clearAllPitches();\n\t\tthis.clearAllBassPitches();\n\t\tif (this._recordingChange != null) {\n\t\t\tif (this._doc.song.barCount > this._songLengthWhenRecordingStarted && !this._lastBarHasPatterns()) {\n\t\t\t\t// If an extra empty bar was added in case it was needed for recording, but it didn't end up getting used, delete it now.\n\t\t\t\tnew ChangeDeleteBars(this._doc, this._doc.song.barCount - 1, 1);\n\t\t\t\tnew ChangeChannelBar(this._doc, this._doc.channel, this._doc.song.barCount - 1);\n\t\t\t}\n\t\t\tif (!this._recordingChange.isNoop()) {\n\t\t\t\tthis._doc.record(this._recordingChange);\n\t\t\t\tthis._recordingChange = null;\n\t\t\t}\n\t\t\tthis._lastNote = null;\n\t\t}\n\t\tthis._doc.synth.pause();\n\t\tthis._doc.synth.resetEffects();\n\t\tthis._doc.synth.enableMetronome = false;\n\t\tthis._doc.synth.countInMetronome = false\n\t\tif (this._doc.prefs.autoFollow) {\n\t\t\tthis._doc.synth.goToBar(this._doc.bar);\n\t\t}\n\t\tthis._doc.synth.snapToBar();\n\t}\n\t\n\tpublic record(): void {\n\t\tthis._doc.synth.snapToBar();\n\t\tconst playheadBar: number = Math.floor(this._doc.synth.playhead);\n\t\tif (playheadBar != this._doc.bar) {\n\t\t\tnew ChangeChannelBar(this._doc, this._doc.channel, playheadBar);\n\t\t}\n\t\tif (this._pitchesAreTemporary) {\n\t\t\tthis.clearAllPitches();\n\t\t\tthis._pitchesAreTemporary = false;\n\t\t}\n\t\tif (this._bassPitchesAreTemporary) {\n\t\t\tthis.clearAllBassPitches();\n\t\t\tthis._bassPitchesAreTemporary = false;\n\t\t}\n\t\tthis._doc.synth.enableMetronome = this._doc.prefs.metronomeWhileRecording;\n\t\tthis._doc.synth.countInMetronome = this._doc.prefs.metronomeCountIn;\n\t\tthis._doc.synth.startRecording();\n\t\tthis._doc.synth.maintainLiveInput();\n\t\tthis._songLengthWhenRecordingStarted = this._doc.song.barCount;\n\t\tthis._playheadPart = this._getCurrentPlayheadPart();\n\t\tthis._bassPlayheadPart = this._getCurrentPlayheadPart();\n\t\tthis._playheadPattern = null;\n\t\tthis._bassPlayheadPattern = null;\n\t\tthis._pitchesChanged = false;\n\t\tthis._bassPitchesChanged = false;\n\t\tthis._lastNote = null;\n\t\tthis._lastBassNote = null;\n\t\tthis._recentlyAddedPitches.length = 0;\n\t\tthis._recentlyAddedBassPitches.length = 0;\n\t\tthis._recordingChange = new ChangeGroup();\n\t\tthis._doc.setProspectiveChange(this._recordingChange);\n\t}\n\t\n\tpublic abortRecording(): void {\n\t\tthis._recordingChange = null;\n\t\tthis.pause();\n\t}\n\t\n\tpublic pitchesAreTemporary(): boolean {\n\t\treturn this._pitchesAreTemporary;\n\t}\n\n\tpublic bassPitchesAreTemporary(): boolean {\n\t\treturn this._bassPitchesAreTemporary;\n\t}\n\n\tprivate _getBassOffsetChannel(): number {\n\t\tif ( this._doc.channel >= this._doc.song.pitchChannelCount )\n\t\t\treturn this._doc.channel;\n\t\treturn Math.max( 0, Math.min( this._doc.song.pitchChannelCount - 1, this._doc.channel + this._doc.prefs.bassOffset ));\n\t}\n\t\n\tprivate _getMinDivision(): number {\n\t\tif (this._doc.prefs.snapRecordedNotesToRhythm) {\n\t\t\treturn Config.partsPerBeat / Config.rhythms[this._doc.song.rhythm].stepsPerBeat;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t\n\tprivate _getCurrentPlayheadPart(): number {\n\t\tconst currentPart: number = this._doc.synth.playhead * this._doc.song.beatsPerBar * Config.partsPerBeat;\n\t\tif (this._doc.prefs.snapRecordedNotesToRhythm) {\n\t\t\tconst minDivision: number = this._getMinDivision();\n\t\t\treturn Math.round(currentPart / minDivision) * minDivision;\n\t\t}\n\t\treturn Math.round(currentPart);\n\t}\n\t\n\tprivate _lastBarHasPatterns(): boolean {\n\t\tfor (let channelIndex: number = 0; channelIndex < this._doc.song.getChannelCount(); channelIndex++) {\n\t\t\tif (this._doc.song.channels[channelIndex].bars[this._doc.song.barCount - 1] != 0) return true;\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tprivate _onAnimationFrame = (): void => {\n\t\twindow.requestAnimationFrame(this._onAnimationFrame);\n\t\tif (this._doc.synth.recording) {\n\t\t\tlet dirty: boolean = this._updateRecordedNotes();\n\t\t\tdirty = this._updateRecordedBassNotes() ? true : dirty;\n\t\t\tif (dirty) {\n\t\t\t\t// The full interface is usually only rerendered in response to user input events, not animation events, but in this case go ahead and rerender everything.\n\t\t\t\tthis._doc.notifier.notifyWatchers();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Returns true if the full interface needs to be rerendered.\n\tprivate _updateRecordedNotes(): boolean {\n\t\tif (this._recordingChange == null) return false;\n\t\tif (!this._doc.lastChangeWas(this._recordingChange)) {\n\t\t\tthis.abortRecording();\n\t\t\treturn false;\n\t\t}\n\t\tif (this._doc.synth.countInMetronome) {\n\t\t\t// If the synth is still counting in before recording, discard any recently added pitches.\n\t\t\tthis._recentlyAddedPitches.length = 0;\n\t\t\tthis._pitchesChanged = false;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tconst partsPerBar: number = this._doc.song.beatsPerBar * Config.partsPerBeat;\n\t\tconst oldPart: number = this._playheadPart % partsPerBar;\n\t\tconst oldBar: number = Math.floor(this._playheadPart / partsPerBar);\n\t\tconst oldPlayheadPart: number = this._playheadPart;\n\t\tthis._playheadPart = this._getCurrentPlayheadPart();\n\t\tconst newPart: number = this._playheadPart % partsPerBar;\n\t\tconst newBar: number = Math.floor(this._playheadPart / partsPerBar);\n\t\tif (oldPart == newPart && oldBar == newBar) return false;\n\t\tif (this._playheadPart < oldPlayheadPart) {\n\t\t\tthis._lastNote = null;\n\t\t\tthis._playheadPattern = null;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tlet dirty = false;\n\t\tfor (let bar: number = oldBar; bar <= newBar; bar++) {\n\t\t\tif (bar != oldBar) {\n\t\t\t\tthis._playheadPattern = null;\n\t\t\t}\n\t\t\tconst startPart: number = (bar == oldBar) ? oldPart : 0;\n\t\t\tconst endPart: number = (bar == newBar) ? newPart : partsPerBar;\n\t\t\tif (startPart == endPart) break;\n\t\t\tif (this._lastNote != null && !this._pitchesChanged && startPart > 0 && this._doc.synth.liveInputPitches.length > 0) {\n\t\t\t\tthis._recordingChange.append(new ChangePinTime(this._doc, this._lastNote, 1, endPart, this._lastNote.continuesLastPattern));\n\t\t\t\t// Instead of updating the entire interface when extending the last note, just update the current pattern as a special case to avoid doing too much work every frame since performance is important while recording.\n\t\t\t\tthis._doc.currentPatternIsDirty = true;\n\t\t\t} else {\n\t\t\t\tif (this._lastNote != null) {\n\t\t\t\t\t// End the last note.\n\t\t\t\t\tthis._lastNote = null;\n\t\t\t\t}\n\t\t\t\t// All current pitches will usually fill the time span from startPart to endPart, but\n\t\t\t\t// if any recent pitches were released before being recorded, they'll get recorded here\n\t\t\t\t// as short as possible and then any remaining time will be dedicated to pitches that\n\t\t\t\t// haven't been released yet.\n\t\t\t\tlet noteStartPart: number = startPart;\n\t\t\t\tlet noteEndPart: number = endPart;\n\t\t\t\twhile (noteStartPart < endPart) {\n\t\t\t\t\tlet addedAlreadyReleasedPitch: boolean = false;\n\t\t\t\t\tif (this._recentlyAddedPitches.length > 0 || this._doc.synth.liveInputPitches.length > 0) {\n\t\t\t\t\t\tif (this._playheadPattern == null) {\n\t\t\t\t\t\t\tthis._doc.selection.erasePatternInBar(this._recordingChange, this._doc.synth.liveInputChannel, bar);\n\t\t\t\t\t\t\tthis._recordingChange.append(new ChangeEnsurePatternExists(this._doc, this._doc.synth.liveInputChannel, bar));\n\t\t\t\t\t\t\tthis._playheadPattern = this._doc.song.getPattern(this._doc.synth.liveInputChannel, bar);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this._playheadPattern == null) throw new Error();\n\t\t\t\t\t\tthis._lastNote = new Note(-1, noteStartPart, noteEndPart, Config.noteSizeMax, this._doc.song.getChannelIsNoise(this._doc.synth.liveInputChannel));\n\t\t\t\t\t\tthis._lastNote.continuesLastPattern = (noteStartPart == 0 && !this._pitchesChanged);\n\t\t\t\t\t\tthis._lastNote.pitches.length = 0;\n\t\t\t\t\t\twhile (this._recentlyAddedPitches.length > 0) {\n\t\t\t\t\t\t\tif (this._lastNote.pitches.length >= Config.maxChordSize) break;\n\t\t\t\t\t\t\tconst recentPitch: number = this._recentlyAddedPitches.shift()!;\n\t\t\t\t\t\t\tif (this._doc.synth.liveInputPitches.indexOf(recentPitch) == -1) {\n\t\t\t\t\t\t\t\tthis._lastNote.pitches.push(recentPitch);\n\t\t\t\t\t\t\t\taddedAlreadyReleasedPitch = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i: number = 0; i < this._doc.synth.liveInputPitches.length; i++) {\n\t\t\t\t\t\t\tif (this._lastNote.pitches.length >= Config.maxChordSize) break;\n\t\t\t\t\t\t\tthis._lastNote.pitches.push(this._doc.synth.liveInputPitches[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._recordingChange.append(new ChangeNoteAdded(this._doc, this._playheadPattern, this._lastNote, this._playheadPattern.notes.length));\n\t\t\t\t\t\tif (addedAlreadyReleasedPitch) {\n\t\t\t\t\t\t\t// If this note contains pitches that were already released, shorten it and start a new note.\n\t\t\t\t\t\t\tnoteEndPart = noteStartPart + this._getMinDivision();\n\t\t\t\t\t\t\tnew ChangeNoteLength(this._doc, this._lastNote, this._lastNote.start, noteEndPart);\n\t\t\t\t\t\t\tthis._lastNote = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._pitchesChanged = addedAlreadyReleasedPitch;\n\t\t\t\t\tnoteStartPart = noteEndPart;\n\t\t\t\t\tnoteEndPart = endPart;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (bar == this._doc.song.barCount - 1) {\n\t\t\t\tif (this._lastBarHasPatterns()) {\n\t\t\t\t\tnew ChangeInsertBars(this._doc, this._doc.song.barCount, 1);\n\t\t\t\t\tthis._doc.bar--; // To counteract it increasing in ChangeInsertBars.\n\t\t\t\t\tdirty = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dirty;\n\t}\n\n\t// Returns true if the full interface needs to be rerendered.\n\tprivate _updateRecordedBassNotes(): boolean {\n\t\tif (this._recordingChange == null) return false;\n\t\tif (!this._doc.lastChangeWas(this._recordingChange)) {\n\t\t\tthis.abortRecording();\n\t\t\treturn false;\n\t\t}\n\t\tif (this._doc.synth.countInMetronome) {\n\t\t\t// If the synth is still counting in before recording, discard any recently added pitches.\n\t\t\tthis._recentlyAddedBassPitches.length = 0;\n\t\t\tthis._bassPitchesChanged = false;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tconst partsPerBar: number = this._doc.song.beatsPerBar * Config.partsPerBeat;\n\t\tconst oldPart: number = this._bassPlayheadPart % partsPerBar;\n\t\tconst oldBar: number = Math.floor(this._bassPlayheadPart / partsPerBar);\n\t\tconst oldPlayheadPart: number = this._bassPlayheadPart;\n\t\tthis._bassPlayheadPart = this._getCurrentPlayheadPart();\n\t\tconst newPart: number = this._bassPlayheadPart % partsPerBar;\n\t\tconst newBar: number = Math.floor(this._bassPlayheadPart / partsPerBar);\n\t\tif (oldPart == newPart && oldBar == newBar) return false;\n\t\tif (this._bassPlayheadPart < oldPlayheadPart) {\n\t\t\tthis._lastBassNote = null;\n\t\t\tthis._bassPlayheadPattern = null;\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tlet dirty = false;\n\t\tfor (let bar: number = oldBar; bar <= newBar; bar++) {\n\t\t\tif (bar != oldBar) {\n\t\t\t\tthis._bassPlayheadPattern = null;\n\t\t\t}\n\t\t\tconst startPart: number = (bar == oldBar) ? oldPart : 0;\n\t\t\tconst endPart: number = (bar == newBar) ? newPart : partsPerBar;\n\t\t\tif (startPart == endPart) break;\n\t\t\tif (this._lastBassNote != null && !this._bassPitchesChanged && startPart > 0 && this._doc.synth.liveBassInputPitches.length > 0) {\n\t\t\t\tthis._recordingChange.append(new ChangePinTime(this._doc, this._lastBassNote, 1, endPart, this._lastBassNote.continuesLastPattern));\n\t\t\t\t// Instead of updating the entire interface when extending the last note, just update the current pattern as a special case to avoid doing too much work every frame since performance is important while recording.\n\t\t\t\tthis._doc.currentPatternIsDirty = true;\n\t\t\t} else {\n\t\t\t\tif (this._lastBassNote != null) {\n\t\t\t\t\t// End the last note.\n\t\t\t\t\tthis._lastBassNote = null;\n\t\t\t\t}\n\t\t\t\t// All current pitches will usually fill the time span from startPart to endPart, but\n\t\t\t\t// if any recent pitches were released before being recorded, they'll get recorded here\n\t\t\t\t// as short as possible and then any remaining time will be dedicated to pitches that\n\t\t\t\t// haven't been released yet.\n\t\t\t\tlet noteStartPart: number = startPart;\n\t\t\t\tlet noteEndPart: number = endPart;\n\t\t\t\twhile (noteStartPart < endPart) {\n\t\t\t\t\tlet addedAlreadyReleasedPitch: boolean = false;\n\t\t\t\t\tif (this._recentlyAddedBassPitches.length > 0 || this._doc.synth.liveBassInputPitches.length > 0) {\n\t\t\t\t\t\tif (this._bassPlayheadPattern == null) {\n\t\t\t\t\t\t\tthis._doc.selection.erasePatternInBar(this._recordingChange, this._doc.synth.liveBassInputChannel, bar);\n\t\t\t\t\t\t\tthis._recordingChange.append(new ChangeEnsurePatternExists(this._doc, this._doc.synth.liveBassInputChannel, bar));\n\t\t\t\t\t\t\tthis._bassPlayheadPattern = this._doc.song.getPattern(this._doc.synth.liveBassInputChannel, bar);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this._bassPlayheadPattern == null) throw new Error();\n\t\t\t\t\t\tthis._lastBassNote = new Note(-1, noteStartPart, noteEndPart, Config.noteSizeMax, this._doc.song.getChannelIsNoise(this._doc.synth.liveBassInputChannel));\n\t\t\t\t\t\tthis._lastBassNote.continuesLastPattern = (noteStartPart == 0 && !this._bassPitchesChanged);\n\t\t\t\t\t\tthis._lastBassNote.pitches.length = 0;\n\t\t\t\t\t\twhile (this._recentlyAddedBassPitches.length > 0) {\n\t\t\t\t\t\t\tif (this._lastBassNote.pitches.length >= Config.maxChordSize) break;\n\t\t\t\t\t\t\tconst recentPitch: number = this._recentlyAddedBassPitches.shift()!;\n\t\t\t\t\t\t\tif (this._doc.synth.liveBassInputPitches.indexOf(recentPitch) == -1) {\n\t\t\t\t\t\t\t\tthis._lastBassNote.pitches.push(recentPitch);\n\t\t\t\t\t\t\t\taddedAlreadyReleasedPitch = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (let i: number = 0; i < this._doc.synth.liveBassInputPitches.length; i++) {\n\t\t\t\t\t\t\tif (this._lastBassNote.pitches.length >= Config.maxChordSize) break;\n\t\t\t\t\t\t\tthis._lastBassNote.pitches.push(this._doc.synth.liveBassInputPitches[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._recordingChange.append(new ChangeNoteAdded(this._doc, this._bassPlayheadPattern, this._lastBassNote, this._bassPlayheadPattern.notes.length));\n\t\t\t\t\t\tif (addedAlreadyReleasedPitch) {\n\t\t\t\t\t\t\t// If this note contains pitches that were already released, shorten it and start a new note.\n\t\t\t\t\t\t\tnoteEndPart = noteStartPart + this._getMinDivision();\n\t\t\t\t\t\t\tnew ChangeNoteLength(this._doc, this._lastBassNote, this._lastBassNote.start, noteEndPart);\n\t\t\t\t\t\t\tthis._lastBassNote = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdirty = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._bassPitchesChanged = addedAlreadyReleasedPitch;\n\t\t\t\t\tnoteStartPart = noteEndPart;\n\t\t\t\t\tnoteEndPart = endPart;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (bar == this._doc.song.barCount - 1) {\n\t\t\t\tif (this._lastBarHasPatterns()) {\n\t\t\t\t\tnew ChangeInsertBars(this._doc, this._doc.song.barCount, 1);\n\t\t\t\t\tthis._doc.bar--; // To counteract it increasing in ChangeInsertBars.\n\t\t\t\t\tdirty = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dirty;\n\t}\n\t\n\tpublic setTemporaryPitches(pitches: number[], duration: number): void {\n\t\tthis._updateRecordedNotes();\n\t\tfor (let i: number = 0; i < pitches.length; i++) {\n\t\t\tthis._doc.synth.liveInputPitches[i] = pitches[i];\n\t\t}\n\t\tthis._doc.synth.liveInputPitches.length = Math.min(pitches.length, Config.maxChordSize);\n\t\tthis._doc.synth.liveInputDuration = duration;\n\t\tthis._doc.synth.liveInputStarted = true;\n\t\tthis._pitchesAreTemporary = true;\n\t\tthis._pitchesChanged = true;\n\t}\n\n\tpublic setTemporaryBassPitches(pitches: number[], duration: number): void {\n\t\tthis._updateRecordedBassNotes();\n\t\tfor (let i: number = 0; i < pitches.length; i++) {\n\t\t\tthis._doc.synth.liveBassInputPitches[i] = pitches[i];\n\t\t}\n\t\tthis._doc.synth.liveBassInputPitches.length = Math.min(pitches.length, Config.maxChordSize);\n\t\tthis._doc.synth.liveBassInputDuration = duration;\n\t\tthis._doc.synth.liveBassInputStarted = true;\n\t\tthis._bassPitchesAreTemporary = true;\n\t\tthis._bassPitchesChanged = true;\n\t}\n\t\n\tpublic addPerformedPitch(pitch: number): void {\n\t\tthis._doc.synth.maintainLiveInput();\n\n\t\tif (pitch > Piano.getBassCutoffPitch(this._doc) || this._getBassOffsetChannel() == this._doc.channel) {\n\t\t\tthis._updateRecordedNotes();\n\t\t\tif (this._pitchesAreTemporary) {\n\t\t\t\tthis.clearAllPitches();\n\t\t\t\tthis._pitchesAreTemporary = false;\n\t\t\t}\n\t\t\tif (this._doc.prefs.ignorePerformedNotesNotInScale && !Config.scales[this._doc.song.scale].flags[pitch % this._doc.song.edo]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._doc.synth.liveInputPitches.indexOf(pitch) == -1) {\n\t\t\t\tthis._doc.synth.liveInputPitches.push(pitch);\n\t\t\t\tthis._pitchesChanged = true;\n\t\t\t\twhile (this._doc.synth.liveInputPitches.length > Config.maxChordSize) {\n\t\t\t\t\tthis._doc.synth.liveInputPitches.shift();\n\t\t\t\t}\n\t\t\t\tthis._doc.synth.liveInputDuration = Number.MAX_SAFE_INTEGER;\n\t\t\t\n\t\t\t\tif (this._recordingChange != null) {\n\t\t\t\t\tconst recentIndex: number = this._recentlyAddedPitches.indexOf(pitch);\n\t\t\t\t\tif (recentIndex != -1) {\n\t\t\t\t\t\t// If the latest pitch is already in _recentlyAddedPitches, remove it before adding it back at the end.\n\t\t\t\t\t\tthis._recentlyAddedPitches.splice(recentIndex, 1);\n\t\t\t\t\t}\n\t\t\t\t\tthis._recentlyAddedPitches.push(pitch);\n\t\t\t\t\twhile (this._recentlyAddedPitches.length > Config.maxChordSize * 4) {\n\t\t\t\t\t\tthis._recentlyAddedPitches.shift();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis._updateRecordedBassNotes();\n\t\t\tif (this._bassPitchesAreTemporary) {\n\t\t\t\tthis.clearAllBassPitches();\n\t\t\t\tthis._bassPitchesAreTemporary = false;\n\t\t\t}\n\t\t\tif (this._doc.prefs.ignorePerformedNotesNotInScale && !Config.scales[this._doc.song.scale].flags[pitch % this._doc.song.edo]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._doc.synth.liveBassInputPitches.indexOf(pitch) == -1) {\n\t\t\t\tthis._doc.synth.liveBassInputPitches.push(pitch);\n\t\t\t\tthis._bassPitchesChanged = true;\n\t\t\t\twhile (this._doc.synth.liveBassInputPitches.length > Config.maxChordSize) {\n\t\t\t\t\tthis._doc.synth.liveBassInputPitches.shift();\n\t\t\t\t}\n\t\t\t\tthis._doc.synth.liveBassInputDuration = Number.MAX_SAFE_INTEGER;\n\t\t\t\n\t\t\t\tif (this._recordingChange != null) {\n\t\t\t\t\tconst recentIndex: number = this._recentlyAddedPitches.indexOf(pitch);\n\t\t\t\t\tif (recentIndex != -1) {\n\t\t\t\t\t\t// If the latest pitch is already in _recentlyAddedPitches, remove it before adding it back at the end.\n\t\t\t\t\t\tthis._recentlyAddedBassPitches.splice(recentIndex, 1);\n\t\t\t\t\t}\n\t\t\t\t\tthis._recentlyAddedBassPitches.push(pitch);\n\t\t\t\t\twhile (this._recentlyAddedBassPitches.length > Config.maxChordSize * 4) {\n\t\t\t\t\t\tthis._recentlyAddedBassPitches.shift();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic removePerformedPitch(pitch: number): void {\n\t\tif (pitch > Piano.getBassCutoffPitch(this._doc) || this._getBassOffsetChannel() == this._doc.channel) {\n\t\t\tthis._updateRecordedNotes();\n\t\t\tfor (let i: number = 0; i < this._doc.synth.liveInputPitches.length; i++) {\n\t\t\t\tif (this._doc.synth.liveInputPitches[i] == pitch) {\n\t\t\t\t\tthis._doc.synth.liveInputPitches.splice(i, 1);\n\t\t\t\t\tthis._pitchesChanged = true;\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis._updateRecordedBassNotes();\n\t\t\tfor (let i: number = 0; i < this._doc.synth.liveBassInputPitches.length; i++) {\n\t\t\t\tif (this._doc.synth.liveBassInputPitches[i] == pitch) {\n\t\t\t\t\tthis._doc.synth.liveBassInputPitches.splice(i, 1);\n\t\t\t\t\tthis._bassPitchesChanged = true;\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic clearAllPitches(): void {\n\t\tthis._updateRecordedNotes();\n\t\tthis._doc.synth.liveInputPitches.length = 0;\n\t\tthis._pitchesChanged = true;\n\t}\n\n\tpublic clearAllBassPitches(): void {\n\t\tthis._updateRecordedBassNotes();\n\t\tthis._doc.synth.liveBassInputPitches.length = 0;\n\t\tthis._bassPitchesChanged = true;\n\t}\n\t\n\tprivate _documentChanged = (): void => {\n\t\tconst isDrum: boolean = this._doc.song.getChannelIsNoise(this._doc.channel);\n\t\tconst octave: number = this._doc.song.channels[this._doc.channel].octave;\n\t\tif (this._doc.synth.liveInputChannel != this._doc.channel || this._doc.synth.liveBassInputChannel != this._getBassOffsetChannel() || this._channelIsDrum != isDrum || this._channelOctave != octave || this._songKey != this._doc.song.key) {\n\t\t\tthis._doc.synth.liveInputChannel = this._doc.channel;\n\t\t\tthis._doc.synth.liveBassInputChannel = this._getBassOffsetChannel();\n\t\t\tthis._channelIsDrum = isDrum;\n\t\t\tthis._channelOctave = octave;\n\t\t\tthis._songKey = this._doc.song.key;\n\t\t\tthis.clearAllPitches();\n\t\t\tthis.clearAllBassPitches();\n\t\t}\n\t\tthis._doc.synth.liveInputInstruments = this._doc.recentPatternInstruments[this._doc.channel];\n\t\tthis._doc.synth.liveBassInputInstruments = this._doc.recentPatternInstruments[this._doc.synth.liveBassInputChannel];\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Dictionary, Config } from \"../synth/SynthConfig\";\nimport { Note, Pattern } from \"../synth/synth\";\nimport { SongDocument } from \"./SongDocument\";\nimport { ChangeGroup } from \"./Change\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { ChangeTrackSelection, ChangeChannelBar, ChangeAddChannel, ChangeRemoveChannel, ChangeChannelOrder, ChangeDuplicateSelectedReusedPatterns, ChangeNoteAdded, ChangeNoteTruncate, ChangePatternNumbers, ChangePatternSelection, ChangeInsertBars, ChangeDeleteBars, ChangeEnsurePatternExists, ChangeNoteLength, ChangePaste, ChangeSetPatternInstruments, ChangeViewInstrument, ChangeModChannel, ChangeModInstrument, ChangeModSetting, ChangeModFilter, ChangePatternsPerChannel, ChangePatternRhythm, ChangePatternScale, ChangeTranspose, ChangeRhythm, comparePatternNotes, unionOfUsedNotes, generateScaleMap, discardInvalidPatternInstruments, patternsContainSameInstruments } from \"./changes\";\n\ninterface PatternCopy {\n    instruments: number[];\n    notes: any[];\n}\n\ninterface ChannelCopy {\n    isNoise: boolean;\n    isMod: boolean;\n    patterns: Dictionary<PatternCopy>;\n    bars: number[];\n}\n\ninterface SelectionCopy {\n    partDuration: number;\n    channels: ChannelCopy[];\n}\n\nexport class Selection {\n    public boxSelectionX0: number = 0;\n    public boxSelectionY0: number = 0;\n    public boxSelectionX1: number = 0;\n    public boxSelectionY1: number = 0;\n    public digits: string = \"\";\n    public instrumentDigits: string = \"\";\n    public patternSelectionStart: number = 0;\n    public patternSelectionEnd: number = 0;\n    public patternSelectionActive: boolean = false;\n\n    private _changeTranspose: ChangeGroup | null = null;\n    private _changeTrack: ChangeGroup | null = null;\n    private _changeInstrument: ChangeGroup | null = null;\n    private _changeReorder: ChangeGroup | null = null;\n\n    constructor(private _doc: SongDocument) { }\n\n    public toJSON(): { x0: number, x1: number, y0: number, y1: number, start: number, end: number } {\n        return {\n            \"x0\": this.boxSelectionX0,\n            \"x1\": this.boxSelectionX1,\n            \"y0\": this.boxSelectionY0,\n            \"y1\": this.boxSelectionY1,\n            \"start\": this.patternSelectionStart,\n            \"end\": this.patternSelectionEnd,\n        };\n    }\n\n    public fromJSON(json: { x0: number, x1: number, y0: number, y1: number, start: number, end: number }): void {\n        if (json == null) return;\n        this.boxSelectionX0 = +json[\"x0\"];\n        this.boxSelectionX1 = +json[\"x1\"];\n        this.boxSelectionY0 = +json[\"y0\"];\n        this.boxSelectionY1 = +json[\"y1\"];\n        this.patternSelectionStart = +json[\"start\"];\n        this.patternSelectionEnd = +json[\"end\"];\n        this.digits = \"\";\n        this.instrumentDigits = \"\";\n        this.patternSelectionActive = this.patternSelectionStart < this.patternSelectionEnd;\n    }\n\n    public selectionUpdated(): void {\n        this._doc.notifier.changed();\n        this.digits = \"\";\n        this.instrumentDigits = \"\";\n    }\n\n    public get boxSelectionBar(): number {\n        return Math.min(this.boxSelectionX0, this.boxSelectionX1);\n    }\n    public get boxSelectionChannel(): number {\n        return Math.min(this.boxSelectionY0, this.boxSelectionY1);\n    }\n    public get boxSelectionWidth(): number {\n        return Math.abs(this.boxSelectionX0 - this.boxSelectionX1) + 1;\n    }\n    public get boxSelectionHeight(): number {\n        return Math.abs(this.boxSelectionY0 - this.boxSelectionY1) + 1;\n    }\n    public get boxSelectionActive(): boolean {\n        return this.boxSelectionWidth > 1 || this.boxSelectionHeight > 1;\n    }\n    public scrollToSelectedPattern(): void {\n        this._doc.barScrollPos = Math.min(this._doc.bar, Math.max(this._doc.bar - (this._doc.trackVisibleBars - 1), this._doc.barScrollPos));\n        this._doc.channelScrollPos = Math.min(this._doc.channel, Math.max(this._doc.channel - (this._doc.trackVisibleChannels - 1), this._doc.channelScrollPos));\n    }\n    public scrollToEndOfSelection(): void {\n        this._doc.barScrollPos = Math.min(this.boxSelectionX1, Math.max(this.boxSelectionX1 - (this._doc.trackVisibleBars - 1), this._doc.barScrollPos));\n        this._doc.channelScrollPos = Math.min(this.boxSelectionY1, Math.max(this.boxSelectionY1 - (this._doc.trackVisibleChannels - 1), this._doc.channelScrollPos));\n    }\n\n    public setChannelBar(channelIndex: number, bar: number): void {\n        if (channelIndex == this._doc.channel && bar == this._doc.bar) return;\n        const canReplaceLastChange: boolean = this._doc.lastChangeWas(this._changeTrack);\n        this._changeTrack = new ChangeGroup();\n        this._changeTrack.append(new ChangeChannelBar(this._doc, channelIndex, bar));\n        // @jummbus - changing current viewed instrument to the first for the current pattern if the viewedInstrument is not in the pattern\n        const pattern: Pattern | null = this._doc.getCurrentPattern(0);\n        if (pattern != null) {\n            if (pattern.instruments.indexOf(this._doc.viewedInstrument[this._doc.channel]) < 0) {\n                this._doc.viewedInstrument[this._doc.channel] = pattern.instruments[0];\n            }\n        }\n        // Don't erase existing redo history just to look at highlighted pattern.\n        if (!this._doc.hasRedoHistory()) {\n            this._doc.record(this._changeTrack, canReplaceLastChange);\n        }\n        this.selectionUpdated();\n\n    }\n\n    public setPattern(pattern: number): void {\n        this._doc.record(new ChangePatternNumbers(this._doc, pattern, this.boxSelectionBar, this.boxSelectionChannel, this.boxSelectionWidth, this.boxSelectionHeight));\n    }\n\n    public nextDigit(digit: string, forInstrument: boolean, forRhythms: boolean): void {\n        if (forRhythms) {\n            if (digit == \"3\") {\n                this._doc.record(new ChangeRhythm(this._doc, 0));\n            }\n            else if (digit == \"4\") {\n                this._doc.record(new ChangeRhythm(this._doc, 1));\n            }\n            else if (digit == \"6\") {\n                this._doc.record(new ChangeRhythm(this._doc, 2));\n            }\n            else if (digit == \"8\") {\n                this._doc.record(new ChangeRhythm(this._doc, 3));\n            }\n            else if (digit == \"0\" || digit == \"1\") {\n                this._doc.record(new ChangeRhythm(this._doc, 4));\n            }\n        } else if (forInstrument) {\n            // Treat \"0\" as meaning instrument 10\n            if (digit == \"0\") digit = \"10\";\n            this.instrumentDigits += digit;\n            var parsed = parseInt(this.instrumentDigits);\n            //var pattern: Pattern | null = this._doc.getCurrentPattern();\n            if (parsed != 0 && parsed <= this._doc.song.channels[this._doc.channel].instruments.length) {\n                this.selectInstrument(parsed - 1);\n                return;\n            }\n            this.instrumentDigits = digit;\n            parsed = parseInt(this.instrumentDigits);\n            if (parsed != 0 && parsed <= this._doc.song.channels[this._doc.channel].instruments.length) {\n                this.selectInstrument(parsed - 1);\n                return;\n            }\n            this.instrumentDigits = \"\";\n        }\n        else {\n            this.digits += digit;\n            let parsed: number = parseInt(this.digits);\n            if (parsed <= this._doc.song.patternsPerChannel) {\n\n                this.setPattern(parsed);\n\n                return;\n            }\n\n            this.digits = digit;\n            parsed = parseInt(this.digits);\n            if (parsed <= this._doc.song.patternsPerChannel) {\n\n                this.setPattern(parsed);\n\n                return;\n            }\n\n            this.digits = \"\";\n        }\n    }\n\n    public setModChannel(mod: number, index: number): void {\n        this._doc.record(new ChangeModChannel(this._doc, mod, index));\n    }\n\n    public setModInstrument(mod: number, instrument: number): void {\n        this._doc.record(new ChangeModInstrument(this._doc, mod, instrument));\n    }\n\n    public setModSetting(mod: number, text: string): void {\n        this._doc.record(new ChangeModSetting(this._doc, mod, text));\n    }\n\n    public setModFilter(mod: number, type: number): void {\n        this._doc.record(new ChangeModFilter(this._doc, mod, type));\n    }\n\n    public insertBars(): void {\n        this._doc.record(new ChangeInsertBars(this._doc, this.boxSelectionBar + this.boxSelectionWidth, this.boxSelectionWidth));\n        const width: number = this.boxSelectionWidth;\n        this.boxSelectionX0 += width;\n        this.boxSelectionX1 += width;\n    }\n\n    public insertChannel(): void {\n        const group: ChangeGroup = new ChangeGroup();\n        const insertIndex: number = this.boxSelectionChannel + this.boxSelectionHeight;\n        const isNoise: boolean = this._doc.song.getChannelIsNoise(insertIndex - 1);\n        const isMod: boolean = this._doc.song.getChannelIsMod(insertIndex - 1)\n        group.append(new ChangeAddChannel(this._doc, insertIndex, isNoise, isMod));\n        if (!group.isNoop()) {\n            this.boxSelectionY0 = this.boxSelectionY1 = insertIndex;\n            group.append(new ChangeChannelBar(this._doc, insertIndex, this._doc.bar));\n            this._doc.record(group);\n        }\n    }\n\n    public deleteBars(): void {\n        const group: ChangeGroup = new ChangeGroup();\n        if (this._doc.selection.patternSelectionActive) {\n\n            if (this.boxSelectionActive) {\n                group.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));\n            }\n\n            for (const channelIndex of this._eachSelectedChannel()) {\n                for (const pattern of this._eachSelectedPattern(channelIndex)) {\n                    group.append(new ChangeNoteTruncate(this._doc, pattern, this._doc.selection.patternSelectionStart, this._doc.selection.patternSelectionEnd));\n                }\n            }\n            group.append(new ChangePatternSelection(this._doc, 0, 0));\n        } else {\n            group.append(new ChangeDeleteBars(this._doc, this.boxSelectionBar, this.boxSelectionWidth));\n            const width: number = this.boxSelectionWidth;\n            this.boxSelectionX0 = Math.max(0, this.boxSelectionX0 - width);\n            this.boxSelectionX1 = Math.max(0, this.boxSelectionX1 - width);\n        }\n        this._doc.record(group);\n    }\n\n    public deleteChannel(): void {\n        this._doc.record(new ChangeRemoveChannel(this._doc, this.boxSelectionChannel, this.boxSelectionChannel + this.boxSelectionHeight - 1));\n        this.boxSelectionY0 = this.boxSelectionY1 = this._doc.channel;\n        ColorConfig.resetColors();\n    }\n\n    private * _eachSelectedChannel(): IterableIterator<number> {\n        for (let channelIndex: number = this.boxSelectionChannel; channelIndex < this.boxSelectionChannel + this.boxSelectionHeight; channelIndex++) {\n            yield channelIndex;\n        }\n    }\n\n    private * _eachSelectedBar(): IterableIterator<number> {\n        for (let bar: number = this.boxSelectionBar; bar < this.boxSelectionBar + this.boxSelectionWidth; bar++) {\n            yield bar;\n        }\n    }\n\n    private *_eachSelectedPattern(channelIndex: number): IterableIterator<Pattern> {\n        const handledPatterns: Dictionary<boolean> = {};\n        for (const bar of this._eachSelectedBar()) {\n            const currentPatternIndex: number = this._doc.song.channels[channelIndex].bars[bar];\n            if (currentPatternIndex == 0) continue;\n            if (handledPatterns[String(currentPatternIndex)]) continue;\n            handledPatterns[String(currentPatternIndex)] = true;\n            const pattern: Pattern | null = this._doc.song.getPattern(channelIndex, bar);\n            if (pattern == null) throw new Error();\n            yield pattern;\n        }\n    }\n\n    private _parseCopiedInstrumentArray(patternCopy: any, channelIndex: number): number[] {\n        const instruments: number[] = Array.from(patternCopy[\"instruments\"]).map(i => (<any>i) >>> 0);\n        discardInvalidPatternInstruments(instruments, this._doc.song, channelIndex);\n        return instruments;\n    }\n\n    private _patternIndexIsUnused(channelIndex: number, patternIndex: number): boolean {\n        for (let i: number = 0; i < this._doc.song.barCount; i++) {\n            if (this._doc.song.channels[channelIndex].bars[i] == patternIndex) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public copy(): void {\n        const channels: ChannelCopy[] = [];\n\n        for (const channelIndex of this._eachSelectedChannel()) {\n            const patterns: Dictionary<PatternCopy> = {};\n            const bars: number[] = [];\n\n            for (const bar of this._eachSelectedBar()) {\n                const patternNumber: number = this._doc.song.channels[channelIndex].bars[bar];\n                bars.push(patternNumber);\n                if (patterns[String(patternNumber)] == undefined) {\n                    const pattern: Pattern | null = this._doc.song.getPattern(channelIndex, bar);\n                    let instruments: number[] = this._doc.recentPatternInstruments[channelIndex];\n                    let notes: Note[] = [];\n                    if (pattern != null) {\n                        instruments = pattern.instruments.concat();\n\n                        if (this.patternSelectionActive) {\n                            for (const note of pattern.cloneNotes()) {\n                                if (note.end <= this.patternSelectionStart) continue;\n                                if (note.start >= this.patternSelectionEnd) continue;\n                                note.start -= this.patternSelectionStart;\n                                note.end -= this.patternSelectionStart;\n                                if (note.start < 0 || note.end > this.patternSelectionEnd - this.patternSelectionStart) {\n                                    new ChangeNoteLength(null, note, Math.max(note.start, 0), Math.min(this.patternSelectionEnd - this.patternSelectionStart, note.end));\n                                }\n                                notes.push(note);\n                            }\n                        } else {\n                            notes = pattern.notes;\n                        }\n                    }\n                    patterns[String(patternNumber)] = { \"instruments\": instruments, \"notes\": notes };\n                }\n            }\n\n            const channelCopy: ChannelCopy = {\n                \"isNoise\": this._doc.song.getChannelIsNoise(channelIndex),\n                \"isMod\": this._doc.song.getChannelIsMod(channelIndex),\n                \"patterns\": patterns,\n                \"bars\": bars,\n            };\n            channels.push(channelCopy);\n        }\n\n        const selectionCopy: SelectionCopy = {\n            \"partDuration\": this.patternSelectionActive ? this.patternSelectionEnd - this.patternSelectionStart : this._doc.song.beatsPerBar * Config.partsPerBeat,\n            \"channels\": channels,\n        };\n        window.localStorage.setItem(\"selectionCopy\", JSON.stringify(selectionCopy));\n        // Clear selection after copy\n        new ChangePatternSelection(this._doc, 0, 0);\n    }\n\n    // I'm sorry this function is so complicated!\n    // Basically I'm trying to avoid accidentally modifying patterns that are used\n    // elsewhere in the song (unless we're just pasting a single pattern) but I'm\n    // also trying to reuse patterns where it makes sense to do so, especially \n    // in the same channel it was copied from.\n    public pasteNotes(): void {\n        const selectionCopy: SelectionCopy | null = JSON.parse(String(window.localStorage.getItem(\"selectionCopy\")));\n        if (selectionCopy == null) return;\n        const channelCopies: ChannelCopy[] = selectionCopy[\"channels\"] || [];\n        const copiedPartDuration: number = selectionCopy[\"partDuration\"] >>> 0;\n\n        const group: ChangeGroup = new ChangeGroup();\n        const fillSelection: boolean = (this.boxSelectionWidth > 1 || this.boxSelectionHeight > 1);\n\n        const pasteHeight: number = fillSelection ? this.boxSelectionHeight : Math.min(channelCopies.length, this._doc.song.getChannelCount() - this.boxSelectionChannel);\n        for (let pasteChannel: number = 0; pasteChannel < pasteHeight; pasteChannel++) {\n            const channelCopy: ChannelCopy = channelCopies[pasteChannel % channelCopies.length];\n            const channelIndex: number = this.boxSelectionChannel + pasteChannel;\n\n            const isNoise: boolean = !!channelCopy[\"isNoise\"];\n            const isMod: boolean = !!channelCopy[\"isMod\"];\n            const patternCopies: Dictionary<PatternCopy> = channelCopy[\"patterns\"] || {};\n            const copiedBars: number[] = channelCopy[\"bars\"] || [];\n            if (copiedBars.length == 0) continue;\n            if (isNoise != this._doc.song.getChannelIsNoise(channelIndex)) continue;\n            if (isMod != this._doc.song.getChannelIsMod(channelIndex)) continue;\n\n            const pasteWidth: number = fillSelection ? this.boxSelectionWidth : Math.min(copiedBars.length, this._doc.song.barCount - this.boxSelectionBar);\n            if (!fillSelection && copiedBars.length == 1 && channelCopies.length == 1) {\n                // Special case: if there's just one pattern being copied, try to insert it\n                // into whatever pattern is already selected.\n                const copiedPatternIndex: number = copiedBars[0] >>> 0;\n                const bar: number = this.boxSelectionBar;\n                const currentPatternIndex: number = this._doc.song.channels[channelIndex].bars[bar];\n                if (copiedPatternIndex == 0 && currentPatternIndex == 0) continue;\n\n                const patternCopy: PatternCopy = patternCopies[String(copiedPatternIndex)];\n\n                const instrumentsCopy: number[] = this._parseCopiedInstrumentArray(patternCopy, channelIndex);\n\n                if (currentPatternIndex == 0) {\n                    const existingPattern: Pattern | undefined = this._doc.song.channels[channelIndex].patterns[copiedPatternIndex - 1];\n                    if (existingPattern != undefined &&\n                        !this.patternSelectionActive &&\n                        ((comparePatternNotes(patternCopy[\"notes\"], existingPattern.notes) && patternsContainSameInstruments(instrumentsCopy, existingPattern.instruments)) ||\n                            this._patternIndexIsUnused(channelIndex, copiedPatternIndex))) {\n                        group.append(new ChangePatternNumbers(this._doc, copiedPatternIndex, bar, channelIndex, 1, 1));\n                    } else {\n                        group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));\n                    }\n                }\n\n                const pattern: Pattern | null = this._doc.song.getPattern(channelIndex, bar);\n                if (pattern == null) throw new Error();\n                group.append(new ChangePaste(this._doc, pattern, patternCopy[\"notes\"], this.patternSelectionActive ? this.patternSelectionStart : 0, this.patternSelectionActive ? this.patternSelectionEnd : Config.partsPerBeat * this._doc.song.beatsPerBar, copiedPartDuration));\n                // @jummbus - I actually like it better if instruments copy over, unless it's not a mod and there are notes in the pattern.\n                if (currentPatternIndex == 0 || patternCopy.notes.length == 0 || channelIndex >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n                    this.selectInstrument(instrumentsCopy[0]);\n                    group.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instrumentsCopy, pattern));\n                }\n            } else if (this.patternSelectionActive) {\n                const reusablePatterns: Dictionary<number> = {};\n                const usedPatterns: Dictionary<boolean> = {};\n\n                group.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, pasteWidth, this.boxSelectionChannel, pasteHeight));\n\n                for (let pasteBar: number = 0; pasteBar < pasteWidth; pasteBar++) {\n                    const bar: number = this.boxSelectionBar + pasteBar;\n                    const copiedPatternIndex: number = copiedBars[pasteBar % copiedBars.length] >>> 0;\n                    const currentPatternIndex: number = this._doc.song.channels[channelIndex].bars[bar];\n                    const reusedIndex: string = [copiedPatternIndex, currentPatternIndex].join(\",\");\n                    if (copiedPatternIndex == 0 && currentPatternIndex == 0) continue;\n                    if (reusablePatterns[reusedIndex] != undefined) {\n                        group.append(new ChangePatternNumbers(this._doc, reusablePatterns[reusedIndex], bar, channelIndex, 1, 1));\n                        continue;\n                    }\n\n                    if (currentPatternIndex == 0) {\n                        group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));\n                        const patternCopy: PatternCopy = patternCopies[String(copiedPatternIndex)];\n                        const instrumentsCopy: number[] = this._parseCopiedInstrumentArray(patternCopy, channelIndex);\n                        const pattern: Pattern = this._doc.song.getPattern(channelIndex, bar)!;\n                        group.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instrumentsCopy, pattern));\n                    } else {\n                        const pattern: Pattern | null = this._doc.song.getPattern(channelIndex, bar);\n                        if (pattern == null) throw new Error();\n\n                        if (!usedPatterns[String(currentPatternIndex)]) {\n                            usedPatterns[String(currentPatternIndex)] = true;\n                        } else {\n                            // If this pattern is used here and elsewhere, it's not safe to modify it directly, so\n                            // make a duplicate of it and modify that instead.\n                            group.append(new ChangePatternNumbers(this._doc, 0, bar, channelIndex, 1, 1));\n                            group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));\n                            const newPattern: Pattern | null = this._doc.song.getPattern(channelIndex, bar);\n                            if (newPattern == null) throw new Error();\n                            for (const note of pattern.cloneNotes()) {\n                                group.append(new ChangeNoteAdded(this._doc, newPattern, note, newPattern.notes.length, false));\n                            }\n                            // Don't overwrite the existing pattern's instruments if only part of the pattern content is being replaced.\n                            //group.append(new ChangeSetPatternInstruments(this._doc, channelIndex, pattern.instruments, newPattern));\n                        }\n                    }\n\n                    const pattern: Pattern | null = this._doc.song.getPattern(channelIndex, bar);\n                    if (pattern == null) throw new Error();\n                    if (copiedPatternIndex == 0) {\n                        group.append(new ChangeNoteTruncate(this._doc, pattern, this.patternSelectionStart, this.patternSelectionEnd));\n                    } else {\n                        const patternCopy: PatternCopy = patternCopies[String(copiedPatternIndex)];\n                        group.append(new ChangePaste(this._doc, pattern, patternCopy[\"notes\"], this.patternSelectionStart, this.patternSelectionEnd, copiedPartDuration));\n                    }\n\n                    reusablePatterns[reusedIndex] = this._doc.song.channels[channelIndex].bars[bar];\n                }\n            } else {\n                for (let pasteBar: number = 0; pasteBar < pasteWidth; pasteBar++) {\n                    // When a pattern becomes unused when replaced by rectangular selection pasting,\n                    // remove all the notes from the pattern so that it may be reused.\n                    this.erasePatternInBar(group, channelIndex, this.boxSelectionBar + pasteBar);\n                }\n\n                const reusablePatterns: Dictionary<number> = {};\n                for (let pasteBar: number = 0; pasteBar < pasteWidth; pasteBar++) {\n                    const bar: number = this.boxSelectionBar + pasteBar;\n                    const copiedPatternIndex: number = copiedBars[pasteBar % copiedBars.length] >>> 0;\n                    const reusedIndex: string = String(copiedPatternIndex);\n                    if (copiedPatternIndex == 0) continue;\n                    if (reusablePatterns[reusedIndex] != undefined) {\n                        group.append(new ChangePatternNumbers(this._doc, reusablePatterns[reusedIndex], bar, channelIndex, 1, 1));\n                        continue;\n                    }\n                    const patternCopy: PatternCopy = patternCopies[String(copiedPatternIndex)];\n                    const instrumentsCopy: number[] = this._parseCopiedInstrumentArray(patternCopy, channelIndex);\n                    const existingPattern: Pattern | undefined = this._doc.song.channels[channelIndex].patterns[copiedPatternIndex - 1];\n\n                    if (existingPattern != undefined &&\n                        copiedPartDuration == Config.partsPerBeat * this._doc.song.beatsPerBar &&\n                        comparePatternNotes(patternCopy[\"notes\"], existingPattern.notes) &&\n                        patternsContainSameInstruments(instrumentsCopy, existingPattern.instruments)) {\n                        group.append(new ChangePatternNumbers(this._doc, copiedPatternIndex, bar, channelIndex, 1, 1));\n                    } else {\n                        if (existingPattern != undefined && this._patternIndexIsUnused(channelIndex, copiedPatternIndex)) {\n                            group.append(new ChangePatternNumbers(this._doc, copiedPatternIndex, bar, channelIndex, 1, 1));\n                        } else {\n                            group.append(new ChangeEnsurePatternExists(this._doc, channelIndex, bar));\n                        }\n                        const pattern: Pattern | null = this._doc.song.getPattern(channelIndex, bar);\n                        if (pattern == null) throw new Error();\n                        group.append(new ChangePaste(this._doc, pattern, patternCopy[\"notes\"], this.patternSelectionActive ? this.patternSelectionStart : 0, this.patternSelectionActive ? this.patternSelectionEnd : Config.partsPerBeat * this._doc.song.beatsPerBar, copiedPartDuration));\n                        group.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instrumentsCopy, pattern));\n                    }\n\n                    reusablePatterns[reusedIndex] = this._doc.song.channels[channelIndex].bars[bar];\n\n                }\n            }\n        }\n\n        this._doc.record(group);\n    }\n\n    // Set a bar's pattern number to zero, and if that pattern was not used\n    // elsewhere in the channel, erase all notes in it as well.\n    public erasePatternInBar(group: ChangeGroup, channelIndex: number, bar: number): void {\n        const removedPattern: number = this._doc.song.channels[channelIndex].bars[bar];\n        if (removedPattern != 0) {\n            group.append(new ChangePatternNumbers(this._doc, 0, bar, channelIndex, 1, 1));\n            if (this._patternIndexIsUnused(channelIndex, removedPattern)) {\n                // When a pattern becomes unused when replaced by rectangular selection pasting,\n                // remove all the notes from the pattern so that it may be reused.\n                this._doc.song.channels[channelIndex].patterns[removedPattern - 1].notes.length = 0;\n            }\n        }\n    }\n\n    public pasteNumbers(): void {\n        const selectionCopy: SelectionCopy | null = JSON.parse(String(window.localStorage.getItem(\"selectionCopy\")));\n        if (selectionCopy == null) return;\n        const channelCopies: ChannelCopy[] = selectionCopy[\"channels\"] || [];\n\n        const group: ChangeGroup = new ChangeGroup();\n        const fillSelection: boolean = this.boxSelectionActive;\n\n        const pasteHeight: number = fillSelection ? this.boxSelectionHeight : Math.min(channelCopies.length, this._doc.song.getChannelCount() - this.boxSelectionChannel);\n        for (let pasteChannel: number = 0; pasteChannel < pasteHeight; pasteChannel++) {\n            const channelCopy: ChannelCopy = channelCopies[pasteChannel % channelCopies.length];\n            const channelIndex: number = this.boxSelectionChannel + pasteChannel;\n\n            const copiedBars: number[] = channelCopy[\"bars\"] || [];\n            if (copiedBars.length == 0) continue;\n\n            const pasteWidth: number = fillSelection ? this.boxSelectionWidth : Math.min(copiedBars.length, this._doc.song.barCount - this.boxSelectionBar);\n            for (let pasteBar: number = 0; pasteBar < pasteWidth; pasteBar++) {\n                const copiedPatternIndex: number = copiedBars[pasteBar % copiedBars.length] >>> 0;\n                const bar: number = this.boxSelectionBar + pasteBar;\n\n                if (copiedPatternIndex > this._doc.song.patternsPerChannel) {\n                    group.append(new ChangePatternsPerChannel(this._doc, copiedPatternIndex));\n                }\n\n                group.append(new ChangePatternNumbers(this._doc, copiedPatternIndex, bar, channelIndex, 1, 1));\n            }\n        }\n\n        this._doc.record(group);\n    }\n\n    public selectAll(): void {\n        new ChangePatternSelection(this._doc, 0, 0);\n        if (this.boxSelectionBar == 0 &&\n            this.boxSelectionChannel == 0 &&\n            this.boxSelectionWidth == this._doc.song.barCount &&\n            this.boxSelectionHeight == this._doc.song.getChannelCount()) {\n            this.setTrackSelection(this._doc.bar, this._doc.bar, this._doc.channel, this._doc.channel);\n        } else {\n            this.setTrackSelection(0, this._doc.song.barCount - 1, 0, this._doc.song.getChannelCount() - 1);\n        }\n        this.selectionUpdated();\n    }\n\n    public selectChannel(): void {\n        new ChangePatternSelection(this._doc, 0, 0);\n        if (this.boxSelectionBar == 0 && this.boxSelectionWidth == this._doc.song.barCount) {\n            this.setTrackSelection(this._doc.bar, this._doc.bar, this.boxSelectionY0, this.boxSelectionY1);\n        } else {\n            this.setTrackSelection(0, this._doc.song.barCount - 1, this.boxSelectionY0, this.boxSelectionY1);\n        }\n        this.selectionUpdated();\n    }\n\n    public duplicatePatterns(): void {\n        this._doc.record(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));\n    }\n\n    public muteChannels(allChannels: boolean): void {\n        if (allChannels) {\n            let anyMuted: boolean = false;\n            for (let channelIndex: number = 0; channelIndex < this._doc.song.channels.length; channelIndex++) {\n                if (this._doc.song.channels[channelIndex].muted) {\n                    anyMuted = true;\n                    break;\n                }\n            }\n            for (let channelIndex: number = 0; channelIndex < this._doc.song.channels.length; channelIndex++) {\n                this._doc.song.channels[channelIndex].muted = !anyMuted;\n            }\n        } else {\n            let anyUnmuted: boolean = false;\n            for (const channelIndex of this._eachSelectedChannel()) {\n                if (!this._doc.song.channels[channelIndex].muted) {\n                    anyUnmuted = true;\n                    break;\n                }\n            }\n            for (const channelIndex of this._eachSelectedChannel()) {\n                this._doc.song.channels[channelIndex].muted = anyUnmuted;\n            }\n        }\n\n        this._doc.notifier.changed();\n    }\n\n    public soloChannels(invert: boolean): void {\n        let alreadySoloed: boolean = true;\n\n        // Soloing mod channels - solo all channels affected by the mod, instead\n        if (this.boxSelectionChannel >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n\n            const currentChannel = this._doc.song.channels[this.boxSelectionChannel];\n            const bar: number = currentChannel.bars[this._doc.bar] - 1;\n            const modInstrument = (bar >= 0) ? currentChannel.instruments[currentChannel.patterns[bar].instruments[0]] : currentChannel.instruments[this._doc.viewedInstrument[this.boxSelectionChannel]];\n            const soloPattern: boolean[] = [];\n            let matchesSoloPattern: boolean = !invert;\n\n            // First pass: determine solo pattern\n            for (let channelIndex: number = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {\n                soloPattern[channelIndex] = false;\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    if (modInstrument.modChannels[mod] == channelIndex) {\n                        soloPattern[channelIndex] = true;\n                    }\n                }\n            }\n\n            // Second pass: determine if channels match solo pattern, overall\n            for (let channelIndex: number = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {\n                if (this._doc.song.channels[channelIndex].muted == soloPattern[channelIndex]) {\n                    matchesSoloPattern = invert;\n                    break;\n                }\n            }\n\n            // Third pass: Actually apply solo pattern or unmute all\n            for (let channelIndex: number = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {\n                if (matchesSoloPattern) {\n                    this._doc.song.channels[channelIndex].muted = false;\n                }\n                else {\n                    this._doc.song.channels[channelIndex].muted = !soloPattern[channelIndex];\n                }\n            }\n\n        }\n        else {\n\n            for (let channelIndex: number = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {\n                const shouldBeMuted: boolean = (channelIndex < this.boxSelectionChannel || channelIndex >= this.boxSelectionChannel + this.boxSelectionHeight) ? !invert : invert;\n                if (this._doc.song.channels[channelIndex].muted != shouldBeMuted) {\n                    alreadySoloed = false;\n                    break;\n                }\n            }\n\n            if (alreadySoloed) {\n                for (let channelIndex: number = 0; channelIndex < this._doc.song.channels.length; channelIndex++) {\n                    this._doc.song.channels[channelIndex].muted = false;\n                }\n            } else {\n                for (let channelIndex: number = 0; channelIndex < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount; channelIndex++) {\n                    this._doc.song.channels[channelIndex].muted = (channelIndex < this.boxSelectionChannel || channelIndex >= this.boxSelectionChannel + this.boxSelectionHeight) ? !invert : invert;\n                }\n            }\n\n        }\n\n        this._doc.notifier.changed();\n    }\n\n    public forceRhythm(): void {\n        const group: ChangeGroup = new ChangeGroup();\n\n        if (this.boxSelectionActive) {\n\t\t    group.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));\n        }\n\n        for (const channelIndex of this._eachSelectedChannel()) {\n            for (const pattern of this._eachSelectedPattern(channelIndex)) {\n                group.append(new ChangePatternRhythm(this._doc, pattern));\n            }\n        }\n\n        this._doc.record(group);\n    }\n\n    public forceScale(): void {\n        const group: ChangeGroup = new ChangeGroup();\n\n        if (this.boxSelectionActive) {\n\t\t    group.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));\n        }\n\n        const scaleFlags: boolean[] = [true, false, false, false, false, false, false, false, false, false, false, false];\n        for (const channelIndex of this._eachSelectedChannel()) {\n            if (this._doc.song.getChannelIsNoise(channelIndex) || this._doc.song.getChannelIsMod(channelIndex)) continue;\n            for (const pattern of this._eachSelectedPattern(channelIndex)) {\n                unionOfUsedNotes(pattern, scaleFlags, this._doc.song.edo);\n            }\n        }\n\n        const scaleMap: number[] = generateScaleMap(scaleFlags, this._doc.song.scale, this._doc.song.edo);\n\n        for (const channelIndex of this._eachSelectedChannel()) {\n            if (this._doc.song.getChannelIsNoise(channelIndex) || this._doc.song.getChannelIsMod(channelIndex)) continue;\n            for (const pattern of this._eachSelectedPattern(channelIndex)) {\n                group.append(new ChangePatternScale(this._doc, pattern, scaleMap));\n            }\n        }\n\n        this._doc.record(group);\n    }\n\n    public setTrackSelection(newX0: number, newX1: number, newY0: number, newY1: number): void {\n        const canReplaceLastChange: boolean = true;//this._doc.lastChangeWas(this._changeTrack);\n        this._changeTrack = new ChangeGroup();\n        this._changeTrack.append(new ChangeTrackSelection(this._doc, newX0, newX1, newY0, newY1));\n        this._doc.record(this._changeTrack, canReplaceLastChange);\n    }\n\n    public transpose(upward: boolean, octave: boolean): void {\n        const canReplaceLastChange: boolean = this._doc.lastChangeWas(this._changeTranspose);\n        this._changeTranspose = new ChangeGroup();\n\n        if (this.boxSelectionActive) {\n\t\t    this._changeTranspose.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));\n        }\n\n        for (const channelIndex of this._eachSelectedChannel()) {\n            // Can't transpose mod channels.\n            if (channelIndex >= this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount)\n                continue;\n            for (const pattern of this._eachSelectedPattern(channelIndex)) {\n                this._changeTranspose.append(new ChangeTranspose(this._doc, channelIndex, pattern, upward, this._doc.prefs.notesOutsideScale, octave));\n\t\t\t}\n        }\n\n        this._doc.record(this._changeTranspose, canReplaceLastChange);\n    }\n\n    public swapChannels(offset: number): void {\n        const possibleSectionBoundaries: number[] = [\n            this._doc.song.pitchChannelCount,\n            this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount,\n            this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount + this._doc.song.modChannelCount,\n            this._doc.song.getChannelCount(),\n        ];\n        let channelSectionMin: number = 0;\n        let channelSectionMax: number = 0;\n        for (const nextBoundary of possibleSectionBoundaries) {\n            if ((this.boxSelectionChannel < nextBoundary && offset < 0) || (this.boxSelectionChannel + this.boxSelectionHeight <= nextBoundary)) {\n                channelSectionMax = nextBoundary - 1;\n                break;\n            }\n            channelSectionMin = nextBoundary;\n        }\n        const newSelectionMin: number = Math.max(this.boxSelectionChannel, channelSectionMin);\n        const newSelectionMax: number = Math.min(this.boxSelectionChannel + this.boxSelectionHeight - 1, channelSectionMax);\n        offset = Math.max(offset, channelSectionMin - newSelectionMin);\n        offset = Math.min(offset, channelSectionMax - newSelectionMax);\n\n        if (offset != 0) {\n            const canReplaceLastChange: boolean = this._doc.lastChangeWas(this._changeReorder);\n            this._changeReorder = new ChangeGroup();\n            this.boxSelectionY0 = newSelectionMin + offset;\n            this.boxSelectionY1 = newSelectionMax + offset;\n            this._changeReorder.append(new ChangeChannelOrder(this._doc, newSelectionMin, newSelectionMax, offset));\n            this._changeReorder.append(new ChangeChannelBar(this._doc, Math.max(this.boxSelectionY0, Math.min(this.boxSelectionY1, this._doc.channel + offset)), this._doc.bar));\n            this.selectionUpdated();\n            this._doc.record(this._changeReorder, canReplaceLastChange);\n        }\n    }\n\n    public selectInstrument(instrument: number): void {\n        if (this._doc.viewedInstrument[this._doc.channel] == instrument) {\n            // Multi-selection is not possible for mods... that would not make much sense.\n            if (this._doc.song.layeredInstruments && this._doc.song.patternInstruments && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) {\n                const canReplaceLastChange: boolean = this._doc.lastChangeWas(this._changeInstrument);\n                this._changeInstrument = new ChangeGroup();\n                const instruments: number[] = this._doc.recentPatternInstruments[this._doc.channel];\n                this._doc.notifier.changed(); // doc.recentPatternInstruments changes even if a 0 pattern is selected.\n                if (instruments.indexOf(instrument) == -1) {\n                    instruments.push(instrument);\n                    const maxLayers: number = this._doc.song.getMaxInstrumentsPerPattern(this._doc.channel);\n                    if (instruments.length > maxLayers) {\n                        instruments.splice(0, instruments.length - maxLayers);\n                    }\n                } else {\n                    instruments.splice(instruments.indexOf(instrument), 1);\n                    if (instruments.length == 0) instruments[0] = 0;\n                }\n\n                if (this.boxSelectionActive) {\n                    this._changeInstrument.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));\n                }\n                for (const channelIndex of this._eachSelectedChannel()) {\n                    for (const pattern of this._eachSelectedPattern(channelIndex)) {\n                        this._changeInstrument.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instruments, pattern));\n                    }\n                }\n                if (!this._changeInstrument.isNoop())\n                    this._doc.record(this._changeInstrument, canReplaceLastChange);\n            }\n        } else {\n            const canReplaceLastChange: boolean = this._doc.lastChangeWas(this._changeInstrument);\n            this._changeInstrument = new ChangeGroup();\n            this._changeInstrument.append(new ChangeViewInstrument(this._doc, instrument));\n\n            if (!(this._doc.song.layeredInstruments && this._doc.channel < this._doc.song.pitchChannelCount + this._doc.song.noiseChannelCount) && this._doc.song.patternInstruments) {\n                if (this.boxSelectionActive) {\n                    this._changeInstrument.append(new ChangeDuplicateSelectedReusedPatterns(this._doc, this.boxSelectionBar, this.boxSelectionWidth, this.boxSelectionChannel, this.boxSelectionHeight));\n                }\n                const instruments: number[] = [instrument];\n                for (const channelIndex of this._eachSelectedChannel()) {\n                    for (const pattern of this._eachSelectedPattern(channelIndex)) {\n                        this._changeInstrument.append(new ChangeSetPatternInstruments(this._doc, channelIndex, instruments, pattern));\n                    }\n                }\n                this._doc.record(this._changeInstrument, canReplaceLastChange);\n            } else if (!this._doc.hasRedoHistory()) {\n                // Don't erase existing redo history just to look at highlighted pattern.\n                this._doc.record(this._changeInstrument, canReplaceLastChange);\n            }\n        }\n    }\n\n    public resetBoxSelection(): void {\n        this.boxSelectionX0 = this.boxSelectionX1 = this._doc.bar;\n        this.boxSelectionY0 = this.boxSelectionY1 = this._doc.channel;\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {Scale, Config} from \"../synth/SynthConfig\";\n\nexport class Preferences {\n\tpublic static readonly defaultVisibleOctaves: number = 3;\n\t\n\tpublic autoPlay: boolean;\n\tpublic autoFollow: boolean;\n\tpublic enableNotePreview: boolean;\n\tpublic showFifth: boolean;\n\tpublic notesOutsideScale: boolean;\n\tpublic defaultScale: number;\n\tpublic showLetters: boolean;\n\tpublic showChannels: boolean;\n\tpublic showScrollBar: boolean;\n\tpublic alwaysFineNoteVol: boolean;\n\tpublic displayVolumeBar: boolean;\n\tpublic instrumentCopyPaste: boolean;\n\tpublic enableChannelMuting: boolean;\n\tpublic colorTheme: string;\n\tpublic layout: string;\n\tpublic displayBrowserUrl: boolean;\n\tpublic volume: number = 75;\n\tpublic visibleOctaves: number = Preferences.defaultVisibleOctaves;\n\tpublic pressControlForShortcuts: boolean;\n\tpublic keyboardLayout: string;\n\tpublic bassOffset: number;\n\tpublic enableMidi: boolean;\n\tpublic showRecordButton: boolean;\n\tpublic snapRecordedNotesToRhythm: boolean;\n\tpublic ignorePerformedNotesNotInScale: boolean;\n\tpublic metronomeCountIn: boolean;\n\tpublic metronomeWhileRecording: boolean;\n\t\n\tconstructor() {\n\t\tthis.reload();\n\t}\n\t\n\tpublic reload(): void {\n\t\tthis.autoPlay = window.localStorage.getItem(\"autoPlay\") == \"true\";\n\t\tthis.autoFollow = window.localStorage.getItem(\"autoFollow\") != \"false\";\n\t\tthis.enableNotePreview = window.localStorage.getItem(\"enableNotePreview\") != \"false\";\n\t\tthis.showFifth = window.localStorage.getItem(\"showFifth\") == \"true\";\n\t\tthis.notesOutsideScale = window.localStorage.getItem(\"notesOutsideScale\") == \"true\";\n\t\tthis.showLetters = window.localStorage.getItem(\"showLetters\") == \"true\";\n\t\tthis.showChannels = window.localStorage.getItem(\"showChannels\") == \"true\";\n\t\tthis.showScrollBar = window.localStorage.getItem(\"showScrollBar\") == \"true\";\n\t\tthis.alwaysFineNoteVol = window.localStorage.getItem(\"alwaysFineNoteVol\") == \"true\";\n\t\tthis.displayVolumeBar = window.localStorage.getItem(\"displayVolumeBar\") == \"true\";\n\t\tthis.instrumentCopyPaste = window.localStorage.getItem(\"instrumentCopyPaste\") == \"true\";\n\t\tthis.enableChannelMuting = window.localStorage.getItem(\"enableChannelMuting\") == \"true\";\n\t\tthis.displayBrowserUrl = window.localStorage.getItem(\"displayBrowserUrl\") != \"false\";\n\t\tthis.pressControlForShortcuts = window.localStorage.getItem(\"pressControlForShortcuts\") == \"true\";\n\t\tthis.enableMidi = window.localStorage.getItem(\"enableMidi\") != \"false\";\n\t\tthis.showRecordButton = window.localStorage.getItem(\"showRecordButton\") == \"true\";\n\t\tthis.snapRecordedNotesToRhythm = window.localStorage.getItem(\"snapRecordedNotesToRhythm\") == \"true\";\n\t\tthis.ignorePerformedNotesNotInScale = window.localStorage.getItem(\"ignorePerformedNotesNotInScale\") == \"true\";\n\t\tthis.metronomeCountIn = window.localStorage.getItem(\"metronomeCountIn\") != \"false\";\n\t\tthis.metronomeWhileRecording = window.localStorage.getItem(\"metronomeWhileRecording\") != \"false\";\n\t\tthis.keyboardLayout = window.localStorage.getItem(\"keyboardLayout\") || \"wickiHayden\";\n\t\tthis.bassOffset = (+(<any>window.localStorage.getItem(\"bassOffset\"))) || 0;\n\t\tthis.layout = window.localStorage.getItem(\"layout\") || \"small\";\n\t\tthis.colorTheme = window.localStorage.getItem(\"colorTheme\") || \"jummbox classic\";\n\t\tthis.visibleOctaves = ((<any>window.localStorage.getItem(\"visibleOctaves\")) >>> 0) || Preferences.defaultVisibleOctaves;\n\t\t\n\t\tconst defaultScale: Scale | undefined = Config.scales.dictionary[window.localStorage.getItem(\"defaultScale\")!];\n\t\tthis.defaultScale = (defaultScale != undefined) ? defaultScale.index : 0;\n\t\t\n\t\tif (window.localStorage.getItem(\"volume\") != null) {\n\t\t\tthis.volume = Math.min(<any>window.localStorage.getItem(\"volume\") >>> 0, 75);\n\t\t}\n\t\t\n\t\tif (window.localStorage.getItem(\"fullScreen\") != null) {\n\t\t\tif (window.localStorage.getItem(\"fullScreen\") == \"true\") this.layout = \"long\";\n\t\t\twindow.localStorage.removeItem(\"fullScreen\");\n\t\t}\n\t}\n\t\n\tpublic save(): void {\n\t\twindow.localStorage.setItem(\"autoPlay\", this.autoPlay ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"autoFollow\", this.autoFollow ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"enableNotePreview\", this.enableNotePreview ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"showFifth\", this.showFifth ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"notesOutsideScale\", this.notesOutsideScale ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"defaultScale\", Config.scales[this.defaultScale].name);\n\t\twindow.localStorage.setItem(\"showLetters\", this.showLetters ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"showChannels\", this.showChannels ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"showScrollBar\", this.showScrollBar ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"alwaysFineNoteVol\", this.alwaysFineNoteVol ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"displayVolumeBar\", this.displayVolumeBar ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"enableChannelMuting\", this.enableChannelMuting ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"instrumentCopyPaste\", this.instrumentCopyPaste ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"displayBrowserUrl\", this.displayBrowserUrl ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"pressControlForShortcuts\", this.pressControlForShortcuts ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"enableMidi\", this.enableMidi ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"showRecordButton\", this.showRecordButton ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"snapRecordedNotesToRhythm\", this.snapRecordedNotesToRhythm ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"ignorePerformedNotesNotInScale\", this.ignorePerformedNotesNotInScale ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"metronomeCountIn\", this.metronomeCountIn ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"metronomeWhileRecording\", this.metronomeWhileRecording ? \"true\" : \"false\");\n\t\twindow.localStorage.setItem(\"keyboardLayout\", this.keyboardLayout);\n\t\twindow.localStorage.setItem(\"bassOffset\", String(this.bassOffset));\n\t\twindow.localStorage.setItem(\"layout\", this.layout);\n\t\twindow.localStorage.setItem(\"colorTheme\", this.colorTheme);\n\t\twindow.localStorage.setItem(\"volume\", String(this.volume));\n\t\twindow.localStorage.setItem(\"visibleOctaves\", String(this.visibleOctaves));\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nexport class ChangeNotifier {\n\tprivate _watchers: (() => void)[] = [];\n\tprivate _dirty: boolean = false;\n\n\tpublic watch(watcher: () => void): void {\n\t\tif (this._watchers.indexOf(watcher) == -1) {\n\t\t\tthis._watchers.push(watcher);\n\t\t}\n\t}\n\n\tpublic unwatch(watcher: () => void): void {\n\t\tconst index: number = this._watchers.indexOf(watcher);\n\t\tif (index != -1) {\n\t\t\tthis._watchers.splice(index, 1);\n\t\t}\n\t}\n\n\tpublic changed(): void {\n\t\tthis._dirty = true;\n\t}\n\n\tpublic notifyWatchers(): void {\n\t\tif (!this._dirty) return;\n\t\tthis._dirty = false;\n\t\tfor (const watcher of this._watchers.concat()) {\n\t\t\twatcher();\n\t\t}\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport {Config} from \"../synth/SynthConfig\";\nimport {isMobile} from \"./EditorConfig\";\nimport {Pattern, Channel, Song, Synth} from \"../synth/synth\";\nimport { SongRecovery, generateUid, errorAlert } from \"./SongRecovery\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport { Layout } from \"./Layout\";\nimport { SongPerformance } from \"./SongPerformance\";\nimport { Selection } from \"./Selection\";\nimport { Preferences } from \"./Preferences\";\nimport { Change } from \"./Change\";\nimport { ChangeNotifier } from \"./ChangeNotifier\";\nimport { ChangeSong, setDefaultInstruments, discardInvalidPatternInstruments, ChangeHoldingModRecording} from \"./changes\";\n\ninterface HistoryState {\n\tcanUndo: boolean;\n\tsequenceNumber: number;\n\tbar: number;\n\tchannel: number;\n\tinstrument: number;\n\trecoveryUid: string;\n\tprompt: string | null;\n\t\tselection: {x0: number, x1: number, y0: number, y1: number, start: number, end: number};\n}\n\nexport class SongDocument {\n\tpublic song: Song;\n\tpublic synth: Synth;\n\tpublic performance: SongPerformance;\n\tpublic readonly notifier: ChangeNotifier = new ChangeNotifier();\n\tpublic readonly selection: Selection = new Selection(this);\n\tpublic readonly prefs: Preferences = new Preferences();\n\tpublic channel: number = 0;\n\tpublic muteEditorChannel: number = 0;\n\tpublic bar: number = 0;\n\tpublic recalcChannelNames: boolean;\n\tpublic recentPatternInstruments: number[][] = [];\n\tpublic viewedInstrument: number[] = [];\n\tpublic recordingModulators: boolean = false;\n\tpublic continuingModRecordingChange: ChangeHoldingModRecording | null = null;\n\t\n\tpublic trackVisibleBars: number = 16;\n\tpublic trackVisibleChannels: number = 4;\n\tpublic barScrollPos: number = 0;\n\tpublic channelScrollPos: number = 0;\n\tpublic prompt: string | null = null;\n\t\n\tpublic addedEffect: boolean = false;\n\tpublic addedEnvelope: boolean = false;\n\tpublic currentPatternIsDirty: boolean = false;\n\tpublic modRecordingHandler: () => void;\n\t\n\tprivate static readonly _maximumUndoHistory: number = 300;\n\tprivate _recovery: SongRecovery = new SongRecovery();\n\tprivate _recoveryUid: string;\n\tprivate _recentChange: Change | null = null;\n\tprivate _sequenceNumber: number = 0;\n\tprivate _lastSequenceNumber: number = 0;\n\tprivate _stateShouldBePushed: boolean = false;\n\tprivate _recordedNewSong: boolean = false;\n\tpublic _waitingToUpdateState: boolean = false;\n\t\t\n\tconstructor() {\n\t\tthis.notifier.watch(this._validateDocState);\n\t\t\n\t\tColorConfig.setTheme(this.prefs.colorTheme);\n\t\tLayout.setLayout(this.prefs.layout);\n\t\t\n\t\tif (window.sessionStorage.getItem(\"currentUndoIndex\") == null) {\n\t\t\twindow.sessionStorage.setItem(\"currentUndoIndex\", \"0\");\n\t\t\twindow.sessionStorage.setItem(\"oldestUndoIndex\", \"0\");\n\t\t\twindow.sessionStorage.setItem(\"newestUndoIndex\", \"0\");\n\t\t}\n\t\t\t\n\t\tlet songString: string = window.location.hash;\n\t\tif (songString == \"\") {\n\t\t\tsongString = this._getHash();\n\t\t}\n\t\ttry {\n\t\t\tthis.song = new Song(songString);\n\t\t\tif (songString == \"\" || songString == undefined) {\n\t\t\t\tsetDefaultInstruments(this.song);\n\t\t\t\tthis.song.scale = this.prefs.defaultScale;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\terrorAlert(error);\n\t\t}\n\t\tsongString = this.song.toBase64String();\n\t\tthis.synth = new Synth(this.song);\n\t\tthis.synth.volume = this._calcVolume();\n\t\tthis.synth.anticipatePoorPerformance = isMobile;\n\t\t\n\t\tlet state: HistoryState | null = this._getHistoryState();\n\t\tif (state == null) {\n\t\t\t// When the page is first loaded, indicate that undo is NOT possible.\n\t\t\tstate = {canUndo: false, sequenceNumber: 0, bar: 0, channel: 0, instrument: 0, recoveryUid: generateUid(), prompt: null, selection: this.selection.toJSON()};\n\t\t}\n\t\tif (state.recoveryUid == undefined) state.recoveryUid = generateUid();\n\t\tthis._replaceState(state, songString);\n\t\twindow.addEventListener(\"hashchange\", this._whenHistoryStateChanged);\n\t\twindow.addEventListener(\"popstate\", this._whenHistoryStateChanged);\n\t\t\t\n\t\tthis.bar = state.bar | 0;\n\t\tthis.channel = state.channel | 0;\n\t\tfor (let i: number = 0; i <= this.channel; i++) this.viewedInstrument[i] = 0;\n\t\tthis.viewedInstrument[this.channel] = state.instrument | 0;\n\t\tthis._recoveryUid = state.recoveryUid;\n\t\t//this.barScrollPos = Math.max(0, this.bar - (this.trackVisibleBars - 6));\n\t\tthis.prompt = state.prompt;\n\t\tthis.selection.fromJSON(state.selection);\n\t\tthis.selection.scrollToSelectedPattern();\n\t\t\t\n\t\t// For all input events, catch them when they are about to finish bubbling,\n\t\t// presumably after all handlers are done updating the model, then update the\n\t\t// view before the screen renders. mouseenter and mouseleave do not bubble,\n\t\t// but they are immediately followed by mousemove which does. \n\t\tfor (const eventName of [\"change\", \"click\", \"keyup\", \"mousedown\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"]) {\n\t\t\twindow.addEventListener(eventName, this._cleanDocument);\n\t\t}\n\t\tfor (const eventName of [\"keydown\", \"input\", \"mousemove\"]) {\n\t\t\twindow.addEventListener(eventName, this._cleanDocumentIfNotRecordingMods);\n\t\t}\n\t\t\n\t\tthis._validateDocState();\n\t\tthis.performance = new SongPerformance(this);\n\t}\n\t\t\n\tpublic toggleDisplayBrowserUrl() {\n\t\tconst state: HistoryState | null = this._getHistoryState();\n\t\tif (state == null) throw new Error(\"History state is null.\");\n\t\tthis.prefs.displayBrowserUrl = !this.prefs.displayBrowserUrl;\n\t\tthis._replaceState(state, this.song.toBase64String());\n\t}\n\t\t\n\tprivate _getHistoryState(): HistoryState | null {\n\t\tif (this.prefs.displayBrowserUrl) {\n\t\t\treturn window.history.state;\n\t\t} else {\n\t\t\tconst json: any = JSON.parse(window.sessionStorage.getItem(window.sessionStorage.getItem(\"currentUndoIndex\")!)!);\n\t\t\treturn json == null ? null : json.state;\n\t\t}\n\t}\n\t\t\n\tprivate _getHash(): string {\n\t\tif (this.prefs.displayBrowserUrl) {\n\t\t\treturn window.location.hash;\n\t\t} else {\n\t\t\tconst json: any = JSON.parse(window.sessionStorage.getItem(window.sessionStorage.getItem(\"currentUndoIndex\")!)!);\n\t\t\treturn json == null ? \"\" : json.hash;\n\t\t}\n\t}\n\t\t\n\tprivate _replaceState(state: HistoryState, hash: string): void {\n\t\tif (this.prefs.displayBrowserUrl) {\n\t\t\twindow.history.replaceState(state, \"\", \"#\" + hash);\n\t\t} else {\n\t\t\twindow.sessionStorage.setItem(window.sessionStorage.getItem(\"currentUndoIndex\") || \"0\", JSON.stringify({state, hash}));\n\t\t\twindow.history.replaceState(null, \"\", location.pathname);\n\t\t}\n\t}\n\t\t\n\tprivate _pushState(state: HistoryState, hash: string): void {\n\t\tif (this.prefs.displayBrowserUrl) {\n\t\t\twindow.history.pushState(state, \"\", \"#\" + hash);\n\t\t} else {\n\t\t\tlet currentIndex: number = Number(window.sessionStorage.getItem(\"currentUndoIndex\"));\n\t\t\tlet oldestIndex: number = Number(window.sessionStorage.getItem(\"oldestUndoIndex\"));\n\t\t\tcurrentIndex = (currentIndex + 1) % SongDocument._maximumUndoHistory;\n\t\t\twindow.sessionStorage.setItem(\"currentUndoIndex\", String(currentIndex));\n\t\t\twindow.sessionStorage.setItem(\"newestUndoIndex\", String(currentIndex));\n\t\t\tif (currentIndex == oldestIndex) {\n\t\t\t\toldestIndex = (oldestIndex + 1) % SongDocument._maximumUndoHistory;\n\t\t\t\twindow.sessionStorage.setItem(\"oldestUndoIndex\", String(oldestIndex));\n\t\t\t}\n\t\t\t\twindow.sessionStorage.setItem(String(currentIndex), JSON.stringify({state, hash}));\n\t\t\twindow.history.replaceState(null, \"\", location.pathname);\n\t\t}\n\t\tthis._lastSequenceNumber = state.sequenceNumber;\n\t}\n\n\tpublic hasRedoHistory(): boolean {\n\t\treturn this._lastSequenceNumber > this._sequenceNumber;\n\t}\t\n\t\t\n\tprivate _forward(): void {\n\t\tif (this.prefs.displayBrowserUrl) {\n\t\t\twindow.history.forward();\n\t\t} else {\n\t\t\tlet currentIndex: number = Number(window.sessionStorage.getItem(\"currentUndoIndex\"));\n\t\t\tlet newestIndex: number = Number(window.sessionStorage.getItem(\"newestUndoIndex\"));\n\t\t\tif (currentIndex != newestIndex) {\n\t\t\t\tcurrentIndex = (currentIndex + 1) % SongDocument._maximumUndoHistory;\n\t\t\t\twindow.sessionStorage.setItem(\"currentUndoIndex\", String(currentIndex));\n\t\t\t\tsetTimeout(this._whenHistoryStateChanged);\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tprivate _back(): void {\n\t\tif (this.prefs.displayBrowserUrl) {\n\t\t\twindow.history.back();\n\t\t} else {\n\t\t\tlet currentIndex: number = Number(window.sessionStorage.getItem(\"currentUndoIndex\"));\n\t\t\tlet oldestIndex: number = Number(window.sessionStorage.getItem(\"oldestUndoIndex\"));\n\t\t\tif (currentIndex != oldestIndex) {\n\t\t\t\tcurrentIndex = (currentIndex + SongDocument._maximumUndoHistory - 1) % SongDocument._maximumUndoHistory;\n\t\t\t\twindow.sessionStorage.setItem(\"currentUndoIndex\", String(currentIndex));\n\t\t\t\tsetTimeout(this._whenHistoryStateChanged);\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tprivate _whenHistoryStateChanged = (): void => {\n\t\tif (this.synth.recording) {\n\t\t\t// Changes to the song while it's recording to could mess up the recording so just abort the recording.\n\t\t\tthis.performance.abortRecording();\n\t\t}\n\t\t\n\t\tif (window.history.state == null && window.location.hash != \"\") {\n\t\t\t// The user changed the hash directly.\n\t\t\tthis._sequenceNumber++;\n\t\t\tthis._resetSongRecoveryUid();\n\t\t\tconst state: HistoryState = {canUndo: true, sequenceNumber: this._sequenceNumber, bar: this.bar, channel: this.channel, instrument: this.viewedInstrument[this.channel], recoveryUid: this._recoveryUid, prompt: null, selection: this.selection.toJSON()};\n\t\t\ttry {\n\t\t\t\tnew ChangeSong(this, window.location.hash);\n\t\t\t} catch (error) {\n\t\t\t\terrorAlert(error);\n\t\t\t}\n\t\t\tthis.prompt = state.prompt;\n\t\t\tif (this.prefs.displayBrowserUrl) {\n\t\t\t\tthis._replaceState(state, this.song.toBase64String());\n\t\t\t} else {\n\t\t\t\tthis._pushState(state, this.song.toBase64String());\n\t\t\t}\n\t\t\tthis.forgetLastChange();\n\t\t\tthis.notifier.notifyWatchers();\n\t\t\t// Stop playing, and go to start when pasting new song in.\n\t\t\tthis.synth.pause();\n\t\t\tthis.synth.goToBar(0);\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\tconst state: HistoryState | null = this._getHistoryState();\n\t\tif (state == null) throw new Error(\"History state is null.\");\n\t\t\t\n\t\t// Abort if we've already handled the current state. \n\t\tif (state.sequenceNumber == this._sequenceNumber) return;\n\t\t\t\n\t\tthis.bar = state.bar;\n\t\tthis.channel = state.channel;\n\t\tthis.viewedInstrument[this.channel] = state.instrument;\n\t\tthis._sequenceNumber = state.sequenceNumber;\n\t\tthis.prompt = state.prompt;\n\t\ttry {\n\t\t\tnew ChangeSong(this, this._getHash());\n\t\t} catch (error) {\n\t\t\terrorAlert(error);\n\t\t}\n\t\t\t\n\t\tthis._recoveryUid = state.recoveryUid;\n\t\tthis.selection.fromJSON(state.selection);\n\t\t\t\n\t\t//this.barScrollPos = Math.min(this.bar, Math.max(this.bar - (this.trackVisibleBars - 1), this.barScrollPos));\n\t\t\t\n\t\tthis.forgetLastChange();\n\t\tthis.notifier.notifyWatchers();\n\t}\n\t\t\n\tprivate _cleanDocument = (): void => {\n\t\tthis.notifier.notifyWatchers();\n\t}\n\n\tprivate _cleanDocumentIfNotRecordingMods = (): void => {\n\t\tif (!this.recordingModulators)\n\t\t\tthis.notifier.notifyWatchers();\n\t\telse {\n\t\t\tthis.modRecordingHandler();\n        }\n\n    }\n\t\n\tprivate _validateDocState = (): void => {\n\t\tconst channelCount: number = this.song.getChannelCount();\n\t\tfor (let i: number = this.recentPatternInstruments.length; i < channelCount; i++) {\n\t\t\tthis.recentPatternInstruments[i] = [0];\n\t}\n\t\tthis.recentPatternInstruments.length = channelCount;\n\t\tfor (let i: number = 0; i < channelCount; i++) {\n\t\t\tif (i == this.channel) {\n\t\t\t\tif (this.song.patternInstruments) {\n\t\t\t\t\tconst pattern: Pattern | null = this.song.getPattern(this.channel, this.bar);\n\t\t\t\t\tif (pattern != null) {\n\t\t\t\t\t\tthis.recentPatternInstruments[i] = pattern.instruments.concat();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst channel: Channel = this.song.channels[this.channel];\n\t\t\t\t\tfor (let j: number = 0; j < channel.instruments.length; j++) {\n\t\t\t\t\t\tthis.recentPatternInstruments[i][j] = j;\n\t\t\t\t\t}\n\t\t\t\t\tthis.recentPatternInstruments[i].length = channel.instruments.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdiscardInvalidPatternInstruments(this.recentPatternInstruments[i], this.song, i);\n\t\t}\n\n\t\tfor (let i: number = this.viewedInstrument.length; i < channelCount; i++) {\n\t\t\tthis.viewedInstrument[i] = 0;\n\t\t}\n\t\tthis.viewedInstrument.length = channelCount;\n\t\tfor (let i: number = 0; i < channelCount; i++) {\n\t\t\tif (this.song.patternInstruments && !this.song.layeredInstruments && i == this.channel) {\n\t\t\t\tconst pattern: Pattern | null = this.song.getPattern(this.channel, this.bar);\n\t\t\t\tif (pattern != null) {\n\t\t\t\t\tthis.viewedInstrument[i] = pattern.instruments[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.viewedInstrument[i] = Math.min(this.viewedInstrument[i] | 0, this.song.channels[i].instruments.length - 1);\n\t\t}\n\t\t\n\t\tconst highlightedPattern: Pattern | null = this.getCurrentPattern();\n\t\tif (highlightedPattern != null && this.song.patternInstruments) {\n\t\t\tthis.recentPatternInstruments[this.channel] = highlightedPattern.instruments.concat();\n\t\t}\n\t\t\n\t\t// Normalize selection.\n\t\t// I'm allowing the doc.bar to drift outside the box selection while playing\n\t\t// because it may auto-follow the playhead outside the selection but it would\n\t\t// be annoying to lose your selection just because the song is playing.\n\t\tif ((!this.synth.playing && (this.bar < this.selection.boxSelectionBar || this.selection.boxSelectionBar + this.selection.boxSelectionWidth <= this.bar)) ||\n\t\t\tthis.channel < this.selection.boxSelectionChannel ||\n\t\t\tthis.selection.boxSelectionChannel + this.selection.boxSelectionHeight <= this.channel ||\n\t\t\tthis.song.barCount < this.selection.boxSelectionBar + this.selection.boxSelectionWidth ||\n\t\t\tchannelCount < this.selection.boxSelectionChannel + this.selection.boxSelectionHeight ||\n\t\t\t(this.selection.boxSelectionWidth == 1 && this.selection.boxSelectionHeight == 1)) {\n\t\t\tthis.selection.resetBoxSelection();\n\t\t}\n\n\t\tthis.barScrollPos     = Math.max(0, Math.min(this.song.barCount          - this.trackVisibleBars,     this.barScrollPos));\n\t\tthis.channelScrollPos = Math.max(0, Math.min(this.song.getChannelCount() - this.trackVisibleChannels, this.channelScrollPos));\n\n\t}\n\t\t\n\tprivate _updateHistoryState = (): void => {\n\t\tthis._waitingToUpdateState = false;\n\t\tlet hash: string;\n\t\ttry {\n\t\t\t// Ensure that the song is not corrupted before saving it.\n\t\t\thash = this.song.toBase64String();\n\t\t} catch (error) {\n\t\t\terrorAlert(error);\n\t\t\treturn;\n\t\t}\n\t\tif (this._stateShouldBePushed) this._sequenceNumber++;\n\t\tif (this._recordedNewSong) {\n\t\t\tthis._resetSongRecoveryUid();\n\t\t} else {\n\t\t\tthis._recovery.saveVersion(this._recoveryUid, this.song.title, hash);\n\t\t}\n\t\tlet state: HistoryState = {canUndo: true, sequenceNumber: this._sequenceNumber, bar: this.bar, channel: this.channel, instrument: this.viewedInstrument[this.channel], recoveryUid: this._recoveryUid, prompt: this.prompt, selection: this.selection.toJSON()};\n\t\tif (this._stateShouldBePushed) {\n\t\t\tthis._pushState(state, hash);\n\t\t} else {\n\t\t\tthis._replaceState(state, hash);\n\t\t}\n\t\tthis._stateShouldBePushed = false;\n\t\tthis._recordedNewSong = false;\n\t}\n\t\t\n\tpublic record(change: Change, replace: boolean = false, newSong: boolean = false): void {\n\t\tif (change.isNoop()) {\n\t\t\tthis._recentChange = null;\n\t\t\tif (replace) this._back();\n\t\t} else {\n\t\t\tchange.commit();\n\t\t\tthis._recentChange = change;\n\t\t\tthis._stateShouldBePushed = this._stateShouldBePushed || !replace;\n\t\t\tthis._recordedNewSong = this._recordedNewSong || newSong;\n\t\t\tif (!this._waitingToUpdateState) {\n\t\t\t\t// Defer updating the url/history until all sequenced changes have\n\t\t\t\t// committed and the interface has rendered the latest changes to\n\t\t\t\t// improve perceived responsiveness.\n\t\t\t\twindow.requestAnimationFrame(this._updateHistoryState);\n\t\t\t\tthis._waitingToUpdateState = true;\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tprivate _resetSongRecoveryUid(): void {\n\t\tthis._recoveryUid = generateUid();\n\t}\n\t\t\n\tpublic openPrompt(prompt: string): void {\n\t\tthis.prompt = prompt;\n\t\tconst hash: string = this.song.toBase64String();\n\t\tthis._sequenceNumber++;\n\t\tconst state = {canUndo: true, sequenceNumber: this._sequenceNumber, bar: this.bar, channel: this.channel, instrument: this.viewedInstrument[this.channel], recoveryUid: this._recoveryUid, prompt: this.prompt, selection: this.selection.toJSON()};\n\t\tthis._pushState(state, hash);\n\t}\n\t\t\n\tpublic undo(): void {\n\t\tconst state: HistoryState | null = this._getHistoryState();\n\t\tif (state == null || state.canUndo) this._back();\n\t}\n\t\t\n\tpublic redo(): void {\n\t\tthis._forward();\n\t}\n\t\t\n\tpublic setProspectiveChange(change: Change | null): void {\n\t\tthis._recentChange = change;\n\t}\n\t\t\n\tpublic forgetLastChange(): void {\n\t\tthis._recentChange = null;\n\t}\n\n\tpublic checkLastChange(): Change | null {\n\t\treturn this._recentChange;\n\t}\n\t\t\n\tpublic lastChangeWas(change: Change | null): boolean {\n\t\treturn change != null && change == this._recentChange;\n\t}\n\t\t\n\tpublic goBackToStart(): void {\n\t\tthis.bar = 0;\n\t\tthis.channel = 0;\n\t\tthis.barScrollPos = 0;\n\t\tthis.channelScrollPos = 0;\n\t\tthis.synth.snapToStart();\n\t\tthis.notifier.changed();\n\t}\n\t\n\tpublic setVolume(val: number): void {\n\t\tthis.prefs.volume = val;\n\t\tthis.prefs.save();\n\t\tthis.synth.volume = this._calcVolume();\n\t}\n\t\t\n\tprivate _calcVolume(): number {\n\t\treturn Math.min(1.0, Math.pow(this.prefs.volume / 50.0, 0.5)) * Math.pow(2.0, (this.prefs.volume - 75.0) / 25.0);\n\t}\n\t\t\n\tpublic getCurrentPattern(barOffset: number = 0): Pattern | null {\n\t\treturn this.song.getPattern(this.channel, this.bar + barOffset);\n\t}\n\t\t\n\tpublic getCurrentInstrument(barOffset: number = 0): number {\n\t\tif (barOffset == 0) {\n\t\t\treturn this.viewedInstrument[this.channel];\n\t\t} else {\n\t\t\tconst pattern: Pattern | null = this.getCurrentPattern(barOffset);\n\t\t\treturn pattern == null ? 0 : pattern.instruments[0];\n        }\n\t}\n\t\t\n\tpublic getMobileLayout(): boolean {\n\t\treturn (this.prefs.layout == \"wide\") ? window.innerWidth <= 1000 : window.innerWidth <= 710;\n\t}\n\t\t\n\tpublic getBarWidth(): number {\n\t\t// Bugfix: In wide fullscreen, the 32 pixel display doesn't work as the trackEditor is still horizontally constrained\n\t\treturn (!this.getMobileLayout() && this.prefs.enableChannelMuting && (!this.getFullScreen() || this.prefs.layout == \"wide\")) ? 30 : 32;\n\t}\n\t\n\tpublic getChannelHeight(): number {\n\t\tconst squashed: boolean = this.getMobileLayout() || this.song.getChannelCount() > 4 || (this.song.barCount > this.trackVisibleBars && this.song.getChannelCount() > 3);\n\t\t// TODO: Jummbox widescreen should allow more channels before squashing or megasquashing\n\t\tconst megaSquashed: boolean = !this.getMobileLayout() && (((this.prefs.layout != \"wide\") && this.song.getChannelCount() > 11) || this.song.getChannelCount() > 22);\n\t\treturn megaSquashed ? 23 : (squashed ? 27 : 32);\n\t}\n\t\t\n\tpublic getFullScreen(): boolean {\n\t\treturn !this.getMobileLayout() && (this.prefs.layout != \"small\");\n\t}\n\t\n\tpublic getVisibleOctaveCount(): number {\n\t\treturn this.getFullScreen() ? this.prefs.visibleOctaves : Preferences.defaultVisibleOctaves;\n}\n\t\n\tpublic getVisiblePitchCount(): number {\n\t\t return this.getVisibleOctaveCount() * this.song.edo + 1;\n\t}\n\t\n\tpublic getBaseVisibleOctave(channel: number): number {\n\t\tconst visibleOctaveCount: number = this.getVisibleOctaveCount();\n\t\treturn Math.max(0, Math.min(Config.pitchOctaves - visibleOctaveCount, Math.ceil(this.song.channels[channel].octave - visibleOctaveCount * 0.5)));\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config } from \"../synth/SynthConfig\";\nimport { isMobile, EditorConfig } from \"./EditorConfig\";\nimport { ColorConfig } from \"./ColorConfig\";\nimport \"./style\"; // Import for the side effects, there's no exports.\nimport {SongEditor} from \"./SongEditor\";\nimport {NotePin, Note, Pattern, Instrument, Channel, Song, Synth} from \"../synth/synth\";\nimport {SongDocument} from \"./SongDocument\";\nimport {ExportPrompt} from \"./ExportPrompt\";\nimport {ChangePreset} from \"./changes\";\n\nconst doc: SongDocument = new SongDocument();\nconst editor: SongEditor = new SongEditor(doc);\nconst beepboxEditorContainer: HTMLElement = document.getElementById(\"beepboxEditorContainer\")!;\nbeepboxEditorContainer.appendChild(editor.mainLayer);\neditor.whenUpdated();\n\n// Fade-in transitions\neditor.mainLayer.className += \" load\";\neditor.mainLayer.getElementsByClassName(\"pattern-area\")[0].className += \" load\";\neditor.mainLayer.getElementsByClassName(\"settings-area\")[0].className += \" load\";\neditor.mainLayer.getElementsByClassName(\"editor-song-settings\")[0].className += \" load\";\neditor.mainLayer.getElementsByClassName(\"instrument-settings-area\")[0].className += \" load\";\neditor.mainLayer.getElementsByClassName(\"trackAndMuteContainer\")[0].className += \" load\";\neditor.mainLayer.getElementsByClassName(\"barScrollBar\")[0].className += \" load\";\n\n// Give select2 class to these\n$('#pitchPresetSelect').select2({ dropdownAutoWidth: true });\n$('#drumPresetSelect').select2({ dropdownAutoWidth: true });\n\n// Onclick event to expand/collapse optgroups\n$(\"body\").on('click', '.select2-container--open .select2-results__group', function () {\n\t$(this).siblings().toggle();\n});\n\n// Open event to collapse all optgroups by default\n$(\"#pitchPresetSelect\").on('select2:open', function () {\n\t$('.select2-dropdown--below').css('opacity', 0);\n\t$('.select2-dropdown').css('opacity', 1);\n\t$('#pitchPresetSelect')\n\tsetTimeout(() => {\n\t\tlet groups = $('.select2-container--open .select2-results__group');\n\t\tlet options = $('.select2-container--open .select2-results__option');\n\n\t\t$.each(groups, (index, v) => {\n\t\t\t$(v).siblings().hide();\n\t\t\t$(v)[0].setAttribute(\"style\", \"color: \" + ColorConfig.getChannelColor(doc.song, doc.channel).primaryNote + \";\");\n\t\t})\n\t\t$.each(options, (index, v) => {\n\t\t\t$(v)[0].setAttribute(\"style\", \"color: \" + ColorConfig.getChannelColor(doc.song, doc.channel).primaryNote + \";\");\n\t\t})\n\n\t\t$('.select2-dropdown--below').css('opacity', 1);\n\t}, 0);\n});\n\n// Open event to collapse all optgroups by default\n$(\"#drumPresetSelect\").on('select2:open', function () {\n\t$('.select2-dropdown--below').css('opacity', 0);\n\t$('.select2-dropdown').css('opacity', 1);\n\t$('#drumPresetSelect')\n\tsetTimeout(() => {\n\t\tlet groups = $('.select2-container--open .select2-results__group');\n\t\tlet options = $('.select2-container--open .select2-results__option');\n\n\t\t$.each(groups, (index, v) => {\n\t\t\t$(v).siblings().hide();\n\t\t\t$(v)[0].setAttribute(\"style\", \"color: \" + ColorConfig.getChannelColor(doc.song, doc.channel).primaryNote + \";\");\n\t\t})\n\t\t$.each(options, (index, v) => {\n\t\t\t$(v)[0].setAttribute(\"style\", \"color: \" + ColorConfig.getChannelColor(doc.song, doc.channel).primaryNote + \";\");\n\t\t})\n\n\t\t$('.select2-dropdown--below').css('opacity', 1);\n\t}, 0);\n});\n\n// Select2 events\n// The latter is to ensure select2 doesn't keep focus after the select2 is closed without making a selection.\n$('#pitchPresetSelect').on(\"change\", editor._whenSetPitchedPreset);\n$('#pitchPresetSelect').on(\"select2:close\", editor._refocus);\n\n$('#drumPresetSelect').on(\"change\", editor._whenSetDrumPreset);\n$('#drumPresetSelect').on(\"select2:close\", editor._refocus);\n\n\neditor.mainLayer.focus();\n\n// don't autoplay on mobile devices, wait for input.\nif (!isMobile && doc.prefs.autoPlay) {\n\tfunction autoplay(): void {\n\t\tif (!document.hidden) {\n\t\t\tdoc.synth.play();\n\t\t\teditor.updatePlayButton();\n\t\t\twindow.removeEventListener(\"visibilitychange\", autoplay);\n\t\t}\n\t}\n\tif (document.hidden) {\n\t\t// Wait until the tab is visible to autoplay:\n\t\twindow.addEventListener(\"visibilitychange\", autoplay);\n\t} else {\n\t\t// Can't call this immediately, as main.ts needs to finish executing for the beepbox namespace to finish being declared.\n\t\twindow.setTimeout(autoplay);\n\t}\n}\n\n// BeepBox uses browser history state as its own undo history. Browsers typically\n// remember scroll position for each history state, but BeepBox users would prefer not \n// auto scrolling when undoing. Sadly this tweak doesn't work on Edge or IE.\nif (\"scrollRestoration\" in history) history.scrollRestoration = \"manual\";\n\neditor.updatePlayButton();\n\nif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.register(\"/service_worker.js\", {updateViaCache: \"all\", scope: \"/\"}).catch(() => {});\n}\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\n\texport {Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, NotePin, Note, Pattern, Instrument, Channel, Song, Synth, ColorConfig, EditorConfig, SongDocument, SongEditor, ExportPrompt, ChangePreset};\n"],"mappings":"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AAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEjC,eAAkB,UAAWiC,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,G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","ignoreList":[]}